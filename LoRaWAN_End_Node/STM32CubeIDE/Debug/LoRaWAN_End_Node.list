
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011898  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea8  080119d0  080119d0  000129d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012878  08012878  000145d8  2**0
                  CONTENTS
  4 .ARM          00000008  08012878  08012878  00013878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012880  08012880  000145d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012880  08012880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08012888  08012888  00013888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000120  20000000  08012890  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b78  20008000  20008000  00015000  2**2
                  ALLOC
 11 .bss          00001730  20000120  20000120  00015120  2**2
                  ALLOC
 12 RAM1_region   00000000  20001850  20001850  000145d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  000145d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001850  20001850  00015120  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  000145d8  2**0
                  CONTENTS, READONLY
 16 .debug_info   00053791  00000000  00000000  00014602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000b685  00000000  00000000  00067d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00015dc6  00000000  00000000  00073418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002c48  00000000  00000000  000891e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002373  00000000  00000000  0008be28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002b463  00000000  00000000  0008e19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004bc76  00000000  00000000  000b95fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000df3ff  00000000  00000000  00105274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  001e4673  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00007a20  00000000  00000000  001e46b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000068  00000000  00000000  001ec0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000120 	.word	0x20000120
 8000154:	00000000 	.word	0x00000000
 8000158:	080119b8 	.word	0x080119b8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000124 	.word	0x20000124
 8000174:	080119b8 	.word	0x080119b8

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	@ 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	@ 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80008ce:	2afd      	cmp	r2, #253	@ 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	@ 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	@ 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	@ 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000e98:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000e9a:	4813      	ldr	r0, [pc, #76]	@ (8000ee8 <MX_ADC_Init+0x50>)
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <MX_ADC_Init+0x54>)
 8000e9e:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ea0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000ea4:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eaa:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eac:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eae:	2204      	movs	r2, #4
 8000eb0:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = ENABLE;
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	7602      	strb	r2, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 8000eb6:	7642      	strb	r2, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000eb8:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000eba:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ebc:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec0:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec2:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000ec4:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ec8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ecc:	6302      	str	r2, [r0, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000ece:	2207      	movs	r2, #7
 8000ed0:	6342      	str	r2, [r0, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000ed2:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000ed4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ed8:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000eda:	f002 f8bd 	bl	8003058 <HAL_ADC_Init>
 8000ede:	b900      	cbnz	r0, 8000ee2 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ee0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ee2:	f000 fc1f 	bl	8001724 <Error_Handler>
}
 8000ee6:	e7fb      	b.n	8000ee0 <MX_ADC_Init+0x48>
 8000ee8:	2000019c 	.word	0x2000019c
 8000eec:	40012400 	.word	0x40012400

08000ef0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	9303      	str	r3, [sp, #12]
 8000ef8:	9304      	str	r3, [sp, #16]
 8000efa:	9305      	str	r3, [sp, #20]
 8000efc:	9306      	str	r3, [sp, #24]
 8000efe:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC)
 8000f00:	6802      	ldr	r2, [r0, #0]
 8000f02:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <HAL_ADC_MspInit+0xb0>)
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d001      	beq.n	8000f0c <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f08:	b008      	add	sp, #32
 8000f0a:	bd10      	pop	{r4, pc}
 8000f0c:	4604      	mov	r4, r0
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f18:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f1a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f1c:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000f20:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000f22:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f26:	f042 0202 	orr.w	r2, r2, #2
 8000f2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f34:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = H2O_Pin;
 8000f36:	2310      	movs	r3, #16
 8000f38:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(H2O_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	a903      	add	r1, sp, #12
 8000f40:	4818      	ldr	r0, [pc, #96]	@ (8000fa4 <HAL_ADC_MspInit+0xb4>)
 8000f42:	f003 fa7b 	bl	800443c <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel3;
 8000f46:	4818      	ldr	r0, [pc, #96]	@ (8000fa8 <HAL_ADC_MspInit+0xb8>)
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <HAL_ADC_MspInit+0xbc>)
 8000f4a:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Request = DMA_REQUEST_ADC;
 8000f4c:	2305      	movs	r3, #5
 8000f4e:	6043      	str	r3, [r0, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f50:	2300      	movs	r3, #0
 8000f52:	6083      	str	r3, [r0, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f54:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000f56:	2280      	movs	r2, #128	@ 0x80
 8000f58:	6102      	str	r2, [r0, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f5e:	6142      	str	r2, [r0, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f64:	6182      	str	r2, [r0, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8000f66:	61c3      	str	r3, [r0, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000f68:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000f6a:	f002 fef9 	bl	8003d60 <HAL_DMA_Init>
 8000f6e:	b980      	cbnz	r0, 8000f92 <HAL_ADC_MspInit+0xa2>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000f70:	2110      	movs	r1, #16
 8000f72:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <HAL_ADC_MspInit+0xb8>)
 8000f74:	f003 f8f6 	bl	8004164 <HAL_DMA_ConfigChannelAttributes>
 8000f78:	b970      	cbnz	r0, 8000f98 <HAL_ADC_MspInit+0xa8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <HAL_ADC_MspInit+0xb8>)
 8000f7c:	6523      	str	r3, [r4, #80]	@ 0x50
 8000f7e:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	4611      	mov	r1, r2
 8000f84:	2012      	movs	r0, #18
 8000f86:	f002 fe63 	bl	8003c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f8a:	2012      	movs	r0, #18
 8000f8c:	f002 fe70 	bl	8003c70 <HAL_NVIC_EnableIRQ>
}
 8000f90:	e7ba      	b.n	8000f08 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000f92:	f000 fbc7 	bl	8001724 <Error_Handler>
 8000f96:	e7eb      	b.n	8000f70 <HAL_ADC_MspInit+0x80>
      Error_Handler();
 8000f98:	f000 fbc4 	bl	8001724 <Error_Handler>
 8000f9c:	e7ed      	b.n	8000f7a <HAL_ADC_MspInit+0x8a>
 8000f9e:	bf00      	nop
 8000fa0:	40012400 	.word	0x40012400
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	2000013c 	.word	0x2000013c
 8000fac:	40020030 	.word	0x40020030

08000fb0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000fb0:	6802      	ldr	r2, [r0, #0]
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <HAL_ADC_MspDeInit+0x30>)
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d000      	beq.n	8000fba <HAL_ADC_MspDeInit+0xa>
 8000fb8:	4770      	bx	lr
{
 8000fba:	b510      	push	{r4, lr}
 8000fbc:	4604      	mov	r4, r0
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000fbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fc2:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8000fc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000fc8:	6613      	str	r3, [r2, #96]	@ 0x60
    __HAL_RCC_ADC_CLK_DISABLE();

    /**ADC GPIO Configuration
    PB4     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(H2O_GPIO_Port, H2O_Pin);
 8000fca:	2110      	movs	r1, #16
 8000fcc:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <HAL_ADC_MspDeInit+0x34>)
 8000fce:	f003 fb07 	bl	80045e0 <HAL_GPIO_DeInit>

    /* ADC DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8000fd2:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8000fd4:	f002 ff36 	bl	8003e44 <HAL_DMA_DeInit>

    /* ADC interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 8000fd8:	2012      	movs	r0, #18
 8000fda:	f002 fe4d 	bl	8003c78 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000fde:	bd10      	pop	{r4, pc}
 8000fe0:	40012400 	.word	0x40012400
 8000fe4:	48000400 	.word	0x48000400

08000fe8 <ADC_ReadChannels>:
  /* USER CODE END SYS_GetH2OLevel_2 */
}
/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000fe8:	b530      	push	{r4, r5, lr}
 8000fea:	b085      	sub	sp, #20
 8000fec:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fee:	2300      	movs	r3, #0
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000ff6:	f7ff ff4f 	bl	8000e98 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000ffa:	4816      	ldr	r0, [pc, #88]	@ (8001054 <ADC_ReadChannels+0x6c>)
 8000ffc:	f002 fd1e 	bl	8003a3c <HAL_ADCEx_Calibration_Start>
 8001000:	b9f8      	cbnz	r0, 8001042 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001002:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001004:	2300      	movs	r3, #0
 8001006:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001008:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800100a:	a901      	add	r1, sp, #4
 800100c:	4811      	ldr	r0, [pc, #68]	@ (8001054 <ADC_ReadChannels+0x6c>)
 800100e:	f002 fa57 	bl	80034c0 <HAL_ADC_ConfigChannel>
 8001012:	b9c8      	cbnz	r0, 8001048 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001014:	480f      	ldr	r0, [pc, #60]	@ (8001054 <ADC_ReadChannels+0x6c>)
 8001016:	f002 fc15 	bl	8003844 <HAL_ADC_Start>
 800101a:	b9c0      	cbnz	r0, 800104e <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800101c:	4c0d      	ldr	r4, [pc, #52]	@ (8001054 <ADC_ReadChannels+0x6c>)
 800101e:	f04f 31ff 	mov.w	r1, #4294967295
 8001022:	4620      	mov	r0, r4
 8001024:	f002 f930 	bl	8003288 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001028:	4620      	mov	r0, r4
 800102a:	f002 fce7 	bl	80039fc <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800102e:	4620      	mov	r0, r4
 8001030:	f002 f989 	bl	8003346 <HAL_ADC_GetValue>
 8001034:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8001036:	4620      	mov	r0, r4
 8001038:	f002 fc80 	bl	800393c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800103c:	4628      	mov	r0, r5
 800103e:	b005      	add	sp, #20
 8001040:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001042:	f000 fb6f 	bl	8001724 <Error_Handler>
 8001046:	e7dc      	b.n	8001002 <ADC_ReadChannels+0x1a>
    Error_Handler();
 8001048:	f000 fb6c 	bl	8001724 <Error_Handler>
 800104c:	e7e2      	b.n	8001014 <ADC_ReadChannels+0x2c>
    Error_Handler();
 800104e:	f000 fb69 	bl	8001724 <Error_Handler>
 8001052:	e7e3      	b.n	800101c <ADC_ReadChannels+0x34>
 8001054:	2000019c 	.word	0x2000019c

08001058 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8001058:	4b01      	ldr	r3, [pc, #4]	@ (8001060 <SYS_InitMeasurement+0x8>)
 800105a:	4a02      	ldr	r2, [pc, #8]	@ (8001064 <SYS_InitMeasurement+0xc>)
 800105c:	601a      	str	r2, [r3, #0]
}
 800105e:	4770      	bx	lr
 8001060:	2000019c 	.word	0x2000019c
 8001064:	40012400 	.word	0x40012400

08001068 <SYS_GetBatteryLevel>:
{
 8001068:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800106a:	480d      	ldr	r0, [pc, #52]	@ (80010a0 <SYS_GetBatteryLevel+0x38>)
 800106c:	f7ff ffbc 	bl	8000fe8 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8001070:	b1a0      	cbz	r0, 800109c <SYS_GetBatteryLevel+0x34>
 8001072:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001074:	4a0b      	ldr	r2, [pc, #44]	@ (80010a4 <SYS_GetBatteryLevel+0x3c>)
 8001076:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	@ 0xaa
 800107a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800107e:	4290      	cmp	r0, r2
 8001080:	d007      	beq.n	8001092 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001082:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001086:	fb02 f000 	mul.w	r0, r2, r0
 800108a:	fbb0 f0f3 	udiv	r0, r0, r3
 800108e:	b280      	uxth	r0, r0
 8001090:	e005      	b.n	800109e <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001092:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <SYS_GetBatteryLevel+0x40>)
 8001094:	fbb0 f0f3 	udiv	r0, r0, r3
 8001098:	b280      	uxth	r0, r0
 800109a:	e000      	b.n	800109e <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 800109c:	2000      	movs	r0, #0
}
 800109e:	bd08      	pop	{r3, pc}
 80010a0:	b4002000 	.word	0xb4002000
 80010a4:	1fff7500 	.word	0x1fff7500
 80010a8:	004c08d8 	.word	0x004c08d8

080010ac <SYS_GetTemperatureLevel>:
{
 80010ac:	b510      	push	{r4, lr}
 80010ae:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80010b6:	f7ff ffd7 	bl	8001068 <SYS_GetBatteryLevel>
 80010ba:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80010bc:	4821      	ldr	r0, [pc, #132]	@ (8001144 <SYS_GetTemperatureLevel+0x98>)
 80010be:	f7ff ff93 	bl	8000fe8 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80010c2:	4b21      	ldr	r3, [pc, #132]	@ (8001148 <SYS_GetTemperatureLevel+0x9c>)
 80010c4:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	@ 0xc8
 80010c8:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	@ 0xa8
 80010cc:	428a      	cmp	r2, r1
 80010ce:	d01d      	beq.n	800110c <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80010d0:	fb00 f304 	mul.w	r3, r0, r4
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	481d      	ldr	r0, [pc, #116]	@ (800114c <SYS_GetTemperatureLevel+0xa0>)
 80010d8:	fba0 0303 	umull	r0, r3, r0, r3
 80010dc:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 80010e0:	2064      	movs	r0, #100	@ 0x64
 80010e2:	fb00 f303 	mul.w	r3, r0, r3
 80010e6:	1a52      	subs	r2, r2, r1
 80010e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80010ec:	331e      	adds	r3, #30
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 80010f4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8001102:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8001106:	b200      	sxth	r0, r0
 8001108:	b002      	add	sp, #8
 800110a:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 800110c:	fb04 f000 	mul.w	r0, r4, r0
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <SYS_GetTemperatureLevel+0xa4>)
 8001112:	fba3 2300 	umull	r2, r3, r3, r0
 8001116:	1ac4      	subs	r4, r0, r3
 8001118:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 800111c:	0adb      	lsrs	r3, r3, #11
 800111e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001122:	fb02 f303 	mul.w	r3, r2, r3
 8001126:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 800112a:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 800112e:	4a09      	ldr	r2, [pc, #36]	@ (8001154 <SYS_GetTemperatureLevel+0xa8>)
 8001130:	fb82 1203 	smull	r1, r2, r2, r3
 8001134:	17db      	asrs	r3, r3, #31
 8001136:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 800113a:	331e      	adds	r3, #30
 800113c:	b21b      	sxth	r3, r3
 800113e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001142:	e7d7      	b.n	80010f4 <SYS_GetTemperatureLevel+0x48>
 8001144:	b0001000 	.word	0xb0001000
 8001148:	1fff7500 	.word	0x1fff7500
 800114c:	09ee009f 	.word	0x09ee009f
 8001150:	00100101 	.word	0x00100101
 8001154:	68db8bad 	.word	0x68db8bad

08001158 <SYS_GetH2OLevel>:
{
 8001158:	b508      	push	{r3, lr}
    measuredLevel = ADC_ReadChannels(ADC_CHANNEL_3);
 800115a:	480d      	ldr	r0, [pc, #52]	@ (8001190 <SYS_GetH2OLevel+0x38>)
 800115c:	f7ff ff44 	bl	8000fe8 <ADC_ReadChannels>
    if (measuredLevel == 0)
 8001160:	b1a0      	cbz	r0, 800118c <SYS_GetH2OLevel+0x34>
 8001162:	4603      	mov	r3, r0
      if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001164:	4a0b      	ldr	r2, [pc, #44]	@ (8001194 <SYS_GetH2OLevel+0x3c>)
 8001166:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	@ 0xaa
 800116a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800116e:	4290      	cmp	r0, r2
 8001170:	d007      	beq.n	8001182 <SYS_GetH2OLevel+0x2a>
    	  H2OLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001172:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001176:	fb02 f000 	mul.w	r0, r2, r0
 800117a:	fbb0 f0f3 	udiv	r0, r0, r3
 800117e:	b280      	uxth	r0, r0
 8001180:	e005      	b.n	800118e <SYS_GetH2OLevel+0x36>
    	  H2OLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001182:	4805      	ldr	r0, [pc, #20]	@ (8001198 <SYS_GetH2OLevel+0x40>)
 8001184:	fbb0 f0f3 	udiv	r0, r0, r3
 8001188:	b280      	uxth	r0, r0
 800118a:	e000      	b.n	800118e <SYS_GetH2OLevel+0x36>
    	H2OLevelmV = 0;
 800118c:	2000      	movs	r0, #0
}
 800118e:	bd08      	pop	{r3, pc}
 8001190:	0c000008 	.word	0x0c000008
 8001194:	1fff7500 	.word	0x1fff7500
 8001198:	004c08d8 	.word	0x004c08d8

0800119c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800119c:	b500      	push	{lr}
 800119e:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80011a6:	f042 0204 	orr.w	r2, r2, #4
 80011aa:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80011ae:	f002 0204 	and.w	r2, r2, #4
 80011b2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80011b4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80011b8:	f042 0201 	orr.w	r2, r2, #1
 80011bc:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80011c6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	4611      	mov	r1, r2
 80011cc:	200b      	movs	r0, #11
 80011ce:	f002 fd3f 	bl	8003c50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011d2:	200b      	movs	r0, #11
 80011d4:	f002 fd4c 	bl	8003c70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	4611      	mov	r1, r2
 80011dc:	200c      	movs	r0, #12
 80011de:	f002 fd37 	bl	8003c50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011e2:	200c      	movs	r0, #12
 80011e4:	f002 fd44 	bl	8003c70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	4611      	mov	r1, r2
 80011ec:	200d      	movs	r0, #13
 80011ee:	f002 fd2f 	bl	8003c50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011f2:	200d      	movs	r0, #13
 80011f4:	f002 fd3c 	bl	8003c70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	4611      	mov	r1, r2
 80011fc:	200e      	movs	r0, #14
 80011fe:	f002 fd27 	bl	8003c50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001202:	200e      	movs	r0, #14
 8001204:	f002 fd34 	bl	8003c70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	4611      	mov	r1, r2
 800120c:	2011      	movs	r0, #17
 800120e:	f002 fd1f 	bl	8003c50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001212:	2011      	movs	r0, #17
 8001214:	f002 fd2c 	bl	8003c70 <HAL_NVIC_EnableIRQ>

}
 8001218:	b003      	add	sp, #12
 800121a:	f85d fb04 	ldr.w	pc, [sp], #4

0800121e <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 800121e:	2300      	movs	r3, #0
 8001220:	e001      	b.n	8001226 <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001222:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 8001224:	3308      	adds	r3, #8
 8001226:	428b      	cmp	r3, r1
 8001228:	d20a      	bcs.n	8001240 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 800122a:	6842      	ldr	r2, [r0, #4]
 800122c:	f8d0 c000 	ldr.w	ip, [r0]
 8001230:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001234:	bf08      	it	eq
 8001236:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 800123a:	d0f2      	beq.n	8001222 <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 800123c:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 800123e:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001240:	2000      	movs	r0, #0
 8001242:	4770      	bx	lr

08001244 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 8001244:	b130      	cbz	r0, 8001254 <FLASH_IF_INT_Read+0x10>
{
 8001246:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 8001248:	b139      	cbz	r1, 800125a <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800124a:	b292      	uxth	r2, r2
 800124c:	f00f fe6a 	bl	8010f24 <UTIL_MEM_cpy_8>
  return ret_status;
 8001250:	2000      	movs	r0, #0
}
 8001252:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 8001254:	f06f 0005 	mvn.w	r0, #5
}
 8001258:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 800125a:	f06f 0005 	mvn.w	r0, #5
 800125e:	e7f8      	b.n	8001252 <FLASH_IF_INT_Read+0xe>

08001260 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001260:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001262:	f002 ffbd 	bl	80041e0 <HAL_FLASH_Unlock>
 8001266:	b978      	cbnz	r0, 8001288 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001268:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <FLASH_IF_INT_Clear_Error+0x30>)
 800126a:	699a      	ldr	r2, [r3, #24]
 800126c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8001270:	619a      	str	r2, [r3, #24]
 8001272:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8001276:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001278:	f002 ffca 	bl	8004210 <HAL_FLASH_Lock>
 800127c:	b908      	cbnz	r0, 8001282 <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 800127e:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 8001280:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001282:	f06f 0004 	mvn.w	r0, #4
 8001286:	e7fb      	b.n	8001280 <FLASH_IF_INT_Clear_Error+0x20>
 8001288:	f06f 0004 	mvn.w	r0, #4
 800128c:	e7f8      	b.n	8001280 <FLASH_IF_INT_Clear_Error+0x20>
 800128e:	bf00      	nop
 8001290:	58004000 	.word	0x58004000

08001294 <FLASH_IF_INT_Erase>:
{
 8001294:	b570      	push	{r4, r5, r6, lr}
 8001296:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 800129c:	2800      	cmp	r0, #0
 800129e:	d039      	beq.n	8001314 <FLASH_IF_INT_Erase+0x80>
 80012a0:	460e      	mov	r6, r1
 80012a2:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 80012a4:	f7ff ffdc 	bl	8001260 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 80012a8:	4605      	mov	r5, r0
 80012aa:	b110      	cbz	r0, 80012b2 <FLASH_IF_INT_Erase+0x1e>
}
 80012ac:	4628      	mov	r0, r5
 80012ae:	b004      	add	sp, #16
 80012b0:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 80012b2:	f002 ff95 	bl	80041e0 <HAL_FLASH_Unlock>
 80012b6:	bb80      	cbnz	r0, 800131a <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80012b8:	2302      	movs	r3, #2
 80012ba:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 80012bc:	f104 4378 	add.w	r3, r4, #4160749568	@ 0xf8000000
 80012c0:	4817      	ldr	r0, [pc, #92]	@ (8001320 <FLASH_IF_INT_Erase+0x8c>)
 80012c2:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	@ 0x5e0
 80012c6:	4a17      	ldr	r2, [pc, #92]	@ (8001324 <FLASH_IF_INT_Erase+0x90>)
 80012c8:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 80012cc:	fbb3 fcf1 	udiv	ip, r3, r1
 80012d0:	fb01 331c 	mls	r3, r1, ip, r3
 80012d4:	0adb      	lsrs	r3, r3, #11
 80012d6:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80012d8:	19a1      	adds	r1, r4, r6
 80012da:	f101 4178 	add.w	r1, r1, #4160749568	@ 0xf8000000
 80012de:	3901      	subs	r1, #1
 80012e0:	f8d0 05e0 	ldr.w	r0, [r0, #1504]	@ 0x5e0
 80012e4:	ea02 2280 	and.w	r2, r2, r0, lsl #10
 80012e8:	fbb1 f0f2 	udiv	r0, r1, r2
 80012ec:	fb02 1110 	mls	r1, r2, r0, r1
 80012f0:	ebc3 23d1 	rsb	r3, r3, r1, lsr #11
 80012f4:	3301      	adds	r3, #1
 80012f6:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80012f8:	a903      	add	r1, sp, #12
 80012fa:	4668      	mov	r0, sp
 80012fc:	f003 f85e 	bl	80043bc <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 8001300:	b118      	cbz	r0, 800130a <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001302:	2802      	cmp	r0, #2
 8001304:	d004      	beq.n	8001310 <FLASH_IF_INT_Erase+0x7c>
 8001306:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 800130a:	f002 ff81 	bl	8004210 <HAL_FLASH_Lock>
 800130e:	e7cd      	b.n	80012ac <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001310:	2501      	movs	r5, #1
 8001312:	e7fa      	b.n	800130a <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 8001314:	f06f 0505 	mvn.w	r5, #5
 8001318:	e7c8      	b.n	80012ac <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 800131a:	f06f 0504 	mvn.w	r5, #4
 800131e:	e7c5      	b.n	80012ac <FLASH_IF_INT_Erase+0x18>
 8001320:	1fff7000 	.word	0x1fff7000
 8001324:	03fffc00 	.word	0x03fffc00

08001328 <FLASH_IF_INT_Write>:
{
 8001328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800132c:	b089      	sub	sp, #36	@ 0x24
 800132e:	9003      	str	r0, [sp, #12]
 8001330:	9204      	str	r2, [sp, #16]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001332:	2800      	cmp	r0, #0
 8001334:	f000 80b4 	beq.w	80014a0 <FLASH_IF_INT_Write+0x178>
 8001338:	4683      	mov	fp, r0
 800133a:	460e      	mov	r6, r1
 800133c:	2900      	cmp	r1, #0
 800133e:	f000 80b3 	beq.w	80014a8 <FLASH_IF_INT_Write+0x180>
 8001342:	f012 0f07 	tst.w	r2, #7
 8001346:	f040 80b3 	bne.w	80014b0 <FLASH_IF_INT_Write+0x188>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800134a:	f010 0307 	ands.w	r3, r0, #7
 800134e:	9305      	str	r3, [sp, #20]
 8001350:	f040 80b2 	bne.w	80014b8 <FLASH_IF_INT_Write+0x190>
  ret_status = FLASH_IF_INT_Clear_Error();
 8001354:	f7ff ff84 	bl	8001260 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001358:	9001      	str	r0, [sp, #4]
 800135a:	b118      	cbz	r0, 8001364 <FLASH_IF_INT_Write+0x3c>
}
 800135c:	9801      	ldr	r0, [sp, #4]
 800135e:	b009      	add	sp, #36	@ 0x24
 8001360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001364:	f002 ff3c 	bl	80041e0 <HAL_FLASH_Unlock>
 8001368:	2800      	cmp	r0, #0
 800136a:	f040 80a9 	bne.w	80014c0 <FLASH_IF_INT_Write+0x198>
      start_page_index = PAGE_INDEX(uDest);
 800136e:	9c03      	ldr	r4, [sp, #12]
 8001370:	f104 4278 	add.w	r2, r4, #4160749568	@ 0xf8000000
 8001374:	4b54      	ldr	r3, [pc, #336]	@ (80014c8 <FLASH_IF_INT_Write+0x1a0>)
 8001376:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	@ 0x5e0
 800137a:	4954      	ldr	r1, [pc, #336]	@ (80014cc <FLASH_IF_INT_Write+0x1a4>)
 800137c:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 8001380:	fbb2 f3f1 	udiv	r3, r2, r1
 8001384:	fb01 2213 	mls	r2, r1, r3, r2
 8001388:	0ad3      	lsrs	r3, r2, #11
 800138a:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800138c:	9b04      	ldr	r3, [sp, #16]
 800138e:	18e3      	adds	r3, r4, r3
 8001390:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001394:	3b01      	subs	r3, #1
 8001396:	fbb3 f0f1 	udiv	r0, r3, r1
 800139a:	fb01 3310 	mls	r3, r1, r0, r3
 800139e:	0adb      	lsrs	r3, r3, #11
 80013a0:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 80013a4:	3301      	adds	r3, #1
      if (number_pages > 1)
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d907      	bls.n	80013ba <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80013aa:	f3c4 090a 	ubfx	r9, r4, #0, #11
 80013ae:	f5c9 6900 	rsb	r9, r9, #2048	@ 0x800
            ret_status = FLASH_IF_WRITE_ERROR;
 80013b2:	f8dd a018 	ldr.w	sl, [sp, #24]
 80013b6:	9307      	str	r3, [sp, #28]
 80013b8:	e031      	b.n	800141e <FLASH_IF_INT_Write+0xf6>
  uint32_t length = uLength;
 80013ba:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80013be:	e7f8      	b.n	80013b2 <FLASH_IF_INT_Write+0x8a>
          current_length = length;
 80013c0:	46c8      	mov	r8, r9
          current_source = uSource;
 80013c2:	4637      	mov	r7, r6
          current_dest = uDest;
 80013c4:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80013c6:	9d05      	ldr	r5, [sp, #20]
 80013c8:	f8cd b008 	str.w	fp, [sp, #8]
 80013cc:	4545      	cmp	r5, r8
 80013ce:	d215      	bcs.n	80013fc <FLASH_IF_INT_Write+0xd4>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80013d0:	eb05 0b07 	add.w	fp, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80013d4:	e9db 2300 	ldrd	r2, r3, [fp]
 80013d8:	4621      	mov	r1, r4
 80013da:	2001      	movs	r0, #1
 80013dc:	f002 ff66 	bl	80042ac <HAL_FLASH_Program>
 80013e0:	2800      	cmp	r0, #0
 80013e2:	d147      	bne.n	8001474 <FLASH_IF_INT_Write+0x14c>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80013e4:	6820      	ldr	r0, [r4, #0]
 80013e6:	6862      	ldr	r2, [r4, #4]
 80013e8:	59e9      	ldr	r1, [r5, r7]
 80013ea:	f8db 3004 	ldr.w	r3, [fp, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	bf08      	it	eq
 80013f2:	4288      	cmpeq	r0, r1
 80013f4:	d144      	bne.n	8001480 <FLASH_IF_INT_Write+0x158>
            current_dest = current_dest + 8U;
 80013f6:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80013f8:	3508      	adds	r5, #8
 80013fa:	e7e7      	b.n	80013cc <FLASH_IF_INT_Write+0xa4>
 80013fc:	f8dd b008 	ldr.w	fp, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 8001400:	9b01      	ldr	r3, [sp, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d145      	bne.n	8001492 <FLASH_IF_INT_Write+0x16a>
        uDest += length;
 8001406:	44cb      	add	fp, r9
        uSource += length;
 8001408:	444e      	add	r6, r9
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 800140a:	9b04      	ldr	r3, [sp, #16]
 800140c:	eba3 0909 	sub.w	r9, r3, r9
 8001410:	f5b9 6f00 	cmp.w	r9, #2048	@ 0x800
 8001414:	bf28      	it	cs
 8001416:	f44f 6900 	movcs.w	r9, #2048	@ 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800141a:	f10a 0a01 	add.w	sl, sl, #1
 800141e:	9b06      	ldr	r3, [sp, #24]
 8001420:	9a07      	ldr	r2, [sp, #28]
 8001422:	4413      	add	r3, r2
 8001424:	4553      	cmp	r3, sl
 8001426:	d934      	bls.n	8001492 <FLASH_IF_INT_Write+0x16a>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001428:	f50a 3480 	add.w	r4, sl, #65536	@ 0x10000
 800142c:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800142e:	4649      	mov	r1, r9
 8001430:	9803      	ldr	r0, [sp, #12]
 8001432:	f7ff fef4 	bl	800121e <FLASH_IF_INT_IsEmpty>
 8001436:	2800      	cmp	r0, #0
 8001438:	d0c2      	beq.n	80013c0 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 800143a:	4b25      	ldr	r3, [pc, #148]	@ (80014d0 <FLASH_IF_INT_Write+0x1a8>)
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	b328      	cbz	r0, 800148c <FLASH_IF_INT_Write+0x164>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001440:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001444:	4621      	mov	r1, r4
 8001446:	f7ff fefd 	bl	8001244 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 800144a:	4b21      	ldr	r3, [pc, #132]	@ (80014d0 <FLASH_IF_INT_Write+0x1a8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f3cb 000a 	ubfx	r0, fp, #0, #11
 8001452:	fa1f f289 	uxth.w	r2, r9
 8001456:	4631      	mov	r1, r6
 8001458:	4418      	add	r0, r3
 800145a:	f00f fd63 	bl	8010f24 <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800145e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001462:	4620      	mov	r0, r4
 8001464:	f7ff ff16 	bl	8001294 <FLASH_IF_INT_Erase>
 8001468:	b9b0      	cbnz	r0, 8001498 <FLASH_IF_INT_Write+0x170>
          current_source = (uint32_t)pAllocatedBuffer;
 800146a:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <FLASH_IF_INT_Write+0x1a8>)
 800146c:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 800146e:	f44f 6800 	mov.w	r8, #2048	@ 0x800
 8001472:	e7a8      	b.n	80013c6 <FLASH_IF_INT_Write+0x9e>
            ret_status = FLASH_IF_WRITE_ERROR;
 8001474:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001478:	f06f 0303 	mvn.w	r3, #3
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	e7bf      	b.n	8001400 <FLASH_IF_INT_Write+0xd8>
              ret_status = FLASH_IF_WRITE_ERROR;
 8001480:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001484:	f06f 0303 	mvn.w	r3, #3
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	e7b9      	b.n	8001400 <FLASH_IF_INT_Write+0xd8>
            ret_status = FLASH_IF_PARAM_ERROR;
 800148c:	f06f 0305 	mvn.w	r3, #5
 8001490:	9301      	str	r3, [sp, #4]
      HAL_FLASH_Lock();
 8001492:	f002 febd 	bl	8004210 <HAL_FLASH_Lock>
 8001496:	e761      	b.n	800135c <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 8001498:	f06f 0301 	mvn.w	r3, #1
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	e7f8      	b.n	8001492 <FLASH_IF_INT_Write+0x16a>
    return FLASH_IF_PARAM_ERROR;
 80014a0:	f06f 0305 	mvn.w	r3, #5
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	e759      	b.n	800135c <FLASH_IF_INT_Write+0x34>
 80014a8:	f06f 0305 	mvn.w	r3, #5
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	e755      	b.n	800135c <FLASH_IF_INT_Write+0x34>
 80014b0:	f06f 0305 	mvn.w	r3, #5
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	e751      	b.n	800135c <FLASH_IF_INT_Write+0x34>
 80014b8:	f06f 0305 	mvn.w	r3, #5
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	e74d      	b.n	800135c <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 80014c0:	f06f 0304 	mvn.w	r3, #4
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	e749      	b.n	800135c <FLASH_IF_INT_Write+0x34>
 80014c8:	1fff7000 	.word	0x1fff7000
 80014cc:	03fffc00 	.word	0x03fffc00
 80014d0:	20000200 	.word	0x20000200

080014d4 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 80014d4:	4b01      	ldr	r3, [pc, #4]	@ (80014dc <FLASH_IF_Init+0x8>)
 80014d6:	6018      	str	r0, [r3, #0]
}
 80014d8:	2000      	movs	r0, #0
 80014da:	4770      	bx	lr
 80014dc:	20000200 	.word	0x20000200

080014e0 <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80014e0:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 80014e4:	d30e      	bcc.n	8001504 <FLASH_IF_Write+0x24>
{
 80014e6:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80014e8:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <FLASH_IF_Write+0x30>)
 80014ea:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	@ 0x5e0
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <FLASH_IF_Write+0x34>)
 80014f0:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80014f4:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80014f8:	3b01      	subs	r3, #1
 80014fa:	4298      	cmp	r0, r3
 80014fc:	d805      	bhi.n	800150a <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80014fe:	f7ff ff13 	bl	8001328 <FLASH_IF_INT_Write>
}
 8001502:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001508:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800150a:	f04f 30ff 	mov.w	r0, #4294967295
 800150e:	e7f8      	b.n	8001502 <FLASH_IF_Write+0x22>
 8001510:	1fff7000 	.word	0x1fff7000
 8001514:	03fffc00 	.word	0x03fffc00

08001518 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001518:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 800151c:	d30e      	bcc.n	800153c <FLASH_IF_Read+0x24>
{
 800151e:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001520:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <FLASH_IF_Read+0x30>)
 8001522:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	@ 0x5e0
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <FLASH_IF_Read+0x34>)
 8001528:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 800152c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001530:	3b01      	subs	r3, #1
 8001532:	4299      	cmp	r1, r3
 8001534:	d805      	bhi.n	8001542 <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001536:	f7ff fe85 	bl	8001244 <FLASH_IF_INT_Read>
}
 800153a:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001540:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001542:	f04f 30ff 	mov.w	r0, #4294967295
 8001546:	e7f8      	b.n	800153a <FLASH_IF_Read+0x22>
 8001548:	1fff7000 	.word	0x1fff7000
 800154c:	03fffc00 	.word	0x03fffc00

08001550 <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001550:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8001554:	d30e      	bcc.n	8001574 <FLASH_IF_Erase+0x24>
{
 8001556:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001558:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <FLASH_IF_Erase+0x30>)
 800155a:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	@ 0x5e0
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <FLASH_IF_Erase+0x34>)
 8001560:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001564:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001568:	3b01      	subs	r3, #1
 800156a:	4298      	cmp	r0, r3
 800156c:	d805      	bhi.n	800157a <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 800156e:	f7ff fe91 	bl	8001294 <FLASH_IF_INT_Erase>
}
 8001572:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001578:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800157a:	f04f 30ff 	mov.w	r0, #4294967295
 800157e:	e7f8      	b.n	8001572 <FLASH_IF_Erase+0x22>
 8001580:	1fff7000 	.word	0x1fff7000
 8001584:	03fffc00 	.word	0x03fffc00

08001588 <MX_GPIO_Init>:
     PA7   ------> DEBUG_SUBGHZSPI-MOSIOUT
     PA4   ------> DEBUG_SUBGHZSPI-NSSOUT
     PA5   ------> DEBUG_SUBGHZSPI-SCKOUT
*/
void MX_GPIO_Init(void)
{
 8001588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800158c:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	2400      	movs	r4, #0
 8001590:	9405      	str	r4, [sp, #20]
 8001592:	9406      	str	r4, [sp, #24]
 8001594:	9407      	str	r4, [sp, #28]
 8001596:	9408      	str	r4, [sp, #32]
 8001598:	9409      	str	r4, [sp, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, Periphs);
 800159a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800159e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015a0:	f042 0201 	orr.w	r2, r2, #1
 80015a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015a8:	f002 0201 	and.w	r2, r2, #1
 80015ac:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80015ae:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015b2:	f042 0202 	orr.w	r2, r2, #2
 80015b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015ba:	f002 0202 	and.w	r2, r2, #2
 80015be:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80015c0:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015c4:	f042 0204 	orr.w	r2, r2, #4
 80015c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015cc:	f002 0204 	and.w	r2, r2, #4
 80015d0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80015d2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80015da:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80015e4:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LoRaProbe1_Pin|LoRaProbe2_Pin
 80015e6:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8001718 <MX_GPIO_Init+0x190>
 80015ea:	4622      	mov	r2, r4
 80015ec:	f44f 413a 	mov.w	r1, #47616	@ 0xba00
 80015f0:	4640      	mov	r0, r8
 80015f2:	f003 f873 	bl	80046dc <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Power12VEN_GPIO_Port, Power12VEN_Pin, GPIO_PIN_RESET);
 80015f6:	4f49      	ldr	r7, [pc, #292]	@ (800171c <MX_GPIO_Init+0x194>)
 80015f8:	4622      	mov	r2, r4
 80015fa:	2101      	movs	r1, #1
 80015fc:	4638      	mov	r0, r7
 80015fe:	f003 f86d 	bl	80046dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA12 PA15 PA11 PA9
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_9
 8001602:	f44f 431b 	mov.w	r3, #39680	@ 0x9b00
 8001606:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001608:	2603      	movs	r6, #3
 800160a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	a905      	add	r1, sp, #20
 8001610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001614:	f002 ff12 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001618:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 800161c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2501      	movs	r5, #1
 8001620:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001624:	f04f 0a02 	mov.w	sl, #2
 8001628:	f8cd a020 	str.w	sl, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	a905      	add	r1, sp, #20
 800162e:	4640      	mov	r0, r8
 8001630:	f002 ff04 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB5 PB8 PB2
                           PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_2
 8001634:	f244 5326 	movw	r3, #17702	@ 0x4526
 8001638:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_1|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	a905      	add	r1, sp, #20
 8001640:	4640      	mov	r0, r8
 8001642:	f002 fefb 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC2 PC3 PC5
                           PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8001646:	f242 033e 	movw	r3, #8254	@ 0x203e
 800164a:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_1|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001650:	a905      	add	r1, sp, #20
 8001652:	4638      	mov	r0, r7
 8001654:	f002 fef2 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBATOK_Pin;
 8001658:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800165c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(VBATOK_GPIO_Port, &GPIO_InitStruct);
 8001662:	a905      	add	r1, sp, #20
 8001664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001668:	f002 fee8 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 800166c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800166e:	f44f 1904 	mov.w	r9, #2162688	@ 0x210000
 8001672:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001676:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	a905      	add	r1, sp, #20
 800167a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800167e:	f002 fedd 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LoRaProbe1_Pin|LoRaProbe2_Pin;
 8001682:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001686:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168e:	a905      	add	r1, sp, #20
 8001690:	4640      	mov	r0, r8
 8001692:	f002 fed3 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Power12VEN_Pin;
 8001696:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(Power12VEN_GPIO_Port, &GPIO_InitStruct);
 800169e:	a905      	add	r1, sp, #20
 80016a0:	4638      	mov	r0, r7
 80016a2:	f002 fecb 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_4|GPIO_PIN_5;
 80016a6:	23f0      	movs	r3, #240	@ 0xf0
 80016a8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	f8cd a018 	str.w	sl, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_SUBGHZSPI;
 80016b2:	230d      	movs	r3, #13
 80016b4:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	a905      	add	r1, sp, #20
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016bc:	f002 febe 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80016c0:	2340      	movs	r3, #64	@ 0x40
 80016c2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016c4:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c8:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80016ca:	a905      	add	r1, sp, #20
 80016cc:	4638      	mov	r0, r7
 80016ce:	f002 feb5 	bl	800443c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016d2:	2308      	movs	r3, #8
 80016d4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d6:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016da:	a905      	add	r1, sp, #20
 80016dc:	4810      	ldr	r0, [pc, #64]	@ (8001720 <MX_GPIO_Init+0x198>)
 80016de:	f002 fead 	bl	800443c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80016e2:	4622      	mov	r2, r4
 80016e4:	4621      	mov	r1, r4
 80016e6:	2006      	movs	r0, #6
 80016e8:	f002 fab2 	bl	8003c50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016ec:	2006      	movs	r0, #6
 80016ee:	f002 fabf 	bl	8003c70 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80016f2:	4622      	mov	r2, r4
 80016f4:	4621      	mov	r1, r4
 80016f6:	2007      	movs	r0, #7
 80016f8:	f002 faaa 	bl	8003c50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016fc:	2007      	movs	r0, #7
 80016fe:	f002 fab7 	bl	8003c70 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001702:	4622      	mov	r2, r4
 8001704:	4621      	mov	r1, r4
 8001706:	2016      	movs	r0, #22
 8001708:	f002 faa2 	bl	8003c50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800170c:	2016      	movs	r0, #22
 800170e:	f002 faaf 	bl	8003c70 <HAL_NVIC_EnableIRQ>

}
 8001712:	b00a      	add	sp, #40	@ 0x28
 8001714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001718:	48000400 	.word	0x48000400
 800171c:	48000800 	.word	0x48000800
 8001720:	48001c00 	.word	0x48001c00

08001724 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001724:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001726:	e7fe      	b.n	8001726 <Error_Handler+0x2>

08001728 <SystemClock_Config>:
{
 8001728:	b510      	push	{r4, lr}
 800172a:	b09a      	sub	sp, #104	@ 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172c:	2248      	movs	r2, #72	@ 0x48
 800172e:	2100      	movs	r1, #0
 8001730:	a808      	add	r0, sp, #32
 8001732:	f010 f895 	bl	8011860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001736:	2400      	movs	r4, #0
 8001738:	9401      	str	r4, [sp, #4]
 800173a:	9402      	str	r4, [sp, #8]
 800173c:	9403      	str	r4, [sp, #12]
 800173e:	9404      	str	r4, [sp, #16]
 8001740:	9405      	str	r4, [sp, #20]
 8001742:	9406      	str	r4, [sp, #24]
 8001744:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001746:	f002 ffe5 	bl	8004714 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800174a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800174e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001752:	f023 0318 	bic.w	r3, r3, #24
 8001756:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800175a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800175e:	6813      	ldr	r3, [r2, #0]
 8001760:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001764:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	6813      	ldr	r3, [r2, #0]
 800176c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001774:	2324      	movs	r3, #36	@ 0x24
 8001776:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001778:	2381      	movs	r3, #129	@ 0x81
 800177a:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800177c:	2301      	movs	r3, #1
 800177e:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001780:	9411      	str	r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001782:	23b0      	movs	r3, #176	@ 0xb0
 8001784:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001786:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001788:	a808      	add	r0, sp, #32
 800178a:	f003 f95d 	bl	8004a48 <HAL_RCC_OscConfig>
 800178e:	b970      	cbnz	r0, 80017ae <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001790:	234f      	movs	r3, #79	@ 0x4f
 8001792:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001794:	2300      	movs	r3, #0
 8001796:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001798:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800179a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800179c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800179e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017a0:	2102      	movs	r1, #2
 80017a2:	a801      	add	r0, sp, #4
 80017a4:	f003 fc82 	bl	80050ac <HAL_RCC_ClockConfig>
 80017a8:	b918      	cbnz	r0, 80017b2 <SystemClock_Config+0x8a>
}
 80017aa:	b01a      	add	sp, #104	@ 0x68
 80017ac:	bd10      	pop	{r4, pc}
    Error_Handler();
 80017ae:	f7ff ffb9 	bl	8001724 <Error_Handler>
    Error_Handler();
 80017b2:	f7ff ffb7 	bl	8001724 <Error_Handler>

080017b6 <main>:
{
 80017b6:	b508      	push	{r3, lr}
  HAL_Init();
 80017b8:	f001 fc00 	bl	8002fbc <HAL_Init>
  SystemClock_Config();
 80017bc:	f7ff ffb4 	bl	8001728 <SystemClock_Config>
  MX_GPIO_Init();
 80017c0:	f7ff fee2 	bl	8001588 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80017c4:	f000 fe78 	bl	80024b8 <MX_LoRaWAN_Init>
  MX_USART1_UART_Init();
 80017c8:	f000 fc54 	bl	8002074 <MX_USART1_UART_Init>
    MX_LoRaWAN_Process();
 80017cc:	f000 fe7a 	bl	80024c4 <MX_LoRaWAN_Process>
  while (1)
 80017d0:	e7fc      	b.n	80017cc <main+0x16>
	...

080017d4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80017d4:	b500      	push	{lr}
 80017d6:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80017d8:	222c      	movs	r2, #44	@ 0x2c
 80017da:	2100      	movs	r1, #0
 80017dc:	a801      	add	r0, sp, #4
 80017de:	f010 f83f 	bl	8011860 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017e2:	4819      	ldr	r0, [pc, #100]	@ (8001848 <MX_RTC_Init+0x74>)
 80017e4:	4b19      	ldr	r3, [pc, #100]	@ (800184c <MX_RTC_Init+0x78>)
 80017e6:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80017e8:	231f      	movs	r3, #31
 80017ea:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017f0:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017f2:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017f8:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80017fa:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80017fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001800:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001802:	f003 ff9f 	bl	8005744 <HAL_RTC_Init>
 8001806:	b9a8      	cbnz	r0, 8001834 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001808:	480f      	ldr	r0, [pc, #60]	@ (8001848 <MX_RTC_Init+0x74>)
 800180a:	f004 f8df 	bl	80059cc <HAL_RTCEx_SetSSRU_IT>
 800180e:	b9a0      	cbnz	r0, 800183a <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001810:	2200      	movs	r2, #0
 8001812:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001814:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001816:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001818:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800181c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800181e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001822:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001824:	a901      	add	r1, sp, #4
 8001826:	4808      	ldr	r0, [pc, #32]	@ (8001848 <MX_RTC_Init+0x74>)
 8001828:	f003 fff4 	bl	8005814 <HAL_RTC_SetAlarm_IT>
 800182c:	b940      	cbnz	r0, 8001840 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800182e:	b00d      	add	sp, #52	@ 0x34
 8001830:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001834:	f7ff ff76 	bl	8001724 <Error_Handler>
 8001838:	e7e6      	b.n	8001808 <MX_RTC_Init+0x34>
    Error_Handler();
 800183a:	f7ff ff73 	bl	8001724 <Error_Handler>
 800183e:	e7e7      	b.n	8001810 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001840:	f7ff ff70 	bl	8001724 <Error_Handler>
}
 8001844:	e7f3      	b.n	800182e <MX_RTC_Init+0x5a>
 8001846:	bf00      	nop
 8001848:	20000204 	.word	0x20000204
 800184c:	40002800 	.word	0x40002800

08001850 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001850:	b510      	push	{r4, lr}
 8001852:	b090      	sub	sp, #64	@ 0x40
 8001854:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001856:	2238      	movs	r2, #56	@ 0x38
 8001858:	2100      	movs	r1, #0
 800185a:	a802      	add	r0, sp, #8
 800185c:	f010 f800 	bl	8011860 <memset>
  if(rtcHandle->Instance==RTC)
 8001860:	6822      	ldr	r2, [r4, #0]
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <HAL_RTC_MspInit+0x7c>)
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001868:	b010      	add	sp, #64	@ 0x40
 800186a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800186c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001870:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001872:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001876:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001878:	a802      	add	r0, sp, #8
 800187a:	f003 fd7b 	bl	8005374 <HAL_RCCEx_PeriphCLKConfig>
 800187e:	bb08      	cbnz	r0, 80018c4 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001884:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001888:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800188c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001890:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001892:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001896:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800189e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80018a0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	4611      	mov	r1, r2
 80018a6:	2002      	movs	r0, #2
 80018a8:	f002 f9d2 	bl	8003c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80018ac:	2002      	movs	r0, #2
 80018ae:	f002 f9df 	bl	8003c70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	4611      	mov	r1, r2
 80018b6:	202a      	movs	r0, #42	@ 0x2a
 80018b8:	f002 f9ca 	bl	8003c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80018bc:	202a      	movs	r0, #42	@ 0x2a
 80018be:	f002 f9d7 	bl	8003c70 <HAL_NVIC_EnableIRQ>
}
 80018c2:	e7d1      	b.n	8001868 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80018c4:	f7ff ff2e 	bl	8001724 <Error_Handler>
 80018c8:	e7da      	b.n	8001880 <HAL_RTC_MspInit+0x30>
 80018ca:	bf00      	nop
 80018cc:	40002800 	.word	0x40002800

080018d0 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80018d0:	4770      	bx	lr

080018d2 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80018d2:	4770      	bx	lr

080018d4 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80018d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80018d6:	f001 fb87 	bl	8002fe8 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80018da:	2001      	movs	r0, #1
 80018dc:	4b02      	ldr	r3, [pc, #8]	@ (80018e8 <PWR_EnterStopMode+0x14>)
 80018de:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80018e2:	f002 ff7b 	bl	80047dc <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80018e6:	bd08      	pop	{r3, pc}
 80018e8:	58000400 	.word	0x58000400

080018ec <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 80018ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80018ee:	f001 fb82 	bl	8002ff6 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80018f2:	bd08      	pop	{r3, pc}

080018f4 <PWR_ExitStopMode>:
{
 80018f4:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 80018f6:	f001 fb7e 	bl	8002ff6 <HAL_ResumeTick>
  vcom_Resume();
 80018fa:	f000 fda5 	bl	8002448 <vcom_Resume>
}
 80018fe:	bd08      	pop	{r3, pc}

08001900 <PWR_EnterSleepMode>:
{
 8001900:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001902:	f001 fb71 	bl	8002fe8 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001906:	2101      	movs	r1, #1
 8001908:	2000      	movs	r0, #0
 800190a:	f002 ff0b 	bl	8004724 <HAL_PWR_EnterSLEEPMode>
}
 800190e:	bd08      	pop	{r3, pc}

08001910 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001910:	4770      	bx	lr

08001912 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <NMI_Handler>

08001914 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <HardFault_Handler>

08001916 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <MemManage_Handler>

08001918 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <BusFault_Handler>

0800191a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <UsageFault_Handler>

0800191c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191c:	4770      	bx	lr

0800191e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191e:	4770      	bx	lr

08001920 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001920:	4770      	bx	lr

08001922 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001922:	4770      	bx	lr

08001924 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001924:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001926:	4802      	ldr	r0, [pc, #8]	@ (8001930 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001928:	f004 f87c 	bl	8005a24 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800192c:	bd08      	pop	{r3, pc}
 800192e:	bf00      	nop
 8001930:	20000204 	.word	0x20000204

08001934 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001934:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001936:	2001      	movs	r0, #1
 8001938:	f002 fede 	bl	80046f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800193c:	bd08      	pop	{r3, pc}

0800193e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800193e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001940:	2002      	movs	r0, #2
 8001942:	f002 fed9 	bl	80046f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001946:	bd08      	pop	{r3, pc}

08001948 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001948:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800194a:	4802      	ldr	r0, [pc, #8]	@ (8001954 <DMA1_Channel1_IRQHandler+0xc>)
 800194c:	f002 fb96 	bl	800407c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001950:	bd08      	pop	{r3, pc}
 8001952:	bf00      	nop
 8001954:	20000374 	.word	0x20000374

08001958 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001958:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800195a:	4802      	ldr	r0, [pc, #8]	@ (8001964 <DMA1_Channel2_IRQHandler+0xc>)
 800195c:	f002 fb8e 	bl	800407c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001960:	bd08      	pop	{r3, pc}
 8001962:	bf00      	nop
 8001964:	200002b4 	.word	0x200002b4

08001968 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001968:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800196a:	4802      	ldr	r0, [pc, #8]	@ (8001974 <DMA1_Channel3_IRQHandler+0xc>)
 800196c:	f002 fb86 	bl	800407c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001970:	bd08      	pop	{r3, pc}
 8001972:	bf00      	nop
 8001974:	2000013c 	.word	0x2000013c

08001978 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001978:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800197a:	4802      	ldr	r0, [pc, #8]	@ (8001984 <DMA1_Channel4_IRQHandler+0xc>)
 800197c:	f002 fb7e 	bl	800407c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001980:	bd08      	pop	{r3, pc}
 8001982:	bf00      	nop
 8001984:	20000314 	.word	0x20000314

08001988 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 7 Interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001988:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800198a:	4802      	ldr	r0, [pc, #8]	@ (8001994 <DMA1_Channel7_IRQHandler+0xc>)
 800198c:	f002 fb76 	bl	800407c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001990:	bd08      	pop	{r3, pc}
 8001992:	bf00      	nop
 8001994:	20000254 	.word	0x20000254

08001998 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC Interrupt.
  */
void ADC_IRQHandler(void)
{
 8001998:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800199a:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <ADC_IRQHandler+0xc>)
 800199c:	f001 fcd9 	bl	8003352 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80019a0:	bd08      	pop	{r3, pc}
 80019a2:	bf00      	nop
 80019a4:	2000019c 	.word	0x2000019c

080019a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 80019a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 80019aa:	2040      	movs	r0, #64	@ 0x40
 80019ac:	f002 fea4 	bl	80046f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019b0:	bd08      	pop	{r3, pc}
	...

080019b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80019b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019b6:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <USART1_IRQHandler+0xc>)
 80019b8:	f004 fcf6 	bl	80063a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019bc:	bd08      	pop	{r3, pc}
 80019be:	bf00      	nop
 80019c0:	200003d4 	.word	0x200003d4

080019c4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80019c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80019c6:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <LPUART1_IRQHandler+0xc>)
 80019c8:	f004 fcee 	bl	80063a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80019cc:	bd08      	pop	{r3, pc}
 80019ce:	bf00      	nop
 80019d0:	20000468 	.word	0x20000468

080019d4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80019d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80019d6:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <RTC_Alarm_IRQHandler+0xc>)
 80019d8:	f003 fe2e 	bl	8005638 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80019dc:	bd08      	pop	{r3, pc}
 80019de:	bf00      	nop
 80019e0:	20000204 	.word	0x20000204

080019e4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80019e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80019e6:	4802      	ldr	r0, [pc, #8]	@ (80019f0 <SUBGHZ_Radio_IRQHandler+0xc>)
 80019e8:	f004 fad4 	bl	8005f94 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80019ec:	bd08      	pop	{r3, pc}
 80019ee:	bf00      	nop
 80019f0:	2000023c 	.word	0x2000023c

080019f4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80019f4:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80019f6:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <MX_SUBGHZ_Init+0x18>)
 80019f8:	2308      	movs	r3, #8
 80019fa:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80019fc:	f004 f848 	bl	8005a90 <HAL_SUBGHZ_Init>
 8001a00:	b900      	cbnz	r0, 8001a04 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001a02:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a04:	f7ff fe8e 	bl	8001724 <Error_Handler>
}
 8001a08:	e7fb      	b.n	8001a02 <MX_SUBGHZ_Init+0xe>
 8001a0a:	bf00      	nop
 8001a0c:	2000023c 	.word	0x2000023c

08001a10 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001a10:	b500      	push	{lr}
 8001a12:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a18:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001a20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a28:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	2032      	movs	r0, #50	@ 0x32
 8001a30:	f002 f90e 	bl	8003c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001a34:	2032      	movs	r0, #50	@ 0x32
 8001a36:	f002 f91b 	bl	8003c70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001a3a:	b003      	add	sp, #12
 8001a3c:	f85d fb04 	ldr.w	pc, [sp], #4

08001a40 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001a40:	b40c      	push	{r2, r3}
 8001a42:	b500      	push	{lr}
 8001a44:	b083      	sub	sp, #12
 8001a46:	ab04      	add	r3, sp, #16
 8001a48:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001a4c:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001a4e:	f00f fe43 	bl	80116d8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001a52:	b003      	add	sp, #12
 8001a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a58:	b002      	add	sp, #8
 8001a5a:	4770      	bx	lr

08001a5c <TimestampNow>:
{
 8001a5c:	b530      	push	{r4, r5, lr}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	4604      	mov	r4, r0
 8001a62:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001a64:	a802      	add	r0, sp, #8
 8001a66:	f00f fbab 	bl	80111c0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001a6a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	9b02      	ldr	r3, [sp, #8]
 8001a72:	4a05      	ldr	r2, [pc, #20]	@ (8001a88 <TimestampNow+0x2c>)
 8001a74:	2110      	movs	r1, #16
 8001a76:	4620      	mov	r0, r4
 8001a78:	f7ff ffe2 	bl	8001a40 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f7fe fb7b 	bl	8000178 <strlen>
 8001a82:	8028      	strh	r0, [r5, #0]
}
 8001a84:	b005      	add	sp, #20
 8001a86:	bd30      	pop	{r4, r5, pc}
 8001a88:	08011a70 	.word	0x08011a70

08001a8c <SystemApp_Init>:
{
 8001a8c:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001a8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a92:	6893      	ldr	r3, [r2, #8]
 8001a94:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001a98:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001a9a:	f00f fc15 	bl	80112c8 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001a9e:	2401      	movs	r4, #1
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <SystemApp_Init+0x4c>)
 8001aa2:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001aa4:	f000 f8bc 	bl	8001c20 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001aa8:	f00f f8b2 	bl	8010c10 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001aac:	480b      	ldr	r0, [pc, #44]	@ (8001adc <SystemApp_Init+0x50>)
 8001aae:	f00f f8c9 	bl	8010c44 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <SystemApp_Init+0x54>)
 8001ab4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ab8:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001aba:	2003      	movs	r0, #3
 8001abc:	f00f f8c8 	bl	8010c50 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001ac0:	f7ff faca 	bl	8001058 <SYS_InitMeasurement>
  EnvSensors_Init();
 8001ac4:	f000 f964 	bl	8001d90 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001ac8:	f00f f9d2 	bl	8010e70 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001acc:	4621      	mov	r1, r4
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f00f f9ee 	bl	8010eb0 <UTIL_LPM_SetOffMode>
}
 8001ad4:	bd10      	pop	{r4, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000248 	.word	0x20000248
 8001adc:	08001a5d 	.word	0x08001a5d
 8001ae0:	58004000 	.word	0x58004000

08001ae4 <UTIL_SEQ_Idle>:
{
 8001ae4:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8001ae6:	f00f f9f9 	bl	8010edc <UTIL_LPM_EnterLowPower>
}
 8001aea:	bd08      	pop	{r3, pc}

08001aec <GetBatteryLevel>:
{
 8001aec:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001aee:	f7ff fabb 	bl	8001068 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001af2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001af6:	4298      	cmp	r0, r3
 8001af8:	d80d      	bhi.n	8001b16 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001afa:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 8001afe:	d30c      	bcc.n	8001b1a <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001b00:	f5a0 60e1 	sub.w	r0, r0, #1800	@ 0x708
 8001b04:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001b08:	0040      	lsls	r0, r0, #1
 8001b0a:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <GetBatteryLevel+0x34>)
 8001b0c:	fba3 3000 	umull	r3, r0, r3, r0
 8001b10:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001b14:	e000      	b.n	8001b18 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001b16:	20fe      	movs	r0, #254	@ 0xfe
}
 8001b18:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	e7fc      	b.n	8001b18 <GetBatteryLevel+0x2c>
 8001b1e:	bf00      	nop
 8001b20:	1b4e81b5 	.word	0x1b4e81b5

08001b24 <GetTemperatureLevel>:
{
 8001b24:	b500      	push	{lr}
 8001b26:	b08b      	sub	sp, #44	@ 0x2c
  EnvSensors_Read(&sensor_data);
 8001b28:	a801      	add	r0, sp, #4
 8001b2a:	f000 f90b 	bl	8001d44 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001b2e:	9802      	ldr	r0, [sp, #8]
 8001b30:	f7fe fff4 	bl	8000b1c <__aeabi_f2iz>
}
 8001b34:	b200      	sxth	r0, r0
 8001b36:	b00b      	add	sp, #44	@ 0x2c
 8001b38:	f85d fb04 	ldr.w	pc, [sp], #4

08001b3c <GetUniqueId>:
{
 8001b3c:	b538      	push	{r3, r4, r5, lr}
 8001b3e:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001b40:	4b18      	ldr	r3, [pc, #96]	@ (8001ba4 <GetUniqueId+0x68>)
 8001b42:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4a:	d013      	beq.n	8001b74 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001b4c:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001b4e:	0a1a      	lsrs	r2, r3, #8
 8001b50:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001b52:	0c1a      	lsrs	r2, r3, #16
 8001b54:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001b56:	0e1b      	lsrs	r3, r3, #24
 8001b58:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001b5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <GetUniqueId+0x68>)
 8001b5c:	f8d3 2584 	ldr.w	r2, [r3, #1412]	@ 0x584
    id[3] = val & 0xFF;
 8001b60:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001b62:	f8d3 3584 	ldr.w	r3, [r3, #1412]	@ 0x584
 8001b66:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001b68:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001b6a:	0c1a      	lsrs	r2, r3, #16
 8001b6c:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001b6e:	0e1b      	lsrs	r3, r3, #24
 8001b70:	7003      	strb	r3, [r0, #0]
}
 8001b72:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001b74:	f001 fa46 	bl	8003004 <HAL_GetUIDw0>
 8001b78:	4605      	mov	r5, r0
 8001b7a:	f001 fa4f 	bl	800301c <HAL_GetUIDw2>
 8001b7e:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001b80:	f001 fa46 	bl	8003010 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001b84:	0e2b      	lsrs	r3, r5, #24
 8001b86:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001b88:	0c2b      	lsrs	r3, r5, #16
 8001b8a:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001b8c:	0a2b      	lsrs	r3, r5, #8
 8001b8e:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001b90:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001b92:	0e03      	lsrs	r3, r0, #24
 8001b94:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001b96:	0c03      	lsrs	r3, r0, #16
 8001b98:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001b9a:	0a03      	lsrs	r3, r0, #8
 8001b9c:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001b9e:	7020      	strb	r0, [r4, #0]
 8001ba0:	e7e7      	b.n	8001b72 <GetUniqueId+0x36>
 8001ba2:	bf00      	nop
 8001ba4:	1fff7000 	.word	0x1fff7000

08001ba8 <GetDevAddr>:
{
 8001ba8:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <GetDevAddr+0x2c>)
 8001bac:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
  *devAddr = LL_FLASH_GetUDN();
 8001bb0:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb6:	d000      	beq.n	8001bba <GetDevAddr+0x12>
}
 8001bb8:	bd38      	pop	{r3, r4, r5, pc}
 8001bba:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001bbc:	f001 fa22 	bl	8003004 <HAL_GetUIDw0>
 8001bc0:	4605      	mov	r5, r0
 8001bc2:	f001 fa25 	bl	8003010 <HAL_GetUIDw1>
 8001bc6:	4045      	eors	r5, r0
 8001bc8:	f001 fa28 	bl	800301c <HAL_GetUIDw2>
 8001bcc:	4045      	eors	r5, r0
 8001bce:	6025      	str	r5, [r4, #0]
}
 8001bd0:	e7f2      	b.n	8001bb8 <GetDevAddr+0x10>
 8001bd2:	bf00      	nop
 8001bd4:	1fff7000 	.word	0x1fff7000

08001bd8 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001bd8:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001bda:	2101      	movs	r1, #1
 8001bdc:	2002      	movs	r0, #2
 8001bde:	f00f f951 	bl	8010e84 <UTIL_LPM_SetStopMode>
}
 8001be2:	bd08      	pop	{r3, pc}

08001be4 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001be4:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001be6:	2100      	movs	r1, #0
 8001be8:	2002      	movs	r0, #2
 8001bea:	f00f f94b 	bl	8010e84 <UTIL_LPM_SetStopMode>
}
 8001bee:	bd08      	pop	{r3, pc}

08001bf0 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001bf4:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001bf6:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <HAL_GetTick+0x14>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b90b      	cbnz	r3, 8001c00 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001bfc:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001bfe:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001c00:	f000 f8f2 	bl	8001de8 <TIMER_IF_GetTimerValue>
 8001c04:	e7fb      	b.n	8001bfe <HAL_GetTick+0xa>
 8001c06:	bf00      	nop
 8001c08:	20000248 	.word	0x20000248

08001c0c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001c0c:	b500      	push	{lr}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001c12:	9801      	ldr	r0, [sp, #4]
 8001c14:	f000 f9ce 	bl	8001fb4 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c18:	b003      	add	sp, #12
 8001c1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001c20 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c24:	b08b      	sub	sp, #44	@ 0x2c
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001c26:	4a45      	ldr	r2, [pc, #276]	@ (8001d3c <DBG_Init+0x11c>)
 8001c28:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001c2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001c34:	f001 f9f8 	bl	8003028 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001c38:	f001 f9fe 	bl	8003038 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001c3c:	f001 fa04 	bl	8003048 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001c40:	2500      	movs	r5, #0
 8001c42:	9505      	str	r5, [sp, #20]
 8001c44:	9506      	str	r5, [sp, #24]
 8001c46:	9507      	str	r5, [sp, #28]
 8001c48:	9508      	str	r5, [sp, #32]
 8001c4a:	9509      	str	r5, [sp, #36]	@ 0x24

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	2703      	movs	r7, #3
 8001c52:	9708      	str	r7, [sp, #32]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c54:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 8001c58:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001c5a:	f043 0302 	orr.w	r3, r3, #2
 8001c5e:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c60:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8001c68:	9b04      	ldr	r3, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c6a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c72:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8001c7a:	9b03      	ldr	r3, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c7c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001c7e:	f043 0302 	orr.w	r3, r3, #2
 8001c82:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c84:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001c8c:	9b02      	ldr	r3, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c8e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c96:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001c9e:	9b01      	ldr	r3, [sp, #4]
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();
  PROBE_LINE3_CLK_ENABLE();
  PROBE_LINE4_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001ca0:	f44f 5b00 	mov.w	fp, #8192	@ 0x2000
 8001ca4:	f8cd b014 	str.w	fp, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001ca8:	4e25      	ldr	r6, [pc, #148]	@ (8001d40 <DBG_Init+0x120>)
 8001caa:	a905      	add	r1, sp, #20
 8001cac:	4630      	mov	r0, r6
 8001cae:	f002 fbc5 	bl	800443c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001cb2:	f44f 5a80 	mov.w	sl, #4096	@ 0x1000
 8001cb6:	f8cd a014 	str.w	sl, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001cba:	a905      	add	r1, sp, #20
 8001cbc:	4630      	mov	r0, r6
 8001cbe:	f002 fbbd 	bl	800443c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001cc2:	f44f 4900 	mov.w	r9, #32768	@ 0x8000
 8001cc6:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001cca:	a905      	add	r1, sp, #20
 8001ccc:	4630      	mov	r0, r6
 8001cce:	f002 fbb5 	bl	800443c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001cd2:	f44f 7800 	mov.w	r8, #512	@ 0x200
 8001cd6:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001cda:	a905      	add	r1, sp, #20
 8001cdc:	4630      	mov	r0, r6
 8001cde:	f002 fbad 	bl	800443c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001ce2:	462a      	mov	r2, r5
 8001ce4:	4659      	mov	r1, fp
 8001ce6:	4630      	mov	r0, r6
 8001ce8:	f002 fcf8 	bl	80046dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001cec:	462a      	mov	r2, r5
 8001cee:	4651      	mov	r1, sl
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	f002 fcf3 	bl	80046dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001cf6:	462a      	mov	r2, r5
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	4630      	mov	r0, r6
 8001cfc:	f002 fcee 	bl	80046dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001d00:	462a      	mov	r2, r5
 8001d02:	4641      	mov	r1, r8
 8001d04:	4630      	mov	r0, r6
 8001d06:	f002 fce9 	bl	80046dc <HAL_GPIO_WritePin>

  /* HW alternate functions for monitoring RF */

#if (DEBUG_SUBGHZSPI_MONITORING_ENABLED == 1)
  /*spi dbg*/
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8001d0a:	23f0      	movs	r3, #240	@ 0xf0
 8001d0c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001d12:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 8001d16:	230d      	movs	r3, #13
 8001d18:	9309      	str	r3, [sp, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d1a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d22:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001d2a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	a905      	add	r1, sp, #20
 8001d2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d32:	f002 fb83 	bl	800443c <HAL_GPIO_Init>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001d36:	b00b      	add	sp, #44	@ 0x2c
 8001d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d3c:	58000800 	.word	0x58000800
 8001d40:	48000400 	.word	0x48000400

08001d44 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001d44:	b510      	push	{r4, lr}
 8001d46:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001d48:	f7ff f9b0 	bl	80010ac <SYS_GetTemperatureLevel>
 8001d4c:	f340 200f 	sbfx	r0, r0, #8, #16
 8001d50:	f7fe fd40 	bl	80007d4 <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001d54:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <EnvSensors_Read+0x3c>)
 8001d56:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001d58:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <EnvSensors_Read+0x40>)
 8001d5c:	6023      	str	r3, [r4, #0]
  sensor_data->h2o		   = SYS_GetH2OLevel();
 8001d5e:	f7ff f9fb 	bl	8001158 <SYS_GetH2OLevel>
 8001d62:	f7fe fd33 	bl	80007cc <__aeabi_ui2f>
 8001d66:	61a0      	str	r0, [r4, #24]
  sensor_data->n		   = N_Value;
 8001d68:	2345      	movs	r3, #69	@ 0x45
 8001d6a:	83a3      	strh	r3, [r4, #28]
  sensor_data->p		   = P_Value;
 8001d6c:	83e3      	strh	r3, [r4, #30]
  sensor_data->k		   = K_Value;
 8001d6e:	8423      	strh	r3, [r4, #32]
  sensor_data->soil_temp   = soil_temp_Value;
 8001d70:	8463      	strh	r3, [r4, #34]	@ 0x22
  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001d72:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <EnvSensors_Read+0x44>)
 8001d74:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001d76:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <EnvSensors_Read+0x48>)
 8001d78:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	bd10      	pop	{r4, pc}
 8001d7e:	bf00      	nop
 8001d80:	42480000 	.word	0x42480000
 8001d84:	447a0000 	.word	0x447a0000
 8001d88:	003e090d 	.word	0x003e090d
 8001d8c:	000503ab 	.word	0x000503ab

08001d90 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001d90:	2000      	movs	r0, #0
 8001d92:	4770      	bx	lr

08001d94 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001d94:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <TIMER_IF_SetTimerContext+0x1c>)
 8001d96:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001d98:	e001      	b.n	8001d9e <TIMER_IF_SetTimerContext+0xa>
 8001d9a:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <TIMER_IF_SetTimerContext+0x1c>)
 8001d9c:	6898      	ldr	r0, [r3, #8]
 8001d9e:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <TIMER_IF_SetTimerContext+0x1c>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	4283      	cmp	r3, r0
 8001da4:	d1f9      	bne.n	8001d9a <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001da6:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001da8:	4b02      	ldr	r3, [pc, #8]	@ (8001db4 <TIMER_IF_SetTimerContext+0x20>)
 8001daa:	6018      	str	r0, [r3, #0]
}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40002800 	.word	0x40002800
 8001db4:	2000024c 	.word	0x2000024c

08001db8 <TIMER_IF_GetTimerContext>:
}
 8001db8:	4b01      	ldr	r3, [pc, #4]	@ (8001dc0 <TIMER_IF_GetTimerContext+0x8>)
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	2000024c 	.word	0x2000024c

08001dc4 <TIMER_IF_GetTimerElapsedTime>:
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001dc6:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001dc8:	e001      	b.n	8001dce <TIMER_IF_GetTimerElapsedTime+0xa>
 8001dca:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001dcc:	6898      	ldr	r0, [r3, #8]
 8001dce:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	4283      	cmp	r3, r0
 8001dd4:	d1f9      	bne.n	8001dca <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001dd6:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001dd8:	4b02      	ldr	r3, [pc, #8]	@ (8001de4 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	1ac0      	subs	r0, r0, r3
 8001dde:	4770      	bx	lr
 8001de0:	40002800 	.word	0x40002800
 8001de4:	2000024c 	.word	0x2000024c

08001de8 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001de8:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <TIMER_IF_GetTimerValue+0x20>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b153      	cbz	r3, 8001e04 <TIMER_IF_GetTimerValue+0x1c>
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <TIMER_IF_GetTimerValue+0x24>)
 8001df0:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001df2:	e001      	b.n	8001df8 <TIMER_IF_GetTimerValue+0x10>
 8001df4:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <TIMER_IF_GetTimerValue+0x24>)
 8001df6:	6898      	ldr	r0, [r3, #8]
 8001df8:	4b04      	ldr	r3, [pc, #16]	@ (8001e0c <TIMER_IF_GetTimerValue+0x24>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4283      	cmp	r3, r0
 8001dfe:	d1f9      	bne.n	8001df4 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001e00:	43c0      	mvns	r0, r0
 8001e02:	4770      	bx	lr
  uint32_t ret = 0;
 8001e04:	2000      	movs	r0, #0
}
 8001e06:	4770      	bx	lr
 8001e08:	20000250 	.word	0x20000250
 8001e0c:	40002800 	.word	0x40002800

08001e10 <TIMER_IF_GetMinimumTimeout>:
}
 8001e10:	2003      	movs	r0, #3
 8001e12:	4770      	bx	lr

08001e14 <TIMER_IF_Convert_ms2Tick>:
{
 8001e14:	b508      	push	{r3, lr}
 8001e16:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001e18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	0280      	lsls	r0, r0, #10
 8001e20:	0d89      	lsrs	r1, r1, #22
 8001e22:	f7fe fec1 	bl	8000ba8 <__aeabi_uldivmod>
}
 8001e26:	bd08      	pop	{r3, pc}

08001e28 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001e28:	0ec2      	lsrs	r2, r0, #27
 8001e2a:	0143      	lsls	r3, r0, #5
 8001e2c:	1a1b      	subs	r3, r3, r0
 8001e2e:	f162 0200 	sbc.w	r2, r2, #0
 8001e32:	0092      	lsls	r2, r2, #2
 8001e34:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	181b      	adds	r3, r3, r0
 8001e3c:	f142 0000 	adc.w	r0, r2, #0
 8001e40:	00c0      	lsls	r0, r0, #3
 8001e42:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001e46:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001e4a:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001e4e:	4770      	bx	lr

08001e50 <TIMER_IF_StopTimer>:
{
 8001e50:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001e52:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <TIMER_IF_StopTimer+0x20>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001e58:	4c06      	ldr	r4, [pc, #24]	@ (8001e74 <TIMER_IF_StopTimer+0x24>)
 8001e5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f003 fbaa 	bl	80055b8 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295
 8001e68:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	bd10      	pop	{r4, pc}
 8001e6e:	bf00      	nop
 8001e70:	40002800 	.word	0x40002800
 8001e74:	20000204 	.word	0x20000204

08001e78 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001e78:	b508      	push	{r3, lr}
 8001e7a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	4802      	ldr	r0, [pc, #8]	@ (8001e88 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001e80:	f003 fde5 	bl	8005a4e <HAL_RTCEx_BKUPWrite>
}
 8001e84:	bd08      	pop	{r3, pc}
 8001e86:	bf00      	nop
 8001e88:	20000204 	.word	0x20000204

08001e8c <TIMER_IF_Init>:
{
 8001e8c:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ecc <TIMER_IF_Init+0x40>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	b10b      	cbz	r3, 8001e98 <TIMER_IF_Init+0xc>
}
 8001e94:	2000      	movs	r0, #0
 8001e96:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e98:	4c0d      	ldr	r4, [pc, #52]	@ (8001ed0 <TIMER_IF_Init+0x44>)
 8001e9a:	f04f 35ff 	mov.w	r5, #4294967295
 8001e9e:	6325      	str	r5, [r4, #48]	@ 0x30
    MX_RTC_Init();
 8001ea0:	f7ff fc98 	bl	80017d4 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001ea4:	f7ff ffd4 	bl	8001e50 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ea8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001eac:	4620      	mov	r0, r4
 8001eae:	f003 fb83 	bl	80055b8 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001eb2:	6325      	str	r5, [r4, #48]	@ 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	f003 fd69 	bl	800598c <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff ffdc 	bl	8001e78 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001ec0:	f7ff ff68 	bl	8001d94 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001ec4:	4b01      	ldr	r3, [pc, #4]	@ (8001ecc <TIMER_IF_Init+0x40>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	e7e3      	b.n	8001e94 <TIMER_IF_Init+0x8>
 8001ecc:	20000250 	.word	0x20000250
 8001ed0:	20000204 	.word	0x20000204

08001ed4 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001ed4:	b508      	push	{r3, lr}
 8001ed6:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001edc:	f003 fdb7 	bl	8005a4e <HAL_RTCEx_BKUPWrite>
}
 8001ee0:	bd08      	pop	{r3, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000204 	.word	0x20000204

08001ee8 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001ee8:	b508      	push	{r3, lr}
 8001eea:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001eec:	2101      	movs	r1, #1
 8001eee:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001ef0:	f003 fdad 	bl	8005a4e <HAL_RTCEx_BKUPWrite>
}
 8001ef4:	bd08      	pop	{r3, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000204 	.word	0x20000204

08001efc <TIMER_IF_StartTimer>:
{
 8001efc:	b510      	push	{r4, lr}
 8001efe:	b08c      	sub	sp, #48	@ 0x30
 8001f00:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001f02:	222c      	movs	r2, #44	@ 0x2c
 8001f04:	2100      	movs	r1, #0
 8001f06:	a801      	add	r0, sp, #4
 8001f08:	f00f fcaa 	bl	8011860 <memset>
  TIMER_IF_StopTimer();
 8001f0c:	f7ff ffa0 	bl	8001e50 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001f10:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <TIMER_IF_StartTimer+0x48>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001f16:	2300      	movs	r3, #0
 8001f18:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001f1a:	43e4      	mvns	r4, r4
 8001f1c:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f1e:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001f20:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001f24:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f2a:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	a901      	add	r1, sp, #4
 8001f30:	4805      	ldr	r0, [pc, #20]	@ (8001f48 <TIMER_IF_StartTimer+0x4c>)
 8001f32:	f003 fc6f 	bl	8005814 <HAL_RTC_SetAlarm_IT>
 8001f36:	b910      	cbnz	r0, 8001f3e <TIMER_IF_StartTimer+0x42>
}
 8001f38:	2000      	movs	r0, #0
 8001f3a:	b00c      	add	sp, #48	@ 0x30
 8001f3c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001f3e:	f7ff fbf1 	bl	8001724 <Error_Handler>
 8001f42:	e7f9      	b.n	8001f38 <TIMER_IF_StartTimer+0x3c>
 8001f44:	2000024c 	.word	0x2000024c
 8001f48:	20000204 	.word	0x20000204

08001f4c <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001f4c:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001f4e:	2102      	movs	r1, #2
 8001f50:	4801      	ldr	r0, [pc, #4]	@ (8001f58 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001f52:	f003 fd83 	bl	8005a5c <HAL_RTCEx_BKUPRead>
}
 8001f56:	bd08      	pop	{r3, pc}
 8001f58:	20000204 	.word	0x20000204

08001f5c <TIMER_IF_GetTime>:
{
 8001f5c:	b538      	push	{r3, r4, r5, lr}
 8001f5e:	4605      	mov	r5, r0
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <TIMER_IF_GetTime+0x34>)
 8001f62:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f64:	e001      	b.n	8001f6a <TIMER_IF_GetTime+0xe>
 8001f66:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <TIMER_IF_GetTime+0x34>)
 8001f68:	689c      	ldr	r4, [r3, #8]
 8001f6a:	4a09      	ldr	r2, [pc, #36]	@ (8001f90 <TIMER_IF_GetTime+0x34>)
 8001f6c:	6892      	ldr	r2, [r2, #8]
 8001f6e:	42a2      	cmp	r2, r4
 8001f70:	d1f9      	bne.n	8001f66 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001f72:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001f74:	f7ff ffea 	bl	8001f4c <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001f78:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001f7a:	0aa4      	lsrs	r4, r4, #10
 8001f7c:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001f80:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001f84:	f7ff ff50 	bl	8001e28 <TIMER_IF_Convert_Tick2ms>
 8001f88:	8028      	strh	r0, [r5, #0]
}
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	bd38      	pop	{r3, r4, r5, pc}
 8001f8e:	bf00      	nop
 8001f90:	40002800 	.word	0x40002800

08001f94 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001f94:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001f96:	2100      	movs	r1, #0
 8001f98:	4801      	ldr	r0, [pc, #4]	@ (8001fa0 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001f9a:	f003 fd5f 	bl	8005a5c <HAL_RTCEx_BKUPRead>
}
 8001f9e:	bd08      	pop	{r3, pc}
 8001fa0:	20000204 	.word	0x20000204

08001fa4 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001fa4:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	4801      	ldr	r0, [pc, #4]	@ (8001fb0 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001faa:	f003 fd57 	bl	8005a5c <HAL_RTCEx_BKUPRead>
}
 8001fae:	bd08      	pop	{r3, pc}
 8001fb0:	20000204 	.word	0x20000204

08001fb4 <TIMER_IF_DelayMs>:
{
 8001fb4:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001fb6:	f7ff ff2d 	bl	8001e14 <TIMER_IF_Convert_ms2Tick>
 8001fba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <TIMER_IF_DelayMs+0x3c>)
 8001fbc:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001fbe:	e001      	b.n	8001fc4 <TIMER_IF_DelayMs+0x10>
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <TIMER_IF_DelayMs+0x3c>)
 8001fc2:	6899      	ldr	r1, [r3, #8]
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff0 <TIMER_IF_DelayMs+0x3c>)
 8001fc6:	6892      	ldr	r2, [r2, #8]
 8001fc8:	428a      	cmp	r2, r1
 8001fca:	d1f9      	bne.n	8001fc0 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001fcc:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001fce:	e00a      	b.n	8001fe6 <TIMER_IF_DelayMs+0x32>
 8001fd0:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <TIMER_IF_DelayMs+0x3c>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4a06      	ldr	r2, [pc, #24]	@ (8001ff0 <TIMER_IF_DelayMs+0x3c>)
 8001fd6:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d1f9      	bne.n	8001fd0 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8001fdc:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001fde:	1a5b      	subs	r3, r3, r1
 8001fe0:	4283      	cmp	r3, r0
 8001fe2:	d203      	bcs.n	8001fec <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001fe4:	bf00      	nop
 8001fe6:	4b02      	ldr	r3, [pc, #8]	@ (8001ff0 <TIMER_IF_DelayMs+0x3c>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001fea:	e7f3      	b.n	8001fd4 <TIMER_IF_DelayMs+0x20>
}
 8001fec:	bd08      	pop	{r3, pc}
 8001fee:	bf00      	nop
 8001ff0:	40002800 	.word	0x40002800

08001ff4 <HAL_RTC_AlarmAEventCallback>:
{
 8001ff4:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001ff6:	f00f fa8b 	bl	8011510 <UTIL_TIMER_IRQ_Handler>
}
 8001ffa:	bd08      	pop	{r3, pc}

08001ffc <HAL_RTCEx_SSRUEventCallback>:
{
 8001ffc:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001ffe:	f7ff ffa5 	bl	8001f4c <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002002:	3001      	adds	r0, #1
 8002004:	f7ff ff38 	bl	8001e78 <TIMER_IF_BkUp_Write_MSBticks>
}
 8002008:	bd08      	pop	{r3, pc}
	...

0800200c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800200c:	b508      	push	{r3, lr}
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800200e:	4817      	ldr	r0, [pc, #92]	@ (800206c <MX_LPUART1_UART_Init+0x60>)
 8002010:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <MX_LPUART1_UART_Init+0x64>)
 8002012:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 230400;
 8002014:	f44f 3361 	mov.w	r3, #230400	@ 0x38400
 8002018:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800201a:	2300      	movs	r3, #0
 800201c:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800201e:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002020:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002022:	220c      	movs	r2, #12
 8002024:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002026:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002028:	6203      	str	r3, [r0, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800202a:	6243      	str	r3, [r0, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800202c:	6283      	str	r3, [r0, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800202e:	6643      	str	r3, [r0, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002030:	f005 f872 	bl	8007118 <HAL_UART_Init>
 8002034:	b970      	cbnz	r0, 8002054 <MX_LPUART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002036:	2100      	movs	r1, #0
 8002038:	480c      	ldr	r0, [pc, #48]	@ (800206c <MX_LPUART1_UART_Init+0x60>)
 800203a:	f005 fa1d 	bl	8007478 <HAL_UARTEx_SetTxFifoThreshold>
 800203e:	b960      	cbnz	r0, 800205a <MX_LPUART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002040:	2100      	movs	r1, #0
 8002042:	480a      	ldr	r0, [pc, #40]	@ (800206c <MX_LPUART1_UART_Init+0x60>)
 8002044:	f005 fa3d 	bl	80074c2 <HAL_UARTEx_SetRxFifoThreshold>
 8002048:	b950      	cbnz	r0, 8002060 <MX_LPUART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800204a:	4808      	ldr	r0, [pc, #32]	@ (800206c <MX_LPUART1_UART_Init+0x60>)
 800204c:	f005 f9f5 	bl	800743a <HAL_UARTEx_DisableFifoMode>
 8002050:	b948      	cbnz	r0, 8002066 <MX_LPUART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002052:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002054:	f7ff fb66 	bl	8001724 <Error_Handler>
 8002058:	e7ed      	b.n	8002036 <MX_LPUART1_UART_Init+0x2a>
    Error_Handler();
 800205a:	f7ff fb63 	bl	8001724 <Error_Handler>
 800205e:	e7ef      	b.n	8002040 <MX_LPUART1_UART_Init+0x34>
    Error_Handler();
 8002060:	f7ff fb60 	bl	8001724 <Error_Handler>
 8002064:	e7f1      	b.n	800204a <MX_LPUART1_UART_Init+0x3e>
    Error_Handler();
 8002066:	f7ff fb5d 	bl	8001724 <Error_Handler>
}
 800206a:	e7f2      	b.n	8002052 <MX_LPUART1_UART_Init+0x46>
 800206c:	20000468 	.word	0x20000468
 8002070:	40008000 	.word	0x40008000

08002074 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002074:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002076:	4817      	ldr	r0, [pc, #92]	@ (80020d4 <MX_USART1_UART_Init+0x60>)
 8002078:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <MX_USART1_UART_Init+0x64>)
 800207a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 800207c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8002080:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	2300      	movs	r3, #0
 8002084:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002086:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002088:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800208a:	220c      	movs	r2, #12
 800208c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002090:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002092:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002094:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002096:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002098:	f005 f83e 	bl	8007118 <HAL_UART_Init>
 800209c:	b970      	cbnz	r0, 80020bc <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800209e:	2100      	movs	r1, #0
 80020a0:	480c      	ldr	r0, [pc, #48]	@ (80020d4 <MX_USART1_UART_Init+0x60>)
 80020a2:	f005 f9e9 	bl	8007478 <HAL_UARTEx_SetTxFifoThreshold>
 80020a6:	b960      	cbnz	r0, 80020c2 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020a8:	2100      	movs	r1, #0
 80020aa:	480a      	ldr	r0, [pc, #40]	@ (80020d4 <MX_USART1_UART_Init+0x60>)
 80020ac:	f005 fa09 	bl	80074c2 <HAL_UARTEx_SetRxFifoThreshold>
 80020b0:	b950      	cbnz	r0, 80020c8 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80020b2:	4808      	ldr	r0, [pc, #32]	@ (80020d4 <MX_USART1_UART_Init+0x60>)
 80020b4:	f005 f9c1 	bl	800743a <HAL_UARTEx_DisableFifoMode>
 80020b8:	b948      	cbnz	r0, 80020ce <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020ba:	bd08      	pop	{r3, pc}
    Error_Handler();
 80020bc:	f7ff fb32 	bl	8001724 <Error_Handler>
 80020c0:	e7ed      	b.n	800209e <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 80020c2:	f7ff fb2f 	bl	8001724 <Error_Handler>
 80020c6:	e7ef      	b.n	80020a8 <MX_USART1_UART_Init+0x34>
    Error_Handler();
 80020c8:	f7ff fb2c 	bl	8001724 <Error_Handler>
 80020cc:	e7f1      	b.n	80020b2 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 80020ce:	f7ff fb29 	bl	8001724 <Error_Handler>
}
 80020d2:	e7f2      	b.n	80020ba <MX_USART1_UART_Init+0x46>
 80020d4:	200003d4 	.word	0x200003d4
 80020d8:	40013800 	.word	0x40013800

080020dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020dc:	b530      	push	{r4, r5, lr}
 80020de:	b099      	sub	sp, #100	@ 0x64
 80020e0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e2:	2100      	movs	r1, #0
 80020e4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80020e6:	9114      	str	r1, [sp, #80]	@ 0x50
 80020e8:	9115      	str	r1, [sp, #84]	@ 0x54
 80020ea:	9116      	str	r1, [sp, #88]	@ 0x58
 80020ec:	9117      	str	r1, [sp, #92]	@ 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020ee:	2238      	movs	r2, #56	@ 0x38
 80020f0:	a805      	add	r0, sp, #20
 80020f2:	f00f fbb5 	bl	8011860 <memset>
  if(uartHandle->Instance==LPUART1)
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	4a79      	ldr	r2, [pc, #484]	@ (80022e0 <HAL_UART_MspInit+0x204>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d004      	beq.n	8002108 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 80020fe:	4a79      	ldr	r2, [pc, #484]	@ (80022e4 <HAL_UART_MspInit+0x208>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d076      	beq.n	80021f2 <HAL_UART_MspInit+0x116>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002104:	b019      	add	sp, #100	@ 0x64
 8002106:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002108:	2320      	movs	r3, #32
 800210a:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800210c:	a805      	add	r0, sp, #20
 800210e:	f003 f931 	bl	8005374 <HAL_RCCEx_PeriphCLKConfig>
 8002112:	2800      	cmp	r0, #0
 8002114:	d15e      	bne.n	80021d4 <HAL_UART_MspInit+0xf8>
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002116:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800211a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800211c:	f042 0201 	orr.w	r2, r2, #1
 8002120:	65da      	str	r2, [r3, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002122:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002124:	f002 0201 	and.w	r2, r2, #1
 8002128:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800212a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800212c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800213c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LoRa_VCOM_Rx_Pin|LoRa_VCOM_Tx_Pin;
 800213e:	230c      	movs	r3, #12
 8002140:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2500      	movs	r5, #0
 8002148:	9515      	str	r5, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	9516      	str	r5, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800214c:	2308      	movs	r3, #8
 800214e:	9317      	str	r3, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	a913      	add	r1, sp, #76	@ 0x4c
 8002152:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002156:	f002 f971 	bl	800443c <HAL_GPIO_Init>
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 800215a:	4863      	ldr	r0, [pc, #396]	@ (80022e8 <HAL_UART_MspInit+0x20c>)
 800215c:	4b63      	ldr	r3, [pc, #396]	@ (80022ec <HAL_UART_MspInit+0x210>)
 800215e:	6003      	str	r3, [r0, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002160:	2315      	movs	r3, #21
 8002162:	6043      	str	r3, [r0, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002164:	6085      	str	r5, [r0, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002166:	60c5      	str	r5, [r0, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002168:	2380      	movs	r3, #128	@ 0x80
 800216a:	6103      	str	r3, [r0, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800216c:	6145      	str	r5, [r0, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800216e:	6185      	str	r5, [r0, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8002170:	61c5      	str	r5, [r0, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002172:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002174:	f001 fdf4 	bl	8003d60 <HAL_DMA_Init>
 8002178:	2800      	cmp	r0, #0
 800217a:	d12e      	bne.n	80021da <HAL_UART_MspInit+0xfe>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800217c:	2110      	movs	r1, #16
 800217e:	485a      	ldr	r0, [pc, #360]	@ (80022e8 <HAL_UART_MspInit+0x20c>)
 8002180:	f001 fff0 	bl	8004164 <HAL_DMA_ConfigChannelAttributes>
 8002184:	bb60      	cbnz	r0, 80021e0 <HAL_UART_MspInit+0x104>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002186:	4b58      	ldr	r3, [pc, #352]	@ (80022e8 <HAL_UART_MspInit+0x20c>)
 8002188:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 800218c:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 800218e:	4858      	ldr	r0, [pc, #352]	@ (80022f0 <HAL_UART_MspInit+0x214>)
 8002190:	4b58      	ldr	r3, [pc, #352]	@ (80022f4 <HAL_UART_MspInit+0x218>)
 8002192:	6003      	str	r3, [r0, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002194:	2316      	movs	r3, #22
 8002196:	6043      	str	r3, [r0, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002198:	2310      	movs	r3, #16
 800219a:	6083      	str	r3, [r0, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800219c:	2300      	movs	r3, #0
 800219e:	60c3      	str	r3, [r0, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021a0:	2280      	movs	r2, #128	@ 0x80
 80021a2:	6102      	str	r2, [r0, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021a4:	6143      	str	r3, [r0, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a6:	6183      	str	r3, [r0, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80021a8:	61c3      	str	r3, [r0, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021aa:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80021ac:	f001 fdd8 	bl	8003d60 <HAL_DMA_Init>
 80021b0:	b9c8      	cbnz	r0, 80021e6 <HAL_UART_MspInit+0x10a>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80021b2:	2110      	movs	r1, #16
 80021b4:	484e      	ldr	r0, [pc, #312]	@ (80022f0 <HAL_UART_MspInit+0x214>)
 80021b6:	f001 ffd5 	bl	8004164 <HAL_DMA_ConfigChannelAttributes>
 80021ba:	b9b8      	cbnz	r0, 80021ec <HAL_UART_MspInit+0x110>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80021bc:	4b4c      	ldr	r3, [pc, #304]	@ (80022f0 <HAL_UART_MspInit+0x214>)
 80021be:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80021c0:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	4611      	mov	r1, r2
 80021c6:	2026      	movs	r0, #38	@ 0x26
 80021c8:	f001 fd42 	bl	8003c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80021cc:	2026      	movs	r0, #38	@ 0x26
 80021ce:	f001 fd4f 	bl	8003c70 <HAL_NVIC_EnableIRQ>
 80021d2:	e797      	b.n	8002104 <HAL_UART_MspInit+0x28>
      Error_Handler();
 80021d4:	f7ff faa6 	bl	8001724 <Error_Handler>
 80021d8:	e79d      	b.n	8002116 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 80021da:	f7ff faa3 	bl	8001724 <Error_Handler>
 80021de:	e7cd      	b.n	800217c <HAL_UART_MspInit+0xa0>
      Error_Handler();
 80021e0:	f7ff faa0 	bl	8001724 <Error_Handler>
 80021e4:	e7cf      	b.n	8002186 <HAL_UART_MspInit+0xaa>
      Error_Handler();
 80021e6:	f7ff fa9d 	bl	8001724 <Error_Handler>
 80021ea:	e7e2      	b.n	80021b2 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80021ec:	f7ff fa9a 	bl	8001724 <Error_Handler>
 80021f0:	e7e4      	b.n	80021bc <HAL_UART_MspInit+0xe0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021f2:	2301      	movs	r3, #1
 80021f4:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021f6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80021fa:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021fc:	a805      	add	r0, sp, #20
 80021fe:	f003 f8b9 	bl	8005374 <HAL_RCCEx_PeriphCLKConfig>
 8002202:	2800      	cmp	r0, #0
 8002204:	d15d      	bne.n	80022c2 <HAL_UART_MspInit+0x1e6>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800220a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800220c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002210:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002212:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002214:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002218:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 800221a:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800221c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800221e:	f042 0202 	orr.w	r2, r2, #2
 8002222:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800222c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = NPK_RX_Pin|NPK_TX_Pin;
 800222e:	23c0      	movs	r3, #192	@ 0xc0
 8002230:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2500      	movs	r5, #0
 8002238:	9515      	str	r5, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	9516      	str	r5, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800223c:	2307      	movs	r3, #7
 800223e:	9317      	str	r3, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002240:	a913      	add	r1, sp, #76	@ 0x4c
 8002242:	482d      	ldr	r0, [pc, #180]	@ (80022f8 <HAL_UART_MspInit+0x21c>)
 8002244:	f002 f8fa 	bl	800443c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8002248:	482c      	ldr	r0, [pc, #176]	@ (80022fc <HAL_UART_MspInit+0x220>)
 800224a:	4b2d      	ldr	r3, [pc, #180]	@ (8002300 <HAL_UART_MspInit+0x224>)
 800224c:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800224e:	2311      	movs	r3, #17
 8002250:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002252:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002254:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002256:	2380      	movs	r3, #128	@ 0x80
 8002258:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800225a:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800225c:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800225e:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002260:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002262:	f001 fd7d 	bl	8003d60 <HAL_DMA_Init>
 8002266:	2800      	cmp	r0, #0
 8002268:	d12e      	bne.n	80022c8 <HAL_UART_MspInit+0x1ec>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800226a:	2110      	movs	r1, #16
 800226c:	4823      	ldr	r0, [pc, #140]	@ (80022fc <HAL_UART_MspInit+0x220>)
 800226e:	f001 ff79 	bl	8004164 <HAL_DMA_ConfigChannelAttributes>
 8002272:	bb60      	cbnz	r0, 80022ce <HAL_UART_MspInit+0x1f2>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002274:	4b21      	ldr	r3, [pc, #132]	@ (80022fc <HAL_UART_MspInit+0x220>)
 8002276:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 800227a:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel7;
 800227c:	4821      	ldr	r0, [pc, #132]	@ (8002304 <HAL_UART_MspInit+0x228>)
 800227e:	4b22      	ldr	r3, [pc, #136]	@ (8002308 <HAL_UART_MspInit+0x22c>)
 8002280:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002282:	2312      	movs	r3, #18
 8002284:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002286:	2310      	movs	r3, #16
 8002288:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800228e:	2280      	movs	r2, #128	@ 0x80
 8002290:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002292:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002294:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002296:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002298:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800229a:	f001 fd61 	bl	8003d60 <HAL_DMA_Init>
 800229e:	b9c8      	cbnz	r0, 80022d4 <HAL_UART_MspInit+0x1f8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80022a0:	2110      	movs	r1, #16
 80022a2:	4818      	ldr	r0, [pc, #96]	@ (8002304 <HAL_UART_MspInit+0x228>)
 80022a4:	f001 ff5e 	bl	8004164 <HAL_DMA_ConfigChannelAttributes>
 80022a8:	b9b8      	cbnz	r0, 80022da <HAL_UART_MspInit+0x1fe>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80022aa:	4b16      	ldr	r3, [pc, #88]	@ (8002304 <HAL_UART_MspInit+0x228>)
 80022ac:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80022ae:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	4611      	mov	r1, r2
 80022b4:	2024      	movs	r0, #36	@ 0x24
 80022b6:	f001 fccb 	bl	8003c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ba:	2024      	movs	r0, #36	@ 0x24
 80022bc:	f001 fcd8 	bl	8003c70 <HAL_NVIC_EnableIRQ>
}
 80022c0:	e720      	b.n	8002104 <HAL_UART_MspInit+0x28>
      Error_Handler();
 80022c2:	f7ff fa2f 	bl	8001724 <Error_Handler>
 80022c6:	e79e      	b.n	8002206 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 80022c8:	f7ff fa2c 	bl	8001724 <Error_Handler>
 80022cc:	e7cd      	b.n	800226a <HAL_UART_MspInit+0x18e>
      Error_Handler();
 80022ce:	f7ff fa29 	bl	8001724 <Error_Handler>
 80022d2:	e7cf      	b.n	8002274 <HAL_UART_MspInit+0x198>
      Error_Handler();
 80022d4:	f7ff fa26 	bl	8001724 <Error_Handler>
 80022d8:	e7e2      	b.n	80022a0 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 80022da:	f7ff fa23 	bl	8001724 <Error_Handler>
 80022de:	e7e4      	b.n	80022aa <HAL_UART_MspInit+0x1ce>
 80022e0:	40008000 	.word	0x40008000
 80022e4:	40013800 	.word	0x40013800
 80022e8:	20000374 	.word	0x20000374
 80022ec:	40020008 	.word	0x40020008
 80022f0:	20000314 	.word	0x20000314
 80022f4:	40020044 	.word	0x40020044
 80022f8:	48000400 	.word	0x48000400
 80022fc:	200002b4 	.word	0x200002b4
 8002300:	4002001c 	.word	0x4002001c
 8002304:	20000254 	.word	0x20000254
 8002308:	40020080 	.word	0x40020080

0800230c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800230c:	b510      	push	{r4, lr}
 800230e:	4604      	mov	r4, r0

  if(uartHandle->Instance==LPUART1)
 8002310:	6803      	ldr	r3, [r0, #0]
 8002312:	4a19      	ldr	r2, [pc, #100]	@ (8002378 <HAL_UART_MspDeInit+0x6c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d003      	beq.n	8002320 <HAL_UART_MspDeInit+0x14>
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 8002318:	4a18      	ldr	r2, [pc, #96]	@ (800237c <HAL_UART_MspDeInit+0x70>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d016      	beq.n	800234c <HAL_UART_MspDeInit+0x40>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800231e:	bd10      	pop	{r4, pc}
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8002320:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002324:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	65d3      	str	r3, [r2, #92]	@ 0x5c
    HAL_GPIO_DeInit(GPIOA, LoRa_VCOM_Rx_Pin|LoRa_VCOM_Tx_Pin);
 800232c:	210c      	movs	r1, #12
 800232e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002332:	f002 f955 	bl	80045e0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002336:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800233a:	f001 fd83 	bl	8003e44 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800233e:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8002340:	f001 fd80 	bl	8003e44 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8002344:	2026      	movs	r0, #38	@ 0x26
 8002346:	f001 fc97 	bl	8003c78 <HAL_NVIC_DisableIRQ>
 800234a:	e7e8      	b.n	800231e <HAL_UART_MspDeInit+0x12>
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800234c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002350:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8002352:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002356:	6613      	str	r3, [r2, #96]	@ 0x60
    HAL_GPIO_DeInit(GPIOB, NPK_RX_Pin|NPK_TX_Pin);
 8002358:	21c0      	movs	r1, #192	@ 0xc0
 800235a:	4809      	ldr	r0, [pc, #36]	@ (8002380 <HAL_UART_MspDeInit+0x74>)
 800235c:	f002 f940 	bl	80045e0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002360:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8002364:	f001 fd6e 	bl	8003e44 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002368:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800236a:	f001 fd6b 	bl	8003e44 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800236e:	2024      	movs	r0, #36	@ 0x24
 8002370:	f001 fc82 	bl	8003c78 <HAL_NVIC_DisableIRQ>
}
 8002374:	e7d3      	b.n	800231e <HAL_UART_MspDeInit+0x12>
 8002376:	bf00      	nop
 8002378:	40008000 	.word	0x40008000
 800237c:	40013800 	.word	0x40013800
 8002380:	48000400 	.word	0x48000400

08002384 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002384:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002386:	4b07      	ldr	r3, [pc, #28]	@ (80023a4 <vcom_Init+0x20>)
 8002388:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 800238a:	f7fe ff07 	bl	800119c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800238e:	f7ff fe3d 	bl	800200c <MX_LPUART1_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002392:	4a05      	ldr	r2, [pc, #20]	@ (80023a8 <vcom_Init+0x24>)
 8002394:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800239c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_28);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80023a0:	2000      	movs	r0, #0
 80023a2:	bd08      	pop	{r3, pc}
 80023a4:	20000500 	.word	0x20000500
 80023a8:	58000800 	.word	0x58000800

080023ac <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80023ac:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR2, Periphs);
 80023ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 80023ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023bc:	f022 0201 	bic.w	r2, r2, #1
 80023c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_LPUART1_FORCE_RESET();
  __HAL_RCC_LPUART1_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&hlpuart1);
 80023c2:	4804      	ldr	r0, [pc, #16]	@ (80023d4 <vcom_DeInit+0x28>)
 80023c4:	f7ff ffa2 	bl	800230c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80023c8:	200f      	movs	r0, #15
 80023ca:	f001 fc55 	bl	8003c78 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80023ce:	2000      	movs	r0, #0
 80023d0:	bd08      	pop	{r3, pc}
 80023d2:	bf00      	nop
 80023d4:	20000468 	.word	0x20000468

080023d8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80023d8:	b508      	push	{r3, lr}
 80023da:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 80023dc:	4601      	mov	r1, r0
 80023de:	4802      	ldr	r0, [pc, #8]	@ (80023e8 <vcom_Trace_DMA+0x10>)
 80023e0:	f003 ff1e 	bl	8006220 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80023e4:	2000      	movs	r0, #0
 80023e6:	bd08      	pop	{r3, pc}
 80023e8:	20000468 	.word	0x20000468

080023ec <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80023ec:	b510      	push	{r4, lr}
 80023ee:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80023f0:	4b12      	ldr	r3, [pc, #72]	@ (800243c <vcom_ReceiveInit+0x50>)
 80023f2:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80023f4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80023f8:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1, WakeUpSelection);
 80023fa:	ab02      	add	r3, sp, #8
 80023fc:	e913 0006 	ldmdb	r3, {r1, r2}
 8002400:	480f      	ldr	r0, [pc, #60]	@ (8002440 <vcom_ReceiveInit+0x54>)
 8002402:	f004 ffc2 	bl	800738a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_BUSY) == SET);
 8002406:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <vcom_ReceiveInit+0x54>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8002410:	d1f9      	bne.n	8002406 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_REACK) == RESET);
 8002412:	69da      	ldr	r2, [r3, #28]
 8002414:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8002418:	d0fb      	beq.n	8002412 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_WUF);
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002420:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&hlpuart1);
 8002422:	4c07      	ldr	r4, [pc, #28]	@ (8002440 <vcom_ReceiveInit+0x54>)
 8002424:	4620      	mov	r0, r4
 8002426:	f004 fff1 	bl	800740c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&hlpuart1, &charRx, 1);
 800242a:	2201      	movs	r2, #1
 800242c:	4905      	ldr	r1, [pc, #20]	@ (8002444 <vcom_ReceiveInit+0x58>)
 800242e:	4620      	mov	r0, r4
 8002430:	f004 ff44 	bl	80072bc <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002434:	2000      	movs	r0, #0
 8002436:	b002      	add	sp, #8
 8002438:	bd10      	pop	{r4, pc}
 800243a:	bf00      	nop
 800243c:	200004fc 	.word	0x200004fc
 8002440:	20000468 	.word	0x20000468
 8002444:	20000504 	.word	0x20000504

08002448 <vcom_Resume>:

void vcom_Resume(void)
{
 8002448:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800244a:	4804      	ldr	r0, [pc, #16]	@ (800245c <vcom_Resume+0x14>)
 800244c:	f001 fc88 	bl	8003d60 <HAL_DMA_Init>
 8002450:	b900      	cbnz	r0, 8002454 <vcom_Resume+0xc>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002452:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002454:	f7ff f966 	bl	8001724 <Error_Handler>
}
 8002458:	e7fb      	b.n	8002452 <vcom_Resume+0xa>
 800245a:	bf00      	nop
 800245c:	20000314 	.word	0x20000314

08002460 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002460:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == LPUART1)
 8002462:	6802      	ldr	r2, [r0, #0]
 8002464:	4b04      	ldr	r3, [pc, #16]	@ (8002478 <HAL_UART_TxCpltCallback+0x18>)
 8002466:	429a      	cmp	r2, r3
 8002468:	d000      	beq.n	800246c <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800246a:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 800246c:	4b03      	ldr	r3, [pc, #12]	@ (800247c <HAL_UART_TxCpltCallback+0x1c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2000      	movs	r0, #0
 8002472:	4798      	blx	r3
}
 8002474:	e7f9      	b.n	800246a <HAL_UART_TxCpltCallback+0xa>
 8002476:	bf00      	nop
 8002478:	40008000 	.word	0x40008000
 800247c:	20000500 	.word	0x20000500

08002480 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == LPUART1)
 8002480:	6802      	ldr	r2, [r0, #0]
 8002482:	4b0a      	ldr	r3, [pc, #40]	@ (80024ac <HAL_UART_RxCpltCallback+0x2c>)
 8002484:	429a      	cmp	r2, r3
 8002486:	d000      	beq.n	800248a <HAL_UART_RxCpltCallback+0xa>
 8002488:	4770      	bx	lr
{
 800248a:	b510      	push	{r4, lr}
 800248c:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800248e:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <HAL_UART_RxCpltCallback+0x30>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b12b      	cbz	r3, 80024a0 <HAL_UART_RxCpltCallback+0x20>
 8002494:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
 8002498:	b912      	cbnz	r2, 80024a0 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 800249a:	2101      	movs	r1, #1
 800249c:	4805      	ldr	r0, [pc, #20]	@ (80024b4 <HAL_UART_RxCpltCallback+0x34>)
 800249e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80024a0:	2201      	movs	r2, #1
 80024a2:	4904      	ldr	r1, [pc, #16]	@ (80024b4 <HAL_UART_RxCpltCallback+0x34>)
 80024a4:	4620      	mov	r0, r4
 80024a6:	f004 ff09 	bl	80072bc <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80024aa:	bd10      	pop	{r4, pc}
 80024ac:	40008000 	.word	0x40008000
 80024b0:	200004fc 	.word	0x200004fc
 80024b4:	20000504 	.word	0x20000504

080024b8 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80024b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80024ba:	f7ff fae7 	bl	8001a8c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 80024be:	f000 fba5 	bl	8002c0c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80024c2:	bd08      	pop	{r3, pc}

080024c4 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 80024c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80024c6:	f04f 30ff 	mov.w	r0, #4294967295
 80024ca:	f00e fd73 	bl	8010fb4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80024ce:	bd08      	pop	{r3, pc}

080024d0 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024d0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80024d4:	4905      	ldr	r1, [pc, #20]	@ (80024ec <__NVIC_SystemReset+0x1c>)
 80024d6:	68ca      	ldr	r2, [r1, #12]
 80024d8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80024dc:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <__NVIC_SystemReset+0x20>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	60cb      	str	r3, [r1, #12]
 80024e2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80024e6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80024e8:	e7fd      	b.n	80024e6 <__NVIC_SystemReset+0x16>
 80024ea:	bf00      	nop
 80024ec:	e000ed00 	.word	0xe000ed00
 80024f0:	05fa0004 	.word	0x05fa0004

080024f4 <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 80024f4:	4770      	bx	lr
	...

080024f8 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80024f8:	4b01      	ldr	r3, [pc, #4]	@ (8002500 <OnTxFrameCtrlChanged+0x8>)
 80024fa:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	2000000c 	.word	0x2000000c

08002504 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8002504:	4b01      	ldr	r3, [pc, #4]	@ (800250c <OnPingSlotPeriodicityChanged+0x8>)
 8002506:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	2000000c 	.word	0x2000000c

08002510 <OnBeaconStatusChange>:
  if (params != NULL)
 8002510:	2800      	cmp	r0, #0
 8002512:	d03f      	beq.n	8002594 <OnBeaconStatusChange+0x84>
{
 8002514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002518:	b08c      	sub	sp, #48	@ 0x30
 800251a:	4603      	mov	r3, r0
    switch (params->State)
 800251c:	7842      	ldrb	r2, [r0, #1]
 800251e:	2a02      	cmp	r2, #2
 8002520:	d00a      	beq.n	8002538 <OnBeaconStatusChange+0x28>
 8002522:	2a03      	cmp	r2, #3
 8002524:	d02f      	beq.n	8002586 <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8002526:	4b1c      	ldr	r3, [pc, #112]	@ (8002598 <OnBeaconStatusChange+0x88>)
 8002528:	2200      	movs	r2, #0
 800252a:	4611      	mov	r1, r2
 800252c:	2002      	movs	r0, #2
 800252e:	f00e fbe3 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
}
 8002532:	b00c      	add	sp, #48	@ 0x30
 8002534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002538:	7c02      	ldrb	r2, [r0, #16]
 800253a:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 800253e:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8002542:	7d9c      	ldrb	r4, [r3, #22]
 8002544:	7ddd      	ldrb	r5, [r3, #23]
 8002546:	7e1e      	ldrb	r6, [r3, #24]
 8002548:	7e5f      	ldrb	r7, [r3, #25]
 800254a:	f893 c01a 	ldrb.w	ip, [r3, #26]
 800254e:	f893 e01b 	ldrb.w	lr, [r3, #27]
 8002552:	f893 801c 	ldrb.w	r8, [r3, #28]
 8002556:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 800255a:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
 800255e:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8002562:	9708      	str	r7, [sp, #32]
 8002564:	9607      	str	r6, [sp, #28]
 8002566:	9506      	str	r5, [sp, #24]
 8002568:	9405      	str	r4, [sp, #20]
 800256a:	685c      	ldr	r4, [r3, #4]
 800256c:	9404      	str	r4, [sp, #16]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	9303      	str	r3, [sp, #12]
 8002572:	9002      	str	r0, [sp, #8]
 8002574:	9101      	str	r1, [sp, #4]
 8002576:	9200      	str	r2, [sp, #0]
 8002578:	4b08      	ldr	r3, [pc, #32]	@ (800259c <OnBeaconStatusChange+0x8c>)
 800257a:	2200      	movs	r2, #0
 800257c:	4611      	mov	r1, r2
 800257e:	2002      	movs	r0, #2
 8002580:	f00e fbba 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8002584:	e7d5      	b.n	8002532 <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <OnBeaconStatusChange+0x90>)
 8002588:	2200      	movs	r2, #0
 800258a:	4611      	mov	r1, r2
 800258c:	2002      	movs	r0, #2
 800258e:	f00e fbb3 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
}
 8002592:	e7ce      	b.n	8002532 <OnBeaconStatusChange+0x22>
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	08011acc 	.word	0x08011acc
 800259c:	08011ae4 	.word	0x08011ae4
 80025a0:	08011b58 	.word	0x08011b58

080025a4 <OnClassChange>:
{
 80025a4:	b500      	push	{lr}
 80025a6:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80025a8:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <OnClassChange+0x1c>)
 80025aa:	5c1b      	ldrb	r3, [r3, r0]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <OnClassChange+0x20>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	4611      	mov	r1, r2
 80025b4:	2002      	movs	r0, #2
 80025b6:	f00e fb9f 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
}
 80025ba:	b003      	add	sp, #12
 80025bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80025c0:	08011b94 	.word	0x08011b94
 80025c4:	08011b78 	.word	0x08011b78

080025c8 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 80025c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 80025ca:	2801      	cmp	r0, #1
 80025cc:	d006      	beq.n	80025dc <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 80025ce:	4b07      	ldr	r3, [pc, #28]	@ (80025ec <OnNvmDataChange+0x24>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	4611      	mov	r1, r2
 80025d4:	2002      	movs	r0, #2
 80025d6:	f00e fb8f 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80025da:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 80025dc:	4b04      	ldr	r3, [pc, #16]	@ (80025f0 <OnNvmDataChange+0x28>)
 80025de:	2200      	movs	r2, #0
 80025e0:	4611      	mov	r1, r2
 80025e2:	2002      	movs	r0, #2
 80025e4:	f00e fb88 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
 80025e8:	e7f7      	b.n	80025da <OnNvmDataChange+0x12>
 80025ea:	bf00      	nop
 80025ec:	08011bac 	.word	0x08011bac
 80025f0:	08011b98 	.word	0x08011b98

080025f4 <OnTxTimerEvent>:
{
 80025f4:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80025f6:	2100      	movs	r1, #0
 80025f8:	2002      	movs	r0, #2
 80025fa:	f00e fca7 	bl	8010f4c <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 80025fe:	4802      	ldr	r0, [pc, #8]	@ (8002608 <OnTxTimerEvent+0x14>)
 8002600:	f00e ff26 	bl	8011450 <UTIL_TIMER_Start>
}
 8002604:	bd08      	pop	{r3, pc}
 8002606:	bf00      	nop
 8002608:	20000660 	.word	0x20000660

0800260c <OnMacProcessNotify>:
{
 800260c:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800260e:	2100      	movs	r1, #0
 8002610:	2001      	movs	r0, #1
 8002612:	f00e fc9b 	bl	8010f4c <UTIL_SEQ_SetTask>
}
 8002616:	bd08      	pop	{r3, pc}

08002618 <OnSystemReset>:
{
 8002618:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800261a:	f005 fc2f 	bl	8007e7c <LmHandlerHalt>
 800261e:	b100      	cbz	r0, 8002622 <OnSystemReset+0xa>
}
 8002620:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002622:	f005 f8e9 	bl	80077f8 <LmHandlerJoinStatus>
 8002626:	2801      	cmp	r0, #1
 8002628:	d1fa      	bne.n	8002620 <OnSystemReset+0x8>
    NVIC_SystemReset();
 800262a:	f7ff ff51 	bl	80024d0 <__NVIC_SystemReset>
	...

08002630 <OnTxPeriodicityChanged>:
{
 8002630:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002632:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <OnTxPeriodicityChanged+0x28>)
 8002634:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 8002636:	b910      	cbnz	r0, 800263e <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002638:	f242 7210 	movw	r2, #10000	@ 0x2710
 800263c:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 800263e:	4c07      	ldr	r4, [pc, #28]	@ (800265c <OnTxPeriodicityChanged+0x2c>)
 8002640:	4620      	mov	r0, r4
 8002642:	f00e feab 	bl	801139c <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8002646:	4b04      	ldr	r3, [pc, #16]	@ (8002658 <OnTxPeriodicityChanged+0x28>)
 8002648:	6819      	ldr	r1, [r3, #0]
 800264a:	4620      	mov	r0, r4
 800264c:	f00e ff46 	bl	80114dc <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002650:	4620      	mov	r0, r4
 8002652:	f00e fefd 	bl	8011450 <UTIL_TIMER_Start>
}
 8002656:	bd10      	pop	{r4, pc}
 8002658:	20000008 	.word	0x20000008
 800265c:	20000660 	.word	0x20000660

08002660 <OnTxData>:
  if ((params != NULL))
 8002660:	2800      	cmp	r0, #0
 8002662:	d042      	beq.n	80026ea <OnTxData+0x8a>
{
 8002664:	b510      	push	{r4, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800266a:	7803      	ldrb	r3, [r0, #0]
 800266c:	b90b      	cbnz	r3, 8002672 <OnTxData+0x12>
}
 800266e:	b004      	add	sp, #16
 8002670:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002672:	2201      	movs	r2, #1
 8002674:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002678:	481c      	ldr	r0, [pc, #112]	@ (80026ec <OnTxData+0x8c>)
 800267a:	f002 f82f 	bl	80046dc <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 800267e:	481c      	ldr	r0, [pc, #112]	@ (80026f0 <OnTxData+0x90>)
 8002680:	f00e fee6 	bl	8011450 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8002684:	4b1b      	ldr	r3, [pc, #108]	@ (80026f4 <OnTxData+0x94>)
 8002686:	2200      	movs	r2, #0
 8002688:	4611      	mov	r1, r2
 800268a:	2002      	movs	r0, #2
 800268c:	f00e fb34 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8002690:	7c23      	ldrb	r3, [r4, #16]
 8002692:	f994 200a 	ldrsb.w	r2, [r4, #10]
 8002696:	f994 1018 	ldrsb.w	r1, [r4, #24]
 800269a:	9103      	str	r1, [sp, #12]
 800269c:	9202      	str	r2, [sp, #8]
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	68e3      	ldr	r3, [r4, #12]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	4b14      	ldr	r3, [pc, #80]	@ (80026f8 <OnTxData+0x98>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	4611      	mov	r1, r2
 80026aa:	2003      	movs	r0, #3
 80026ac:	f00e fb24 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80026b0:	4b12      	ldr	r3, [pc, #72]	@ (80026fc <OnTxData+0x9c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	4611      	mov	r1, r2
 80026b6:	2003      	movs	r0, #3
 80026b8:	f00e fb1e 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80026bc:	7a23      	ldrb	r3, [r4, #8]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d10c      	bne.n	80026dc <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80026c2:	7a63      	ldrb	r3, [r4, #9]
 80026c4:	b143      	cbz	r3, 80026d8 <OnTxData+0x78>
 80026c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002700 <OnTxData+0xa0>)
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002704 <OnTxData+0xa4>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	4611      	mov	r1, r2
 80026d0:	2003      	movs	r0, #3
 80026d2:	f00e fb11 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
 80026d6:	e7ca      	b.n	800266e <OnTxData+0xe>
 80026d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <OnTxData+0xa8>)
 80026da:	e7f5      	b.n	80026c8 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <OnTxData+0xac>)
 80026de:	2200      	movs	r2, #0
 80026e0:	4611      	mov	r1, r2
 80026e2:	2003      	movs	r0, #3
 80026e4:	f00e fb08 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
}
 80026e8:	e7c1      	b.n	800266e <OnTxData+0xe>
 80026ea:	4770      	bx	lr
 80026ec:	48000400 	.word	0x48000400
 80026f0:	20000538 	.word	0x20000538
 80026f4:	08011bcc 	.word	0x08011bcc
 80026f8:	08011c00 	.word	0x08011c00
 80026fc:	08011c34 	.word	0x08011c34
 8002700:	08011bc0 	.word	0x08011bc0
 8002704:	08011c44 	.word	0x08011c44
 8002708:	08011bc4 	.word	0x08011bc4
 800270c:	08011c58 	.word	0x08011c58

08002710 <OnJoinRequest>:
  if (joinParams != NULL)
 8002710:	2800      	cmp	r0, #0
 8002712:	d039      	beq.n	8002788 <OnJoinRequest+0x78>
{
 8002714:	b510      	push	{r4, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800271a:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800271e:	b9fb      	cbnz	r3, 8002760 <OnJoinRequest+0x50>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002720:	481a      	ldr	r0, [pc, #104]	@ (800278c <OnJoinRequest+0x7c>)
 8002722:	f00e fe3b 	bl	801139c <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002726:	2200      	movs	r2, #0
 8002728:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800272c:	4818      	ldr	r0, [pc, #96]	@ (8002790 <OnJoinRequest+0x80>)
 800272e:	f001 ffd5 	bl	80046dc <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002732:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <OnJoinRequest+0x84>)
 8002734:	2200      	movs	r2, #0
 8002736:	4611      	mov	r1, r2
 8002738:	2002      	movs	r0, #2
 800273a:	f00e fadd 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800273e:	79e3      	ldrb	r3, [r4, #7]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d006      	beq.n	8002752 <OnJoinRequest+0x42>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002744:	4b14      	ldr	r3, [pc, #80]	@ (8002798 <OnJoinRequest+0x88>)
 8002746:	2200      	movs	r2, #0
 8002748:	4611      	mov	r1, r2
 800274a:	2002      	movs	r0, #2
 800274c:	f00e fad4 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
 8002750:	e00c      	b.n	800276c <OnJoinRequest+0x5c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002752:	4b12      	ldr	r3, [pc, #72]	@ (800279c <OnJoinRequest+0x8c>)
 8002754:	2200      	movs	r2, #0
 8002756:	4611      	mov	r1, r2
 8002758:	2002      	movs	r0, #2
 800275a:	f00e facd 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
 800275e:	e005      	b.n	800276c <OnJoinRequest+0x5c>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002760:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <OnJoinRequest+0x90>)
 8002762:	2200      	movs	r2, #0
 8002764:	4611      	mov	r1, r2
 8002766:	2002      	movs	r0, #2
 8002768:	f00e fac6 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
 800276c:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8002770:	f994 2005 	ldrsb.w	r2, [r4, #5]
 8002774:	9201      	str	r2, [sp, #4]
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	4b0a      	ldr	r3, [pc, #40]	@ (80027a4 <OnJoinRequest+0x94>)
 800277a:	2200      	movs	r2, #0
 800277c:	4611      	mov	r1, r2
 800277e:	2003      	movs	r0, #3
 8002780:	f00e faba 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
}
 8002784:	b002      	add	sp, #8
 8002786:	bd10      	pop	{r4, pc}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000508 	.word	0x20000508
 8002790:	48000400 	.word	0x48000400
 8002794:	08011c68 	.word	0x08011c68
 8002798:	08011ca0 	.word	0x08011ca0
 800279c:	08011c80 	.word	0x08011c80
 80027a0:	08011cc0 	.word	0x08011cc0
 80027a4:	08011cdc 	.word	0x08011cdc

080027a8 <OnStopJoinTimerEvent>:
{
 80027a8:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80027aa:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <OnStopJoinTimerEvent+0x3c>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d013      	beq.n	80027da <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80027b2:	4c0d      	ldr	r4, [pc, #52]	@ (80027e8 <OnStopJoinTimerEvent+0x40>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027ba:	4620      	mov	r0, r4
 80027bc:	f001 ff8e 	bl	80046dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80027c0:	2200      	movs	r2, #0
 80027c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027c6:	4620      	mov	r0, r4
 80027c8:	f001 ff88 	bl	80046dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80027cc:	2200      	movs	r2, #0
 80027ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80027d2:	4620      	mov	r0, r4
 80027d4:	f001 ff82 	bl	80046dc <HAL_GPIO_WritePin>
}
 80027d8:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80027da:	2100      	movs	r1, #0
 80027dc:	2008      	movs	r0, #8
 80027de:	f00e fbb5 	bl	8010f4c <UTIL_SEQ_SetTask>
 80027e2:	e7e6      	b.n	80027b2 <OnStopJoinTimerEvent+0xa>
 80027e4:	20000070 	.word	0x20000070
 80027e8:	48000400 	.word	0x48000400

080027ec <OnRxTimerLedEvent>:
{
 80027ec:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80027ee:	2200      	movs	r2, #0
 80027f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027f4:	4801      	ldr	r0, [pc, #4]	@ (80027fc <OnRxTimerLedEvent+0x10>)
 80027f6:	f001 ff71 	bl	80046dc <HAL_GPIO_WritePin>
}
 80027fa:	bd08      	pop	{r3, pc}
 80027fc:	48000400 	.word	0x48000400

08002800 <OnTxTimerLedEvent>:
{
 8002800:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002802:	2200      	movs	r2, #0
 8002804:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002808:	4801      	ldr	r0, [pc, #4]	@ (8002810 <OnTxTimerLedEvent+0x10>)
 800280a:	f001 ff67 	bl	80046dc <HAL_GPIO_WritePin>
}
 800280e:	bd08      	pop	{r3, pc}
 8002810:	48000400 	.word	0x48000400

08002814 <OnRxData>:
  if (params != NULL)
 8002814:	2900      	cmp	r1, #0
 8002816:	d06e      	beq.n	80028f6 <OnRxData+0xe2>
{
 8002818:	b570      	push	{r4, r5, r6, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	4604      	mov	r4, r0
 800281e:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002820:	2201      	movs	r2, #1
 8002822:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002826:	4834      	ldr	r0, [pc, #208]	@ (80028f8 <OnRxData+0xe4>)
 8002828:	f001 ff58 	bl	80046dc <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 800282c:	4833      	ldr	r0, [pc, #204]	@ (80028fc <OnRxData+0xe8>)
 800282e:	f00e fe0f 	bl	8011450 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8002832:	782e      	ldrb	r6, [r5, #0]
 8002834:	2e00      	cmp	r6, #0
 8002836:	d042      	beq.n	80028be <OnRxData+0xaa>
      if (appData != NULL)
 8002838:	2c00      	cmp	r4, #0
 800283a:	d03f      	beq.n	80028bc <OnRxData+0xa8>
        RxPort = appData->Port;
 800283c:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 800283e:	6863      	ldr	r3, [r4, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d03c      	beq.n	80028be <OnRxData+0xaa>
          switch (appData->Port)
 8002844:	2e02      	cmp	r6, #2
 8002846:	d016      	beq.n	8002876 <OnRxData+0x62>
 8002848:	2e03      	cmp	r6, #3
 800284a:	d138      	bne.n	80028be <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 800284c:	7862      	ldrb	r2, [r4, #1]
 800284e:	2a01      	cmp	r2, #1
 8002850:	d135      	bne.n	80028be <OnRxData+0xaa>
                switch (appData->Buffer[0])
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d006      	beq.n	8002866 <OnRxData+0x52>
 8002858:	2b02      	cmp	r3, #2
 800285a:	d008      	beq.n	800286e <OnRxData+0x5a>
 800285c:	bb7b      	cbnz	r3, 80028be <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 800285e:	2000      	movs	r0, #0
 8002860:	f005 f89c 	bl	800799c <LmHandlerRequestClass>
                    break;
 8002864:	e02b      	b.n	80028be <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 8002866:	2001      	movs	r0, #1
 8002868:	f005 f898 	bl	800799c <LmHandlerRequestClass>
                    break;
 800286c:	e027      	b.n	80028be <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 800286e:	2002      	movs	r0, #2
 8002870:	f005 f894 	bl	800799c <LmHandlerRequestClass>
                    break;
 8002874:	e023      	b.n	80028be <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002876:	7862      	ldrb	r2, [r4, #1]
 8002878:	2a01      	cmp	r2, #1
 800287a:	d120      	bne.n	80028be <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	4a1f      	ldr	r2, [pc, #124]	@ (8002900 <OnRxData+0xec>)
 8002884:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8002886:	b963      	cbnz	r3, 80028a2 <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002888:	4b1e      	ldr	r3, [pc, #120]	@ (8002904 <OnRxData+0xf0>)
 800288a:	2200      	movs	r2, #0
 800288c:	4611      	mov	r1, r2
 800288e:	2003      	movs	r0, #3
 8002890:	f00e fa32 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002894:	2200      	movs	r2, #0
 8002896:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800289a:	4817      	ldr	r0, [pc, #92]	@ (80028f8 <OnRxData+0xe4>)
 800289c:	f001 ff1e 	bl	80046dc <HAL_GPIO_WritePin>
 80028a0:	e00d      	b.n	80028be <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80028a2:	4b19      	ldr	r3, [pc, #100]	@ (8002908 <OnRxData+0xf4>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	4611      	mov	r1, r2
 80028a8:	2003      	movs	r0, #3
 80028aa:	f00e fa25 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80028ae:	2201      	movs	r2, #1
 80028b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028b4:	4810      	ldr	r0, [pc, #64]	@ (80028f8 <OnRxData+0xe4>)
 80028b6:	f001 ff11 	bl	80046dc <HAL_GPIO_WritePin>
 80028ba:	e000      	b.n	80028be <OnRxData+0xaa>
  uint8_t RxPort = 0;
 80028bc:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 80028be:	7c2b      	ldrb	r3, [r5, #16]
 80028c0:	2b05      	cmp	r3, #5
 80028c2:	d901      	bls.n	80028c8 <OnRxData+0xb4>
}
 80028c4:	b006      	add	sp, #24
 80028c6:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 80028c8:	f995 2008 	ldrsb.w	r2, [r5, #8]
 80028cc:	f995 1009 	ldrsb.w	r1, [r5, #9]
 80028d0:	f995 000a 	ldrsb.w	r0, [r5, #10]
 80028d4:	9005      	str	r0, [sp, #20]
 80028d6:	9104      	str	r1, [sp, #16]
 80028d8:	490c      	ldr	r1, [pc, #48]	@ (800290c <OnRxData+0xf8>)
 80028da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80028de:	9303      	str	r3, [sp, #12]
 80028e0:	9202      	str	r2, [sp, #8]
 80028e2:	9601      	str	r6, [sp, #4]
 80028e4:	68eb      	ldr	r3, [r5, #12]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <OnRxData+0xfc>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	4611      	mov	r1, r2
 80028ee:	2003      	movs	r0, #3
 80028f0:	f00e fa02 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
}
 80028f4:	e7e6      	b.n	80028c4 <OnRxData+0xb0>
 80028f6:	4770      	bx	lr
 80028f8:	48000400 	.word	0x48000400
 80028fc:	20000520 	.word	0x20000520
 8002900:	20000550 	.word	0x20000550
 8002904:	08011d08 	.word	0x08011d08
 8002908:	08011d14 	.word	0x08011d14
 800290c:	08011f14 	.word	0x08011f14
 8002910:	08011d20 	.word	0x08011d20

08002914 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002914:	b538      	push	{r3, r4, r5, lr}
 8002916:	4604      	mov	r4, r0
 8002918:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800291a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800291e:	4805      	ldr	r0, [pc, #20]	@ (8002934 <OnStoreContextRequest+0x20>)
 8002920:	f7fe fe16 	bl	8001550 <FLASH_IF_Erase>
 8002924:	b100      	cbz	r0, 8002928 <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002926:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8002928:	462a      	mov	r2, r5
 800292a:	4621      	mov	r1, r4
 800292c:	4801      	ldr	r0, [pc, #4]	@ (8002934 <OnStoreContextRequest+0x20>)
 800292e:	f7fe fdd7 	bl	80014e0 <FLASH_IF_Write>
}
 8002932:	e7f8      	b.n	8002926 <OnStoreContextRequest+0x12>
 8002934:	0803f000 	.word	0x0803f000

08002938 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002938:	b508      	push	{r3, lr}
 800293a:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800293c:	4901      	ldr	r1, [pc, #4]	@ (8002944 <OnRestoreContextRequest+0xc>)
 800293e:	f7fe fdeb 	bl	8001518 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002942:	bd08      	pop	{r3, pc}
 8002944:	0803f000 	.word	0x0803f000

08002948 <StopJoin>:
{
 8002948:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800294a:	4c1e      	ldr	r4, [pc, #120]	@ (80029c4 <StopJoin+0x7c>)
 800294c:	2201      	movs	r2, #1
 800294e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002952:	4620      	mov	r0, r4
 8002954:	f001 fec2 	bl	80046dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002958:	2201      	movs	r2, #1
 800295a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800295e:	4620      	mov	r0, r4
 8002960:	f001 febc 	bl	80046dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002964:	2201      	movs	r2, #1
 8002966:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800296a:	4620      	mov	r0, r4
 800296c:	f001 feb6 	bl	80046dc <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 8002970:	4815      	ldr	r0, [pc, #84]	@ (80029c8 <StopJoin+0x80>)
 8002972:	f00e fd13 	bl	801139c <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8002976:	f005 fa79 	bl	8007e6c <LmHandlerStop>
 800297a:	b148      	cbz	r0, 8002990 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800297c:	4b13      	ldr	r3, [pc, #76]	@ (80029cc <StopJoin+0x84>)
 800297e:	2200      	movs	r2, #0
 8002980:	4611      	mov	r1, r2
 8002982:	2002      	movs	r0, #2
 8002984:	f00e f9b8 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 8002988:	4811      	ldr	r0, [pc, #68]	@ (80029d0 <StopJoin+0x88>)
 800298a:	f00e fd61 	bl	8011450 <UTIL_TIMER_Start>
}
 800298e:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 8002990:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <StopJoin+0x8c>)
 8002992:	2200      	movs	r2, #0
 8002994:	4611      	mov	r1, r2
 8002996:	2002      	movs	r0, #2
 8002998:	f00e f9ae 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 800299c:	4c0e      	ldr	r4, [pc, #56]	@ (80029d8 <StopJoin+0x90>)
 800299e:	2501      	movs	r5, #1
 80029a0:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80029a2:	4b0e      	ldr	r3, [pc, #56]	@ (80029dc <StopJoin+0x94>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	4611      	mov	r1, r2
 80029a8:	2002      	movs	r0, #2
 80029aa:	f00e f9a5 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80029ae:	480c      	ldr	r0, [pc, #48]	@ (80029e0 <StopJoin+0x98>)
 80029b0:	f005 f8d4 	bl	8007b5c <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 80029b4:	4629      	mov	r1, r5
 80029b6:	7820      	ldrb	r0, [r4, #0]
 80029b8:	f004 fe8c 	bl	80076d4 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 80029bc:	4802      	ldr	r0, [pc, #8]	@ (80029c8 <StopJoin+0x80>)
 80029be:	f00e fd47 	bl	8011450 <UTIL_TIMER_Start>
 80029c2:	e7e1      	b.n	8002988 <StopJoin+0x40>
 80029c4:	48000400 	.word	0x48000400
 80029c8:	20000660 	.word	0x20000660
 80029cc:	08011d68 	.word	0x08011d68
 80029d0:	20000648 	.word	0x20000648
 80029d4:	08011d88 	.word	0x08011d88
 80029d8:	20000070 	.word	0x20000070
 80029dc:	08011d9c 	.word	0x08011d9c
 80029e0:	2000000c 	.word	0x2000000c

080029e4 <StoreContext>:
{
 80029e4:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 80029e6:	f005 fad5 	bl	8007f94 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 80029ea:	f110 0f08 	cmn.w	r0, #8
 80029ee:	d003      	beq.n	80029f8 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 80029f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80029f4:	d007      	beq.n	8002a06 <StoreContext+0x22>
}
 80029f6:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 80029f8:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <StoreContext+0x30>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	4611      	mov	r1, r2
 80029fe:	2002      	movs	r0, #2
 8002a00:	f00e f97a 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
 8002a04:	e7f7      	b.n	80029f6 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8002a06:	4b04      	ldr	r3, [pc, #16]	@ (8002a18 <StoreContext+0x34>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	f00e f973 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
}
 8002a12:	e7f0      	b.n	80029f6 <StoreContext+0x12>
 8002a14:	08011dbc 	.word	0x08011dbc
 8002a18:	08011dd4 	.word	0x08011dd4

08002a1c <SendTxData>:
{
 8002a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a1e:	b08d      	sub	sp, #52	@ 0x34
  uint8_t batteryLevel = GetBatteryLevel();
 8002a20:	f7ff f864 	bl	8001aec <GetBatteryLevel>
 8002a24:	4604      	mov	r4, r0
  if (LmHandlerIsBusy() == false)
 8002a26:	f004 fef9 	bl	800781c <LmHandlerIsBusy>
 8002a2a:	b190      	cbz	r0, 8002a52 <SendTxData+0x36>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002a2c:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8002a2e:	4c63      	ldr	r4, [pc, #396]	@ (8002bbc <SendTxData+0x1a0>)
 8002a30:	4620      	mov	r0, r4
 8002a32:	f00e fcb3 	bl	801139c <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002a36:	4b62      	ldr	r3, [pc, #392]	@ (8002bc0 <SendTxData+0x1a4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	429d      	cmp	r5, r3
 8002a3e:	bf38      	it	cc
 8002a40:	4619      	movcc	r1, r3
 8002a42:	4620      	mov	r0, r4
 8002a44:	f00e fd4a 	bl	80114dc <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f00e fd01 	bl	8011450 <UTIL_TIMER_Start>
}
 8002a4e:	b00d      	add	sp, #52	@ 0x34
 8002a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EnvSensors_Read(&sensor_data);
 8002a52:	a803      	add	r0, sp, #12
 8002a54:	f7ff f976 	bl	8001d44 <EnvSensors_Read>
    APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8002a58:	9400      	str	r4, [sp, #0]
 8002a5a:	4b5a      	ldr	r3, [pc, #360]	@ (8002bc4 <SendTxData+0x1a8>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	2100      	movs	r1, #0
 8002a60:	2002      	movs	r0, #2
 8002a62:	f00e f949 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 8002a66:	9804      	ldr	r0, [sp, #16]
 8002a68:	f7fe f858 	bl	8000b1c <__aeabi_f2iz>
 8002a6c:	b200      	sxth	r0, r0
 8002a6e:	9000      	str	r0, [sp, #0]
 8002a70:	4b55      	ldr	r3, [pc, #340]	@ (8002bc8 <SendTxData+0x1ac>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	2100      	movs	r1, #0
 8002a76:	2002      	movs	r0, #2
 8002a78:	f00e f93e 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "H2O: %d\r\n", (int16_t) sensor_data.h2o);		//DP: report h2o to console.
 8002a7c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002a7e:	f7fe f84d 	bl	8000b1c <__aeabi_f2iz>
 8002a82:	b200      	sxth	r0, r0
 8002a84:	9000      	str	r0, [sp, #0]
 8002a86:	4b51      	ldr	r3, [pc, #324]	@ (8002bcc <SendTxData+0x1b0>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	2002      	movs	r0, #2
 8002a8e:	f00e f933 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
    AppData.Port = LORAWAN_USER_APP_PORT;
 8002a92:	4c4f      	ldr	r4, [pc, #316]	@ (8002bd0 <SendTxData+0x1b4>)
 8002a94:	2302      	movs	r3, #2
 8002a96:	7023      	strb	r3, [r4, #0]
    humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8002a98:	494e      	ldr	r1, [pc, #312]	@ (8002bd4 <SendTxData+0x1b8>)
 8002a9a:	9805      	ldr	r0, [sp, #20]
 8002a9c:	f7fd feee 	bl	800087c <__aeabi_fmul>
 8002aa0:	f7fe f862 	bl	8000b68 <__aeabi_f2uiz>
 8002aa4:	b285      	uxth	r5, r0
    temperature = (int16_t)(sensor_data.temperature);
 8002aa6:	9804      	ldr	r0, [sp, #16]
 8002aa8:	f7fe f838 	bl	8000b1c <__aeabi_f2iz>
 8002aac:	b207      	sxth	r7, r0
    pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 8002aae:	494a      	ldr	r1, [pc, #296]	@ (8002bd8 <SendTxData+0x1bc>)
 8002ab0:	9803      	ldr	r0, [sp, #12]
 8002ab2:	f7fd fee3 	bl	800087c <__aeabi_fmul>
 8002ab6:	4947      	ldr	r1, [pc, #284]	@ (8002bd4 <SendTxData+0x1b8>)
 8002ab8:	f7fd ff94 	bl	80009e4 <__aeabi_fdiv>
 8002abc:	f7fe f854 	bl	8000b68 <__aeabi_f2uiz>
 8002ac0:	b286      	uxth	r6, r0
    h2o = (uint16_t)(sensor_data.h2o);			//DP: added - can do scaling here.
 8002ac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ac4:	f7fe f850 	bl	8000b68 <__aeabi_f2uiz>
    AppData.Buffer[i++] = AppLedStateOn;
 8002ac8:	6863      	ldr	r3, [r4, #4]
 8002aca:	4a44      	ldr	r2, [pc, #272]	@ (8002bdc <SendTxData+0x1c0>)
 8002acc:	7812      	ldrb	r2, [r2, #0]
 8002ace:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8002ad0:	6863      	ldr	r3, [r4, #4]
 8002ad2:	0a32      	lsrs	r2, r6, #8
 8002ad4:	705a      	strb	r2, [r3, #1]
    AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8002ad6:	6863      	ldr	r3, [r4, #4]
 8002ad8:	709e      	strb	r6, [r3, #2]
    AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8002ada:	6863      	ldr	r3, [r4, #4]
 8002adc:	70df      	strb	r7, [r3, #3]
    AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8002ade:	6863      	ldr	r3, [r4, #4]
 8002ae0:	0a2a      	lsrs	r2, r5, #8
 8002ae2:	711a      	strb	r2, [r3, #4]
    AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8002ae4:	6863      	ldr	r3, [r4, #4]
 8002ae6:	715d      	strb	r5, [r3, #5]
    AppData.Buffer[i++] = (uint8_t)((h2o >> 8) & 0xFF);
 8002ae8:	6863      	ldr	r3, [r4, #4]
 8002aea:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8002aee:	719a      	strb	r2, [r3, #6]
    AppData.Buffer[i++] = (uint8_t)(h2o & 0xFF);
 8002af0:	6863      	ldr	r3, [r4, #4]
 8002af2:	71d8      	strb	r0, [r3, #7]
    if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8002af4:	4b3a      	ldr	r3, [pc, #232]	@ (8002be0 <SendTxData+0x1c4>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d002      	beq.n	8002b02 <SendTxData+0xe6>
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d000      	beq.n	8002b02 <SendTxData+0xe6>
        || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8002b00:	b9c3      	cbnz	r3, 8002b34 <SendTxData+0x118>
      AppData.Buffer[i++] = 0;
 8002b02:	4b33      	ldr	r3, [pc, #204]	@ (8002bd0 <SendTxData+0x1b4>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	721a      	strb	r2, [r3, #8]
      AppData.Buffer[i++] = 0;
 8002b0a:	725a      	strb	r2, [r3, #9]
      AppData.Buffer[i++] = 0;
 8002b0c:	729a      	strb	r2, [r3, #10]
      AppData.Buffer[i++] = 0;
 8002b0e:	72da      	strb	r2, [r3, #11]
 8002b10:	220c      	movs	r2, #12
    AppData.BufferSize = i;
 8002b12:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd0 <SendTxData+0x1b4>)
 8002b14:	705a      	strb	r2, [r3, #1]
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002b16:	4b33      	ldr	r3, [pc, #204]	@ (8002be4 <SendTxData+0x1c8>)
 8002b18:	7a5b      	ldrb	r3, [r3, #9]
 8002b1a:	bb33      	cbnz	r3, 8002b6a <SendTxData+0x14e>
    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4b30      	ldr	r3, [pc, #192]	@ (8002be0 <SendTxData+0x1c4>)
 8002b20:	78d9      	ldrb	r1, [r3, #3]
 8002b22:	482b      	ldr	r0, [pc, #172]	@ (8002bd0 <SendTxData+0x1b4>)
 8002b24:	f004 fe90 	bl	8007848 <LmHandlerSend>
    if (LORAMAC_HANDLER_SUCCESS == status)
 8002b28:	b368      	cbz	r0, 8002b86 <SendTxData+0x16a>
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002b2a:	f110 0f06 	cmn.w	r0, #6
 8002b2e:	d032      	beq.n	8002b96 <SendTxData+0x17a>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002b30:	2500      	movs	r5, #0
 8002b32:	e77c      	b.n	8002a2e <SendTxData+0x12>
      latitude = sensor_data.latitude;
 8002b34:	9d06      	ldr	r5, [sp, #24]
      longitude = sensor_data.longitude;
 8002b36:	9c07      	ldr	r4, [sp, #28]
      AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002b38:	4e25      	ldr	r6, [pc, #148]	@ (8002bd0 <SendTxData+0x1b4>)
 8002b3a:	6877      	ldr	r7, [r6, #4]
 8002b3c:	f7fe ffd6 	bl	8001aec <GetBatteryLevel>
 8002b40:	7238      	strb	r0, [r7, #8]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8002b42:	6873      	ldr	r3, [r6, #4]
 8002b44:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8002b48:	725a      	strb	r2, [r3, #9]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8002b4a:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8002b4e:	729a      	strb	r2, [r3, #10]
      AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8002b50:	72dd      	strb	r5, [r3, #11]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8002b52:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8002b56:	731a      	strb	r2, [r3, #12]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002b58:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8002b5c:	735a      	strb	r2, [r3, #13]
      AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8002b5e:	739c      	strb	r4, [r3, #14]
      AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8002b60:	2200      	movs	r2, #0
 8002b62:	73da      	strb	r2, [r3, #15]
      AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8002b64:	741a      	strb	r2, [r3, #16]
 8002b66:	2211      	movs	r2, #17
 8002b68:	e7d3      	b.n	8002b12 <SendTxData+0xf6>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002b6a:	f004 fe45 	bl	80077f8 <LmHandlerJoinStatus>
 8002b6e:	2801      	cmp	r0, #1
 8002b70:	d1d4      	bne.n	8002b1c <SendTxData+0x100>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002b72:	481c      	ldr	r0, [pc, #112]	@ (8002be4 <SendTxData+0x1c8>)
 8002b74:	f00e fc12 	bl	801139c <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002b7e:	481a      	ldr	r0, [pc, #104]	@ (8002be8 <SendTxData+0x1cc>)
 8002b80:	f001 fdac 	bl	80046dc <HAL_GPIO_WritePin>
 8002b84:	e7ca      	b.n	8002b1c <SendTxData+0x100>
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002b86:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <SendTxData+0x1d0>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	f00e f8b3 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002b92:	2500      	movs	r5, #0
 8002b94:	e74b      	b.n	8002a2e <SendTxData+0x12>
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002b96:	f004 fe29 	bl	80077ec <LmHandlerGetDutyCycleWaitTime>
      if (nextTxIn > 0)
 8002b9a:	4605      	mov	r5, r0
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	f43f af46 	beq.w	8002a2e <SendTxData+0x12>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002ba2:	4b13      	ldr	r3, [pc, #76]	@ (8002bf0 <SendTxData+0x1d4>)
 8002ba4:	fba3 2300 	umull	r2, r3, r3, r0
 8002ba8:	099b      	lsrs	r3, r3, #6
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <SendTxData+0x1d8>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f00e f8a0 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
 8002bb8:	e739      	b.n	8002a2e <SendTxData+0x12>
 8002bba:	bf00      	nop
 8002bbc:	20000660 	.word	0x20000660
 8002bc0:	20000008 	.word	0x20000008
 8002bc4:	08011dec 	.word	0x08011dec
 8002bc8:	08011df8 	.word	0x08011df8
 8002bcc:	08011e04 	.word	0x08011e04
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	41200000 	.word	0x41200000
 8002bd8:	42c80000 	.word	0x42c80000
 8002bdc:	20000550 	.word	0x20000550
 8002be0:	2000000c 	.word	0x2000000c
 8002be4:	20000508 	.word	0x20000508
 8002be8:	48000400 	.word	0x48000400
 8002bec:	08011e10 	.word	0x08011e10
 8002bf0:	10624dd3 	.word	0x10624dd3
 8002bf4:	08011e20 	.word	0x08011e20

08002bf8 <OnJoinTimerLedEvent>:
{
 8002bf8:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8002bfa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002bfe:	4802      	ldr	r0, [pc, #8]	@ (8002c08 <OnJoinTimerLedEvent+0x10>)
 8002c00:	f001 fd71 	bl	80046e6 <HAL_GPIO_TogglePin>
}
 8002c04:	bd08      	pop	{r3, pc}
 8002c06:	bf00      	nop
 8002c08:	48000400 	.word	0x48000400

08002c0c <LoRaWAN_Init>:
{
 8002c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0e:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 8002c10:	2400      	movs	r4, #0
 8002c12:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002c14:	9402      	str	r4, [sp, #8]
 8002c16:	2703      	movs	r7, #3
 8002c18:	9701      	str	r7, [sp, #4]
 8002c1a:	2601      	movs	r6, #1
 8002c1c:	9600      	str	r6, [sp, #0]
 8002c1e:	4b4f      	ldr	r3, [pc, #316]	@ (8002d5c <LoRaWAN_Init+0x150>)
 8002c20:	4622      	mov	r2, r4
 8002c22:	4621      	mov	r1, r4
 8002c24:	2002      	movs	r0, #2
 8002c26:	f00e f867 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002c2a:	9402      	str	r4, [sp, #8]
 8002c2c:	2305      	movs	r3, #5
 8002c2e:	9301      	str	r3, [sp, #4]
 8002c30:	2502      	movs	r5, #2
 8002c32:	9500      	str	r5, [sp, #0]
 8002c34:	4b4a      	ldr	r3, [pc, #296]	@ (8002d60 <LoRaWAN_Init+0x154>)
 8002c36:	4622      	mov	r2, r4
 8002c38:	4621      	mov	r1, r4
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f00e f85c 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002c40:	9402      	str	r4, [sp, #8]
 8002c42:	9701      	str	r7, [sp, #4]
 8002c44:	9600      	str	r6, [sp, #0]
 8002c46:	4b47      	ldr	r3, [pc, #284]	@ (8002d64 <LoRaWAN_Init+0x158>)
 8002c48:	4622      	mov	r2, r4
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	f00e f853 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002c52:	a905      	add	r1, sp, #20
 8002c54:	4620      	mov	r0, r4
 8002c56:	f005 f8f3 	bl	8007e40 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002c5a:	9b05      	ldr	r3, [sp, #20]
 8002c5c:	0e1a      	lsrs	r2, r3, #24
 8002c5e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002c62:	9102      	str	r1, [sp, #8]
 8002c64:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002c68:	9301      	str	r3, [sp, #4]
 8002c6a:	9200      	str	r2, [sp, #0]
 8002c6c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d68 <LoRaWAN_Init+0x15c>)
 8002c6e:	4622      	mov	r2, r4
 8002c70:	4621      	mov	r1, r4
 8002c72:	4628      	mov	r0, r5
 8002c74:	f00e f840 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002c78:	a905      	add	r1, sp, #20
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	f005 f8e0 	bl	8007e40 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002c80:	9b05      	ldr	r3, [sp, #20]
 8002c82:	0e1a      	lsrs	r2, r3, #24
 8002c84:	b2d9      	uxtb	r1, r3
 8002c86:	9103      	str	r1, [sp, #12]
 8002c88:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002c8c:	9102      	str	r1, [sp, #8]
 8002c8e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	9200      	str	r2, [sp, #0]
 8002c96:	4b35      	ldr	r3, [pc, #212]	@ (8002d6c <LoRaWAN_Init+0x160>)
 8002c98:	4622      	mov	r2, r4
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	f00e f82b 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002ca2:	9400      	str	r4, [sp, #0]
 8002ca4:	4b32      	ldr	r3, [pc, #200]	@ (8002d70 <LoRaWAN_Init+0x164>)
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002cac:	4831      	ldr	r0, [pc, #196]	@ (8002d74 <LoRaWAN_Init+0x168>)
 8002cae:	f00e fb17 	bl	80112e0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002cb2:	9400      	str	r4, [sp, #0]
 8002cb4:	4b30      	ldr	r3, [pc, #192]	@ (8002d78 <LoRaWAN_Init+0x16c>)
 8002cb6:	4622      	mov	r2, r4
 8002cb8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002cbc:	482f      	ldr	r0, [pc, #188]	@ (8002d7c <LoRaWAN_Init+0x170>)
 8002cbe:	f00e fb0f 	bl	80112e0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002cc2:	9400      	str	r4, [sp, #0]
 8002cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8002d80 <LoRaWAN_Init+0x174>)
 8002cc6:	4632      	mov	r2, r6
 8002cc8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002ccc:	482d      	ldr	r0, [pc, #180]	@ (8002d84 <LoRaWAN_Init+0x178>)
 8002cce:	f00e fb07 	bl	80112e0 <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f7fe fbfe 	bl	80014d4 <FLASH_IF_Init>
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	d13b      	bne.n	8002d54 <LoRaWAN_Init+0x148>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8002cdc:	2400      	movs	r4, #0
 8002cde:	9400      	str	r4, [sp, #0]
 8002ce0:	4b29      	ldr	r3, [pc, #164]	@ (8002d88 <LoRaWAN_Init+0x17c>)
 8002ce2:	4622      	mov	r2, r4
 8002ce4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002ce8:	4828      	ldr	r0, [pc, #160]	@ (8002d8c <LoRaWAN_Init+0x180>)
 8002cea:	f00e faf9 	bl	80112e0 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8002cee:	4a28      	ldr	r2, [pc, #160]	@ (8002d90 <LoRaWAN_Init+0x184>)
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	f00e f9f4 	bl	80110e0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002cf8:	4a26      	ldr	r2, [pc, #152]	@ (8002d94 <LoRaWAN_Init+0x188>)
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	2002      	movs	r0, #2
 8002cfe:	f00e f9ef 	bl	80110e0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8002d02:	4a25      	ldr	r2, [pc, #148]	@ (8002d98 <LoRaWAN_Init+0x18c>)
 8002d04:	4621      	mov	r1, r4
 8002d06:	2004      	movs	r0, #4
 8002d08:	f00e f9ea 	bl	80110e0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8002d0c:	4a23      	ldr	r2, [pc, #140]	@ (8002d9c <LoRaWAN_Init+0x190>)
 8002d0e:	4621      	mov	r1, r4
 8002d10:	2008      	movs	r0, #8
 8002d12:	f00e f9e5 	bl	80110e0 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8002d16:	f000 f861 	bl	8002ddc <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002d1a:	4921      	ldr	r1, [pc, #132]	@ (8002da0 <LoRaWAN_Init+0x194>)
 8002d1c:	4821      	ldr	r0, [pc, #132]	@ (8002da4 <LoRaWAN_Init+0x198>)
 8002d1e:	f005 f843 	bl	8007da8 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002d22:	4821      	ldr	r0, [pc, #132]	@ (8002da8 <LoRaWAN_Init+0x19c>)
 8002d24:	f004 ff1a 	bl	8007b5c <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002d28:	4816      	ldr	r0, [pc, #88]	@ (8002d84 <LoRaWAN_Init+0x178>)
 8002d2a:	f00e fb91 	bl	8011450 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4b1e      	ldr	r3, [pc, #120]	@ (8002dac <LoRaWAN_Init+0x1a0>)
 8002d32:	7818      	ldrb	r0, [r3, #0]
 8002d34:	f004 fcce 	bl	80076d4 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002d38:	4d1d      	ldr	r5, [pc, #116]	@ (8002db0 <LoRaWAN_Init+0x1a4>)
 8002d3a:	9400      	str	r4, [sp, #0]
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002db4 <LoRaWAN_Init+0x1a8>)
 8002d3e:	4622      	mov	r2, r4
 8002d40:	491d      	ldr	r1, [pc, #116]	@ (8002db8 <LoRaWAN_Init+0x1ac>)
 8002d42:	6809      	ldr	r1, [r1, #0]
 8002d44:	4628      	mov	r0, r5
 8002d46:	f00e facb 	bl	80112e0 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	f00e fb80 	bl	8011450 <UTIL_TIMER_Start>
}
 8002d50:	b007      	add	sp, #28
 8002d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8002d54:	f7fe fce6 	bl	8001724 <Error_Handler>
 8002d58:	e7c0      	b.n	8002cdc <LoRaWAN_Init+0xd0>
 8002d5a:	bf00      	nop
 8002d5c:	08011e40 	.word	0x08011e40
 8002d60:	08011e64 	.word	0x08011e64
 8002d64:	08011e88 	.word	0x08011e88
 8002d68:	08011eac 	.word	0x08011eac
 8002d6c:	08011ed0 	.word	0x08011ed0
 8002d70:	08002801 	.word	0x08002801
 8002d74:	20000538 	.word	0x20000538
 8002d78:	080027ed 	.word	0x080027ed
 8002d7c:	20000520 	.word	0x20000520
 8002d80:	08002bf9 	.word	0x08002bf9
 8002d84:	20000508 	.word	0x20000508
 8002d88:	080027a9 	.word	0x080027a9
 8002d8c:	20000648 	.word	0x20000648
 8002d90:	08007955 	.word	0x08007955
 8002d94:	08002a1d 	.word	0x08002a1d
 8002d98:	080029e5 	.word	0x080029e5
 8002d9c:	08002949 	.word	0x08002949
 8002da0:	01030000 	.word	0x01030000
 8002da4:	20000024 	.word	0x20000024
 8002da8:	2000000c 	.word	0x2000000c
 8002dac:	20000070 	.word	0x20000070
 8002db0:	20000660 	.word	0x20000660
 8002db4:	080025f5 	.word	0x080025f5
 8002db8:	20000008 	.word	0x20000008

08002dbc <HAL_GPIO_EXTI_Callback>:
{
 8002dbc:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 8002dbe:	2802      	cmp	r0, #2
 8002dc0:	d002      	beq.n	8002dc8 <HAL_GPIO_EXTI_Callback+0xc>
 8002dc2:	2840      	cmp	r0, #64	@ 0x40
 8002dc4:	d005      	beq.n	8002dd2 <HAL_GPIO_EXTI_Callback+0x16>
}
 8002dc6:	bd08      	pop	{r3, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2008      	movs	r0, #8
 8002dcc:	f00e f8be 	bl	8010f4c <UTIL_SEQ_SetTask>
      break;
 8002dd0:	e7f9      	b.n	8002dc6 <HAL_GPIO_EXTI_Callback+0xa>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	2004      	movs	r0, #4
 8002dd6:	f00e f8b9 	bl	8010f4c <UTIL_SEQ_SetTask>
}
 8002dda:	e7f4      	b.n	8002dc6 <HAL_GPIO_EXTI_Callback+0xa>

08002ddc <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 8002ddc:	4b05      	ldr	r3, [pc, #20]	@ (8002df4 <LoraInfo_Init+0x18>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002de2:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002de4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002de6:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN470 */
#ifdef  REGION_CN779
  loraInfo.Region |= (1 << LORAMAC_REGION_CN779);
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
 8002de8:	2210      	movs	r2, #16
 8002dea:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8002dec:	2201      	movs	r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20000678 	.word	0x20000678

08002df8 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002df8:	4800      	ldr	r0, [pc, #0]	@ (8002dfc <LoraInfo_GetPtr+0x4>)
 8002dfa:	4770      	bx	lr
 8002dfc:	20000678 	.word	0x20000678

08002e00 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002e00:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002e02:	f000 f83f 	bl	8002e84 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002e06:	bd08      	pop	{r3, pc}

08002e08 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002e08:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002e0a:	f000 f87d 	bl	8002f08 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002e0e:	bd08      	pop	{r3, pc}

08002e10 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002e10:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002e12:	f000 f8c7 	bl	8002fa4 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002e16:	bd08      	pop	{r3, pc}

08002e18 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002e18:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002e1a:	f000 f8c5 	bl	8002fa8 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002e1e:	bd08      	pop	{r3, pc}

08002e20 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002e20:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002e22:	f000 f8c3 	bl	8002fac <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002e26:	bd08      	pop	{r3, pc}

08002e28 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002e28:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002e2a:	f000 f8c1 	bl	8002fb0 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002e2e:	bd08      	pop	{r3, pc}

08002e30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e30:	480d      	ldr	r0, [pc, #52]	@ (8002e68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e34:	f000 f8c1 	bl	8002fba <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e38:	480c      	ldr	r0, [pc, #48]	@ (8002e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002e3a:	490d      	ldr	r1, [pc, #52]	@ (8002e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e74 <LoopForever+0xe>)
  movs r3, #0
 8002e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e40:	e002      	b.n	8002e48 <LoopCopyDataInit>

08002e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e46:	3304      	adds	r3, #4

08002e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e4c:	d3f9      	bcc.n	8002e42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e50:	4c0a      	ldr	r4, [pc, #40]	@ (8002e7c <LoopForever+0x16>)
  movs r3, #0
 8002e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e54:	e001      	b.n	8002e5a <LoopFillZerobss>

08002e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e58:	3204      	adds	r2, #4

08002e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e5c:	d3fb      	bcc.n	8002e56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e5e:	f00e fd07 	bl	8011870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e62:	f7fe fca8 	bl	80017b6 <main>

08002e66 <LoopForever>:

LoopForever:
    b LoopForever
 8002e66:	e7fe      	b.n	8002e66 <LoopForever>
  ldr   r0, =_estack
 8002e68:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e70:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8002e74:	08012890 	.word	0x08012890
  ldr r2, =_sbss
 8002e78:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8002e7c:	20001850 	.word	0x20001850

08002e80 <AES_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e80:	e7fe      	b.n	8002e80 <AES_IRQHandler>
	...

08002e84 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e88:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002e8a:	2400      	movs	r4, #0
 8002e8c:	9401      	str	r4, [sp, #4]
 8002e8e:	9402      	str	r4, [sp, #8]
 8002e90:	9403      	str	r4, [sp, #12]
 8002e92:	9404      	str	r4, [sp, #16]
 8002e94:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e9c:	f042 0204 	orr.w	r2, r2, #4
 8002ea0:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002eaa:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002eac:	2710      	movs	r7, #16
 8002eae:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002eb8:	4d12      	ldr	r5, [pc, #72]	@ (8002f04 <BSP_RADIO_Init+0x80>)
 8002eba:	a901      	add	r1, sp, #4
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	f001 fabd 	bl	800443c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002ec2:	f04f 0820 	mov.w	r8, #32
 8002ec6:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002eca:	a901      	add	r1, sp, #4
 8002ecc:	4628      	mov	r0, r5
 8002ece:	f001 fab5 	bl	800443c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8002ed2:	2608      	movs	r6, #8
 8002ed4:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8002ed6:	a901      	add	r1, sp, #4
 8002ed8:	4628      	mov	r0, r5
 8002eda:	f001 faaf 	bl	800443c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002ede:	4622      	mov	r2, r4
 8002ee0:	4641      	mov	r1, r8
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	f001 fbfa 	bl	80046dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002ee8:	4622      	mov	r2, r4
 8002eea:	4639      	mov	r1, r7
 8002eec:	4628      	mov	r0, r5
 8002eee:	f001 fbf5 	bl	80046dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002ef2:	4622      	mov	r2, r4
 8002ef4:	4631      	mov	r1, r6
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	f001 fbf0 	bl	80046dc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002efc:	4620      	mov	r0, r4
 8002efe:	b006      	add	sp, #24
 8002f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f04:	48000800 	.word	0x48000800

08002f08 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002f08:	b510      	push	{r4, lr}
  switch (Config)
 8002f0a:	2803      	cmp	r0, #3
 8002f0c:	d813      	bhi.n	8002f36 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002f0e:	e8df f000 	tbb	[pc, r0]
 8002f12:	1402      	.short	0x1402
 8002f14:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002f16:	4c22      	ldr	r4, [pc, #136]	@ (8002fa0 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2108      	movs	r1, #8
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f001 fbdd 	bl	80046dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2110      	movs	r1, #16
 8002f26:	4620      	mov	r0, r4
 8002f28:	f001 fbd8 	bl	80046dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2120      	movs	r1, #32
 8002f30:	4620      	mov	r0, r4
 8002f32:	f001 fbd3 	bl	80046dc <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8002f36:	2000      	movs	r0, #0
 8002f38:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002f3a:	4c19      	ldr	r4, [pc, #100]	@ (8002fa0 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	2108      	movs	r1, #8
 8002f40:	4620      	mov	r0, r4
 8002f42:	f001 fbcb 	bl	80046dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002f46:	2201      	movs	r2, #1
 8002f48:	2110      	movs	r1, #16
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f001 fbc6 	bl	80046dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002f50:	2200      	movs	r2, #0
 8002f52:	2120      	movs	r1, #32
 8002f54:	4620      	mov	r0, r4
 8002f56:	f001 fbc1 	bl	80046dc <HAL_GPIO_WritePin>
      break;
 8002f5a:	e7ec      	b.n	8002f36 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002f5c:	4c10      	ldr	r4, [pc, #64]	@ (8002fa0 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	2108      	movs	r1, #8
 8002f62:	4620      	mov	r0, r4
 8002f64:	f001 fbba 	bl	80046dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002f68:	2201      	movs	r2, #1
 8002f6a:	2110      	movs	r1, #16
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f001 fbb5 	bl	80046dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002f72:	2201      	movs	r2, #1
 8002f74:	2120      	movs	r1, #32
 8002f76:	4620      	mov	r0, r4
 8002f78:	f001 fbb0 	bl	80046dc <HAL_GPIO_WritePin>
      break;
 8002f7c:	e7db      	b.n	8002f36 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002f7e:	4c08      	ldr	r4, [pc, #32]	@ (8002fa0 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	2108      	movs	r1, #8
 8002f84:	4620      	mov	r0, r4
 8002f86:	f001 fba9 	bl	80046dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2110      	movs	r1, #16
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f001 fba4 	bl	80046dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002f94:	2201      	movs	r2, #1
 8002f96:	2120      	movs	r1, #32
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f001 fb9f 	bl	80046dc <HAL_GPIO_WritePin>
      break;
 8002f9e:	e7ca      	b.n	8002f36 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002fa0:	48000800 	.word	0x48000800

08002fa4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	4770      	bx	lr

08002fa8 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8002fa8:	2001      	movs	r0, #1
 8002faa:	4770      	bx	lr

08002fac <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002fac:	2001      	movs	r0, #1
 8002fae:	4770      	bx	lr

08002fb0 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002fb0:	b908      	cbnz	r0, 8002fb6 <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002fb2:	200f      	movs	r0, #15
 8002fb4:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002fb6:	2016      	movs	r0, #22
  }

  return ret;
}
 8002fb8:	4770      	bx	lr

08002fba <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002fba:	4770      	bx	lr

08002fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fbc:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fbe:	2003      	movs	r0, #3
 8002fc0:	f000 fe34 	bl	8003c2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002fc4:	f001 fd30 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 8002fc8:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <HAL_Init+0x28>)
 8002fca:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fcc:	200f      	movs	r0, #15
 8002fce:	f7fe fe0f 	bl	8001bf0 <HAL_InitTick>
 8002fd2:	b110      	cbz	r0, 8002fda <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002fd4:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	bd10      	pop	{r4, pc}
 8002fda:	4604      	mov	r4, r0
    HAL_MspInit();
 8002fdc:	f7fe fc98 	bl	8001910 <HAL_MspInit>
 8002fe0:	e7f9      	b.n	8002fd6 <HAL_Init+0x1a>
 8002fe2:	bf00      	nop
 8002fe4:	20000074 	.word	0x20000074

08002fe8 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002fe8:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002fec:	6913      	ldr	r3, [r2, #16]
 8002fee:	f023 0302 	bic.w	r3, r3, #2
 8002ff2:	6113      	str	r3, [r2, #16]
}
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002ff6:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002ffa:	6913      	ldr	r3, [r2, #16]
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	6113      	str	r3, [r2, #16]
}
 8003002:	4770      	bx	lr

08003004 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8003004:	4b01      	ldr	r3, [pc, #4]	@ (800300c <HAL_GetUIDw0+0x8>)
 8003006:	f8d3 0590 	ldr.w	r0, [r3, #1424]	@ 0x590
 800300a:	4770      	bx	lr
 800300c:	1fff7000 	.word	0x1fff7000

08003010 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8003010:	4b01      	ldr	r3, [pc, #4]	@ (8003018 <HAL_GetUIDw1+0x8>)
 8003012:	f8d3 0594 	ldr.w	r0, [r3, #1428]	@ 0x594
 8003016:	4770      	bx	lr
 8003018:	1fff7000 	.word	0x1fff7000

0800301c <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 800301c:	4b01      	ldr	r3, [pc, #4]	@ (8003024 <HAL_GetUIDw2+0x8>)
 800301e:	f8d3 0598 	ldr.w	r0, [r3, #1432]	@ 0x598
 8003022:	4770      	bx	lr
 8003024:	1fff7000 	.word	0x1fff7000

08003028 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003028:	4a02      	ldr	r2, [pc, #8]	@ (8003034 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800302a:	6853      	ldr	r3, [r2, #4]
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8003032:	4770      	bx	lr
 8003034:	e0042000 	.word	0xe0042000

08003038 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003038:	4a02      	ldr	r2, [pc, #8]	@ (8003044 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800303a:	6853      	ldr	r3, [r2, #4]
 800303c:	f043 0302 	orr.w	r3, r3, #2
 8003040:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8003042:	4770      	bx	lr
 8003044:	e0042000 	.word	0xe0042000

08003048 <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003048:	4a02      	ldr	r2, [pc, #8]	@ (8003054 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 800304a:	6853      	ldr	r3, [r2, #4]
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8003052:	4770      	bx	lr
 8003054:	e0042000 	.word	0xe0042000

08003058 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003058:	b530      	push	{r4, r5, lr}
 800305a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800305c:	2300      	movs	r3, #0
 800305e:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003060:	2800      	cmp	r0, #0
 8003062:	f000 8106 	beq.w	8003272 <HAL_ADC_Init+0x21a>
 8003066:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003068:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800306a:	b1bb      	cbz	r3, 800309c <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800306c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800306e:	6893      	ldr	r3, [r2, #8]
 8003070:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003074:	d11f      	bne.n	80030b6 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8003076:	6893      	ldr	r3, [r2, #8]
 8003078:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800307c:	f023 0317 	bic.w	r3, r3, #23
 8003080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003084:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003086:	4b7c      	ldr	r3, [pc, #496]	@ (8003278 <HAL_ADC_Init+0x220>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	099b      	lsrs	r3, r3, #6
 800308c:	4a7b      	ldr	r2, [pc, #492]	@ (800327c <HAL_ADC_Init+0x224>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	099b      	lsrs	r3, r3, #6
 8003094:	3301      	adds	r3, #1
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800309a:	e009      	b.n	80030b0 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 800309c:	f7fd ff28 	bl	8000ef0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80030a0:	2300      	movs	r3, #0
 80030a2:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80030a4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80030a8:	e7e0      	b.n	800306c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80030aa:	9b01      	ldr	r3, [sp, #4]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80030b0:	9b01      	ldr	r3, [sp, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f9      	bne.n	80030aa <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030b6:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030b8:	6893      	ldr	r3, [r2, #8]
 80030ba:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80030be:	f040 809a 	bne.w	80031f6 <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80030c4:	f043 0310 	orr.w	r3, r3, #16
 80030c8:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ca:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80030d2:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030d4:	6893      	ldr	r3, [r2, #8]
 80030d6:	f013 0304 	ands.w	r3, r3, #4
 80030da:	d000      	beq.n	80030de <HAL_ADC_Init+0x86>
 80030dc:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030de:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80030e0:	f011 0f10 	tst.w	r1, #16
 80030e4:	f040 80be 	bne.w	8003264 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f040 80bb 	bne.w	8003264 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80030f0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80030f4:	f043 0302 	orr.w	r3, r3, #2
 80030f8:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030fa:	6893      	ldr	r3, [r2, #8]
 80030fc:	f013 0f01 	tst.w	r3, #1
 8003100:	d14f      	bne.n	80031a2 <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003102:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003104:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003106:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800310a:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800310c:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003110:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003112:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003116:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003118:	b109      	cbz	r1, 800311e <HAL_ADC_Init+0xc6>
 800311a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800311e:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 8003120:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003122:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003124:	6921      	ldr	r1, [r4, #16]
 8003126:	2900      	cmp	r1, #0
 8003128:	db67      	blt.n	80031fa <HAL_ADC_Init+0x1a2>
 800312a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 800312e:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003130:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003134:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003138:	f894 1020 	ldrb.w	r1, [r4, #32]
 800313c:	2901      	cmp	r1, #1
 800313e:	d05f      	beq.n	8003200 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003140:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003142:	b121      	cbz	r1, 800314e <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003144:	f401 71e0 	and.w	r1, r1, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003148:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800314a:	4329      	orrs	r1, r5
 800314c:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800314e:	68d1      	ldr	r1, [r2, #12]
 8003150:	f421 31fe 	bic.w	r1, r1, #130048	@ 0x1fc00
 8003154:	f421 71ff 	bic.w	r1, r1, #510	@ 0x1fe
 8003158:	4319      	orrs	r1, r3
 800315a:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800315c:	6863      	ldr	r3, [r4, #4]
 800315e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003162:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003164:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003166:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 800316a:	2901      	cmp	r1, #1
 800316c:	d055      	beq.n	800321a <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800316e:	6821      	ldr	r1, [r4, #0]
 8003170:	690d      	ldr	r5, [r1, #16]
 8003172:	4b43      	ldr	r3, [pc, #268]	@ (8003280 <HAL_ADC_Init+0x228>)
 8003174:	402b      	ands	r3, r5
 8003176:	4313      	orrs	r3, r2
 8003178:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800317a:	6863      	ldr	r3, [r4, #4]
 800317c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003180:	d00f      	beq.n	80031a2 <HAL_ADC_Init+0x14a>
 8003182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003186:	d00c      	beq.n	80031a2 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003188:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800318c:	d009      	beq.n	80031a2 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800318e:	493d      	ldr	r1, [pc, #244]	@ (8003284 <HAL_ADC_Init+0x22c>)
 8003190:	f8d1 2708 	ldr.w	r2, [r1, #1800]	@ 0x708
 8003194:	f422 1270 	bic.w	r2, r2, #3932160	@ 0x3c0000
 8003198:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3708 	str.w	r3, [r1, #1800]	@ 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80031a2:	6821      	ldr	r1, [r4, #0]
 80031a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 80031a6:	694a      	ldr	r2, [r1, #20]
 80031a8:	f022 0207 	bic.w	r2, r2, #7
 80031ac:	4313      	orrs	r3, r2
 80031ae:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80031b0:	6822      	ldr	r2, [r4, #0]
 80031b2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80031b4:	6953      	ldr	r3, [r2, #20]
 80031b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ba:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80031be:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80031c0:	6923      	ldr	r3, [r4, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d133      	bne.n	800322e <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80031c6:	6822      	ldr	r2, [r4, #0]
 80031c8:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80031ca:	f063 030f 	orn	r3, r3, #15
 80031ce:	6293      	str	r3, [r2, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80031d0:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 80031d8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80031da:	429a      	cmp	r2, r3
 80031dc:	d039      	beq.n	8003252 <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80031e0:	f023 0312 	bic.w	r3, r3, #18
 80031e4:	f043 0310 	orr.w	r3, r3, #16
 80031e8:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ea:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80031f2:	2001      	movs	r0, #1
 80031f4:	e03b      	b.n	800326e <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f6:	2000      	movs	r0, #0
 80031f8:	e76c      	b.n	80030d4 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80031fa:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80031fe:	e796      	b.n	800312e <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003200:	b915      	cbnz	r5, 8003208 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003206:	e79b      	b.n	8003140 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003208:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800320a:	f041 0120 	orr.w	r1, r1, #32
 800320e:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003210:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003212:	f041 0101 	orr.w	r1, r1, #1
 8003216:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8003218:	e792      	b.n	8003140 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 800321a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800321c:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 800321e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003220:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8003222:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003224:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003226:	431a      	orrs	r2, r3
 8003228:	f042 0201 	orr.w	r2, r2, #1
 800322c:	e79f      	b.n	800316e <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800322e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003232:	d1cd      	bne.n	80031d0 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 8003234:	6821      	ldr	r1, [r4, #0]
 8003236:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8003238:	69e3      	ldr	r3, [r4, #28]
 800323a:	3b01      	subs	r3, #1
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	f003 031c 	and.w	r3, r3, #28
 8003242:	f06f 020f 	mvn.w	r2, #15
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800324c:	4313      	orrs	r3, r2
 800324e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003250:	e7be      	b.n	80031d0 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 8003252:	2300      	movs	r3, #0
 8003254:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003256:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003258:	f023 0303 	bic.w	r3, r3, #3
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003262:	e004      	b.n	800326e <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003264:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003266:	f043 0310 	orr.w	r3, r3, #16
 800326a:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800326c:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 800326e:	b003      	add	sp, #12
 8003270:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003272:	2001      	movs	r0, #1
 8003274:	e7fb      	b.n	800326e <HAL_ADC_Init+0x216>
 8003276:	bf00      	nop
 8003278:	20000074 	.word	0x20000074
 800327c:	053e2d63 	.word	0x053e2d63
 8003280:	1ffffc02 	.word	0x1ffffc02
 8003284:	40012000 	.word	0x40012000

08003288 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328a:	4604      	mov	r4, r0
 800328c:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800328e:	6946      	ldr	r6, [r0, #20]
 8003290:	2e08      	cmp	r6, #8
 8003292:	d005      	beq.n	80032a0 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003294:	6803      	ldr	r3, [r0, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f013 0f01 	tst.w	r3, #1
 800329c:	d11e      	bne.n	80032dc <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800329e:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80032a0:	f7fe fca8 	bl	8001bf4 <HAL_GetTick>
 80032a4:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4232      	tst	r2, r6
 80032ac:	d11c      	bne.n	80032e8 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80032ae:	f1b5 3fff 	cmp.w	r5, #4294967295
 80032b2:	d0f8      	beq.n	80032a6 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80032b4:	f7fe fc9e 	bl	8001bf4 <HAL_GetTick>
 80032b8:	1bc3      	subs	r3, r0, r7
 80032ba:	42ab      	cmp	r3, r5
 80032bc:	d801      	bhi.n	80032c2 <HAL_ADC_PollForConversion+0x3a>
 80032be:	2d00      	cmp	r5, #0
 80032c0:	d1f1      	bne.n	80032a6 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4233      	tst	r3, r6
 80032c8:	d1ed      	bne.n	80032a6 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80032cc:	f043 0304 	orr.w	r3, r3, #4
 80032d0:	65a3      	str	r3, [r4, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80032d2:	2300      	movs	r3, #0
 80032d4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

          return HAL_TIMEOUT;
 80032d8:	2003      	movs	r0, #3
 80032da:	e028      	b.n	800332e <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032dc:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80032de:	f043 0320 	orr.w	r3, r3, #32
 80032e2:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 80032e4:	2001      	movs	r0, #1
 80032e6:	e022      	b.n	800332e <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032e8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80032ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ee:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80032f6:	d115      	bne.n	8003324 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80032f8:	7ea2      	ldrb	r2, [r4, #26]
 80032fa:	b99a      	cbnz	r2, 8003324 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	f012 0f08 	tst.w	r2, #8
 8003302:	d00f      	beq.n	8003324 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	f012 0f04 	tst.w	r2, #4
 800330a:	d111      	bne.n	8003330 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	f022 020c 	bic.w	r2, r2, #12
 8003312:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003314:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003316:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	65a3      	str	r3, [r4, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003324:	7e20      	ldrb	r0, [r4, #24]
 8003326:	b960      	cbnz	r0, 8003342 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	220c      	movs	r2, #12
 800332c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800332e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003330:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003332:	f043 0320 	orr.w	r3, r3, #32
 8003336:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003338:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8003340:	e7f0      	b.n	8003324 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8003342:	2000      	movs	r0, #0
 8003344:	e7f3      	b.n	800332e <HAL_ADC_PollForConversion+0xa6>

08003346 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003346:	6803      	ldr	r3, [r0, #0]
 8003348:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 800334a:	4770      	bx	lr

0800334c <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800334c:	4770      	bx	lr

0800334e <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800334e:	4770      	bx	lr

08003350 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003350:	4770      	bx	lr

08003352 <HAL_ADC_IRQHandler>:
{
 8003352:	b570      	push	{r4, r5, r6, lr}
 8003354:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003356:	6803      	ldr	r3, [r0, #0]
 8003358:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800335a:	685d      	ldr	r5, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800335c:	f016 0f02 	tst.w	r6, #2
 8003360:	d010      	beq.n	8003384 <HAL_ADC_IRQHandler+0x32>
 8003362:	f015 0f02 	tst.w	r5, #2
 8003366:	d00d      	beq.n	8003384 <HAL_ADC_IRQHandler+0x32>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003368:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800336a:	f013 0f10 	tst.w	r3, #16
 800336e:	d103      	bne.n	8003378 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003370:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003372:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003376:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003378:	4620      	mov	r0, r4
 800337a:	f000 fc00 	bl	8003b7e <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	2202      	movs	r2, #2
 8003382:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003384:	f016 0f04 	tst.w	r6, #4
 8003388:	d002      	beq.n	8003390 <HAL_ADC_IRQHandler+0x3e>
 800338a:	f015 0f04 	tst.w	r5, #4
 800338e:	d105      	bne.n	800339c <HAL_ADC_IRQHandler+0x4a>
 8003390:	f016 0f08 	tst.w	r6, #8
 8003394:	d02b      	beq.n	80033ee <HAL_ADC_IRQHandler+0x9c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003396:	f015 0f08 	tst.w	r5, #8
 800339a:	d028      	beq.n	80033ee <HAL_ADC_IRQHandler+0x9c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800339c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800339e:	f013 0f10 	tst.w	r3, #16
 80033a2:	d103      	bne.n	80033ac <HAL_ADC_IRQHandler+0x5a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033aa:	65a3      	str	r3, [r4, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033ac:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80033b4:	d115      	bne.n	80033e2 <HAL_ADC_IRQHandler+0x90>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80033b6:	7ea2      	ldrb	r2, [r4, #26]
 80033b8:	b99a      	cbnz	r2, 80033e2 <HAL_ADC_IRQHandler+0x90>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	f012 0f08 	tst.w	r2, #8
 80033c0:	d00f      	beq.n	80033e2 <HAL_ADC_IRQHandler+0x90>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	f012 0f04 	tst.w	r2, #4
 80033c8:	d145      	bne.n	8003456 <HAL_ADC_IRQHandler+0x104>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	f022 020c 	bic.w	r2, r2, #12
 80033d0:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80033d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 80033e2:	4620      	mov	r0, r4
 80033e4:	f7ff ffb2 	bl	800334c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	220c      	movs	r2, #12
 80033ec:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80033ee:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80033f2:	d002      	beq.n	80033fa <HAL_ADC_IRQHandler+0xa8>
 80033f4:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80033f8:	d136      	bne.n	8003468 <HAL_ADC_IRQHandler+0x116>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80033fa:	f416 7f80 	tst.w	r6, #256	@ 0x100
 80033fe:	d002      	beq.n	8003406 <HAL_ADC_IRQHandler+0xb4>
 8003400:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8003404:	d13b      	bne.n	800347e <HAL_ADC_IRQHandler+0x12c>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003406:	f416 7f00 	tst.w	r6, #512	@ 0x200
 800340a:	d002      	beq.n	8003412 <HAL_ADC_IRQHandler+0xc0>
 800340c:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003410:	d141      	bne.n	8003496 <HAL_ADC_IRQHandler+0x144>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003412:	f016 0f10 	tst.w	r6, #16
 8003416:	d017      	beq.n	8003448 <HAL_ADC_IRQHandler+0xf6>
 8003418:	f015 0f10 	tst.w	r5, #16
 800341c:	d014      	beq.n	8003448 <HAL_ADC_IRQHandler+0xf6>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800341e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003420:	b123      	cbz	r3, 800342c <HAL_ADC_IRQHandler+0xda>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8003422:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f013 0f03 	tst.w	r3, #3
 800342a:	d00a      	beq.n	8003442 <HAL_ADC_IRQHandler+0xf0>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800342c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800342e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003432:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003434:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003436:	f043 0302 	orr.w	r3, r3, #2
 800343a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 800343c:	4620      	mov	r0, r4
 800343e:	f7ff ff87 	bl	8003350 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	2210      	movs	r2, #16
 8003446:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8003448:	f416 5f00 	tst.w	r6, #8192	@ 0x2000
 800344c:	d002      	beq.n	8003454 <HAL_ADC_IRQHandler+0x102>
 800344e:	f415 5f00 	tst.w	r5, #8192	@ 0x2000
 8003452:	d12c      	bne.n	80034ae <HAL_ADC_IRQHandler+0x15c>
}
 8003454:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003456:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003458:	f043 0320 	orr.w	r3, r3, #32
 800345c:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800345e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8003466:	e7bc      	b.n	80033e2 <HAL_ADC_IRQHandler+0x90>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003468:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800346a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800346e:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003470:	4620      	mov	r0, r4
 8003472:	f7ff ff6c 	bl	800334e <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	2280      	movs	r2, #128	@ 0x80
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	e7bd      	b.n	80033fa <HAL_ADC_IRQHandler+0xa8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800347e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003484:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003486:	4620      	mov	r0, r4
 8003488:	f000 fb77 	bl	8003b7a <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e7b7      	b.n	8003406 <HAL_ADC_IRQHandler+0xb4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003496:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800349c:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800349e:	4620      	mov	r0, r4
 80034a0:	f000 fb6c 	bl	8003b7c <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e7b1      	b.n	8003412 <HAL_ADC_IRQHandler+0xc0>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80034ae:	4620      	mov	r0, r4
 80034b0:	f000 fb66 	bl	8003b80 <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80034b4:	6823      	ldr	r3, [r4, #0]
 80034b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034ba:	601a      	str	r2, [r3, #0]
}
 80034bc:	e7ca      	b.n	8003454 <HAL_ADC_IRQHandler+0x102>
	...

080034c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80034c0:	b470      	push	{r4, r5, r6}
 80034c2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034c4:	2200      	movs	r2, #0
 80034c6:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034c8:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80034ca:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 80034ce:	2a01      	cmp	r2, #1
 80034d0:	f000 8103 	beq.w	80036da <HAL_ADC_ConfigChannel+0x21a>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2201      	movs	r2, #1
 80034d8:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034dc:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034de:	6890      	ldr	r0, [r2, #8]
 80034e0:	f010 0f04 	tst.w	r0, #4
 80034e4:	d00a      	beq.n	80034fc <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80034e8:	f042 0220 	orr.w	r2, r2, #32
 80034ec:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80034ee:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
}
 80034f6:	b003      	add	sp, #12
 80034f8:	bc70      	pop	{r4, r5, r6}
 80034fa:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 80034fc:	6848      	ldr	r0, [r1, #4]
 80034fe:	2802      	cmp	r0, #2
 8003500:	f000 809c 	beq.w	800363c <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003504:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8003508:	d027      	beq.n	800355a <HAL_ADC_ConfigChannel+0x9a>
 800350a:	4d75      	ldr	r5, [pc, #468]	@ (80036e0 <HAL_ADC_ConfigChannel+0x220>)
 800350c:	42ac      	cmp	r4, r5
 800350e:	d024      	beq.n	800355a <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003510:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8003512:	f000 001f 	and.w	r0, r0, #31
 8003516:	250f      	movs	r5, #15
 8003518:	4085      	lsls	r5, r0
 800351a:	ea24 0505 	bic.w	r5, r4, r5
 800351e:	680c      	ldr	r4, [r1, #0]
 8003520:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8003524:	2e00      	cmp	r6, #0
 8003526:	d131      	bne.n	800358c <HAL_ADC_ConfigChannel+0xcc>
 8003528:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800352c:	4084      	lsls	r4, r0
 800352e:	432c      	orrs	r4, r5
 8003530:	661c      	str	r4, [r3, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003532:	684c      	ldr	r4, [r1, #4]
 8003534:	08a0      	lsrs	r0, r4, #2
 8003536:	3001      	adds	r0, #1
 8003538:	69dd      	ldr	r5, [r3, #28]
 800353a:	42a8      	cmp	r0, r5
 800353c:	d813      	bhi.n	8003566 <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800353e:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8003540:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8003542:	f004 041f 	and.w	r4, r4, #31
 8003546:	260f      	movs	r6, #15
 8003548:	40a6      	lsls	r6, r4
 800354a:	ea20 0006 	bic.w	r0, r0, r6
 800354e:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8003552:	40a5      	lsls	r5, r4
 8003554:	4328      	orrs	r0, r5
 8003556:	6290      	str	r0, [r2, #40]	@ 0x28
}
 8003558:	e005      	b.n	8003566 <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800355a:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800355c:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 800355e:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003562:	4320      	orrs	r0, r4
 8003564:	6290      	str	r0, [r2, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003566:	681c      	ldr	r4, [r3, #0]
 8003568:	680d      	ldr	r5, [r1, #0]
 800356a:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 800356c:	6960      	ldr	r0, [r4, #20]
 800356e:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8003572:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8003576:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800357a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800357e:	4302      	orrs	r2, r0
 8003580:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003582:	680a      	ldr	r2, [r1, #0]
 8003584:	2a00      	cmp	r2, #0
 8003586:	db09      	blt.n	800359c <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003588:	2000      	movs	r0, #0
 800358a:	e7b1      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003590:	b114      	cbz	r4, 8003598 <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003592:	fab4 f484 	clz	r4, r4
 8003596:	e7c9      	b.n	800352c <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8003598:	2420      	movs	r4, #32
 800359a:	e7c7      	b.n	800352c <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800359c:	4951      	ldr	r1, [pc, #324]	@ (80036e4 <HAL_ADC_ConfigChannel+0x224>)
 800359e:	f8d1 0708 	ldr.w	r0, [r1, #1800]	@ 0x708
 80035a2:	f000 71e0 	and.w	r1, r0, #29360128	@ 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035a6:	4c50      	ldr	r4, [pc, #320]	@ (80036e8 <HAL_ADC_ConfigChannel+0x228>)
 80035a8:	42a2      	cmp	r2, r4
 80035aa:	d007      	beq.n	80035bc <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80035ac:	4c4f      	ldr	r4, [pc, #316]	@ (80036ec <HAL_ADC_ConfigChannel+0x22c>)
 80035ae:	42a2      	cmp	r2, r4
 80035b0:	d026      	beq.n	8003600 <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80035b2:	4c4f      	ldr	r4, [pc, #316]	@ (80036f0 <HAL_ADC_ConfigChannel+0x230>)
 80035b4:	42a2      	cmp	r2, r4
 80035b6:	d032      	beq.n	800361e <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b8:	2000      	movs	r0, #0
 80035ba:	e799      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035bc:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 80035c0:	d1f4      	bne.n	80035ac <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035c6:	4847      	ldr	r0, [pc, #284]	@ (80036e4 <HAL_ADC_ConfigChannel+0x224>)
 80035c8:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 80035cc:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80035d0:	4311      	orrs	r1, r2
 80035d2:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035d6:	4a47      	ldr	r2, [pc, #284]	@ (80036f4 <HAL_ADC_ConfigChannel+0x234>)
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	0992      	lsrs	r2, r2, #6
 80035dc:	4946      	ldr	r1, [pc, #280]	@ (80036f8 <HAL_ADC_ConfigChannel+0x238>)
 80035de:	fba1 1202 	umull	r1, r2, r1, r2
 80035e2:	0992      	lsrs	r2, r2, #6
 80035e4:	3201      	adds	r2, #1
 80035e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80035ea:	0092      	lsls	r2, r2, #2
 80035ec:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80035ee:	e002      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 80035f0:	9a01      	ldr	r2, [sp, #4]
 80035f2:	3a01      	subs	r2, #1
 80035f4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80035f6:	9a01      	ldr	r2, [sp, #4]
 80035f8:	2a00      	cmp	r2, #0
 80035fa:	d1f9      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035fc:	2000      	movs	r0, #0
 80035fe:	e777      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003600:	f010 7f80 	tst.w	r0, #16777216	@ 0x1000000
 8003604:	d1d5      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003606:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 800360a:	4836      	ldr	r0, [pc, #216]	@ (80036e4 <HAL_ADC_ConfigChannel+0x224>)
 800360c:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 8003610:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003614:	4311      	orrs	r1, r2
 8003616:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800361a:	2000      	movs	r0, #0
}
 800361c:	e768      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800361e:	f410 0f80 	tst.w	r0, #4194304	@ 0x400000
 8003622:	d158      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003624:	f441 0280 	orr.w	r2, r1, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003628:	482e      	ldr	r0, [pc, #184]	@ (80036e4 <HAL_ADC_ConfigChannel+0x224>)
 800362a:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 800362e:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8003632:	430a      	orrs	r2, r1
 8003634:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003638:	2000      	movs	r0, #0
}
 800363a:	e759      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800363c:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8003640:	d002      	beq.n	8003648 <HAL_ADC_ConfigChannel+0x188>
 8003642:	4827      	ldr	r0, [pc, #156]	@ (80036e0 <HAL_ADC_ConfigChannel+0x220>)
 8003644:	4284      	cmp	r4, r0
 8003646:	d106      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003648:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800364a:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 800364c:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003650:	ea20 0004 	bic.w	r0, r0, r4
 8003654:	6290      	str	r0, [r2, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003656:	680a      	ldr	r2, [r1, #0]
 8003658:	2a00      	cmp	r2, #0
 800365a:	db01      	blt.n	8003660 <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800365c:	2000      	movs	r0, #0
 800365e:	e747      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003660:	4920      	ldr	r1, [pc, #128]	@ (80036e4 <HAL_ADC_ConfigChannel+0x224>)
 8003662:	f8d1 1708 	ldr.w	r1, [r1, #1800]	@ 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003666:	4820      	ldr	r0, [pc, #128]	@ (80036e8 <HAL_ADC_ConfigChannel+0x228>)
 8003668:	4282      	cmp	r2, r0
 800366a:	d007      	beq.n	800367c <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800366c:	481f      	ldr	r0, [pc, #124]	@ (80036ec <HAL_ADC_ConfigChannel+0x22c>)
 800366e:	4282      	cmp	r2, r0
 8003670:	d013      	beq.n	800369a <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003672:	481f      	ldr	r0, [pc, #124]	@ (80036f0 <HAL_ADC_ConfigChannel+0x230>)
 8003674:	4282      	cmp	r2, r0
 8003676:	d01f      	beq.n	80036b8 <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003678:	2000      	movs	r0, #0
 800367a:	e739      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800367c:	f001 71a0 	and.w	r1, r1, #20971520	@ 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003680:	f100 4010 	add.w	r0, r0, #2415919104	@ 0x90000000
 8003684:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 8003688:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 800368c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003690:	4311      	orrs	r1, r2
 8003692:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003696:	2000      	movs	r0, #0
}
 8003698:	e72a      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800369a:	f401 0240 	and.w	r2, r1, #12582912	@ 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800369e:	f100 4008 	add.w	r0, r0, #2281701376	@ 0x88000000
 80036a2:	f500 4060 	add.w	r0, r0, #57344	@ 0xe000
 80036a6:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 80036aa:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 80036ae:	430a      	orrs	r2, r1
 80036b0:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b4:	2000      	movs	r0, #0
}
 80036b6:	e71b      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036b8:	f001 72c0 	and.w	r2, r1, #25165824	@ 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036bc:	f100 400c 	add.w	r0, r0, #2348810240	@ 0x8c000000
 80036c0:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 80036c4:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 80036c8:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 80036cc:	430a      	orrs	r2, r1
 80036ce:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036d2:	2000      	movs	r0, #0
}
 80036d4:	e70c      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x30>
 80036d6:	2000      	movs	r0, #0
 80036d8:	e70a      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80036da:	2002      	movs	r0, #2
 80036dc:	e70b      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x36>
 80036de:	bf00      	nop
 80036e0:	80000004 	.word	0x80000004
 80036e4:	40012000 	.word	0x40012000
 80036e8:	b0001000 	.word	0xb0001000
 80036ec:	b8004000 	.word	0xb8004000
 80036f0:	b4002000 	.word	0xb4002000
 80036f4:	20000074 	.word	0x20000074
 80036f8:	053e2d63 	.word	0x053e2d63

080036fc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80036fc:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80036fe:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	f012 0f04 	tst.w	r2, #4
 8003706:	d02a      	beq.n	800375e <ADC_ConversionStop+0x62>
 8003708:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	f012 0f02 	tst.w	r2, #2
 8003710:	d107      	bne.n	8003722 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003718:	f022 0217 	bic.w	r2, r2, #23
 800371c:	f042 0210 	orr.w	r2, r2, #16
 8003720:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003722:	f7fe fa67 	bl	8001bf4 <HAL_GetTick>
 8003726:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f013 0f04 	tst.w	r3, #4
 8003730:	d013      	beq.n	800375a <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003732:	f7fe fa5f 	bl	8001bf4 <HAL_GetTick>
 8003736:	1b43      	subs	r3, r0, r5
 8003738:	2b02      	cmp	r3, #2
 800373a:	d9f5      	bls.n	8003728 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f013 0f04 	tst.w	r3, #4
 8003744:	d0f0      	beq.n	8003728 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003746:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003748:	f043 0310 	orr.w	r3, r3, #16
 800374c:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 8003756:	2001      	movs	r0, #1
 8003758:	e002      	b.n	8003760 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800375a:	2000      	movs	r0, #0
 800375c:	e000      	b.n	8003760 <ADC_ConversionStop+0x64>
 800375e:	2000      	movs	r0, #0
}
 8003760:	bd38      	pop	{r3, r4, r5, pc}
	...

08003764 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003764:	b530      	push	{r4, r5, lr}
 8003766:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003768:	2300      	movs	r3, #0
 800376a:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800376c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	f012 0f01 	tst.w	r2, #1
 8003774:	d15b      	bne.n	800382e <ADC_Enable+0xca>
 8003776:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003778:	6899      	ldr	r1, [r3, #8]
 800377a:	4a2e      	ldr	r2, [pc, #184]	@ (8003834 <ADC_Enable+0xd0>)
 800377c:	4211      	tst	r1, r2
 800377e:	d117      	bne.n	80037b0 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003786:	f022 0217 	bic.w	r2, r2, #23
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003790:	4b29      	ldr	r3, [pc, #164]	@ (8003838 <ADC_Enable+0xd4>)
 8003792:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003796:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800379a:	d019      	beq.n	80037d0 <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800379c:	4b27      	ldr	r3, [pc, #156]	@ (800383c <ADC_Enable+0xd8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	099b      	lsrs	r3, r3, #6
 80037a2:	4a27      	ldr	r2, [pc, #156]	@ (8003840 <ADC_Enable+0xdc>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	099b      	lsrs	r3, r3, #6
 80037aa:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80037ac:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80037ae:	e00c      	b.n	80037ca <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80037b2:	f043 0310 	orr.w	r3, r3, #16
 80037b6:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b8:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 80037c0:	2001      	movs	r0, #1
 80037c2:	e035      	b.n	8003830 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 80037c4:	9b01      	ldr	r3, [sp, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80037ca:	9b01      	ldr	r3, [sp, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f9      	bne.n	80037c4 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80037d0:	7e63      	ldrb	r3, [r4, #25]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037d6:	2000      	movs	r0, #0
 80037d8:	e02a      	b.n	8003830 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 80037da:	f7fe fa0b 	bl	8001bf4 <HAL_GetTick>
 80037de:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	f012 0f01 	tst.w	r2, #1
 80037e8:	d11f      	bne.n	800382a <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	f012 0f01 	tst.w	r2, #1
 80037f0:	d107      	bne.n	8003802 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80037f8:	f022 0217 	bic.w	r2, r2, #23
 80037fc:	f042 0201 	orr.w	r2, r2, #1
 8003800:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003802:	f7fe f9f7 	bl	8001bf4 <HAL_GetTick>
 8003806:	1b40      	subs	r0, r0, r5
 8003808:	2802      	cmp	r0, #2
 800380a:	d9e9      	bls.n	80037e0 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f013 0f01 	tst.w	r3, #1
 8003814:	d1e4      	bne.n	80037e0 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003816:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003818:	f043 0310 	orr.w	r3, r3, #16
 800381c:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8003826:	2001      	movs	r0, #1
 8003828:	e002      	b.n	8003830 <ADC_Enable+0xcc>
  return HAL_OK;
 800382a:	2000      	movs	r0, #0
 800382c:	e000      	b.n	8003830 <ADC_Enable+0xcc>
 800382e:	2000      	movs	r0, #0
}
 8003830:	b003      	add	sp, #12
 8003832:	bd30      	pop	{r4, r5, pc}
 8003834:	80000017 	.word	0x80000017
 8003838:	40012000 	.word	0x40012000
 800383c:	20000074 	.word	0x20000074
 8003840:	053e2d63 	.word	0x053e2d63

08003844 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003844:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f013 0f04 	tst.w	r3, #4
 800384c:	d128      	bne.n	80038a0 <HAL_ADC_Start+0x5c>
{
 800384e:	b510      	push	{r4, lr}
 8003850:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8003852:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8003856:	2b01      	cmp	r3, #1
 8003858:	d024      	beq.n	80038a4 <HAL_ADC_Start+0x60>
 800385a:	2301      	movs	r3, #1
 800385c:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003860:	f7ff ff80 	bl	8003764 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003864:	b9c0      	cbnz	r0, 8003898 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8003866:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003868:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003874:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003876:	2300      	movs	r3, #0
 8003878:	65e3      	str	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800387a:	6822      	ldr	r2, [r4, #0]
 800387c:	211c      	movs	r1, #28
 800387e:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003880:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003884:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003886:	6893      	ldr	r3, [r2, #8]
 8003888:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800388c:	f023 0317 	bic.w	r3, r3, #23
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	6093      	str	r3, [r2, #8]
}
 8003896:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8003898:	2300      	movs	r3, #0
 800389a:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800389e:	e7fa      	b.n	8003896 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 80038a0:	2002      	movs	r0, #2
}
 80038a2:	4770      	bx	lr
    __HAL_LOCK(hadc);
 80038a4:	2002      	movs	r0, #2
 80038a6:	e7f6      	b.n	8003896 <HAL_ADC_Start+0x52>

080038a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038ac:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80038ae:	6893      	ldr	r3, [r2, #8]
 80038b0:	f013 0302 	ands.w	r3, r3, #2
 80038b4:	d000      	beq.n	80038b8 <ADC_Disable+0x10>
 80038b6:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038b8:	6891      	ldr	r1, [r2, #8]
 80038ba:	f011 0f01 	tst.w	r1, #1
 80038be:	d039      	beq.n	8003934 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d139      	bne.n	8003938 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038c4:	6893      	ldr	r3, [r2, #8]
 80038c6:	f003 0305 	and.w	r3, r3, #5
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d009      	beq.n	80038e2 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80038d0:	f043 0310 	orr.w	r3, r3, #16
 80038d4:	65a3      	str	r3, [r4, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	65e3      	str	r3, [r4, #92]	@ 0x5c

      return HAL_ERROR;
 80038de:	2001      	movs	r0, #1
 80038e0:	e029      	b.n	8003936 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80038e2:	6893      	ldr	r3, [r2, #8]
 80038e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038e8:	f023 0317 	bic.w	r3, r3, #23
 80038ec:	f043 0302 	orr.w	r3, r3, #2
 80038f0:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	2203      	movs	r2, #3
 80038f6:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038f8:	f7fe f97c 	bl	8001bf4 <HAL_GetTick>
 80038fc:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f013 0f01 	tst.w	r3, #1
 8003906:	d013      	beq.n	8003930 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003908:	f7fe f974 	bl	8001bf4 <HAL_GetTick>
 800390c:	1b40      	subs	r0, r0, r5
 800390e:	2802      	cmp	r0, #2
 8003910:	d9f5      	bls.n	80038fe <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f013 0f01 	tst.w	r3, #1
 800391a:	d0f0      	beq.n	80038fe <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800391e:	f043 0310 	orr.w	r3, r3, #16
 8003922:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003924:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 800392c:	2001      	movs	r0, #1
 800392e:	e002      	b.n	8003936 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003930:	2000      	movs	r0, #0
 8003932:	e000      	b.n	8003936 <ADC_Disable+0x8e>
 8003934:	2000      	movs	r0, #0
}
 8003936:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003938:	2000      	movs	r0, #0
 800393a:	e7fc      	b.n	8003936 <ADC_Disable+0x8e>

0800393c <HAL_ADC_DeInit>:
{
 800393c:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 800393e:	2800      	cmp	r0, #0
 8003940:	d056      	beq.n	80039f0 <HAL_ADC_DeInit+0xb4>
 8003942:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003944:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003946:	f043 0302 	orr.w	r3, r3, #2
 800394a:	6583      	str	r3, [r0, #88]	@ 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 800394c:	f7ff fed6 	bl	80036fc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003950:	4606      	mov	r6, r0
 8003952:	2800      	cmp	r0, #0
 8003954:	d03d      	beq.n	80039d2 <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003956:	6822      	ldr	r2, [r4, #0]
 8003958:	6853      	ldr	r3, [r2, #4]
 800395a:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 800395e:	f023 0303 	bic.w	r3, r3, #3
 8003962:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	f240 329f 	movw	r2, #927	@ 0x39f
 800396a:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800396c:	6822      	ldr	r2, [r4, #0]
 800396e:	68d1      	ldr	r1, [r2, #12]
 8003970:	4b20      	ldr	r3, [pc, #128]	@ (80039f4 <HAL_ADC_DeInit+0xb8>)
 8003972:	400b      	ands	r3, r1
 8003974:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003976:	6822      	ldr	r2, [r4, #0]
 8003978:	6913      	ldr	r3, [r2, #16]
 800397a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800397e:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003980:	6822      	ldr	r2, [r4, #0]
 8003982:	6953      	ldr	r3, [r2, #20]
 8003984:	f023 0307 	bic.w	r3, r3, #7
 8003988:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 800398a:	6822      	ldr	r2, [r4, #0]
 800398c:	6a13      	ldr	r3, [r2, #32]
 800398e:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8003992:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003994:	6822      	ldr	r2, [r4, #0]
 8003996:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8003998:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800399c:	6253      	str	r3, [r2, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80039a2:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80039a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039ac:	2500      	movs	r5, #0
 80039ae:	629d      	str	r5, [r3, #40]	@ 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80039b0:	4a11      	ldr	r2, [pc, #68]	@ (80039f8 <HAL_ADC_DeInit+0xbc>)
 80039b2:	f8d2 3708 	ldr.w	r3, [r2, #1800]	@ 0x708
 80039b6:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 80039ba:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708
  HAL_ADC_MspDeInit(hadc);
 80039be:	4620      	mov	r0, r4
 80039c0:	f7fd faf6 	bl	8000fb0 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80039c4:	6625      	str	r5, [r4, #96]	@ 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 80039c6:	65e5      	str	r5, [r4, #92]	@ 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 80039c8:	65a5      	str	r5, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 80039ca:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 80039ce:	4630      	mov	r0, r6
 80039d0:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80039d2:	4620      	mov	r0, r4
 80039d4:	f7ff ff68 	bl	80038a8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80039d8:	4606      	mov	r6, r0
 80039da:	b908      	cbnz	r0, 80039e0 <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 80039dc:	2301      	movs	r3, #1
 80039de:	65a3      	str	r3, [r4, #88]	@ 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80039e0:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80039e2:	6893      	ldr	r3, [r2, #8]
 80039e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80039e8:	f023 0317 	bic.w	r3, r3, #23
 80039ec:	6093      	str	r3, [r2, #8]
}
 80039ee:	e7b2      	b.n	8003956 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 80039f0:	2601      	movs	r6, #1
 80039f2:	e7ec      	b.n	80039ce <HAL_ADC_DeInit+0x92>
 80039f4:	833e0200 	.word	0x833e0200
 80039f8:	40012000 	.word	0x40012000

080039fc <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80039fc:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d019      	beq.n	8003a38 <HAL_ADC_Stop+0x3c>
{
 8003a04:	b510      	push	{r4, lr}
 8003a06:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003a0e:	f7ff fe75 	bl	80036fc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003a12:	b118      	cbz	r0, 8003a1c <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8003a14:	2300      	movs	r3, #0
 8003a16:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8003a1a:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	f7ff ff43 	bl	80038a8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003a22:	2800      	cmp	r0, #0
 8003a24:	d1f6      	bne.n	8003a14 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8003a26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a2c:	f023 0301 	bic.w	r3, r3, #1
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003a36:	e7ed      	b.n	8003a14 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8003a38:	2002      	movs	r0, #2
}
 8003a3a:	4770      	bx	lr

08003a3c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003a44:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	f000 8094 	beq.w	8003b76 <HAL_ADCEx_Calibration_Start+0x13a>
 8003a4e:	4604      	mov	r4, r0
 8003a50:	2301      	movs	r3, #1
 8003a52:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a56:	f7ff ff27 	bl	80038a8 <ADC_Disable>
 8003a5a:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a5c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	f012 0201 	ands.w	r2, r2, #1
 8003a64:	d009      	beq.n	8003a7a <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a68:	f043 0310 	orr.w	r3, r3, #16
 8003a6c:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  return tmp_hal_status;
}
 8003a74:	4628      	mov	r0, r5
 8003a76:	b003      	add	sp, #12
 8003a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8003a7a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003a7c:	f421 7181 	bic.w	r1, r1, #258	@ 0x102
 8003a80:	f041 0102 	orr.w	r1, r1, #2
 8003a84:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003a86:	68de      	ldr	r6, [r3, #12]
 8003a88:	f426 46ff 	bic.w	r6, r6, #32640	@ 0x7f80
 8003a8c:	f026 067c 	bic.w	r6, r6, #124	@ 0x7c
 8003a90:	0436      	lsls	r6, r6, #16
 8003a92:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003a94:	68d9      	ldr	r1, [r3, #12]
 8003a96:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8003a9a:	f021 0103 	bic.w	r1, r1, #3
 8003a9e:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8003aa0:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003aa2:	e005      	b.n	8003ab0 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003aa4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003aa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003aac:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003aae:	3201      	adds	r2, #1
 8003ab0:	2a07      	cmp	r2, #7
 8003ab2:	d81e      	bhi.n	8003af2 <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8003ab4:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003ab6:	688b      	ldr	r3, [r1, #8]
 8003ab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003abc:	f023 0317 	bic.w	r3, r3, #23
 8003ac0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ac4:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ac6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ac8:	6899      	ldr	r1, [r3, #8]
 8003aca:	2900      	cmp	r1, #0
 8003acc:	daea      	bge.n	8003aa4 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8003ace:	9b01      	ldr	r3, [sp, #4]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ad4:	9b01      	ldr	r3, [sp, #4]
 8003ad6:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8003ada:	d3f4      	bcc.n	8003ac6 <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003adc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ade:	f023 0312 	bic.w	r3, r3, #18
 8003ae2:	f043 0310 	orr.w	r3, r3, #16
 8003ae6:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
          return HAL_ERROR;
 8003aee:	2501      	movs	r5, #1
 8003af0:	e7c0      	b.n	8003a74 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 8003af2:	fbb0 f0f2 	udiv	r0, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8003af6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003af8:	6893      	ldr	r3, [r2, #8]
 8003afa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003afe:	f023 0317 	bic.w	r3, r3, #23
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6093      	str	r3, [r2, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003b08:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003b0a:	f8d2 30b4 	ldr.w	r3, [r2, #180]	@ 0xb4
 8003b0e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003b12:	4318      	orrs	r0, r3
 8003b14:	f8c2 00b4 	str.w	r0, [r2, #180]	@ 0xb4
    LL_ADC_Disable(hadc->Instance);
 8003b18:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003b1a:	6893      	ldr	r3, [r2, #8]
 8003b1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b20:	f023 0317 	bic.w	r3, r3, #23
 8003b24:	f043 0302 	orr.w	r3, r3, #2
 8003b28:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003b2a:	f7fe f863 	bl	8001bf4 <HAL_GetTick>
 8003b2e:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b30:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	f012 0f01 	tst.w	r2, #1
 8003b38:	d109      	bne.n	8003b4e <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	4332      	orrs	r2, r6
 8003b3e:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003b40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b42:	f023 0303 	bic.w	r3, r3, #3
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003b4c:	e78f      	b.n	8003a6e <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b4e:	f7fe f851 	bl	8001bf4 <HAL_GetTick>
 8003b52:	1bc3      	subs	r3, r0, r7
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d9eb      	bls.n	8003b30 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f013 0f01 	tst.w	r3, #1
 8003b60:	d0e6      	beq.n	8003b30 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b64:	f043 0310 	orr.w	r3, r3, #16
 8003b68:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b6a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8003b72:	2501      	movs	r5, #1
 8003b74:	e77e      	b.n	8003a74 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 8003b76:	2502      	movs	r5, #2
 8003b78:	e77c      	b.n	8003a74 <HAL_ADCEx_Calibration_Start+0x38>

08003b7a <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003b7a:	4770      	bx	lr

08003b7c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003b7c:	4770      	bx	lr

08003b7e <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003b7e:	4770      	bx	lr

08003b80 <HAL_ADCEx_ChannelConfigReadyCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8003b80:	4770      	bx	lr
	...

08003b84 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003b84:	2800      	cmp	r0, #0
 8003b86:	db07      	blt.n	8003b98 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b88:	f000 021f 	and.w	r2, r0, #31
 8003b8c:	0940      	lsrs	r0, r0, #5
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4093      	lsls	r3, r2
 8003b92:	4a02      	ldr	r2, [pc, #8]	@ (8003b9c <__NVIC_EnableIRQ+0x18>)
 8003b94:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	e000e100 	.word	0xe000e100

08003ba0 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	db0c      	blt.n	8003bbe <__NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ba4:	f000 021f 	and.w	r2, r0, #31
 8003ba8:	0940      	lsrs	r0, r0, #5
 8003baa:	2301      	movs	r3, #1
 8003bac:	4093      	lsls	r3, r2
 8003bae:	3020      	adds	r0, #32
 8003bb0:	4a03      	ldr	r2, [pc, #12]	@ (8003bc0 <__NVIC_DisableIRQ+0x20>)
 8003bb2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003bb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003bba:	f3bf 8f6f 	isb	sy
}
 8003bbe:	4770      	bx	lr
 8003bc0:	e000e100 	.word	0xe000e100

08003bc4 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	db08      	blt.n	8003bda <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc8:	0109      	lsls	r1, r1, #4
 8003bca:	b2c9      	uxtb	r1, r1
 8003bcc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003bd0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003bd4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8003bd8:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bda:	f000 000f 	and.w	r0, r0, #15
 8003bde:	0109      	lsls	r1, r1, #4
 8003be0:	b2c9      	uxtb	r1, r1
 8003be2:	4b01      	ldr	r3, [pc, #4]	@ (8003be8 <__NVIC_SetPriority+0x24>)
 8003be4:	5419      	strb	r1, [r3, r0]
}
 8003be6:	4770      	bx	lr
 8003be8:	e000ed14 	.word	0xe000ed14

08003bec <NVIC_EncodePriority>:
{
 8003bec:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bee:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bf2:	f1c0 0c07 	rsb	ip, r0, #7
 8003bf6:	f1bc 0f04 	cmp.w	ip, #4
 8003bfa:	bf28      	it	cs
 8003bfc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c00:	1d03      	adds	r3, r0, #4
 8003c02:	2b06      	cmp	r3, #6
 8003c04:	d90f      	bls.n	8003c26 <NVIC_EncodePriority+0x3a>
 8003c06:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c08:	f04f 3eff 	mov.w	lr, #4294967295
 8003c0c:	fa0e f00c 	lsl.w	r0, lr, ip
 8003c10:	ea21 0100 	bic.w	r1, r1, r0
 8003c14:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c16:	fa0e fe03 	lsl.w	lr, lr, r3
 8003c1a:	ea22 020e 	bic.w	r2, r2, lr
}
 8003c1e:	ea41 0002 	orr.w	r0, r1, r2
 8003c22:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c26:	2300      	movs	r3, #0
 8003c28:	e7ee      	b.n	8003c08 <NVIC_EncodePriority+0x1c>
	...

08003c2c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c2c:	4a07      	ldr	r2, [pc, #28]	@ (8003c4c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003c2e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c30:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c34:	041b      	lsls	r3, r3, #16
 8003c36:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c38:	0200      	lsls	r0, r0, #8
 8003c3a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c3e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003c48:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003c4a:	4770      	bx	lr
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c50:	b510      	push	{r4, lr}
 8003c52:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c54:	4b05      	ldr	r3, [pc, #20]	@ (8003c6c <HAL_NVIC_SetPriority+0x1c>)
 8003c56:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c58:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003c5c:	f7ff ffc6 	bl	8003bec <NVIC_EncodePriority>
 8003c60:	4601      	mov	r1, r0
 8003c62:	4620      	mov	r0, r4
 8003c64:	f7ff ffae 	bl	8003bc4 <__NVIC_SetPriority>
}
 8003c68:	bd10      	pop	{r4, pc}
 8003c6a:	bf00      	nop
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c70:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c72:	f7ff ff87 	bl	8003b84 <__NVIC_EnableIRQ>
}
 8003c76:	bd08      	pop	{r3, pc}

08003c78 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c78:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003c7a:	f7ff ff91 	bl	8003ba0 <__NVIC_DisableIRQ>
}
 8003c7e:	bd08      	pop	{r3, pc}

08003c80 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c80:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c82:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8003c84:	f8d0 c050 	ldr.w	ip, [r0, #80]	@ 0x50
 8003c88:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003c8c:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8003c8e:	b124      	cbz	r4, 8003c9a <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c90:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8003c92:	f8d0 c05c 	ldr.w	ip, [r0, #92]	@ 0x5c
 8003c96:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c9a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003c9c:	f004 0c1c 	and.w	ip, r4, #28
 8003ca0:	2401      	movs	r4, #1
 8003ca2:	fa04 f40c 	lsl.w	r4, r4, ip
 8003ca6:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
 8003caa:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cae:	6804      	ldr	r4, [r0, #0]
 8003cb0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cb2:	6883      	ldr	r3, [r0, #8]
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d005      	beq.n	8003cc4 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003cb8:	6803      	ldr	r3, [r0, #0]
 8003cba:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003cbc:	6803      	ldr	r3, [r0, #0]
 8003cbe:	60da      	str	r2, [r3, #12]
  }
}
 8003cc0:	bc10      	pop	{r4}
 8003cc2:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003cc4:	6803      	ldr	r3, [r0, #0]
 8003cc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003cc8:	6803      	ldr	r3, [r0, #0]
 8003cca:	60d9      	str	r1, [r3, #12]
 8003ccc:	e7f8      	b.n	8003cc0 <DMA_SetConfig+0x40>
	...

08003cd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003cd0:	6803      	ldr	r3, [r0, #0]
 8003cd2:	4a14      	ldr	r2, [pc, #80]	@ (8003d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d816      	bhi.n	8003d06 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003cd8:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003cda:	f022 0203 	bic.w	r2, r2, #3
 8003cde:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8003ce2:	f502 3202 	add.w	r2, r2, #133120	@ 0x20800
 8003ce6:	6482      	str	r2, [r0, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	3b08      	subs	r3, #8
 8003cec:	4a0e      	ldr	r2, [pc, #56]	@ (8003d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8003d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8003cf6:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8003d04:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003d06:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003d08:	f022 0103 	bic.w	r1, r2, #3
 8003d0c:	4a08      	ldr	r2, [pc, #32]	@ (8003d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8003d0e:	440a      	add	r2, r1
 8003d10:	6482      	str	r2, [r0, #72]	@ 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	3b08      	subs	r3, #8
 8003d16:	4a04      	ldr	r2, [pc, #16]	@ (8003d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	3307      	adds	r3, #7
 8003d20:	e7e8      	b.n	8003cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8003d22:	bf00      	nop
 8003d24:	40020407 	.word	0x40020407
 8003d28:	cccccccd 	.word	0xcccccccd
 8003d2c:	40020880 	.word	0x40020880
 8003d30:	4002081c 	.word	0x4002081c

08003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d34:	6843      	ldr	r3, [r0, #4]
 8003d36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d3a:	4a07      	ldr	r2, [pc, #28]	@ (8003d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003d3c:	441a      	add	r2, r3
 8003d3e:	0092      	lsls	r2, r2, #2
 8003d40:	6542      	str	r2, [r0, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d42:	4a06      	ldr	r2, [pc, #24]	@ (8003d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8003d44:	6582      	str	r2, [r0, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d46:	3b01      	subs	r3, #1
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	1000823f 	.word	0x1000823f
 8003d5c:	40020940 	.word	0x40020940

08003d60 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d060      	beq.n	8003e26 <HAL_DMA_Init+0xc6>
{
 8003d64:	b510      	push	{r4, lr}
 8003d66:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d68:	6802      	ldr	r2, [r0, #0]
 8003d6a:	4b30      	ldr	r3, [pc, #192]	@ (8003e2c <HAL_DMA_Init+0xcc>)
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d842      	bhi.n	8003df6 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d70:	4b2f      	ldr	r3, [pc, #188]	@ (8003e30 <HAL_DMA_Init+0xd0>)
 8003d72:	4413      	add	r3, r2
 8003d74:	492f      	ldr	r1, [pc, #188]	@ (8003e34 <HAL_DMA_Init+0xd4>)
 8003d76:	fba1 1303 	umull	r1, r3, r1, r3
 8003d7a:	091b      	lsrs	r3, r3, #4
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d80:	4b2d      	ldr	r3, [pc, #180]	@ (8003e38 <HAL_DMA_Init+0xd8>)
 8003d82:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d84:	2302      	movs	r3, #2
 8003d86:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d8a:	6813      	ldr	r3, [r2, #0]
 8003d8c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d94:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003d96:	6821      	ldr	r1, [r4, #0]
 8003d98:	680a      	ldr	r2, [r1, #0]
 8003d9a:	68a3      	ldr	r3, [r4, #8]
 8003d9c:	68e0      	ldr	r0, [r4, #12]
 8003d9e:	4303      	orrs	r3, r0
 8003da0:	6920      	ldr	r0, [r4, #16]
 8003da2:	4303      	orrs	r3, r0
 8003da4:	6960      	ldr	r0, [r4, #20]
 8003da6:	4303      	orrs	r3, r0
 8003da8:	69a0      	ldr	r0, [r4, #24]
 8003daa:	4303      	orrs	r3, r0
 8003dac:	69e0      	ldr	r0, [r4, #28]
 8003dae:	4303      	orrs	r3, r0
 8003db0:	6a20      	ldr	r0, [r4, #32]
 8003db2:	4303      	orrs	r3, r0
 8003db4:	4313      	orrs	r3, r2
 8003db6:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003db8:	4620      	mov	r0, r4
 8003dba:	f7ff ff89 	bl	8003cd0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003dbe:	68a3      	ldr	r3, [r4, #8]
 8003dc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dc4:	d022      	beq.n	8003e0c <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003dc6:	6863      	ldr	r3, [r4, #4]
 8003dc8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dce:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dd0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003dd2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003dd4:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003dd6:	6863      	ldr	r3, [r4, #4]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d919      	bls.n	8003e12 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003de2:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003de4:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003de6:	2000      	movs	r0, #0
 8003de8:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8003df0:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8003df4:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003df6:	4b11      	ldr	r3, [pc, #68]	@ (8003e3c <HAL_DMA_Init+0xdc>)
 8003df8:	4413      	add	r3, r2
 8003dfa:	490e      	ldr	r1, [pc, #56]	@ (8003e34 <HAL_DMA_Init+0xd4>)
 8003dfc:	fba1 1303 	umull	r1, r3, r1, r3
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e06:	4b0e      	ldr	r3, [pc, #56]	@ (8003e40 <HAL_DMA_Init+0xe0>)
 8003e08:	6403      	str	r3, [r0, #64]	@ 0x40
 8003e0a:	e7bb      	b.n	8003d84 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	6063      	str	r3, [r4, #4]
 8003e10:	e7d9      	b.n	8003dc6 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e12:	4620      	mov	r0, r4
 8003e14:	f7ff ff8e 	bl	8003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e18:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e20:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003e22:	605a      	str	r2, [r3, #4]
 8003e24:	e7df      	b.n	8003de6 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8003e26:	2001      	movs	r0, #1
}
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40020407 	.word	0x40020407
 8003e30:	bffdfff8 	.word	0xbffdfff8
 8003e34:	cccccccd 	.word	0xcccccccd
 8003e38:	40020000 	.word	0x40020000
 8003e3c:	bffdfbf8 	.word	0xbffdfbf8
 8003e40:	40020400 	.word	0x40020400

08003e44 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8003e44:	2800      	cmp	r0, #0
 8003e46:	d04b      	beq.n	8003ee0 <HAL_DMA_DeInit+0x9c>
{
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8003e4c:	6802      	ldr	r2, [r0, #0]
 8003e4e:	6813      	ldr	r3, [r2, #0]
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e56:	6802      	ldr	r2, [r0, #0]
 8003e58:	4b22      	ldr	r3, [pc, #136]	@ (8003ee4 <HAL_DMA_DeInit+0xa0>)
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d82c      	bhi.n	8003eb8 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e5e:	4b22      	ldr	r3, [pc, #136]	@ (8003ee8 <HAL_DMA_DeInit+0xa4>)
 8003e60:	4413      	add	r3, r2
 8003e62:	4922      	ldr	r1, [pc, #136]	@ (8003eec <HAL_DMA_DeInit+0xa8>)
 8003e64:	fba1 1303 	umull	r1, r3, r1, r3
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e6e:	4b20      	ldr	r3, [pc, #128]	@ (8003ef0 <HAL_DMA_DeInit+0xac>)
 8003e70:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 8003e72:	2500      	movs	r5, #0
 8003e74:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e76:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003e78:	f003 021c 	and.w	r2, r3, #28
 8003e7c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003e7e:	2301      	movs	r3, #1
 8003e80:	4093      	lsls	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e84:	4620      	mov	r0, r4
 8003e86:	f7ff ff23 	bl	8003cd0 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8003e8a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003e8c:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e8e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003e90:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003e92:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e94:	6863      	ldr	r3, [r4, #4]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d918      	bls.n	8003ece <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8003ea0:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ea2:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hdma->XferCpltCallback = NULL;
 8003ea4:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003ea6:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003ea8:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003eaa:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eac:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8003eae:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8003eb2:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8003eb6:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef4 <HAL_DMA_DeInit+0xb0>)
 8003eba:	4413      	add	r3, r2
 8003ebc:	490b      	ldr	r1, [pc, #44]	@ (8003eec <HAL_DMA_DeInit+0xa8>)
 8003ebe:	fba1 1303 	umull	r1, r3, r1, r3
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <HAL_DMA_DeInit+0xb4>)
 8003eca:	6403      	str	r3, [r0, #64]	@ 0x40
 8003ecc:	e7d1      	b.n	8003e72 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f7ff ff30 	bl	8003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ed4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003ed6:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ed8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003eda:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	e7dd      	b.n	8003e9c <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8003ee0:	2001      	movs	r0, #1
}
 8003ee2:	4770      	bx	lr
 8003ee4:	40020407 	.word	0x40020407
 8003ee8:	bffdfff8 	.word	0xbffdfff8
 8003eec:	cccccccd 	.word	0xcccccccd
 8003ef0:	40020000 	.word	0x40020000
 8003ef4:	bffdfbf8 	.word	0xbffdfbf8
 8003ef8:	40020400 	.word	0x40020400

08003efc <HAL_DMA_Start_IT>:
{
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003f00:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8003f04:	2801      	cmp	r0, #1
 8003f06:	d043      	beq.n	8003f90 <HAL_DMA_Start_IT+0x94>
 8003f08:	2001      	movs	r0, #1
 8003f0a:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003f0e:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 8003f12:	b2c0      	uxtb	r0, r0
 8003f14:	2801      	cmp	r0, #1
 8003f16:	d006      	beq.n	8003f26 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f18:	2380      	movs	r3, #128	@ 0x80
 8003f1a:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_ERROR;
 8003f22:	2001      	movs	r0, #1
}
 8003f24:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f26:	2002      	movs	r0, #2
 8003f28:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003f30:	6825      	ldr	r5, [r4, #0]
 8003f32:	6828      	ldr	r0, [r5, #0]
 8003f34:	f020 0001 	bic.w	r0, r0, #1
 8003f38:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f7ff fea0 	bl	8003c80 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003f40:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003f42:	b1d3      	cbz	r3, 8003f7a <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f44:	6822      	ldr	r2, [r4, #0]
 8003f46:	6813      	ldr	r3, [r2, #0]
 8003f48:	f043 030e 	orr.w	r3, r3, #14
 8003f4c:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f4e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8003f56:	d003      	beq.n	8003f60 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f5e:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8003f60:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003f62:	b11b      	cbz	r3, 8003f6c <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f6a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003f6c:	6822      	ldr	r2, [r4, #0]
 8003f6e:	6813      	ldr	r3, [r2, #0]
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f76:	2000      	movs	r0, #0
 8003f78:	e7d4      	b.n	8003f24 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f7a:	6822      	ldr	r2, [r4, #0]
 8003f7c:	6813      	ldr	r3, [r2, #0]
 8003f7e:	f023 0304 	bic.w	r3, r3, #4
 8003f82:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f84:	6822      	ldr	r2, [r4, #0]
 8003f86:	6813      	ldr	r3, [r2, #0]
 8003f88:	f043 030a 	orr.w	r3, r3, #10
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e7de      	b.n	8003f4e <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003f90:	2002      	movs	r0, #2
 8003f92:	e7c7      	b.n	8003f24 <HAL_DMA_Start_IT+0x28>

08003f94 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8003f94:	4603      	mov	r3, r0
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d034      	beq.n	8004004 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f9a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	2a02      	cmp	r2, #2
 8003fa2:	d006      	beq.n	8003fb2 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8003fae:	2001      	movs	r0, #1
 8003fb0:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fb2:	6801      	ldr	r1, [r0, #0]
 8003fb4:	680a      	ldr	r2, [r1, #0]
 8003fb6:	f022 020e 	bic.w	r2, r2, #14
 8003fba:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fbc:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8003fbe:	680a      	ldr	r2, [r1, #0]
 8003fc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fc4:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003fc6:	6801      	ldr	r1, [r0, #0]
 8003fc8:	680a      	ldr	r2, [r1, #0]
 8003fca:	f022 0201 	bic.w	r2, r2, #1
 8003fce:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fd0:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003fd2:	f002 011c 	and.w	r1, r2, #28
 8003fd6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8003fd8:	2201      	movs	r2, #1
 8003fda:	408a      	lsls	r2, r1
 8003fdc:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003fe0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003fe2:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003fe4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fe6:	b132      	cbz	r2, 8003ff6 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fe8:	6811      	ldr	r1, [r2, #0]
 8003fea:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8003fee:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ff0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003ff2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8003ff4:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  return HAL_OK;
 8004002:	4770      	bx	lr
    return HAL_ERROR;
 8004004:	2001      	movs	r0, #1
}
 8004006:	4770      	bx	lr

08004008 <HAL_DMA_Abort_IT>:
{
 8004008:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800400a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d003      	beq.n	800401c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004014:	2304      	movs	r3, #4
 8004016:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8004018:	2001      	movs	r0, #1
}
 800401a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800401c:	6802      	ldr	r2, [r0, #0]
 800401e:	6813      	ldr	r3, [r2, #0]
 8004020:	f023 030e 	bic.w	r3, r3, #14
 8004024:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004026:	6802      	ldr	r2, [r0, #0]
 8004028:	6813      	ldr	r3, [r2, #0]
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004030:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8004032:	6813      	ldr	r3, [r2, #0]
 8004034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004038:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800403a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800403c:	f003 021c 	and.w	r2, r3, #28
 8004040:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004042:	2301      	movs	r3, #1
 8004044:	4093      	lsls	r3, r2
 8004046:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004048:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800404a:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800404c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 800404e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004050:	b133      	cbz	r3, 8004060 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004058:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800405a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800405c:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800405e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004060:	2301      	movs	r3, #1
 8004062:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8004066:	2300      	movs	r3, #0
 8004068:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 800406c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800406e:	b113      	cbz	r3, 8004076 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8004070:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004072:	2000      	movs	r0, #0
 8004074:	e7d1      	b.n	800401a <HAL_DMA_Abort_IT+0x12>
 8004076:	2000      	movs	r0, #0
 8004078:	e7cf      	b.n	800401a <HAL_DMA_Abort_IT+0x12>
	...

0800407c <HAL_DMA_IRQHandler>:
{
 800407c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800407e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004080:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004082:	6804      	ldr	r4, [r0, #0]
 8004084:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004086:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004088:	f003 031c 	and.w	r3, r3, #28
 800408c:	2204      	movs	r2, #4
 800408e:	409a      	lsls	r2, r3
 8004090:	420a      	tst	r2, r1
 8004092:	d015      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x44>
 8004094:	f015 0f04 	tst.w	r5, #4
 8004098:	d012      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	f013 0f20 	tst.w	r3, #32
 80040a0:	d103      	bne.n	80040aa <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	f023 0304 	bic.w	r3, r3, #4
 80040a8:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80040aa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80040ac:	f003 021c 	and.w	r2, r3, #28
 80040b0:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80040b2:	2304      	movs	r3, #4
 80040b4:	4093      	lsls	r3, r2
 80040b6:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80040b8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80040ba:	b103      	cbz	r3, 80040be <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 80040bc:	4798      	blx	r3
}
 80040be:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80040c0:	2202      	movs	r2, #2
 80040c2:	409a      	lsls	r2, r3
 80040c4:	420a      	tst	r2, r1
 80040c6:	d028      	beq.n	800411a <HAL_DMA_IRQHandler+0x9e>
 80040c8:	f015 0f02 	tst.w	r5, #2
 80040cc:	d025      	beq.n	800411a <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	f013 0f20 	tst.w	r3, #32
 80040d4:	d106      	bne.n	80040e4 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	f023 030a 	bic.w	r3, r3, #10
 80040dc:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80040de:	2301      	movs	r3, #1
 80040e0:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80040e4:	6802      	ldr	r2, [r0, #0]
 80040e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004158 <HAL_DMA_IRQHandler+0xdc>)
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d90e      	bls.n	800410a <HAL_DMA_IRQHandler+0x8e>
 80040ec:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80040ee:	f003 021c 	and.w	r2, r3, #28
 80040f2:	2302      	movs	r3, #2
 80040f4:	4093      	lsls	r3, r2
 80040f6:	4a19      	ldr	r2, [pc, #100]	@ (800415c <HAL_DMA_IRQHandler+0xe0>)
 80040f8:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 80040fa:	2300      	movs	r3, #0
 80040fc:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
      if (hdma->XferCpltCallback != NULL)
 8004100:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0db      	beq.n	80040be <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8004106:	4798      	blx	r3
 8004108:	e7d9      	b.n	80040be <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800410a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800410c:	f003 021c 	and.w	r2, r3, #28
 8004110:	2302      	movs	r3, #2
 8004112:	4093      	lsls	r3, r2
 8004114:	4a12      	ldr	r2, [pc, #72]	@ (8004160 <HAL_DMA_IRQHandler+0xe4>)
 8004116:	6053      	str	r3, [r2, #4]
 8004118:	e7ef      	b.n	80040fa <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800411a:	2208      	movs	r2, #8
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	420b      	tst	r3, r1
 8004122:	d0cc      	beq.n	80040be <HAL_DMA_IRQHandler+0x42>
 8004124:	f015 0f08 	tst.w	r5, #8
 8004128:	d0c9      	beq.n	80040be <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	f023 030e 	bic.w	r3, r3, #14
 8004130:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004132:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004134:	f003 031c 	and.w	r3, r3, #28
 8004138:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800413a:	2201      	movs	r2, #1
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004142:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004144:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8004148:	2300      	movs	r3, #0
 800414a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 800414e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0b4      	beq.n	80040be <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004154:	4798      	blx	r3
  return;
 8004156:	e7b2      	b.n	80040be <HAL_DMA_IRQHandler+0x42>
 8004158:	40020080 	.word	0x40020080
 800415c:	40020400 	.word	0x40020400
 8004160:	40020000 	.word	0x40020000

08004164 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8004164:	b178      	cbz	r0, 8004186 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8004166:	6803      	ldr	r3, [r0, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800416a:	f011 0f10 	tst.w	r1, #16
 800416e:	d004      	beq.n	800417a <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004170:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004174:	d004      	beq.n	8004180 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004176:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 800417a:	601a      	str	r2, [r3, #0]
  return status;
 800417c:	2000      	movs	r0, #0
 800417e:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004180:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8004184:	e7f9      	b.n	800417a <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8004186:	2001      	movs	r0, #1
}
 8004188:	4770      	bx	lr
	...

0800418c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800418c:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800418e:	4c05      	ldr	r4, [pc, #20]	@ (80041a4 <FLASH_Program_DoubleWord+0x18>)
 8004190:	6961      	ldr	r1, [r4, #20]
 8004192:	f041 0101 	orr.w	r1, r1, #1
 8004196:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004198:	6002      	str	r2, [r0, #0]
 800419a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800419e:	6043      	str	r3, [r0, #4]
}
 80041a0:	bc10      	pop	{r4}
 80041a2:	4770      	bx	lr
 80041a4:	58004000 	.word	0x58004000

080041a8 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80041a8:	4a0c      	ldr	r2, [pc, #48]	@ (80041dc <FLASH_Program_Fast+0x34>)
 80041aa:	6953      	ldr	r3, [r2, #20]
 80041ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80041b6:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80041b8:	2340      	movs	r3, #64	@ 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80041ba:	f851 2b04 	ldr.w	r2, [r1], #4
 80041be:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 80041c2:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 80041c4:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 80041c8:	d1f7      	bne.n	80041ba <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80041ca:	4b04      	ldr	r3, [pc, #16]	@ (80041dc <FLASH_Program_Fast+0x34>)
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80041d2:	d1fa      	bne.n	80041ca <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d4:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	58004000 	.word	0x58004000

080041e0 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80041e0:	4b09      	ldr	r3, [pc, #36]	@ (8004208 <HAL_FLASH_Unlock+0x28>)
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	db01      	blt.n	80041ec <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80041e8:	2000      	movs	r0, #0
 80041ea:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80041ec:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <HAL_FLASH_Unlock+0x28>)
 80041ee:	4a07      	ldr	r2, [pc, #28]	@ (800420c <HAL_FLASH_Unlock+0x2c>)
 80041f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80041f2:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 80041f6:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	db01      	blt.n	8004202 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80041fe:	2000      	movs	r0, #0
 8004200:	4770      	bx	lr
      status = HAL_ERROR;
 8004202:	2001      	movs	r0, #1
}
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	58004000 	.word	0x58004000
 800420c:	45670123 	.word	0x45670123

08004210 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004210:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <HAL_FLASH_Lock+0x18>)
 8004212:	695a      	ldr	r2, [r3, #20]
 8004214:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004218:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	db01      	blt.n	8004224 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8004220:	2001      	movs	r0, #1
}
 8004222:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8004224:	2000      	movs	r0, #0
 8004226:	4770      	bx	lr
 8004228:	58004000 	.word	0x58004000

0800422c <FLASH_WaitForLastOperation>:
{
 800422c:	b538      	push	{r3, r4, r5, lr}
 800422e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8004230:	f7fd fce0 	bl	8001bf4 <HAL_GetTick>
 8004234:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004236:	4b1b      	ldr	r3, [pc, #108]	@ (80042a4 <FLASH_WaitForLastOperation+0x78>)
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800423e:	d006      	beq.n	800424e <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004240:	f7fd fcd8 	bl	8001bf4 <HAL_GetTick>
 8004244:	1b00      	subs	r0, r0, r4
 8004246:	42a8      	cmp	r0, r5
 8004248:	d3f5      	bcc.n	8004236 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 800424a:	2003      	movs	r0, #3
}
 800424c:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 800424e:	4b15      	ldr	r3, [pc, #84]	@ (80042a4 <FLASH_WaitForLastOperation+0x78>)
 8004250:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004252:	f013 0f01 	tst.w	r3, #1
 8004256:	d115      	bne.n	8004284 <FLASH_WaitForLastOperation+0x58>
  error &= FLASH_FLAG_SR_ERRORS;
 8004258:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800425c:	f023 0305 	bic.w	r3, r3, #5
 8004260:	041b      	lsls	r3, r3, #16
 8004262:	0c1b      	lsrs	r3, r3, #16
  __HAL_FLASH_CLEAR_FLAG(error);
 8004264:	b10b      	cbz	r3, 800426a <FLASH_WaitForLastOperation+0x3e>
 8004266:	4a0f      	ldr	r2, [pc, #60]	@ (80042a4 <FLASH_WaitForLastOperation+0x78>)
 8004268:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 800426a:	b9ab      	cbnz	r3, 8004298 <FLASH_WaitForLastOperation+0x6c>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800426c:	4b0d      	ldr	r3, [pc, #52]	@ (80042a4 <FLASH_WaitForLastOperation+0x78>)
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8004274:	d014      	beq.n	80042a0 <FLASH_WaitForLastOperation+0x74>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004276:	f7fd fcbd 	bl	8001bf4 <HAL_GetTick>
 800427a:	1b00      	subs	r0, r0, r4
 800427c:	42a8      	cmp	r0, r5
 800427e:	d3f5      	bcc.n	800426c <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8004280:	2003      	movs	r0, #3
 8004282:	e7e3      	b.n	800424c <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004284:	4a07      	ldr	r2, [pc, #28]	@ (80042a4 <FLASH_WaitForLastOperation+0x78>)
 8004286:	2101      	movs	r1, #1
 8004288:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 800428a:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800428e:	f023 0305 	bic.w	r3, r3, #5
 8004292:	041b      	lsls	r3, r3, #16
 8004294:	0c1b      	lsrs	r3, r3, #16
  __HAL_FLASH_CLEAR_FLAG(error);
 8004296:	e7e5      	b.n	8004264 <FLASH_WaitForLastOperation+0x38>
    pFlash.ErrorCode = error;
 8004298:	4a03      	ldr	r2, [pc, #12]	@ (80042a8 <FLASH_WaitForLastOperation+0x7c>)
 800429a:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 800429c:	2001      	movs	r0, #1
 800429e:	e7d5      	b.n	800424c <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 80042a0:	2000      	movs	r0, #0
 80042a2:	e7d3      	b.n	800424c <FLASH_WaitForLastOperation+0x20>
 80042a4:	58004000 	.word	0x58004000
 80042a8:	20000688 	.word	0x20000688

080042ac <HAL_FLASH_Program>:
{
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80042b0:	4b15      	ldr	r3, [pc, #84]	@ (8004308 <HAL_FLASH_Program+0x5c>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d025      	beq.n	8004304 <HAL_FLASH_Program+0x58>
 80042b8:	4604      	mov	r4, r0
 80042ba:	460d      	mov	r5, r1
 80042bc:	4616      	mov	r6, r2
 80042be:	4b12      	ldr	r3, [pc, #72]	@ (8004308 <HAL_FLASH_Program+0x5c>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042c4:	2200      	movs	r2, #0
 80042c6:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80042c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80042cc:	f7ff ffae 	bl	800422c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80042d0:	b970      	cbnz	r0, 80042f0 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80042d2:	2c01      	cmp	r4, #1
 80042d4:	d010      	beq.n	80042f8 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80042d6:	4631      	mov	r1, r6
 80042d8:	4628      	mov	r0, r5
 80042da:	f7ff ff65 	bl	80041a8 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80042de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80042e2:	f7ff ffa3 	bl	800422c <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80042e6:	4a09      	ldr	r2, [pc, #36]	@ (800430c <HAL_FLASH_Program+0x60>)
 80042e8:	6953      	ldr	r3, [r2, #20]
 80042ea:	ea23 0304 	bic.w	r3, r3, r4
 80042ee:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 80042f0:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <HAL_FLASH_Program+0x5c>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	701a      	strb	r2, [r3, #0]
}
 80042f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 80042f8:	4632      	mov	r2, r6
 80042fa:	463b      	mov	r3, r7
 80042fc:	4628      	mov	r0, r5
 80042fe:	f7ff ff45 	bl	800418c <FLASH_Program_DoubleWord>
 8004302:	e7ec      	b.n	80042de <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8004304:	2002      	movs	r0, #2
 8004306:	e7f6      	b.n	80042f6 <HAL_FLASH_Program+0x4a>
 8004308:	20000688 	.word	0x20000688
 800430c:	58004000 	.word	0x58004000

08004310 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004310:	4a03      	ldr	r2, [pc, #12]	@ (8004320 <FLASH_MassErase+0x10>)
 8004312:	6953      	ldr	r3, [r2, #20]
 8004314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004318:	f043 0304 	orr.w	r3, r3, #4
 800431c:	6153      	str	r3, [r2, #20]
#endif
}
 800431e:	4770      	bx	lr
 8004320:	58004000 	.word	0x58004000

08004324 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004324:	4b18      	ldr	r3, [pc, #96]	@ (8004388 <FLASH_FlushCaches+0x64>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800432c:	2b01      	cmp	r3, #1
 800432e:	d006      	beq.n	800433e <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004330:	4b15      	ldr	r3, [pc, #84]	@ (8004388 <FLASH_FlushCaches+0x64>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004338:	2b01      	cmp	r3, #1
 800433a:	d012      	beq.n	8004362 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 800433c:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800433e:	4b12      	ldr	r3, [pc, #72]	@ (8004388 <FLASH_FlushCaches+0x64>)
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004346:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004356:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	e7e6      	b.n	8004330 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004362:	4b09      	ldr	r3, [pc, #36]	@ (8004388 <FLASH_FlushCaches+0x64>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800436a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800437a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004382:	601a      	str	r2, [r3, #0]
}
 8004384:	e7da      	b.n	800433c <FLASH_FlushCaches+0x18>
 8004386:	bf00      	nop
 8004388:	58004000 	.word	0x58004000

0800438c <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800438c:	4a03      	ldr	r2, [pc, #12]	@ (800439c <FLASH_AcknowledgePageErase+0x10>)
 800438e:	6953      	ldr	r3, [r2, #20]
 8004390:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8004394:	f023 0302 	bic.w	r3, r3, #2
 8004398:	6153      	str	r3, [r2, #20]
#endif
}
 800439a:	4770      	bx	lr
 800439c:	58004000 	.word	0x58004000

080043a0 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80043a0:	4a05      	ldr	r2, [pc, #20]	@ (80043b8 <FLASH_PageErase+0x18>)
 80043a2:	6953      	ldr	r3, [r2, #20]
 80043a4:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 80043a8:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 80043ac:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 80043b0:	f040 0002 	orr.w	r0, r0, #2
 80043b4:	6150      	str	r0, [r2, #20]
}
 80043b6:	4770      	bx	lr
 80043b8:	58004000 	.word	0x58004000

080043bc <HAL_FLASHEx_Erase>:
{
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80043be:	4b1e      	ldr	r3, [pc, #120]	@ (8004438 <HAL_FLASHEx_Erase+0x7c>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d035      	beq.n	8004432 <HAL_FLASHEx_Erase+0x76>
 80043c6:	4605      	mov	r5, r0
 80043c8:	460f      	mov	r7, r1
 80043ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004438 <HAL_FLASHEx_Erase+0x7c>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043d0:	2200      	movs	r2, #0
 80043d2:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80043d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80043d8:	f7ff ff28 	bl	800422c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80043dc:	4606      	mov	r6, r0
 80043de:	bb18      	cbnz	r0, 8004428 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d013      	beq.n	800440e <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 80043e6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ea:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80043ec:	686c      	ldr	r4, [r5, #4]
 80043ee:	686b      	ldr	r3, [r5, #4]
 80043f0:	68aa      	ldr	r2, [r5, #8]
 80043f2:	4413      	add	r3, r2
 80043f4:	42a3      	cmp	r3, r4
 80043f6:	d913      	bls.n	8004420 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7ff ffd1 	bl	80043a0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80043fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004402:	f7ff ff13 	bl	800422c <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8004406:	4606      	mov	r6, r0
 8004408:	b948      	cbnz	r0, 800441e <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800440a:	3401      	adds	r4, #1
 800440c:	e7ef      	b.n	80043ee <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 800440e:	f7ff ff7f 	bl	8004310 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004412:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004416:	f7ff ff09 	bl	800422c <FLASH_WaitForLastOperation>
 800441a:	4606      	mov	r6, r0
 800441c:	e002      	b.n	8004424 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 800441e:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8004420:	f7ff ffb4 	bl	800438c <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8004424:	f7ff ff7e 	bl	8004324 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004428:	4b03      	ldr	r3, [pc, #12]	@ (8004438 <HAL_FLASHEx_Erase+0x7c>)
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
}
 800442e:	4630      	mov	r0, r6
 8004430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8004432:	2602      	movs	r6, #2
 8004434:	e7fb      	b.n	800442e <HAL_FLASHEx_Erase+0x72>
 8004436:	bf00      	nop
 8004438:	20000688 	.word	0x20000688

0800443c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800443c:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 800443e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004440:	e069      	b.n	8004516 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004442:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004444:	005e      	lsls	r6, r3, #1
 8004446:	2403      	movs	r4, #3
 8004448:	40b4      	lsls	r4, r6
 800444a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800444e:	68cc      	ldr	r4, [r1, #12]
 8004450:	40b4      	lsls	r4, r6
 8004452:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004454:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004456:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004458:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800445c:	684c      	ldr	r4, [r1, #4]
 800445e:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004462:	409c      	lsls	r4, r3
 8004464:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8004466:	6044      	str	r4, [r0, #4]
 8004468:	e066      	b.n	8004538 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800446a:	08dd      	lsrs	r5, r3, #3
 800446c:	3508      	adds	r5, #8
 800446e:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004472:	f003 0c07 	and.w	ip, r3, #7
 8004476:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800447a:	f04f 0e0f 	mov.w	lr, #15
 800447e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004482:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004486:	690c      	ldr	r4, [r1, #16]
 8004488:	fa04 f40c 	lsl.w	r4, r4, ip
 800448c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004490:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004494:	e067      	b.n	8004566 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004496:	2402      	movs	r4, #2
 8004498:	e000      	b.n	800449c <HAL_GPIO_Init+0x60>
 800449a:	2400      	movs	r4, #0
 800449c:	fa04 f40e 	lsl.w	r4, r4, lr
 80044a0:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044a2:	f10c 0c02 	add.w	ip, ip, #2
 80044a6:	4d4b      	ldr	r5, [pc, #300]	@ (80045d4 <HAL_GPIO_Init+0x198>)
 80044a8:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044ac:	4c4a      	ldr	r4, [pc, #296]	@ (80045d8 <HAL_GPIO_Init+0x19c>)
 80044ae:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80044b0:	43d4      	mvns	r4, r2
 80044b2:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044b6:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80044ba:	f41c 1f80 	tst.w	ip, #1048576	@ 0x100000
 80044be:	d001      	beq.n	80044c4 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80044c0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80044c4:	4d44      	ldr	r5, [pc, #272]	@ (80045d8 <HAL_GPIO_Init+0x19c>)
 80044c6:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80044c8:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80044ca:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044ce:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80044d2:	f41c 1f00 	tst.w	ip, #2097152	@ 0x200000
 80044d6:	d001      	beq.n	80044dc <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 80044d8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80044dc:	4d3e      	ldr	r5, [pc, #248]	@ (80045d8 <HAL_GPIO_Init+0x19c>)
 80044de:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80044e0:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80044e4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044e8:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80044ec:	f41c 3f80 	tst.w	ip, #65536	@ 0x10000
 80044f0:	d001      	beq.n	80044f6 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 80044f2:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80044f6:	4d38      	ldr	r5, [pc, #224]	@ (80045d8 <HAL_GPIO_Init+0x19c>)
 80044f8:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80044fc:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004500:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004502:	684e      	ldr	r6, [r1, #4]
 8004504:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8004508:	d001      	beq.n	800450e <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 800450a:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800450e:	4a32      	ldr	r2, [pc, #200]	@ (80045d8 <HAL_GPIO_Init+0x19c>)
 8004510:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004514:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004516:	680a      	ldr	r2, [r1, #0]
 8004518:	fa32 f403 	lsrs.w	r4, r2, r3
 800451c:	d058      	beq.n	80045d0 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800451e:	f04f 0c01 	mov.w	ip, #1
 8004522:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004526:	ea1c 0202 	ands.w	r2, ip, r2
 800452a:	d0f3      	beq.n	8004514 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800452c:	684c      	ldr	r4, [r1, #4]
 800452e:	f004 0403 	and.w	r4, r4, #3
 8004532:	3c01      	subs	r4, #1
 8004534:	2c01      	cmp	r4, #1
 8004536:	d984      	bls.n	8004442 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004538:	684c      	ldr	r4, [r1, #4]
 800453a:	f004 0403 	and.w	r4, r4, #3
 800453e:	2c03      	cmp	r4, #3
 8004540:	d00c      	beq.n	800455c <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8004542:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004544:	005d      	lsls	r5, r3, #1
 8004546:	f04f 0c03 	mov.w	ip, #3
 800454a:	fa0c fc05 	lsl.w	ip, ip, r5
 800454e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004552:	688c      	ldr	r4, [r1, #8]
 8004554:	40ac      	lsls	r4, r5
 8004556:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800455a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800455c:	684c      	ldr	r4, [r1, #4]
 800455e:	f004 0403 	and.w	r4, r4, #3
 8004562:	2c02      	cmp	r4, #2
 8004564:	d081      	beq.n	800446a <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8004566:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004568:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800456c:	f04f 0c03 	mov.w	ip, #3
 8004570:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004574:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004578:	684c      	ldr	r4, [r1, #4]
 800457a:	f004 0403 	and.w	r4, r4, #3
 800457e:	fa04 f40e 	lsl.w	r4, r4, lr
 8004582:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004586:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004588:	684c      	ldr	r4, [r1, #4]
 800458a:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 800458e:	d0c1      	beq.n	8004514 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8004590:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004594:	f10c 0502 	add.w	r5, ip, #2
 8004598:	4c0e      	ldr	r4, [pc, #56]	@ (80045d4 <HAL_GPIO_Init+0x198>)
 800459a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800459e:	f003 0e03 	and.w	lr, r3, #3
 80045a2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80045a6:	2407      	movs	r4, #7
 80045a8:	fa04 f40e 	lsl.w	r4, r4, lr
 80045ac:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045b0:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80045b4:	f43f af71 	beq.w	800449a <HAL_GPIO_Init+0x5e>
 80045b8:	4c08      	ldr	r4, [pc, #32]	@ (80045dc <HAL_GPIO_Init+0x1a0>)
 80045ba:	42a0      	cmp	r0, r4
 80045bc:	d006      	beq.n	80045cc <HAL_GPIO_Init+0x190>
 80045be:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80045c2:	42a0      	cmp	r0, r4
 80045c4:	f43f af67 	beq.w	8004496 <HAL_GPIO_Init+0x5a>
 80045c8:	2407      	movs	r4, #7
 80045ca:	e767      	b.n	800449c <HAL_GPIO_Init+0x60>
 80045cc:	2401      	movs	r4, #1
 80045ce:	e765      	b.n	800449c <HAL_GPIO_Init+0x60>
  }
}
 80045d0:	bd70      	pop	{r4, r5, r6, pc}
 80045d2:	bf00      	nop
 80045d4:	40010000 	.word	0x40010000
 80045d8:	58000800 	.word	0x58000800
 80045dc:	48000400 	.word	0x48000400

080045e0 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80045e0:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80045e2:	fa31 f203 	lsrs.w	r2, r1, r3
 80045e6:	d071      	beq.n	80046cc <HAL_GPIO_DeInit+0xec>
{
 80045e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ea:	e02e      	b.n	800464a <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80045ec:	2502      	movs	r5, #2
 80045ee:	e000      	b.n	80045f2 <HAL_GPIO_DeInit+0x12>
 80045f0:	2500      	movs	r5, #0
 80045f2:	fa05 f50c 	lsl.w	r5, r5, ip
 80045f6:	42a5      	cmp	r5, r4
 80045f8:	d049      	beq.n	800468e <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80045fa:	6804      	ldr	r4, [r0, #0]
 80045fc:	005d      	lsls	r5, r3, #1
 80045fe:	f04f 0c03 	mov.w	ip, #3
 8004602:	fa0c fc05 	lsl.w	ip, ip, r5
 8004606:	ea44 040c 	orr.w	r4, r4, ip
 800460a:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800460c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004610:	f10e 0e08 	add.w	lr, lr, #8
 8004614:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8004618:	f003 0607 	and.w	r6, r3, #7
 800461c:	00b6      	lsls	r6, r6, #2
 800461e:	250f      	movs	r5, #15
 8004620:	40b5      	lsls	r5, r6
 8004622:	ea24 0405 	bic.w	r4, r4, r5
 8004626:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800462a:	6884      	ldr	r4, [r0, #8]
 800462c:	ea24 040c 	bic.w	r4, r4, ip
 8004630:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004632:	6844      	ldr	r4, [r0, #4]
 8004634:	ea24 0202 	bic.w	r2, r4, r2
 8004638:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800463a:	68c2      	ldr	r2, [r0, #12]
 800463c:	ea22 020c 	bic.w	r2, r2, ip
 8004640:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8004642:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004644:	fa31 f203 	lsrs.w	r2, r1, r3
 8004648:	d03f      	beq.n	80046ca <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800464a:	2201      	movs	r2, #1
 800464c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800464e:	ea12 0701 	ands.w	r7, r2, r1
 8004652:	d0f6      	beq.n	8004642 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004654:	089e      	lsrs	r6, r3, #2
 8004656:	1cb5      	adds	r5, r6, #2
 8004658:	4c1d      	ldr	r4, [pc, #116]	@ (80046d0 <HAL_GPIO_DeInit+0xf0>)
 800465a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800465e:	f003 0c03 	and.w	ip, r3, #3
 8004662:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004666:	f04f 0e07 	mov.w	lr, #7
 800466a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800466e:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004672:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8004676:	d0bb      	beq.n	80045f0 <HAL_GPIO_DeInit+0x10>
 8004678:	4d16      	ldr	r5, [pc, #88]	@ (80046d4 <HAL_GPIO_DeInit+0xf4>)
 800467a:	42a8      	cmp	r0, r5
 800467c:	d005      	beq.n	800468a <HAL_GPIO_DeInit+0xaa>
 800467e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004682:	42a8      	cmp	r0, r5
 8004684:	d0b2      	beq.n	80045ec <HAL_GPIO_DeInit+0xc>
 8004686:	2507      	movs	r5, #7
 8004688:	e7b3      	b.n	80045f2 <HAL_GPIO_DeInit+0x12>
 800468a:	2501      	movs	r5, #1
 800468c:	e7b1      	b.n	80045f2 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 800468e:	4c12      	ldr	r4, [pc, #72]	@ (80046d8 <HAL_GPIO_DeInit+0xf8>)
 8004690:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 8004694:	ea25 0507 	bic.w	r5, r5, r7
 8004698:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800469c:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 80046a0:	ea25 0507 	bic.w	r5, r5, r7
 80046a4:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 80046a8:	6825      	ldr	r5, [r4, #0]
 80046aa:	ea25 0507 	bic.w	r5, r5, r7
 80046ae:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80046b0:	6865      	ldr	r5, [r4, #4]
 80046b2:	ea25 0507 	bic.w	r5, r5, r7
 80046b6:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80046b8:	4d05      	ldr	r5, [pc, #20]	@ (80046d0 <HAL_GPIO_DeInit+0xf0>)
 80046ba:	3602      	adds	r6, #2
 80046bc:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 80046c0:	ea24 040e 	bic.w	r4, r4, lr
 80046c4:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 80046c8:	e797      	b.n	80045fa <HAL_GPIO_DeInit+0x1a>
  }
}
 80046ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40010000 	.word	0x40010000
 80046d4:	48000400 	.word	0x48000400
 80046d8:	58000800 	.word	0x58000800

080046dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046dc:	b10a      	cbz	r2, 80046e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046de:	6181      	str	r1, [r0, #24]
 80046e0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046e2:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80046e4:	4770      	bx	lr

080046e6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046e6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046e8:	ea01 0203 	and.w	r2, r1, r3
 80046ec:	ea21 0103 	bic.w	r1, r1, r3
 80046f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80046f4:	6181      	str	r1, [r0, #24]
}
 80046f6:	4770      	bx	lr

080046f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046f8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046fa:	4b05      	ldr	r3, [pc, #20]	@ (8004710 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	4203      	tst	r3, r0
 8004700:	d100      	bne.n	8004704 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004702:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004704:	4b02      	ldr	r3, [pc, #8]	@ (8004710 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004706:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004708:	f7fe fb58 	bl	8002dbc <HAL_GPIO_EXTI_Callback>
}
 800470c:	e7f9      	b.n	8004702 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800470e:	bf00      	nop
 8004710:	58000800 	.word	0x58000800

08004714 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004714:	4a02      	ldr	r2, [pc, #8]	@ (8004720 <HAL_PWR_EnableBkUpAccess+0xc>)
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800471c:	6013      	str	r3, [r2, #0]
}
 800471e:	4770      	bx	lr
 8004720:	58000400 	.word	0x58000400

08004724 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004724:	b510      	push	{r4, lr}
 8004726:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004728:	b9a0      	cbnz	r0, 8004754 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800472a:	4b0f      	ldr	r3, [pc, #60]	@ (8004768 <HAL_PWR_EnterSLEEPMode+0x44>)
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8004732:	d10a      	bne.n	800474a <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004734:	4a0d      	ldr	r2, [pc, #52]	@ (800476c <HAL_PWR_EnterSLEEPMode+0x48>)
 8004736:	6913      	ldr	r3, [r2, #16]
 8004738:	f023 0304 	bic.w	r3, r3, #4
 800473c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800473e:	2c01      	cmp	r4, #1
 8004740:	d010      	beq.n	8004764 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004742:	bf40      	sev
    __WFE();
 8004744:	bf20      	wfe
    __WFE();
 8004746:	bf20      	wfe
  }
}
 8004748:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800474a:	f000 f821 	bl	8004790 <HAL_PWREx_DisableLowPowerRunMode>
 800474e:	2800      	cmp	r0, #0
 8004750:	d0f0      	beq.n	8004734 <HAL_PWR_EnterSLEEPMode+0x10>
 8004752:	e7f9      	b.n	8004748 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004754:	4b04      	ldr	r3, [pc, #16]	@ (8004768 <HAL_PWR_EnterSLEEPMode+0x44>)
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800475c:	d1ea      	bne.n	8004734 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800475e:	f000 f80f 	bl	8004780 <HAL_PWREx_EnableLowPowerRunMode>
 8004762:	e7e7      	b.n	8004734 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8004764:	bf30      	wfi
 8004766:	e7ef      	b.n	8004748 <HAL_PWR_EnterSLEEPMode+0x24>
 8004768:	58000400 	.word	0x58000400
 800476c:	e000ed00 	.word	0xe000ed00

08004770 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8004770:	4b02      	ldr	r3, [pc, #8]	@ (800477c <HAL_PWREx_GetVoltageRange+0xc>)
 8004772:	6818      	ldr	r0, [r3, #0]
}
 8004774:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	58000400 	.word	0x58000400

08004780 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004780:	4a02      	ldr	r2, [pc, #8]	@ (800478c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8004782:	6813      	ldr	r3, [r2, #0]
 8004784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004788:	6013      	str	r3, [r2, #0]
}
 800478a:	4770      	bx	lr
 800478c:	58000400 	.word	0x58000400

08004790 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004790:	4a0f      	ldr	r2, [pc, #60]	@ (80047d0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004792:	6813      	ldr	r3, [r2, #0]
 8004794:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004798:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800479a:	4b0e      	ldr	r3, [pc, #56]	@ (80047d4 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2232      	movs	r2, #50	@ 0x32
 80047a0:	fb02 f303 	mul.w	r3, r2, r3
 80047a4:	4a0c      	ldr	r2, [pc, #48]	@ (80047d8 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80047ac:	e000      	b.n	80047b0 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 80047ae:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80047b0:	4a07      	ldr	r2, [pc, #28]	@ (80047d0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80047b2:	6952      	ldr	r2, [r2, #20]
 80047b4:	f412 7f00 	tst.w	r2, #512	@ 0x200
 80047b8:	d001      	beq.n	80047be <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f7      	bne.n	80047ae <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80047be:	4b04      	ldr	r3, [pc, #16]	@ (80047d0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80047c6:	d101      	bne.n	80047cc <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80047c8:	2000      	movs	r0, #0
 80047ca:	4770      	bx	lr
    return HAL_TIMEOUT;
 80047cc:	2003      	movs	r0, #3
}
 80047ce:	4770      	bx	lr
 80047d0:	58000400 	.word	0x58000400
 80047d4:	20000074 	.word	0x20000074
 80047d8:	431bde83 	.word	0x431bde83

080047dc <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80047dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004810 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80047de:	6813      	ldr	r3, [r2, #0]
 80047e0:	f023 0307 	bic.w	r3, r3, #7
 80047e4:	f043 0302 	orr.w	r3, r3, #2
 80047e8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80047ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004814 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80047ec:	6913      	ldr	r3, [r2, #16]
 80047ee:	f043 0304 	orr.w	r3, r3, #4
 80047f2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80047f4:	2801      	cmp	r0, #1
 80047f6:	d008      	beq.n	800480a <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80047f8:	bf40      	sev
    __WFE();
 80047fa:	bf20      	wfe
    __WFE();
 80047fc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80047fe:	4a05      	ldr	r2, [pc, #20]	@ (8004814 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8004800:	6913      	ldr	r3, [r2, #16]
 8004802:	f023 0304 	bic.w	r3, r3, #4
 8004806:	6113      	str	r3, [r2, #16]
}
 8004808:	4770      	bx	lr
    __WFI();
 800480a:	bf30      	wfi
 800480c:	e7f7      	b.n	80047fe <HAL_PWREx_EnterSTOP2Mode+0x22>
 800480e:	bf00      	nop
 8004810:	58000400 	.word	0x58000400
 8004814:	e000ed00 	.word	0xe000ed00

08004818 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004818:	b530      	push	{r4, r5, lr}
 800481a:	b089      	sub	sp, #36	@ 0x24
 800481c:	4604      	mov	r4, r0
 800481e:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004820:	4b2a      	ldr	r3, [pc, #168]	@ (80048cc <RCC_SetFlashLatency+0xb4>)
 8004822:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004826:	9006      	str	r0, [sp, #24]
 8004828:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800482c:	f103 0208 	add.w	r2, r3, #8
 8004830:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004834:	9004      	str	r0, [sp, #16]
 8004836:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800483a:	ad01      	add	r5, sp, #4
 800483c:	3310      	adds	r3, #16
 800483e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004842:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004846:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800484a:	d007      	beq.n	800485c <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800484c:	2300      	movs	r3, #0
 800484e:	e014      	b.n	800487a <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8004850:	aa08      	add	r2, sp, #32
 8004852:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004856:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800485a:	e01e      	b.n	800489a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800485c:	2300      	movs	r3, #0
 800485e:	2b02      	cmp	r3, #2
 8004860:	d808      	bhi.n	8004874 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004862:	aa08      	add	r2, sp, #32
 8004864:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004868:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 800486c:	42a2      	cmp	r2, r4
 800486e:	d2ef      	bcs.n	8004850 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004870:	3301      	adds	r3, #1
 8004872:	e7f4      	b.n	800485e <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004874:	2500      	movs	r5, #0
 8004876:	e010      	b.n	800489a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004878:	3301      	adds	r3, #1
 800487a:	2b02      	cmp	r3, #2
 800487c:	d80c      	bhi.n	8004898 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800487e:	aa08      	add	r2, sp, #32
 8004880:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004884:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8004888:	42a2      	cmp	r2, r4
 800488a:	d3f5      	bcc.n	8004878 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800488c:	aa08      	add	r2, sp, #32
 800488e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004892:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004896:	e000      	b.n	800489a <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004898:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800489a:	4a0d      	ldr	r2, [pc, #52]	@ (80048d0 <RCC_SetFlashLatency+0xb8>)
 800489c:	6813      	ldr	r3, [r2, #0]
 800489e:	f023 0307 	bic.w	r3, r3, #7
 80048a2:	432b      	orrs	r3, r5
 80048a4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80048a6:	f7fd f9a5 	bl	8001bf4 <HAL_GetTick>
 80048aa:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80048ac:	4b08      	ldr	r3, [pc, #32]	@ (80048d0 <RCC_SetFlashLatency+0xb8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	42ab      	cmp	r3, r5
 80048b6:	d006      	beq.n	80048c6 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80048b8:	f7fd f99c 	bl	8001bf4 <HAL_GetTick>
 80048bc:	1b00      	subs	r0, r0, r4
 80048be:	2802      	cmp	r0, #2
 80048c0:	d9f4      	bls.n	80048ac <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 80048c2:	2003      	movs	r0, #3
 80048c4:	e000      	b.n	80048c8 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 80048c6:	2000      	movs	r0, #0
}
 80048c8:	b009      	add	sp, #36	@ 0x24
 80048ca:	bd30      	pop	{r4, r5, pc}
 80048cc:	080119d0 	.word	0x080119d0
 80048d0:	58004000 	.word	0x58004000

080048d4 <RCC_SetFlashLatencyFromMSIRange>:
{
 80048d4:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80048d6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80048da:	4b0c      	ldr	r3, [pc, #48]	@ (800490c <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80048dc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80048e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	4a08      	ldr	r2, [pc, #32]	@ (8004910 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80048ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f2:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80048f6:	f7ff ff3b 	bl	8004770 <HAL_PWREx_GetVoltageRange>
 80048fa:	4601      	mov	r1, r0
 80048fc:	4b05      	ldr	r3, [pc, #20]	@ (8004914 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80048fe:	fba3 3404 	umull	r3, r4, r3, r4
 8004902:	0ca0      	lsrs	r0, r4, #18
 8004904:	f7ff ff88 	bl	8004818 <RCC_SetFlashLatency>
}
 8004908:	bd10      	pop	{r4, pc}
 800490a:	bf00      	nop
 800490c:	08011f2c 	.word	0x08011f2c
 8004910:	08011f8c 	.word	0x08011f8c
 8004914:	431bde83 	.word	0x431bde83

08004918 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800491c:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004924:	f011 010c 	ands.w	r1, r1, #12
 8004928:	d00a      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x28>
 800492a:	290c      	cmp	r1, #12
 800492c:	d006      	beq.n	800493c <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800492e:	2904      	cmp	r1, #4
 8004930:	d047      	beq.n	80049c2 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004932:	2908      	cmp	r1, #8
 8004934:	d03b      	beq.n	80049ae <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8004936:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8004938:	4610      	mov	r0, r2
 800493a:	e026      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800493c:	2b01      	cmp	r3, #1
 800493e:	d1f6      	bne.n	800492e <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f013 0308 	ands.w	r3, r3, #8
 800494a:	d00d      	beq.n	8004968 <HAL_RCC_GetSysClockFreq+0x50>
 800494c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f013 0308 	ands.w	r3, r3, #8
 8004956:	d124      	bne.n	80049a2 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004958:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800495c:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004960:	4a2e      	ldr	r2, [pc, #184]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x104>)
 8004962:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004966:	e00e      	b.n	8004986 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004968:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800496c:	6812      	ldr	r2, [r2, #0]
 800496e:	f012 0f08 	tst.w	r2, #8
 8004972:	d112      	bne.n	800499a <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004978:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800497c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004980:	4a26      	ldr	r2, [pc, #152]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x104>)
 8004982:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004986:	b1d1      	cbz	r1, 80049be <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8004988:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800498a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004994:	2b0c      	cmp	r3, #12
 8004996:	d01a      	beq.n	80049ce <HAL_RCC_GetSysClockFreq+0xb6>
}
 8004998:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800499a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	e7ee      	b.n	8004980 <HAL_RCC_GetSysClockFreq+0x68>
 80049a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049a6:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80049a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80049ac:	e7d8      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80049ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	f412 1280 	ands.w	r2, r2, #1048576	@ 0x100000
 80049b8:	d106      	bne.n	80049c8 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 80049ba:	4819      	ldr	r0, [pc, #100]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80049bc:	e7e5      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 80049be:	4610      	mov	r0, r2
 80049c0:	e7e3      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80049c2:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 80049c4:	4817      	ldr	r0, [pc, #92]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049c6:	e7e0      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80049c8:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 80049ca:	4816      	ldr	r0, [pc, #88]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049cc:	e7dd      	b.n	800498a <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80049ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d009      	beq.n	80049f0 <HAL_RCC_GetSysClockFreq+0xd8>
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d108      	bne.n	80049f2 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80049e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80049ea:	d115      	bne.n	8004a18 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80049ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ee:	e000      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80049f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80049f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049f6:	68cb      	ldr	r3, [r1, #12]
 80049f8:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80049fc:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004a00:	68cb      	ldr	r3, [r1, #12]
 8004a02:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004a06:	3301      	adds	r3, #1
 8004a08:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004a0c:	68c8      	ldr	r0, [r1, #12]
 8004a0e:	0f40      	lsrs	r0, r0, #29
 8004a10:	3001      	adds	r0, #1
 8004a12:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8004a16:	e7bf      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8004a18:	4a02      	ldr	r2, [pc, #8]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a1a:	e7ea      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0xda>
 8004a1c:	08011f2c 	.word	0x08011f2c
 8004a20:	01e84800 	.word	0x01e84800
 8004a24:	00f42400 	.word	0x00f42400

08004a28 <HAL_RCC_GetHCLKFreq>:
{
 8004a28:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004a2a:	f7ff ff75 	bl	8004918 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004a38:	4a02      	ldr	r2, [pc, #8]	@ (8004a44 <HAL_RCC_GetHCLKFreq+0x1c>)
 8004a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004a3e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004a42:	bd08      	pop	{r3, pc}
 8004a44:	08011f8c 	.word	0x08011f8c

08004a48 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	f000 8311 	beq.w	8005070 <HAL_RCC_OscConfig+0x628>
{
 8004a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a50:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a56:	689d      	ldr	r5, [r3, #8]
 8004a58:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004a5c:	68de      	ldr	r6, [r3, #12]
 8004a5e:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a62:	6803      	ldr	r3, [r0, #0]
 8004a64:	f013 0f20 	tst.w	r3, #32
 8004a68:	d02a      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a6a:	2d00      	cmp	r5, #0
 8004a6c:	d065      	beq.n	8004b3a <HAL_RCC_OscConfig+0xf2>
 8004a6e:	2d0c      	cmp	r5, #12
 8004a70:	d061      	beq.n	8004b36 <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a72:	6a23      	ldr	r3, [r4, #32]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80bf 	beq.w	8004bf8 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004a7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a7e:	6813      	ldr	r3, [r2, #0]
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004a86:	f7fd f8b5 	bl	8001bf4 <HAL_GetTick>
 8004a8a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f013 0f02 	tst.w	r3, #2
 8004a96:	f000 80a7 	beq.w	8004be8 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	f042 0208 	orr.w	r2, r2, #8
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004aac:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ab2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004aba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004abe:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	f013 0f01 	tst.w	r3, #1
 8004ac6:	f000 80b5 	beq.w	8004c34 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004aca:	2d08      	cmp	r5, #8
 8004acc:	f000 80ae 	beq.w	8004c2c <HAL_RCC_OscConfig+0x1e4>
 8004ad0:	2d0c      	cmp	r5, #12
 8004ad2:	f000 80a8 	beq.w	8004c26 <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004ad6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ada:	6813      	ldr	r3, [r2, #0]
 8004adc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004ae0:	68a1      	ldr	r1, [r4, #8]
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae6:	6863      	ldr	r3, [r4, #4]
 8004ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aec:	f000 80c4 	beq.w	8004c78 <HAL_RCC_OscConfig+0x230>
 8004af0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004af4:	f000 80c5 	beq.w	8004c82 <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004b02:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8004b0a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80c2 	beq.w	8004c98 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8004b14:	f7fd f86e 	bl	8001bf4 <HAL_GetTick>
 8004b18:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004b24:	f040 8086 	bne.w	8004c34 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fd f864 	bl	8001bf4 <HAL_GetTick>
 8004b2c:	1bc0      	subs	r0, r0, r7
 8004b2e:	2864      	cmp	r0, #100	@ 0x64
 8004b30:	d9f3      	bls.n	8004b1a <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8004b32:	2003      	movs	r0, #3
 8004b34:	e2a9      	b.n	800508a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b36:	2e01      	cmp	r6, #1
 8004b38:	d19b      	bne.n	8004a72 <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004b3a:	6a23      	ldr	r3, [r4, #32]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 8299 	beq.w	8005074 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b42:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f013 0f08 	tst.w	r3, #8
 8004b4e:	d029      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x15c>
 8004b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b5a:	4298      	cmp	r0, r3
 8004b5c:	d92a      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b5e:	f7ff feb9 	bl	80048d4 <RCC_SetFlashLatencyFromMSIRange>
 8004b62:	2800      	cmp	r0, #0
 8004b64:	f040 8288 	bne.w	8005078 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	f042 0208 	orr.w	r2, r2, #8
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004b7a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b80:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004b88:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b8c:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b8e:	f7ff ff4b 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 8004b92:	4bba      	ldr	r3, [pc, #744]	@ (8004e7c <HAL_RCC_OscConfig+0x434>)
 8004b94:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8004b96:	4bba      	ldr	r3, [pc, #744]	@ (8004e80 <HAL_RCC_OscConfig+0x438>)
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	f7fd f829 	bl	8001bf0 <HAL_InitTick>
        if (status != HAL_OK)
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d08e      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x78>
 8004ba2:	e272      	b.n	800508a <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bb2:	e7d2      	b.n	8004b5a <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	f042 0208 	orr.w	r2, r2, #8
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004bc6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bcc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004bd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004bd8:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bda:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004bdc:	f7ff fe7a 	bl	80048d4 <RCC_SetFlashLatencyFromMSIRange>
 8004be0:	2800      	cmp	r0, #0
 8004be2:	d0d4      	beq.n	8004b8e <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8004be4:	2001      	movs	r0, #1
 8004be6:	e250      	b.n	800508a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004be8:	f7fd f804 	bl	8001bf4 <HAL_GetTick>
 8004bec:	1bc0      	subs	r0, r0, r7
 8004bee:	2802      	cmp	r0, #2
 8004bf0:	f67f af4c 	bls.w	8004a8c <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8004bf4:	2003      	movs	r0, #3
 8004bf6:	e248      	b.n	800508a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004bf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bfc:	6813      	ldr	r3, [r2, #0]
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c04:	f7fc fff6 	bl	8001bf4 <HAL_GetTick>
 8004c08:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f013 0f02 	tst.w	r3, #2
 8004c14:	f43f af54 	beq.w	8004ac0 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c18:	f7fc ffec 	bl	8001bf4 <HAL_GetTick>
 8004c1c:	1bc0      	subs	r0, r0, r7
 8004c1e:	2802      	cmp	r0, #2
 8004c20:	d9f3      	bls.n	8004c0a <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8004c22:	2003      	movs	r0, #3
 8004c24:	e231      	b.n	800508a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c26:	2e03      	cmp	r6, #3
 8004c28:	f47f af55 	bne.w	8004ad6 <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004c2c:	6863      	ldr	r3, [r4, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8224 	beq.w	800507c <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	f013 0f02 	tst.w	r3, #2
 8004c3a:	d056      	beq.n	8004cea <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004c3c:	2d04      	cmp	r5, #4
 8004c3e:	d03d      	beq.n	8004cbc <HAL_RCC_OscConfig+0x274>
 8004c40:	2d0c      	cmp	r5, #12
 8004c42:	d039      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c44:	6923      	ldr	r3, [r4, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 808a 	beq.w	8004d60 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004c4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c50:	6813      	ldr	r3, [r2, #0]
 8004c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c56:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c58:	f7fc ffcc 	bl	8001bf4 <HAL_GetTick>
 8004c5c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004c5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004c68:	d136      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c6a:	f7fc ffc3 	bl	8001bf4 <HAL_GetTick>
 8004c6e:	1b80      	subs	r0, r0, r6
 8004c70:	2802      	cmp	r0, #2
 8004c72:	d9f4      	bls.n	8004c5e <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8004c74:	2003      	movs	r0, #3
 8004c76:	e208      	b.n	800508a <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004c78:	6813      	ldr	r3, [r2, #0]
 8004c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c7e:	6013      	str	r3, [r2, #0]
}
 8004c80:	e744      	b.n	8004b0c <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8004c8c:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004c94:	601a      	str	r2, [r3, #0]
}
 8004c96:	e739      	b.n	8004b0c <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8004c98:	f7fc ffac 	bl	8001bf4 <HAL_GetTick>
 8004c9c:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004ca8:	d0c4      	beq.n	8004c34 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004caa:	f7fc ffa3 	bl	8001bf4 <HAL_GetTick>
 8004cae:	1bc0      	subs	r0, r0, r7
 8004cb0:	2864      	cmp	r0, #100	@ 0x64
 8004cb2:	d9f4      	bls.n	8004c9e <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8004cb4:	2003      	movs	r0, #3
 8004cb6:	e1e8      	b.n	800508a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cb8:	2e02      	cmp	r6, #2
 8004cba:	d1c3      	bne.n	8004c44 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004cbc:	6923      	ldr	r3, [r4, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 81de 	beq.w	8005080 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc4:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004cc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cca:	6853      	ldr	r3, [r2, #4]
 8004ccc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004cd0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004cd4:	6053      	str	r3, [r2, #4]
}
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd8:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004cda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cde:	6853      	ldr	r3, [r2, #4]
 8004ce0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004ce4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004ce8:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	f013 0f08 	tst.w	r3, #8
 8004cf0:	d07e      	beq.n	8004df0 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cf2:	69a3      	ldr	r3, [r4, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d062      	beq.n	8004dbe <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8004cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004d00:	69e1      	ldr	r1, [r4, #28]
 8004d02:	f003 0210 	and.w	r2, r3, #16
 8004d06:	4291      	cmp	r1, r2
 8004d08:	d011      	beq.n	8004d2e <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004d0a:	f003 0203 	and.w	r2, r3, #3
 8004d0e:	2a02      	cmp	r2, #2
 8004d10:	f000 81b8 	beq.w	8005084 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004d14:	f013 0f01 	tst.w	r3, #1
 8004d18:	d138      	bne.n	8004d8c <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004d1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d1e:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004d22:	f023 0310 	bic.w	r3, r3, #16
 8004d26:	69e1      	ldr	r1, [r4, #28]
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004d2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d32:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004d3e:	f7fc ff59 	bl	8001bf4 <HAL_GetTick>
 8004d42:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d4c:	f013 0f02 	tst.w	r3, #2
 8004d50:	d14e      	bne.n	8004df0 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d52:	f7fc ff4f 	bl	8001bf4 <HAL_GetTick>
 8004d56:	1b80      	subs	r0, r0, r6
 8004d58:	2811      	cmp	r0, #17
 8004d5a:	d9f3      	bls.n	8004d44 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8004d5c:	2003      	movs	r0, #3
 8004d5e:	e194      	b.n	800508a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004d60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d64:	6813      	ldr	r3, [r2, #0]
 8004d66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d6a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004d6c:	f7fc ff42 	bl	8001bf4 <HAL_GetTick>
 8004d70:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004d72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004d7c:	d0b5      	beq.n	8004cea <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d7e:	f7fc ff39 	bl	8001bf4 <HAL_GetTick>
 8004d82:	1b80      	subs	r0, r0, r6
 8004d84:	2802      	cmp	r0, #2
 8004d86:	d9f4      	bls.n	8004d72 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8004d88:	2003      	movs	r0, #3
 8004d8a:	e17e      	b.n	800508a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004d8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d90:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004d94:	f023 0301 	bic.w	r3, r3, #1
 8004d98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
          tickstart = HAL_GetTick();
 8004d9c:	f7fc ff2a 	bl	8001bf4 <HAL_GetTick>
 8004da0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004da2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004daa:	f013 0f02 	tst.w	r3, #2
 8004dae:	d0b4      	beq.n	8004d1a <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db0:	f7fc ff20 	bl	8001bf4 <HAL_GetTick>
 8004db4:	1b80      	subs	r0, r0, r6
 8004db6:	2811      	cmp	r0, #17
 8004db8:	d9f3      	bls.n	8004da2 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8004dba:	2003      	movs	r0, #3
 8004dbc:	e165      	b.n	800508a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004dbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dc2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004dce:	f7fc ff11 	bl	8001bf4 <HAL_GetTick>
 8004dd2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ddc:	f013 0f02 	tst.w	r3, #2
 8004de0:	d006      	beq.n	8004df0 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004de2:	f7fc ff07 	bl	8001bf4 <HAL_GetTick>
 8004de6:	1b80      	subs	r0, r0, r6
 8004de8:	2811      	cmp	r0, #17
 8004dea:	d9f3      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8004dec:	2003      	movs	r0, #3
 8004dee:	e14c      	b.n	800508a <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	f013 0f04 	tst.w	r3, #4
 8004df6:	f000 80b8 	beq.w	8004f6a <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004dfa:	4b22      	ldr	r3, [pc, #136]	@ (8004e84 <HAL_RCC_OscConfig+0x43c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004e02:	d110      	bne.n	8004e26 <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8004e04:	f7ff fc86 	bl	8004714 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8004e08:	f7fc fef4 	bl	8001bf4 <HAL_GetTick>
 8004e0c:	4606      	mov	r6, r0
 8004e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8004e84 <HAL_RCC_OscConfig+0x43c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004e16:	d106      	bne.n	8004e26 <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e18:	f7fc feec 	bl	8001bf4 <HAL_GetTick>
 8004e1c:	1b80      	subs	r0, r0, r6
 8004e1e:	2802      	cmp	r0, #2
 8004e20:	d9f5      	bls.n	8004e0e <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 8004e22:	2003      	movs	r0, #3
 8004e24:	e131      	b.n	800508a <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e26:	68e3      	ldr	r3, [r4, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d068      	beq.n	8004efe <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004e2c:	2b85      	cmp	r3, #133	@ 0x85
 8004e2e:	d001      	beq.n	8004e34 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004e30:	2b05      	cmp	r3, #5
 8004e32:	d107      	bne.n	8004e44 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004e34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e38:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004e3c:	f043 0304 	orr.w	r3, r3, #4
 8004e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8004e44:	f7fc fed6 	bl	8001bf4 <HAL_GetTick>
 8004e48:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e4e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e62:	f013 0f02 	tst.w	r3, #2
 8004e66:	d10f      	bne.n	8004e88 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e68:	f7fc fec4 	bl	8001bf4 <HAL_GetTick>
 8004e6c:	1b80      	subs	r0, r0, r6
 8004e6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004e72:	4298      	cmp	r0, r3
 8004e74:	d9f1      	bls.n	8004e5a <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 8004e76:	2003      	movs	r0, #3
 8004e78:	e107      	b.n	800508a <HAL_RCC_OscConfig+0x642>
 8004e7a:	bf00      	nop
 8004e7c:	20000074 	.word	0x20000074
 8004e80:	20000078 	.word	0x20000078
 8004e84:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004e88:	68e3      	ldr	r3, [r4, #12]
 8004e8a:	2b81      	cmp	r3, #129	@ 0x81
 8004e8c:	d001      	beq.n	8004e92 <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004e8e:	2b85      	cmp	r3, #133	@ 0x85
 8004e90:	d11a      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8004e92:	f7fc feaf 	bl	8001bf4 <HAL_GetTick>
 8004e96:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004e98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e9c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb0:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004eb4:	d159      	bne.n	8004f6a <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb6:	f7fc fe9d 	bl	8001bf4 <HAL_GetTick>
 8004eba:	1b80      	subs	r0, r0, r6
 8004ebc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ec0:	4298      	cmp	r0, r3
 8004ec2:	d9f1      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8004ec4:	2003      	movs	r0, #3
 8004ec6:	e0e0      	b.n	800508a <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 8004ec8:	f7fc fe94 	bl	8001bf4 <HAL_GetTick>
 8004ecc:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ece:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ed2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004ed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee6:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004eea:	d03e      	beq.n	8004f6a <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eec:	f7fc fe82 	bl	8001bf4 <HAL_GetTick>
 8004ef0:	1b80      	subs	r0, r0, r6
 8004ef2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ef6:	4298      	cmp	r0, r3
 8004ef8:	d9f1      	bls.n	8004ede <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8004efa:	2003      	movs	r0, #3
 8004efc:	e0c5      	b.n	800508a <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8004efe:	f7fc fe79 	bl	8001bf4 <HAL_GetTick>
 8004f02:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f08:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004f0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1c:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004f20:	d008      	beq.n	8004f34 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f22:	f7fc fe67 	bl	8001bf4 <HAL_GetTick>
 8004f26:	1b80      	subs	r0, r0, r6
 8004f28:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004f2c:	4298      	cmp	r0, r3
 8004f2e:	d9f1      	bls.n	8004f14 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8004f30:	2003      	movs	r0, #3
 8004f32:	e0aa      	b.n	800508a <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8004f34:	f7fc fe5e 	bl	8001bf4 <HAL_GetTick>
 8004f38:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f3e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004f42:	f023 0301 	bic.w	r3, r3, #1
 8004f46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f52:	f013 0f02 	tst.w	r3, #2
 8004f56:	d008      	beq.n	8004f6a <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f58:	f7fc fe4c 	bl	8001bf4 <HAL_GetTick>
 8004f5c:	1b80      	subs	r0, r0, r6
 8004f5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004f62:	4298      	cmp	r0, r3
 8004f64:	d9f1      	bls.n	8004f4a <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 8004f66:	2003      	movs	r0, #3
 8004f68:	e08f      	b.n	800508a <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f6a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 808b 	beq.w	8005088 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f72:	2d0c      	cmp	r5, #12
 8004f74:	d060      	beq.n	8005038 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d016      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004f7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f7e:	6813      	ldr	r3, [r2, #0]
 8004f80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f84:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004f86:	f7fc fe35 	bl	8001bf4 <HAL_GetTick>
 8004f8a:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004f96:	d148      	bne.n	800502a <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004f98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f9c:	68d1      	ldr	r1, [r2, #12]
 8004f9e:	4b41      	ldr	r3, [pc, #260]	@ (80050a4 <HAL_RCC_OscConfig+0x65c>)
 8004fa0:	400b      	ands	r3, r1
 8004fa2:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	e070      	b.n	800508a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004fa8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fac:	6813      	ldr	r3, [r2, #0]
 8004fae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fb2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004fb4:	f7fc fe1e 	bl	8001bf4 <HAL_GetTick>
 8004fb8:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004fc4:	d12a      	bne.n	800501c <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fca:	68d3      	ldr	r3, [r2, #12]
 8004fcc:	4936      	ldr	r1, [pc, #216]	@ (80050a8 <HAL_RCC_OscConfig+0x660>)
 8004fce:	4019      	ands	r1, r3
 8004fd0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004fd2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8004fd4:	4303      	orrs	r3, r0
 8004fd6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004fd8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004fdc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004fde:	4303      	orrs	r3, r0
 8004fe0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004fe2:	4303      	orrs	r3, r0
 8004fe4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004fe6:	4303      	orrs	r3, r0
 8004fe8:	4319      	orrs	r1, r3
 8004fea:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004fec:	6813      	ldr	r3, [r2, #0]
 8004fee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ff2:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ff4:	68d3      	ldr	r3, [r2, #12]
 8004ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ffa:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004ffc:	f7fc fdfa 	bl	8001bf4 <HAL_GetTick>
 8005000:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800500c:	d13e      	bne.n	800508c <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800500e:	f7fc fdf1 	bl	8001bf4 <HAL_GetTick>
 8005012:	1b00      	subs	r0, r0, r4
 8005014:	280a      	cmp	r0, #10
 8005016:	d9f4      	bls.n	8005002 <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8005018:	2003      	movs	r0, #3
 800501a:	e036      	b.n	800508a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800501c:	f7fc fdea 	bl	8001bf4 <HAL_GetTick>
 8005020:	1b40      	subs	r0, r0, r5
 8005022:	280a      	cmp	r0, #10
 8005024:	d9c9      	bls.n	8004fba <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 8005026:	2003      	movs	r0, #3
 8005028:	e02f      	b.n	800508a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502a:	f7fc fde3 	bl	8001bf4 <HAL_GetTick>
 800502e:	1b00      	subs	r0, r0, r4
 8005030:	280a      	cmp	r0, #10
 8005032:	d9ab      	bls.n	8004f8c <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 8005034:	2003      	movs	r0, #3
 8005036:	e028      	b.n	800508a <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005038:	2b01      	cmp	r3, #1
 800503a:	d029      	beq.n	8005090 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 800503c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005040:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005042:	f003 0103 	and.w	r1, r3, #3
 8005046:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005048:	4291      	cmp	r1, r2
 800504a:	d123      	bne.n	8005094 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800504c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005050:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005052:	428a      	cmp	r2, r1
 8005054:	d120      	bne.n	8005098 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005056:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800505a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800505c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005060:	d11c      	bne.n	800509c <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005062:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8005066:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005068:	4293      	cmp	r3, r2
 800506a:	d119      	bne.n	80050a0 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 800506c:	2000      	movs	r0, #0
 800506e:	e00c      	b.n	800508a <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8005070:	2001      	movs	r0, #1
}
 8005072:	4770      	bx	lr
        return HAL_ERROR;
 8005074:	2001      	movs	r0, #1
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8005078:	2001      	movs	r0, #1
 800507a:	e006      	b.n	800508a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 800507c:	2001      	movs	r0, #1
 800507e:	e004      	b.n	800508a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005080:	2001      	movs	r0, #1
 8005082:	e002      	b.n	800508a <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8005084:	2001      	movs	r0, #1
 8005086:	e000      	b.n	800508a <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8005088:	2000      	movs	r0, #0
}
 800508a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800508c:	2000      	movs	r0, #0
 800508e:	e7fc      	b.n	800508a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005090:	2001      	movs	r0, #1
 8005092:	e7fa      	b.n	800508a <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8005094:	2001      	movs	r0, #1
 8005096:	e7f8      	b.n	800508a <HAL_RCC_OscConfig+0x642>
 8005098:	2001      	movs	r0, #1
 800509a:	e7f6      	b.n	800508a <HAL_RCC_OscConfig+0x642>
 800509c:	2001      	movs	r0, #1
 800509e:	e7f4      	b.n	800508a <HAL_RCC_OscConfig+0x642>
 80050a0:	2001      	movs	r0, #1
 80050a2:	e7f2      	b.n	800508a <HAL_RCC_OscConfig+0x642>
 80050a4:	eefefffc 	.word	0xeefefffc
 80050a8:	11c1808c 	.word	0x11c1808c

080050ac <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80050ac:	2800      	cmp	r0, #0
 80050ae:	f000 8127 	beq.w	8005300 <HAL_RCC_ClockConfig+0x254>
{
 80050b2:	b570      	push	{r4, r5, r6, lr}
 80050b4:	460c      	mov	r4, r1
 80050b6:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050b8:	4b93      	ldr	r3, [pc, #588]	@ (8005308 <HAL_RCC_ClockConfig+0x25c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	428b      	cmp	r3, r1
 80050c2:	d32d      	bcc.n	8005120 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	f013 0f02 	tst.w	r3, #2
 80050ca:	d13f      	bne.n	800514c <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	f013 0f20 	tst.w	r3, #32
 80050d2:	d153      	bne.n	800517c <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80050d4:	682b      	ldr	r3, [r5, #0]
 80050d6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80050da:	d16a      	bne.n	80051b2 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	f013 0f04 	tst.w	r3, #4
 80050e2:	f040 8083 	bne.w	80051ec <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e6:	682b      	ldr	r3, [r5, #0]
 80050e8:	f013 0f08 	tst.w	r3, #8
 80050ec:	f040 8097 	bne.w	800521e <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	f013 0f01 	tst.w	r3, #1
 80050f6:	f000 80de 	beq.w	80052b6 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050fa:	686b      	ldr	r3, [r5, #4]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	f000 80a8 	beq.w	8005252 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005102:	2b03      	cmp	r3, #3
 8005104:	f000 80ad 	beq.w	8005262 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005108:	2b00      	cmp	r3, #0
 800510a:	f040 80b2 	bne.w	8005272 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800510e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	f012 0f02 	tst.w	r2, #2
 8005118:	f040 80b1 	bne.w	800527e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800511c:	2001      	movs	r0, #1
 800511e:	e0ee      	b.n	80052fe <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005120:	4a79      	ldr	r2, [pc, #484]	@ (8005308 <HAL_RCC_ClockConfig+0x25c>)
 8005122:	6813      	ldr	r3, [r2, #0]
 8005124:	f023 0307 	bic.w	r3, r3, #7
 8005128:	430b      	orrs	r3, r1
 800512a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800512c:	f7fc fd62 	bl	8001bf4 <HAL_GetTick>
 8005130:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005132:	4b75      	ldr	r3, [pc, #468]	@ (8005308 <HAL_RCC_ClockConfig+0x25c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	42a3      	cmp	r3, r4
 800513c:	d0c2      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800513e:	f7fc fd59 	bl	8001bf4 <HAL_GetTick>
 8005142:	1b80      	subs	r0, r0, r6
 8005144:	2802      	cmp	r0, #2
 8005146:	d9f4      	bls.n	8005132 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8005148:	2003      	movs	r0, #3
 800514a:	e0d8      	b.n	80052fe <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800514c:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800514e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005152:	688a      	ldr	r2, [r1, #8]
 8005154:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005158:	4313      	orrs	r3, r2
 800515a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800515c:	f7fc fd4a 	bl	8001bf4 <HAL_GetTick>
 8005160:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800516c:	d1ae      	bne.n	80050cc <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800516e:	f7fc fd41 	bl	8001bf4 <HAL_GetTick>
 8005172:	1b80      	subs	r0, r0, r6
 8005174:	2802      	cmp	r0, #2
 8005176:	d9f4      	bls.n	8005162 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8005178:	2003      	movs	r0, #3
 800517a:	e0c0      	b.n	80052fe <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800517c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800517e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005182:	f8d1 2108 	ldr.w	r2, [r1, #264]	@ 0x108
 8005186:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8005190:	f7fc fd30 	bl	8001bf4 <HAL_GetTick>
 8005194:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800519a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800519e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80051a2:	d197      	bne.n	80050d4 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051a4:	f7fc fd26 	bl	8001bf4 <HAL_GetTick>
 80051a8:	1b80      	subs	r0, r0, r6
 80051aa:	2802      	cmp	r0, #2
 80051ac:	d9f3      	bls.n	8005196 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 80051ae:	2003      	movs	r0, #3
 80051b0:	e0a5      	b.n	80052fe <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80051b2:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80051b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051b8:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
 80051bc:	f023 030f 	bic.w	r3, r3, #15
 80051c0:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80051c4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
    tickstart = HAL_GetTick();
 80051c8:	f7fc fd14 	bl	8001bf4 <HAL_GetTick>
 80051cc:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80051ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80051d6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80051da:	f47f af7f 	bne.w	80050dc <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051de:	f7fc fd09 	bl	8001bf4 <HAL_GetTick>
 80051e2:	1b80      	subs	r0, r0, r6
 80051e4:	2802      	cmp	r0, #2
 80051e6:	d9f2      	bls.n	80051ce <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80051e8:	2003      	movs	r0, #3
 80051ea:	e088      	b.n	80052fe <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80051ec:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80051ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051f2:	688a      	ldr	r2, [r1, #8]
 80051f4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80051f8:	4313      	orrs	r3, r2
 80051fa:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80051fc:	f7fc fcfa 	bl	8001bf4 <HAL_GetTick>
 8005200:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800520c:	f47f af6b 	bne.w	80050e6 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005210:	f7fc fcf0 	bl	8001bf4 <HAL_GetTick>
 8005214:	1b80      	subs	r0, r0, r6
 8005216:	2802      	cmp	r0, #2
 8005218:	d9f3      	bls.n	8005202 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 800521a:	2003      	movs	r0, #3
 800521c:	e06f      	b.n	80052fe <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800521e:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005220:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005224:	6893      	ldr	r3, [r2, #8]
 8005226:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800522a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800522e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005230:	f7fc fce0 	bl	8001bf4 <HAL_GetTick>
 8005234:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8005240:	f47f af56 	bne.w	80050f0 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005244:	f7fc fcd6 	bl	8001bf4 <HAL_GetTick>
 8005248:	1b80      	subs	r0, r0, r6
 800524a:	2802      	cmp	r0, #2
 800524c:	d9f3      	bls.n	8005236 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 800524e:	2003      	movs	r0, #3
 8005250:	e055      	b.n	80052fe <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005252:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800525c:	d10f      	bne.n	800527e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800525e:	2001      	movs	r0, #1
 8005260:	e04d      	b.n	80052fe <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005262:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800526c:	d107      	bne.n	800527e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800526e:	2001      	movs	r0, #1
 8005270:	e045      	b.n	80052fe <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005272:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800527c:	d042      	beq.n	8005304 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800527e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005282:	688a      	ldr	r2, [r1, #8]
 8005284:	f022 0203 	bic.w	r2, r2, #3
 8005288:	4313      	orrs	r3, r2
 800528a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800528c:	f7fc fcb2 	bl	8001bf4 <HAL_GetTick>
 8005290:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529c:	686a      	ldr	r2, [r5, #4]
 800529e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80052a2:	d008      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052a4:	f7fc fca6 	bl	8001bf4 <HAL_GetTick>
 80052a8:	1b80      	subs	r0, r0, r6
 80052aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80052ae:	4298      	cmp	r0, r3
 80052b0:	d9ef      	bls.n	8005292 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 80052b2:	2003      	movs	r0, #3
 80052b4:	e023      	b.n	80052fe <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052b6:	4b14      	ldr	r3, [pc, #80]	@ (8005308 <HAL_RCC_ClockConfig+0x25c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	42a3      	cmp	r3, r4
 80052c0:	d915      	bls.n	80052ee <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c2:	4a11      	ldr	r2, [pc, #68]	@ (8005308 <HAL_RCC_ClockConfig+0x25c>)
 80052c4:	6813      	ldr	r3, [r2, #0]
 80052c6:	f023 0307 	bic.w	r3, r3, #7
 80052ca:	4323      	orrs	r3, r4
 80052cc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80052ce:	f7fc fc91 	bl	8001bf4 <HAL_GetTick>
 80052d2:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005308 <HAL_RCC_ClockConfig+0x25c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	42a3      	cmp	r3, r4
 80052de:	d006      	beq.n	80052ee <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80052e0:	f7fc fc88 	bl	8001bf4 <HAL_GetTick>
 80052e4:	1b40      	subs	r0, r0, r5
 80052e6:	2802      	cmp	r0, #2
 80052e8:	d9f4      	bls.n	80052d4 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80052ea:	2003      	movs	r0, #3
 80052ec:	e007      	b.n	80052fe <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80052ee:	f7ff fb9b 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 80052f2:	4b06      	ldr	r3, [pc, #24]	@ (800530c <HAL_RCC_ClockConfig+0x260>)
 80052f4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80052f6:	4b06      	ldr	r3, [pc, #24]	@ (8005310 <HAL_RCC_ClockConfig+0x264>)
 80052f8:	6818      	ldr	r0, [r3, #0]
 80052fa:	f7fc fc79 	bl	8001bf0 <HAL_InitTick>
}
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005300:	2001      	movs	r0, #1
}
 8005302:	4770      	bx	lr
        return HAL_ERROR;
 8005304:	2001      	movs	r0, #1
 8005306:	e7fa      	b.n	80052fe <HAL_RCC_ClockConfig+0x252>
 8005308:	58004000 	.word	0x58004000
 800530c:	20000074 	.word	0x20000074
 8005310:	20000078 	.word	0x20000078

08005314 <HAL_RCC_GetPCLK1Freq>:
{
 8005314:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005316:	f7ff fb87 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800531a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005324:	4a02      	ldr	r2, [pc, #8]	@ (8005330 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800532a:	40d8      	lsrs	r0, r3
 800532c:	bd08      	pop	{r3, pc}
 800532e:	bf00      	nop
 8005330:	08011f6c 	.word	0x08011f6c

08005334 <HAL_RCC_GetPCLK2Freq>:
{
 8005334:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005336:	f7ff fb77 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800533a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005344:	4a02      	ldr	r2, [pc, #8]	@ (8005350 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800534a:	40d8      	lsrs	r0, r3
 800534c:	bd08      	pop	{r3, pc}
 800534e:	bf00      	nop
 8005350:	08011f6c 	.word	0x08011f6c

08005354 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005354:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005358:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800535c:	0902      	lsrs	r2, r0, #4
 800535e:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 8005362:	ea23 0302 	bic.w	r3, r3, r2
 8005366:	0100      	lsls	r0, r0, #4
 8005368:	f400 207f 	and.w	r0, r0, #1044480	@ 0xff000
 800536c:	4303      	orrs	r3, r0
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005372:	4770      	bx	lr

08005374 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005374:	b570      	push	{r4, r5, r6, lr}
 8005376:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005378:	6803      	ldr	r3, [r0, #0]
 800537a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800537e:	f040 80aa 	bne.w	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005382:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	f013 0f01 	tst.w	r3, #1
 800538a:	d00a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800538c:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800538e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005392:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8005396:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800539a:	b292      	uxth	r2, r2
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	f013 0f02 	tst.w	r3, #2
 80053a8:	d00a      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053aa:	68a2      	ldr	r2, [r4, #8]
 80053ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053b0:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80053b4:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80053b8:	b292      	uxth	r2, r2
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	f013 0f20 	tst.w	r3, #32
 80053c6:	d009      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053c8:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80053ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80053d2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80053e2:	d00c      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053e4:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80053e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80053ee:	0c02      	lsrs	r2, r0, #16
 80053f0:	0412      	lsls	r2, r2, #16
 80053f2:	ea23 0302 	bic.w	r3, r3, r2
 80053f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80053fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005404:	d00c      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005406:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005408:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800540c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8005410:	0c02      	lsrs	r2, r0, #16
 8005412:	0412      	lsls	r2, r2, #16
 8005414:	ea23 0302 	bic.w	r3, r3, r2
 8005418:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800541c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8005426:	d00c      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005428:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800542a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800542e:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8005432:	0c02      	lsrs	r2, r0, #16
 8005434:	0412      	lsls	r2, r2, #16
 8005436:	ea23 0302 	bic.w	r3, r3, r2
 800543a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800543e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005448:	f040 809d 	bne.w	8005586 <HAL_RCCEx_PeriphCLKConfig+0x212>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005452:	f040 809c 	bne.w	800558e <HAL_RCCEx_PeriphCLKConfig+0x21a>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800545c:	f040 809b 	bne.w	8005596 <HAL_RCCEx_PeriphCLKConfig+0x222>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	f013 0f10 	tst.w	r3, #16
 8005466:	d00e      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005468:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800546a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800546e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005472:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800547c:	68e3      	ldr	r3, [r4, #12]
 800547e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005482:	f000 808c 	beq.w	800559e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800548c:	d00f      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800548e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005490:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005494:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005498:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80054a4:	b91b      	cbnz	r3, 80054ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80054a6:	68cb      	ldr	r3, [r1, #12]
 80054a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054ac:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80054b4:	d00d      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054b6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80054b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80054c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80054ca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80054cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054d0:	d06a      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 80054d2:	4628      	mov	r0, r5
 80054d4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 80054d6:	f7ff f91d 	bl	8004714 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 80054da:	f7fc fb8b 	bl	8001bf4 <HAL_GetTick>
 80054de:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80054e0:	4b34      	ldr	r3, [pc, #208]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80054e8:	d106      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ea:	f7fc fb83 	bl	8001bf4 <HAL_GetTick>
 80054ee:	1b40      	subs	r0, r0, r5
 80054f0:	2802      	cmp	r0, #2
 80054f2:	d9f5      	bls.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        ret = HAL_TIMEOUT;
 80054f4:	2503      	movs	r5, #3
 80054f6:	e000      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x186>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80054f8:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 80054fa:	2d00      	cmp	r5, #0
 80054fc:	f47f af42 	bne.w	8005384 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005508:	f403 7340 	and.w	r3, r3, #768	@ 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800550c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800550e:	429a      	cmp	r2, r3
 8005510:	d024      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005516:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800551a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800551e:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8005522:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8005526:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800552a:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 800552e:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8005532:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8005536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800553a:	f012 0f02 	tst.w	r2, #2
 800553e:	d10f      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      if (ret == HAL_OK)
 8005540:	2d00      	cmp	r5, #0
 8005542:	f47f af1f 	bne.w	8005384 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005546:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005548:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800554c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005550:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800555a:	e713      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 800555c:	2200      	movs	r2, #0
 800555e:	e7ec      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        tickstart = HAL_GetTick();
 8005560:	f7fc fb48 	bl	8001bf4 <HAL_GetTick>
 8005564:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800556a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800556e:	f013 0f02 	tst.w	r3, #2
 8005572:	d1e5      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005574:	f7fc fb3e 	bl	8001bf4 <HAL_GetTick>
 8005578:	1b80      	subs	r0, r0, r6
 800557a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800557e:	4298      	cmp	r0, r3
 8005580:	d9f1      	bls.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            ret = HAL_TIMEOUT;
 8005582:	2503      	movs	r5, #3
 8005584:	e7dc      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005586:	6960      	ldr	r0, [r4, #20]
 8005588:	f7ff fee4 	bl	8005354 <LL_RCC_SetI2CClockSource>
 800558c:	e75e      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800558e:	69a0      	ldr	r0, [r4, #24]
 8005590:	f7ff fee0 	bl	8005354 <LL_RCC_SetI2CClockSource>
 8005594:	e75f      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005596:	69e0      	ldr	r0, [r4, #28]
 8005598:	f7ff fedc 	bl	8005354 <LL_RCC_SetI2CClockSource>
 800559c:	e760      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800559e:	68cb      	ldr	r3, [r1, #12]
 80055a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055a4:	60cb      	str	r3, [r1, #12]
 80055a6:	e76e      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055a8:	68cb      	ldr	r3, [r1, #12]
 80055aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055ae:	60cb      	str	r3, [r1, #12]
 80055b0:	e78f      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80055b2:	bf00      	nop
 80055b4:	58000400 	.word	0x58000400

080055b8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80055b8:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055ba:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 80055be:	2a01      	cmp	r2, #1
 80055c0:	d035      	beq.n	800562e <HAL_RTC_DeactivateAlarm+0x76>
 80055c2:	2201      	movs	r2, #1
 80055c4:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055c8:	2202      	movs	r2, #2
 80055ca:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055ce:	4a19      	ldr	r2, [pc, #100]	@ (8005634 <HAL_RTC_DeactivateAlarm+0x7c>)
 80055d0:	20ca      	movs	r0, #202	@ 0xca
 80055d2:	6250      	str	r0, [r2, #36]	@ 0x24
 80055d4:	2053      	movs	r0, #83	@ 0x53
 80055d6:	6250      	str	r0, [r2, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80055d8:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80055dc:	d018      	beq.n	8005610 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80055de:	4a15      	ldr	r2, [pc, #84]	@ (8005634 <HAL_RTC_DeactivateAlarm+0x7c>)
 80055e0:	6991      	ldr	r1, [r2, #24]
 80055e2:	f421 5108 	bic.w	r1, r1, #8704	@ 0x2200
 80055e6:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80055e8:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 80055ea:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80055ee:	64d1      	str	r1, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80055f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80055f2:	f021 0102 	bic.w	r1, r1, #2
 80055f6:	6319      	str	r1, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80055f8:	2102      	movs	r1, #2
 80055fa:	65d1      	str	r1, [r2, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005634 <HAL_RTC_DeactivateAlarm+0x7c>)
 80055fe:	21ff      	movs	r1, #255	@ 0xff
 8005600:	6251      	str	r1, [r2, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005602:	2201      	movs	r2, #1
 8005604:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005608:	2000      	movs	r0, #0
 800560a:	f883 002c 	strb.w	r0, [r3, #44]	@ 0x2c

  return HAL_OK;
 800560e:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005610:	6991      	ldr	r1, [r2, #24]
 8005612:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 8005616:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005618:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800561a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800561e:	6451      	str	r1, [r2, #68]	@ 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005620:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005622:	f021 0101 	bic.w	r1, r1, #1
 8005626:	6319      	str	r1, [r3, #48]	@ 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005628:	2101      	movs	r1, #1
 800562a:	65d1      	str	r1, [r2, #92]	@ 0x5c
 800562c:	e7e6      	b.n	80055fc <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 800562e:	2002      	movs	r0, #2
}
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40002800 	.word	0x40002800

08005638 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800563c:	4b0d      	ldr	r3, [pc, #52]	@ (8005674 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800563e:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 8005640:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005642:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8005644:	f015 0f01 	tst.w	r5, #1
 8005648:	d106      	bne.n	8005658 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800564a:	f015 0f02 	tst.w	r5, #2
 800564e:	d109      	bne.n	8005664 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005650:	2301      	movs	r3, #1
 8005652:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8005656:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005658:	4b06      	ldr	r3, [pc, #24]	@ (8005674 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800565a:	2201      	movs	r2, #1
 800565c:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800565e:	f7fc fcc9 	bl	8001ff4 <HAL_RTC_AlarmAEventCallback>
 8005662:	e7f2      	b.n	800564a <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005664:	4b03      	ldr	r3, [pc, #12]	@ (8005674 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005666:	2202      	movs	r2, #2
 8005668:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800566a:	4620      	mov	r0, r4
 800566c:	f000 f9ee 	bl	8005a4c <HAL_RTCEx_AlarmBEventCallback>
 8005670:	e7ee      	b.n	8005650 <HAL_RTC_AlarmIRQHandler+0x18>
 8005672:	bf00      	nop
 8005674:	40002800 	.word	0x40002800

08005678 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005678:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800567a:	4a0b      	ldr	r2, [pc, #44]	@ (80056a8 <HAL_RTC_WaitForSynchro+0x30>)
 800567c:	68d3      	ldr	r3, [r2, #12]
 800567e:	f023 0320 	bic.w	r3, r3, #32
 8005682:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005684:	f7fc fab6 	bl	8001bf4 <HAL_GetTick>
 8005688:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800568a:	4b07      	ldr	r3, [pc, #28]	@ (80056a8 <HAL_RTC_WaitForSynchro+0x30>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f013 0f20 	tst.w	r3, #32
 8005692:	d107      	bne.n	80056a4 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005694:	f7fc faae 	bl	8001bf4 <HAL_GetTick>
 8005698:	1b00      	subs	r0, r0, r4
 800569a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800569e:	d9f4      	bls.n	800568a <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 80056a0:	2003      	movs	r0, #3
 80056a2:	e000      	b.n	80056a6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80056a4:	2000      	movs	r0, #0
}
 80056a6:	bd10      	pop	{r4, pc}
 80056a8:	40002800 	.word	0x40002800

080056ac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056ac:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80056ae:	4b11      	ldr	r3, [pc, #68]	@ (80056f4 <RTC_EnterInitMode+0x48>)
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80056b6:	d002      	beq.n	80056be <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80056b8:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 80056ba:	4620      	mov	r0, r4
 80056bc:	bd70      	pop	{r4, r5, r6, pc}
 80056be:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80056c0:	4a0c      	ldr	r2, [pc, #48]	@ (80056f4 <RTC_EnterInitMode+0x48>)
 80056c2:	68d3      	ldr	r3, [r2, #12]
 80056c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056c8:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80056ca:	f7fc fa93 	bl	8001bf4 <HAL_GetTick>
 80056ce:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80056d0:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80056d2:	4b08      	ldr	r3, [pc, #32]	@ (80056f4 <RTC_EnterInitMode+0x48>)
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80056da:	d1ee      	bne.n	80056ba <RTC_EnterInitMode+0xe>
 80056dc:	2c03      	cmp	r4, #3
 80056de:	d0ec      	beq.n	80056ba <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80056e0:	f7fc fa88 	bl	8001bf4 <HAL_GetTick>
 80056e4:	1b43      	subs	r3, r0, r5
 80056e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056ea:	d9f2      	bls.n	80056d2 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056ec:	2403      	movs	r4, #3
 80056ee:	f886 402d 	strb.w	r4, [r6, #45]	@ 0x2d
 80056f2:	e7ee      	b.n	80056d2 <RTC_EnterInitMode+0x26>
 80056f4:	40002800 	.word	0x40002800

080056f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80056f8:	b510      	push	{r4, lr}
 80056fa:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80056fc:	4b10      	ldr	r3, [pc, #64]	@ (8005740 <RTC_ExitInitMode+0x48>)
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005704:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	f013 0f20 	tst.w	r3, #32
 800570c:	d106      	bne.n	800571c <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800570e:	f7ff ffb3 	bl	8005678 <HAL_RTC_WaitForSynchro>
 8005712:	b198      	cbz	r0, 800573c <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005714:	2003      	movs	r0, #3
 8005716:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800571a:	e00f      	b.n	800573c <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800571c:	4a08      	ldr	r2, [pc, #32]	@ (8005740 <RTC_ExitInitMode+0x48>)
 800571e:	6993      	ldr	r3, [r2, #24]
 8005720:	f023 0320 	bic.w	r3, r3, #32
 8005724:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005726:	f7ff ffa7 	bl	8005678 <HAL_RTC_WaitForSynchro>
 800572a:	b110      	cbz	r0, 8005732 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800572c:	2003      	movs	r0, #3
 800572e:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005732:	4a03      	ldr	r2, [pc, #12]	@ (8005740 <RTC_ExitInitMode+0x48>)
 8005734:	6993      	ldr	r3, [r2, #24]
 8005736:	f043 0320 	orr.w	r3, r3, #32
 800573a:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 800573c:	bd10      	pop	{r4, pc}
 800573e:	bf00      	nop
 8005740:	40002800 	.word	0x40002800

08005744 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8005744:	2800      	cmp	r0, #0
 8005746:	d055      	beq.n	80057f4 <HAL_RTC_Init+0xb0>
{
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800574c:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8005750:	b163      	cbz	r3, 800576c <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005752:	2302      	movs	r3, #2
 8005754:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005758:	4b27      	ldr	r3, [pc, #156]	@ (80057f8 <HAL_RTC_Init+0xb4>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f013 0f10 	tst.w	r3, #16
 8005760:	d009      	beq.n	8005776 <HAL_RTC_Init+0x32>
      status = HAL_OK;
 8005762:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 8005764:	2301      	movs	r3, #1
 8005766:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 800576a:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800576c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
      HAL_RTC_MspInit(hrtc);
 8005770:	f7fc f86e 	bl	8001850 <HAL_RTC_MspInit>
 8005774:	e7ed      	b.n	8005752 <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005776:	4b20      	ldr	r3, [pc, #128]	@ (80057f8 <HAL_RTC_Init+0xb4>)
 8005778:	22ca      	movs	r2, #202	@ 0xca
 800577a:	625a      	str	r2, [r3, #36]	@ 0x24
 800577c:	2253      	movs	r2, #83	@ 0x53
 800577e:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 8005780:	4620      	mov	r0, r4
 8005782:	f7ff ff93 	bl	80056ac <RTC_EnterInitMode>
      if (status == HAL_OK)
 8005786:	b118      	cbz	r0, 8005790 <HAL_RTC_Init+0x4c>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005788:	4b1b      	ldr	r3, [pc, #108]	@ (80057f8 <HAL_RTC_Init+0xb4>)
 800578a:	22ff      	movs	r2, #255	@ 0xff
 800578c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800578e:	e7ec      	b.n	800576a <HAL_RTC_Init+0x26>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005790:	4b19      	ldr	r3, [pc, #100]	@ (80057f8 <HAL_RTC_Init+0xb4>)
 8005792:	699a      	ldr	r2, [r3, #24]
 8005794:	f022 628e 	bic.w	r2, r2, #74448896	@ 0x4700000
 8005798:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800579c:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800579e:	6999      	ldr	r1, [r3, #24]
 80057a0:	6862      	ldr	r2, [r4, #4]
 80057a2:	6920      	ldr	r0, [r4, #16]
 80057a4:	4302      	orrs	r2, r0
 80057a6:	69a0      	ldr	r0, [r4, #24]
 80057a8:	4302      	orrs	r2, r0
 80057aa:	430a      	orrs	r2, r1
 80057ac:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80057ae:	68e2      	ldr	r2, [r4, #12]
 80057b0:	68a1      	ldr	r1, [r4, #8]
 80057b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80057b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 80057be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80057c0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80057c2:	4301      	orrs	r1, r0
 80057c4:	430a      	orrs	r2, r1
 80057c6:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7ff ff95 	bl	80056f8 <RTC_ExitInitMode>
        if (status == HAL_OK)
 80057ce:	b118      	cbz	r0, 80057d8 <HAL_RTC_Init+0x94>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057d0:	4b09      	ldr	r3, [pc, #36]	@ (80057f8 <HAL_RTC_Init+0xb4>)
 80057d2:	22ff      	movs	r2, #255	@ 0xff
 80057d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80057d6:	e7c8      	b.n	800576a <HAL_RTC_Init+0x26>
          MODIFY_REG(RTC->CR, \
 80057d8:	4907      	ldr	r1, [pc, #28]	@ (80057f8 <HAL_RTC_Init+0xb4>)
 80057da:	698b      	ldr	r3, [r1, #24]
 80057dc:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80057e0:	6a22      	ldr	r2, [r4, #32]
 80057e2:	69e5      	ldr	r5, [r4, #28]
 80057e4:	432a      	orrs	r2, r5
 80057e6:	6965      	ldr	r5, [r4, #20]
 80057e8:	432a      	orrs	r2, r5
 80057ea:	4313      	orrs	r3, r2
 80057ec:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ee:	23ff      	movs	r3, #255	@ 0xff
 80057f0:	624b      	str	r3, [r1, #36]	@ 0x24
    if (status == HAL_OK)
 80057f2:	e7b7      	b.n	8005764 <HAL_RTC_Init+0x20>
  HAL_StatusTypeDef status = HAL_ERROR;
 80057f4:	2001      	movs	r0, #1
}
 80057f6:	4770      	bx	lr
 80057f8:	40002800 	.word	0x40002800

080057fc <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80057fc:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 80057fe:	e002      	b.n	8005806 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8005800:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8005802:	380a      	subs	r0, #10
 8005804:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8005806:	2809      	cmp	r0, #9
 8005808:	d8fa      	bhi.n	8005800 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	b2db      	uxtb	r3, r3
}
 800580e:	4318      	orrs	r0, r3
 8005810:	4770      	bx	lr
	...

08005814 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8005814:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005818:	2b01      	cmp	r3, #1
 800581a:	f000 80b0 	beq.w	800597e <HAL_RTC_SetAlarm_IT+0x16a>
{
 800581e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005822:	4605      	mov	r5, r0
 8005824:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8005826:	2301      	movs	r3, #1
 8005828:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800582c:	2302      	movs	r3, #2
 800582e:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005832:	4b54      	ldr	r3, [pc, #336]	@ (8005984 <HAL_RTC_SetAlarm_IT+0x170>)
 8005834:	68de      	ldr	r6, [r3, #12]
 8005836:	f406 7640 	and.w	r6, r6, #768	@ 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 800583a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800583e:	d043      	beq.n	80058c8 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8005840:	bb12      	cbnz	r2, 8005888 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005848:	d101      	bne.n	800584e <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800584a:	2300      	movs	r3, #0
 800584c:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800584e:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005852:	7820      	ldrb	r0, [r4, #0]
 8005854:	f7ff ffd2 	bl	80057fc <RTC_ByteToBcd2>
 8005858:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800585a:	7860      	ldrb	r0, [r4, #1]
 800585c:	f7ff ffce 	bl	80057fc <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005860:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005864:	78a0      	ldrb	r0, [r4, #2]
 8005866:	f7ff ffc9 	bl	80057fc <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800586a:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800586c:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800586e:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005872:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8005876:	f7ff ffc1 	bl	80057fc <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800587a:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800587e:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005880:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005882:	ea48 0000 	orr.w	r0, r8, r0
 8005886:	e020      	b.n	80058ca <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8005888:	6948      	ldr	r0, [r1, #20]
 800588a:	f1b0 3f80 	cmp.w	r0, #2155905152	@ 0x80808080
 800588e:	d009      	beq.n	80058a4 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005890:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8005894:	d006      	beq.n	80058a4 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005896:	4b3b      	ldr	r3, [pc, #236]	@ (8005984 <HAL_RTC_SetAlarm_IT+0x170>)
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800589e:	d101      	bne.n	80058a4 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058a4:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80058a6:	7863      	ldrb	r3, [r4, #1]
 80058a8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058ae:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80058b0:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058b2:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058b4:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058b8:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80058c0:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058c2:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058c4:	4318      	orrs	r0, r3
 80058c6:	e000      	b.n	80058ca <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80058c8:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058ca:	4b2e      	ldr	r3, [pc, #184]	@ (8005984 <HAL_RTC_SetAlarm_IT+0x170>)
 80058cc:	22ca      	movs	r2, #202	@ 0xca
 80058ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80058d0:	2253      	movs	r2, #83	@ 0x53
 80058d2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80058d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80058d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058da:	d02a      	beq.n	8005932 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80058dc:	4b29      	ldr	r3, [pc, #164]	@ (8005984 <HAL_RTC_SetAlarm_IT+0x170>)
 80058de:	699a      	ldr	r2, [r3, #24]
 80058e0:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 80058e4:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80058e6:	2202      	movs	r2, #2
 80058e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80058ea:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80058ee:	d040      	beq.n	8005972 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80058f0:	4b24      	ldr	r3, [pc, #144]	@ (8005984 <HAL_RTC_SetAlarm_IT+0x170>)
 80058f2:	6498      	str	r0, [r3, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80058f4:	69a2      	ldr	r2, [r4, #24]
 80058f6:	64da      	str	r2, [r3, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80058f8:	6862      	ldr	r2, [r4, #4]
 80058fa:	4b22      	ldr	r3, [pc, #136]	@ (8005984 <HAL_RTC_SetAlarm_IT+0x170>)
 80058fc:	675a      	str	r2, [r3, #116]	@ 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80058fe:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8005900:	f042 0202 	orr.w	r2, r2, #2
 8005904:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005906:	699a      	ldr	r2, [r3, #24]
 8005908:	f442 5208 	orr.w	r2, r2, #8704	@ 0x2200
 800590c:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800590e:	4a1e      	ldr	r2, [pc, #120]	@ (8005988 <HAL_RTC_SetAlarm_IT+0x174>)
 8005910:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8005914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005918:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800591c:	4b19      	ldr	r3, [pc, #100]	@ (8005984 <HAL_RTC_SetAlarm_IT+0x170>)
 800591e:	22ff      	movs	r2, #255	@ 0xff
 8005920:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005922:	2301      	movs	r3, #1
 8005924:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 8005928:	2000      	movs	r0, #0
 800592a:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
}
 800592e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005932:	4b14      	ldr	r3, [pc, #80]	@ (8005984 <HAL_RTC_SetAlarm_IT+0x170>)
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 800593a:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800593c:	2201      	movs	r2, #1
 800593e:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005940:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8005944:	d00f      	beq.n	8005966 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005946:	4b0f      	ldr	r3, [pc, #60]	@ (8005984 <HAL_RTC_SetAlarm_IT+0x170>)
 8005948:	6418      	str	r0, [r3, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800594a:	69a2      	ldr	r2, [r4, #24]
 800594c:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800594e:	6862      	ldr	r2, [r4, #4]
 8005950:	4b0c      	ldr	r3, [pc, #48]	@ (8005984 <HAL_RTC_SetAlarm_IT+0x170>)
 8005952:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005954:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8005962:	619a      	str	r2, [r3, #24]
 8005964:	e7d3      	b.n	800590e <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005966:	69a3      	ldr	r3, [r4, #24]
 8005968:	69e2      	ldr	r2, [r4, #28]
 800596a:	4313      	orrs	r3, r2
 800596c:	4a05      	ldr	r2, [pc, #20]	@ (8005984 <HAL_RTC_SetAlarm_IT+0x170>)
 800596e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005970:	e7ed      	b.n	800594e <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005972:	69a3      	ldr	r3, [r4, #24]
 8005974:	69e2      	ldr	r2, [r4, #28]
 8005976:	4313      	orrs	r3, r2
 8005978:	4a02      	ldr	r2, [pc, #8]	@ (8005984 <HAL_RTC_SetAlarm_IT+0x170>)
 800597a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800597c:	e7bc      	b.n	80058f8 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 800597e:	2002      	movs	r0, #2
}
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40002800 	.word	0x40002800
 8005988:	58000800 	.word	0x58000800

0800598c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800598c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005990:	2b01      	cmp	r3, #1
 8005992:	d017      	beq.n	80059c4 <HAL_RTCEx_EnableBypassShadow+0x38>
 8005994:	2101      	movs	r1, #1
 8005996:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800599a:	2302      	movs	r3, #2
 800599c:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059a0:	4b09      	ldr	r3, [pc, #36]	@ (80059c8 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 80059a2:	22ca      	movs	r2, #202	@ 0xca
 80059a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80059a6:	2253      	movs	r2, #83	@ 0x53
 80059a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80059aa:	699a      	ldr	r2, [r3, #24]
 80059ac:	f042 0220 	orr.w	r2, r2, #32
 80059b0:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059b2:	22ff      	movs	r2, #255	@ 0xff
 80059b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80059b6:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059ba:	2300      	movs	r3, #0
 80059bc:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 80059c0:	4618      	mov	r0, r3
 80059c2:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80059c4:	2002      	movs	r0, #2
}
 80059c6:	4770      	bx	lr
 80059c8:	40002800 	.word	0x40002800

080059cc <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059cc:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d020      	beq.n	8005a16 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80059d4:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80059d6:	2101      	movs	r1, #1
 80059d8:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059dc:	2302      	movs	r3, #2
 80059de:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059e2:	4b0e      	ldr	r3, [pc, #56]	@ (8005a1c <HAL_RTCEx_SetSSRU_IT+0x50>)
 80059e4:	22ca      	movs	r2, #202	@ 0xca
 80059e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80059e8:	2253      	movs	r2, #83	@ 0x53
 80059ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80059f2:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80059f4:	4c0a      	ldr	r4, [pc, #40]	@ (8005a20 <HAL_RTCEx_SetSSRU_IT+0x54>)
 80059f6:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80059fa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80059fe:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a02:	22ff      	movs	r2, #255	@ 0xff
 8005a04:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005a06:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 8005a10:	4618      	mov	r0, r3
}
 8005a12:	bc10      	pop	{r4}
 8005a14:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005a16:	2002      	movs	r0, #2
}
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40002800 	.word	0x40002800
 8005a20:	58000800 	.word	0x58000800

08005a24 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005a24:	b510      	push	{r4, lr}
 8005a26:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8005a28:	4b07      	ldr	r3, [pc, #28]	@ (8005a48 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a2c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005a30:	d103      	bne.n	8005a3a <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8005a38:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8005a3a:	4b03      	ldr	r3, [pc, #12]	@ (8005a48 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005a3c:	2240      	movs	r2, #64	@ 0x40
 8005a3e:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005a40:	f7fc fadc 	bl	8001ffc <HAL_RTCEx_SSRUEventCallback>
 8005a44:	e7f5      	b.n	8005a32 <HAL_RTCEx_SSRUIRQHandler+0xe>
 8005a46:	bf00      	nop
 8005a48:	40002800 	.word	0x40002800

08005a4c <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005a4c:	4770      	bx	lr

08005a4e <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005a4e:	0089      	lsls	r1, r1, #2
 8005a50:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8005a54:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005a58:	600a      	str	r2, [r1, #0]
}
 8005a5a:	4770      	bx	lr

08005a5c <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005a5c:	0089      	lsls	r1, r1, #2
 8005a5e:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8005a62:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005a66:	6808      	ldr	r0, [r1, #0]
}
 8005a68:	4770      	bx	lr
	...

08005a6c <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005a6c:	4b07      	ldr	r3, [pc, #28]	@ (8005a8c <SUBGHZSPI_Init+0x20>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a74:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005a76:	f440 7041 	orr.w	r0, r0, #772	@ 0x304
 8005a7a:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005a7c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8005a80:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a88:	601a      	str	r2, [r3, #0]
}
 8005a8a:	4770      	bx	lr
 8005a8c:	58010000 	.word	0x58010000

08005a90 <HAL_SUBGHZ_Init>:
{
 8005a90:	b530      	push	{r4, r5, lr}
 8005a92:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d05d      	beq.n	8005b54 <HAL_SUBGHZ_Init+0xc4>
 8005a98:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8005a9a:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8005a9c:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8005aa0:	b10b      	cbz	r3, 8005aa6 <HAL_SUBGHZ_Init+0x16>
 8005aa2:	2d03      	cmp	r5, #3
 8005aa4:	d10b      	bne.n	8005abe <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8005aaa:	4620      	mov	r0, r4
 8005aac:	f7fb ffb0 	bl	8001a10 <HAL_SUBGHZ_MspInit>
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005ab0:	4a29      	ldr	r2, [pc, #164]	@ (8005b58 <HAL_SUBGHZ_Init+0xc8>)
 8005ab2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005ab6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005aba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8005abe:	b185      	cbz	r5, 8005ae2 <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005ac0:	4b26      	ldr	r3, [pc, #152]	@ (8005b5c <HAL_SUBGHZ_Init+0xcc>)
 8005ac2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ac6:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8005ac8:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005aca:	6820      	ldr	r0, [r4, #0]
 8005acc:	f7ff ffce 	bl	8005a6c <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	71a3      	strb	r3, [r4, #6]
}
 8005adc:	4628      	mov	r0, r5
 8005ade:	b003      	add	sp, #12
 8005ae0:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005ae6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005aea:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005aee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005af2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005af6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b60 <HAL_SUBGHZ_Init+0xd0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005afe:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005b02:	2264      	movs	r2, #100	@ 0x64
 8005b04:	fb02 f303 	mul.w	r3, r2, r3
 8005b08:	9301      	str	r3, [sp, #4]
 8005b0a:	e014      	b.n	8005b36 <HAL_SUBGHZ_Init+0xa6>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005b0c:	2501      	movs	r5, #1
 8005b0e:	60a5      	str	r5, [r4, #8]
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005b10:	4b12      	ldr	r3, [pc, #72]	@ (8005b5c <HAL_SUBGHZ_Init+0xcc>)
 8005b12:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005b16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b24:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005b26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b2a:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8005b2c:	2d00      	cmp	r5, #0
 8005b2e:	d1d3      	bne.n	8005ad8 <HAL_SUBGHZ_Init+0x48>
 8005b30:	e7cb      	b.n	8005aca <HAL_SUBGHZ_Init+0x3a>
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0ec      	beq.n	8005b10 <HAL_SUBGHZ_Init+0x80>
      if (count == 0U)
 8005b36:	9b01      	ldr	r3, [sp, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0e7      	beq.n	8005b0c <HAL_SUBGHZ_Init+0x7c>
      count--;
 8005b3c:	9b01      	ldr	r3, [sp, #4]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b4a:	f413 4380 	ands.w	r3, r3, #16384	@ 0x4000
 8005b4e:	d0f0      	beq.n	8005b32 <HAL_SUBGHZ_Init+0xa2>
 8005b50:	2301      	movs	r3, #1
 8005b52:	e7ee      	b.n	8005b32 <HAL_SUBGHZ_Init+0xa2>
    return status;
 8005b54:	2501      	movs	r5, #1
 8005b56:	e7c1      	b.n	8005adc <HAL_SUBGHZ_Init+0x4c>
 8005b58:	58000800 	.word	0x58000800
 8005b5c:	58000400 	.word	0x58000400
 8005b60:	20000074 	.word	0x20000074

08005b64 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005b64:	b082      	sub	sp, #8
 8005b66:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005b68:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd4 <SUBGHZSPI_Transmit+0x70>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005b70:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005b74:	2064      	movs	r0, #100	@ 0x64
 8005b76:	fb00 f303 	mul.w	r3, r0, r3
 8005b7a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005b7c:	9b01      	ldr	r3, [sp, #4]
 8005b7e:	b14b      	cbz	r3, 8005b94 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005b80:	9b01      	ldr	r3, [sp, #4]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005b86:	4b14      	ldr	r3, [pc, #80]	@ (8005bd8 <SUBGHZSPI_Transmit+0x74>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f013 0f02 	tst.w	r3, #2
 8005b8e:	d0f5      	beq.n	8005b7c <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005b90:	2000      	movs	r0, #0
 8005b92:	e001      	b.n	8005b98 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005b94:	2001      	movs	r0, #1
 8005b96:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8005b98:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd8 <SUBGHZSPI_Transmit+0x74>)
 8005b9a:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <SUBGHZSPI_Transmit+0x70>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005ba4:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005ba8:	2164      	movs	r1, #100	@ 0x64
 8005baa:	fb01 f303 	mul.w	r3, r1, r3
 8005bae:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005bb0:	9b01      	ldr	r3, [sp, #4]
 8005bb2:	b143      	cbz	r3, 8005bc6 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005bb4:	9b01      	ldr	r3, [sp, #4]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005bba:	4b07      	ldr	r3, [pc, #28]	@ (8005bd8 <SUBGHZSPI_Transmit+0x74>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f013 0f01 	tst.w	r3, #1
 8005bc2:	d0f5      	beq.n	8005bb0 <SUBGHZSPI_Transmit+0x4c>
 8005bc4:	e001      	b.n	8005bca <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005bc6:	2001      	movs	r0, #1
 8005bc8:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005bca:	4b03      	ldr	r3, [pc, #12]	@ (8005bd8 <SUBGHZSPI_Transmit+0x74>)
 8005bcc:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8005bce:	b002      	add	sp, #8
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000074 	.word	0x20000074
 8005bd8:	58010000 	.word	0x58010000

08005bdc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005bdc:	b082      	sub	sp, #8
 8005bde:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005be0:	4b1c      	ldr	r3, [pc, #112]	@ (8005c54 <SUBGHZSPI_Receive+0x78>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005be8:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005bec:	2064      	movs	r0, #100	@ 0x64
 8005bee:	fb00 f303 	mul.w	r3, r0, r3
 8005bf2:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005bf4:	9b01      	ldr	r3, [sp, #4]
 8005bf6:	b14b      	cbz	r3, 8005c0c <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005bf8:	9b01      	ldr	r3, [sp, #4]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005bfe:	4b16      	ldr	r3, [pc, #88]	@ (8005c58 <SUBGHZSPI_Receive+0x7c>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f013 0f02 	tst.w	r3, #2
 8005c06:	d0f5      	beq.n	8005bf4 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005c08:	2000      	movs	r0, #0
 8005c0a:	e001      	b.n	8005c10 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005c0c:	2001      	movs	r0, #1
 8005c0e:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8005c10:	4b11      	ldr	r3, [pc, #68]	@ (8005c58 <SUBGHZSPI_Receive+0x7c>)
 8005c12:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8005c16:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8005c54 <SUBGHZSPI_Receive+0x78>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005c22:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005c26:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8005c2a:	fb0c f303 	mul.w	r3, ip, r3
 8005c2e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005c30:	9b01      	ldr	r3, [sp, #4]
 8005c32:	b143      	cbz	r3, 8005c46 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005c34:	9b01      	ldr	r3, [sp, #4]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005c3a:	4b07      	ldr	r3, [pc, #28]	@ (8005c58 <SUBGHZSPI_Receive+0x7c>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f013 0f01 	tst.w	r3, #1
 8005c42:	d0f5      	beq.n	8005c30 <SUBGHZSPI_Receive+0x54>
 8005c44:	e001      	b.n	8005c4a <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005c46:	2001      	movs	r0, #1
 8005c48:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005c4a:	4b03      	ldr	r3, [pc, #12]	@ (8005c58 <SUBGHZSPI_Receive+0x7c>)
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	700b      	strb	r3, [r1, #0]

  return status;
}
 8005c50:	b002      	add	sp, #8
 8005c52:	4770      	bx	lr
 8005c54:	20000074 	.word	0x20000074
 8005c58:	58010000 	.word	0x58010000

08005c5c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005c5c:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005c5e:	4b13      	ldr	r3, [pc, #76]	@ (8005cac <SUBGHZ_WaitOnBusy+0x50>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005c66:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8005c6a:	2264      	movs	r2, #100	@ 0x64
 8005c6c:	fb02 f303 	mul.w	r3, r2, r3
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	e006      	b.n	8005c82 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005c74:	2302      	movs	r3, #2
 8005c76:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8005c78:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8005c7a:	b002      	add	sp, #8
 8005c7c:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005c7e:	4213      	tst	r3, r2
 8005c80:	d012      	beq.n	8005ca8 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005c82:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb0 <SUBGHZ_WaitOnBusy+0x54>)
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f013 0304 	ands.w	r3, r3, #4
 8005c8a:	d000      	beq.n	8005c8e <SUBGHZ_WaitOnBusy+0x32>
 8005c8c:	2301      	movs	r3, #1
    if (count == 0U)
 8005c8e:	9a01      	ldr	r2, [sp, #4]
 8005c90:	2a00      	cmp	r2, #0
 8005c92:	d0ef      	beq.n	8005c74 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8005c94:	9a01      	ldr	r2, [sp, #4]
 8005c96:	3a01      	subs	r2, #1
 8005c98:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005c9a:	4a05      	ldr	r2, [pc, #20]	@ (8005cb0 <SUBGHZ_WaitOnBusy+0x54>)
 8005c9c:	6952      	ldr	r2, [r2, #20]
 8005c9e:	f012 0202 	ands.w	r2, r2, #2
 8005ca2:	d0ec      	beq.n	8005c7e <SUBGHZ_WaitOnBusy+0x22>
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	e7ea      	b.n	8005c7e <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8005ca8:	2000      	movs	r0, #0
 8005caa:	e7e6      	b.n	8005c7a <SUBGHZ_WaitOnBusy+0x1e>
 8005cac:	20000074 	.word	0x20000074
 8005cb0:	58000400 	.word	0x58000400

08005cb4 <SUBGHZ_CheckDeviceReady>:
{
 8005cb4:	b500      	push	{lr}
 8005cb6:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8005cb8:	7903      	ldrb	r3, [r0, #4]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d004      	beq.n	8005cc8 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005cbe:	f7ff ffcd 	bl	8005c5c <SUBGHZ_WaitOnBusy>
}
 8005cc2:	b003      	add	sp, #12
 8005cc4:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8005cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8005d00 <SUBGHZ_CheckDeviceReady+0x4c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005cd0:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8005cd4:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005cd6:	4a0b      	ldr	r2, [pc, #44]	@ (8005d04 <SUBGHZ_CheckDeviceReady+0x50>)
 8005cd8:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005cdc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      count--;
 8005ce4:	9b01      	ldr	r3, [sp, #4]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8005cea:	9b01      	ldr	r3, [sp, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1f9      	bne.n	8005ce4 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005cf0:	4a04      	ldr	r2, [pc, #16]	@ (8005d04 <SUBGHZ_CheckDeviceReady+0x50>)
 8005cf2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005cfe:	e7de      	b.n	8005cbe <SUBGHZ_CheckDeviceReady+0xa>
 8005d00:	20000074 	.word	0x20000074
 8005d04:	58000400 	.word	0x58000400

08005d08 <HAL_SUBGHZ_WriteRegisters>:
{
 8005d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005d0e:	7980      	ldrb	r0, [r0, #6]
 8005d10:	fa5f f880 	uxtb.w	r8, r0
 8005d14:	f1b8 0f01 	cmp.w	r8, #1
 8005d18:	d13e      	bne.n	8005d98 <HAL_SUBGHZ_WriteRegisters+0x90>
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	4617      	mov	r7, r2
 8005d1e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005d20:	796b      	ldrb	r3, [r5, #5]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d03b      	beq.n	8005d9e <HAL_SUBGHZ_WriteRegisters+0x96>
 8005d26:	2301      	movs	r3, #1
 8005d28:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f7ff ffc0 	bl	8005cb4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005d34:	4a1b      	ldr	r2, [pc, #108]	@ (8005da4 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005d36:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005d3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005d42:	210d      	movs	r1, #13
 8005d44:	4628      	mov	r0, r5
 8005d46:	f7ff ff0d 	bl	8005b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005d4a:	0a21      	lsrs	r1, r4, #8
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f7ff ff09 	bl	8005b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005d52:	b2e1      	uxtb	r1, r4
 8005d54:	4628      	mov	r0, r5
 8005d56:	f7ff ff05 	bl	8005b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005d5a:	2400      	movs	r4, #0
 8005d5c:	e005      	b.n	8005d6a <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005d5e:	5d39      	ldrb	r1, [r7, r4]
 8005d60:	4628      	mov	r0, r5
 8005d62:	f7ff feff 	bl	8005b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005d66:	3401      	adds	r4, #1
 8005d68:	b2a4      	uxth	r4, r4
 8005d6a:	42b4      	cmp	r4, r6
 8005d6c:	d3f7      	bcc.n	8005d5e <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8005da4 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005d70:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005d74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f7ff ff6d 	bl	8005c5c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005d82:	68ab      	ldr	r3, [r5, #8]
 8005d84:	b90b      	cbnz	r3, 8005d8a <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8005d86:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005d8e:	2300      	movs	r3, #0
 8005d90:	716b      	strb	r3, [r5, #5]
}
 8005d92:	4640      	mov	r0, r8
 8005d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005d98:	f04f 0802 	mov.w	r8, #2
 8005d9c:	e7f9      	b.n	8005d92 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8005d9e:	f04f 0802 	mov.w	r8, #2
 8005da2:	e7f6      	b.n	8005d92 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8005da4:	58000400 	.word	0x58000400

08005da8 <HAL_SUBGHZ_ReadRegisters>:
{
 8005da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dac:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005dae:	7980      	ldrb	r0, [r0, #6]
 8005db0:	fa5f f880 	uxtb.w	r8, r0
 8005db4:	f1b8 0f01 	cmp.w	r8, #1
 8005db8:	d141      	bne.n	8005e3e <HAL_SUBGHZ_ReadRegisters+0x96>
 8005dba:	460c      	mov	r4, r1
 8005dbc:	4615      	mov	r5, r2
 8005dbe:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005dc0:	7973      	ldrb	r3, [r6, #5]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d03e      	beq.n	8005e44 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f7ff ff72 	bl	8005cb4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8005e4c <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8005dd2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005dd6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005dda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005dde:	211d      	movs	r1, #29
 8005de0:	4630      	mov	r0, r6
 8005de2:	f7ff febf 	bl	8005b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005de6:	0a21      	lsrs	r1, r4, #8
 8005de8:	4630      	mov	r0, r6
 8005dea:	f7ff febb 	bl	8005b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005dee:	b2e1      	uxtb	r1, r4
 8005df0:	4630      	mov	r0, r6
 8005df2:	f7ff feb7 	bl	8005b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005df6:	2100      	movs	r1, #0
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f7ff feb3 	bl	8005b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005dfe:	2400      	movs	r4, #0
 8005e00:	e006      	b.n	8005e10 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005e02:	4629      	mov	r1, r5
 8005e04:	4630      	mov	r0, r6
 8005e06:	f7ff fee9 	bl	8005bdc <SUBGHZSPI_Receive>
      pData++;
 8005e0a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005e0c:	3401      	adds	r4, #1
 8005e0e:	b2a4      	uxth	r4, r4
 8005e10:	42bc      	cmp	r4, r7
 8005e12:	d3f6      	bcc.n	8005e02 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005e14:	4a0d      	ldr	r2, [pc, #52]	@ (8005e4c <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8005e16:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005e22:	4630      	mov	r0, r6
 8005e24:	f7ff ff1a 	bl	8005c5c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005e28:	68b3      	ldr	r3, [r6, #8]
 8005e2a:	b90b      	cbnz	r3, 8005e30 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8005e2c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005e30:	2301      	movs	r3, #1
 8005e32:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005e34:	2300      	movs	r3, #0
 8005e36:	7173      	strb	r3, [r6, #5]
}
 8005e38:	4640      	mov	r0, r8
 8005e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005e3e:	f04f 0802 	mov.w	r8, #2
 8005e42:	e7f9      	b.n	8005e38 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8005e44:	f04f 0802 	mov.w	r8, #2
 8005e48:	e7f6      	b.n	8005e38 <HAL_SUBGHZ_ReadRegisters+0x90>
 8005e4a:	bf00      	nop
 8005e4c:	58000400 	.word	0x58000400

08005e50 <HAL_SUBGHZ_ExecSetCmd>:
{
 8005e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e54:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005e56:	7980      	ldrb	r0, [r0, #6]
 8005e58:	fa5f f980 	uxtb.w	r9, r0
 8005e5c:	f1b9 0f01 	cmp.w	r9, #1
 8005e60:	d143      	bne.n	8005eea <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8005e62:	4688      	mov	r8, r1
 8005e64:	4617      	mov	r7, r2
 8005e66:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005e68:	796b      	ldrb	r3, [r5, #5]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d040      	beq.n	8005ef0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005e72:	4628      	mov	r0, r5
 8005e74:	f7ff ff1e 	bl	8005cb4 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005e78:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8005e7c:	d005      	beq.n	8005e8a <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8005e7e:	f1b8 0f94 	cmp.w	r8, #148	@ 0x94
 8005e82:	d002      	beq.n	8005e8a <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	712b      	strb	r3, [r5, #4]
 8005e88:	e001      	b.n	8005e8e <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005e8e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ef8 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005e90:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005e94:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005e9c:	4641      	mov	r1, r8
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f7ff fe60 	bl	8005b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005ea4:	2400      	movs	r4, #0
 8005ea6:	e005      	b.n	8005eb4 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005ea8:	5d39      	ldrb	r1, [r7, r4]
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f7ff fe5a 	bl	8005b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005eb0:	3401      	adds	r4, #1
 8005eb2:	b2a4      	uxth	r4, r4
 8005eb4:	42b4      	cmp	r4, r6
 8005eb6:	d3f7      	bcc.n	8005ea8 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8005ef8 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005eba:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005ebe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ec2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    if (Command != RADIO_SET_SLEEP)
 8005ec6:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8005eca:	d10a      	bne.n	8005ee2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005ecc:	68ab      	ldr	r3, [r5, #8]
 8005ece:	b90b      	cbnz	r3, 8005ed4 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8005ed0:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005ed8:	2300      	movs	r3, #0
 8005eda:	716b      	strb	r3, [r5, #5]
}
 8005edc:	4648      	mov	r0, r9
 8005ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f7ff feba 	bl	8005c5c <SUBGHZ_WaitOnBusy>
 8005ee8:	e7f0      	b.n	8005ecc <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8005eea:	f04f 0902 	mov.w	r9, #2
 8005eee:	e7f5      	b.n	8005edc <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8005ef0:	f04f 0902 	mov.w	r9, #2
 8005ef4:	e7f2      	b.n	8005edc <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8005ef6:	bf00      	nop
 8005ef8:	58000400 	.word	0x58000400

08005efc <HAL_SUBGHZ_ExecGetCmd>:
{
 8005efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f00:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005f02:	7980      	ldrb	r0, [r0, #6]
 8005f04:	fa5f f880 	uxtb.w	r8, r0
 8005f08:	f1b8 0f01 	cmp.w	r8, #1
 8005f0c:	d139      	bne.n	8005f82 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8005f0e:	460c      	mov	r4, r1
 8005f10:	4615      	mov	r5, r2
 8005f12:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005f14:	7973      	ldrb	r3, [r6, #5]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d036      	beq.n	8005f88 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005f1e:	4630      	mov	r0, r6
 8005f20:	f7ff fec8 	bl	8005cb4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005f24:	4a1a      	ldr	r2, [pc, #104]	@ (8005f90 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005f26:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005f2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005f32:	4621      	mov	r1, r4
 8005f34:	4630      	mov	r0, r6
 8005f36:	f7ff fe15 	bl	8005b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	f7ff fe11 	bl	8005b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005f42:	2400      	movs	r4, #0
 8005f44:	e006      	b.n	8005f54 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005f46:	4629      	mov	r1, r5
 8005f48:	4630      	mov	r0, r6
 8005f4a:	f7ff fe47 	bl	8005bdc <SUBGHZSPI_Receive>
      pData++;
 8005f4e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005f50:	3401      	adds	r4, #1
 8005f52:	b2a4      	uxth	r4, r4
 8005f54:	42bc      	cmp	r4, r7
 8005f56:	d3f6      	bcc.n	8005f46 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005f58:	4a0d      	ldr	r2, [pc, #52]	@ (8005f90 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005f5a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005f66:	4630      	mov	r0, r6
 8005f68:	f7ff fe78 	bl	8005c5c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005f6c:	68b3      	ldr	r3, [r6, #8]
 8005f6e:	b90b      	cbnz	r3, 8005f74 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8005f70:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005f74:	2301      	movs	r3, #1
 8005f76:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005f78:	2300      	movs	r3, #0
 8005f7a:	7173      	strb	r3, [r6, #5]
}
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005f82:	f04f 0802 	mov.w	r8, #2
 8005f86:	e7f9      	b.n	8005f7c <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8005f88:	f04f 0802 	mov.w	r8, #2
 8005f8c:	e7f6      	b.n	8005f7c <HAL_SUBGHZ_ExecGetCmd+0x80>
 8005f8e:	bf00      	nop
 8005f90:	58000400 	.word	0x58000400

08005f94 <HAL_SUBGHZ_IRQHandler>:
{
 8005f94:	b530      	push	{r4, r5, lr}
 8005f96:	b083      	sub	sp, #12
 8005f98:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	aa01      	add	r2, sp, #4
 8005fa4:	2112      	movs	r1, #18
 8005fa6:	f7ff ffa9 	bl	8005efc <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005faa:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005fae:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8005fb2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8005fb6:	b224      	sxth	r4, r4
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8005fb8:	2302      	movs	r3, #2
 8005fba:	aa01      	add	r2, sp, #4
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	f7ff ff46 	bl	8005e50 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005fc4:	f014 0f01 	tst.w	r4, #1
 8005fc8:	d123      	bne.n	8006012 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005fca:	f014 0f02 	tst.w	r4, #2
 8005fce:	d124      	bne.n	800601a <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005fd0:	f014 0f04 	tst.w	r4, #4
 8005fd4:	d125      	bne.n	8006022 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005fd6:	f014 0f08 	tst.w	r4, #8
 8005fda:	d126      	bne.n	800602a <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005fdc:	f014 0f10 	tst.w	r4, #16
 8005fe0:	d127      	bne.n	8006032 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005fe2:	f014 0f20 	tst.w	r4, #32
 8005fe6:	d128      	bne.n	800603a <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005fe8:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8005fec:	d129      	bne.n	8006042 <HAL_SUBGHZ_IRQHandler+0xae>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005fee:	f014 0f80 	tst.w	r4, #128	@ 0x80
 8005ff2:	d006      	beq.n	8006002 <HAL_SUBGHZ_IRQHandler+0x6e>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005ff4:	f414 7f80 	tst.w	r4, #256	@ 0x100
 8005ff8:	d027      	beq.n	800604a <HAL_SUBGHZ_IRQHandler+0xb6>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	f00a fceb 	bl	80109d8 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006002:	f414 7f00 	tst.w	r4, #512	@ 0x200
 8006006:	d125      	bne.n	8006054 <HAL_SUBGHZ_IRQHandler+0xc0>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8006008:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 800600c:	d126      	bne.n	800605c <HAL_SUBGHZ_IRQHandler+0xc8>
}
 800600e:	b003      	add	sp, #12
 8006010:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006012:	4628      	mov	r0, r5
 8006014:	f00a fcc8 	bl	80109a8 <HAL_SUBGHZ_TxCpltCallback>
 8006018:	e7d7      	b.n	8005fca <HAL_SUBGHZ_IRQHandler+0x36>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800601a:	4628      	mov	r0, r5
 800601c:	f00a fccc 	bl	80109b8 <HAL_SUBGHZ_RxCpltCallback>
 8006020:	e7d6      	b.n	8005fd0 <HAL_SUBGHZ_IRQHandler+0x3c>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006022:	4628      	mov	r0, r5
 8006024:	f00a fcfc 	bl	8010a20 <HAL_SUBGHZ_PreambleDetectedCallback>
 8006028:	e7d5      	b.n	8005fd6 <HAL_SUBGHZ_IRQHandler+0x42>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800602a:	4628      	mov	r0, r5
 800602c:	f00a fd00 	bl	8010a30 <HAL_SUBGHZ_SyncWordValidCallback>
 8006030:	e7d4      	b.n	8005fdc <HAL_SUBGHZ_IRQHandler+0x48>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006032:	4628      	mov	r0, r5
 8006034:	f00a fd04 	bl	8010a40 <HAL_SUBGHZ_HeaderValidCallback>
 8006038:	e7d3      	b.n	8005fe2 <HAL_SUBGHZ_IRQHandler+0x4e>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800603a:	4628      	mov	r0, r5
 800603c:	f00a fce8 	bl	8010a10 <HAL_SUBGHZ_HeaderErrorCallback>
 8006040:	e7d2      	b.n	8005fe8 <HAL_SUBGHZ_IRQHandler+0x54>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006042:	4628      	mov	r0, r5
 8006044:	f00a fcc0 	bl	80109c8 <HAL_SUBGHZ_CRCErrorCallback>
 8006048:	e7d1      	b.n	8005fee <HAL_SUBGHZ_IRQHandler+0x5a>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800604a:	2100      	movs	r1, #0
 800604c:	4628      	mov	r0, r5
 800604e:	f00a fcc3 	bl	80109d8 <HAL_SUBGHZ_CADStatusCallback>
 8006052:	e7d6      	b.n	8006002 <HAL_SUBGHZ_IRQHandler+0x6e>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006054:	4628      	mov	r0, r5
 8006056:	f00a fcd1 	bl	80109fc <HAL_SUBGHZ_RxTxTimeoutCallback>
 800605a:	e7d5      	b.n	8006008 <HAL_SUBGHZ_IRQHandler+0x74>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800605c:	4628      	mov	r0, r5
 800605e:	f00a fcf7 	bl	8010a50 <HAL_SUBGHZ_LrFhssHopCallback>
}
 8006062:	e7d4      	b.n	800600e <HAL_SUBGHZ_IRQHandler+0x7a>

08006064 <HAL_SUBGHZ_WriteBuffer>:
{
 8006064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006068:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800606a:	7980      	ldrb	r0, [r0, #6]
 800606c:	fa5f f880 	uxtb.w	r8, r0
 8006070:	f1b8 0f01 	cmp.w	r8, #1
 8006074:	d138      	bne.n	80060e8 <HAL_SUBGHZ_WriteBuffer+0x84>
 8006076:	460c      	mov	r4, r1
 8006078:	4617      	mov	r7, r2
 800607a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800607c:	796b      	ldrb	r3, [r5, #5]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d035      	beq.n	80060ee <HAL_SUBGHZ_WriteBuffer+0x8a>
 8006082:	2301      	movs	r3, #1
 8006084:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006086:	4628      	mov	r0, r5
 8006088:	f7ff fe14 	bl	8005cb4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800608c:	4a19      	ldr	r2, [pc, #100]	@ (80060f4 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800608e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006092:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006096:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800609a:	210e      	movs	r1, #14
 800609c:	4628      	mov	r0, r5
 800609e:	f7ff fd61 	bl	8005b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80060a2:	4621      	mov	r1, r4
 80060a4:	4628      	mov	r0, r5
 80060a6:	f7ff fd5d 	bl	8005b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80060aa:	2400      	movs	r4, #0
 80060ac:	e005      	b.n	80060ba <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80060ae:	5d39      	ldrb	r1, [r7, r4]
 80060b0:	4628      	mov	r0, r5
 80060b2:	f7ff fd57 	bl	8005b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80060b6:	3401      	adds	r4, #1
 80060b8:	b2a4      	uxth	r4, r4
 80060ba:	42b4      	cmp	r4, r6
 80060bc:	d3f7      	bcc.n	80060ae <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80060be:	4a0d      	ldr	r2, [pc, #52]	@ (80060f4 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80060c0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80060c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80060cc:	4628      	mov	r0, r5
 80060ce:	f7ff fdc5 	bl	8005c5c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80060d2:	68ab      	ldr	r3, [r5, #8]
 80060d4:	b90b      	cbnz	r3, 80060da <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 80060d6:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80060da:	2301      	movs	r3, #1
 80060dc:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80060de:	2300      	movs	r3, #0
 80060e0:	716b      	strb	r3, [r5, #5]
}
 80060e2:	4640      	mov	r0, r8
 80060e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80060e8:	f04f 0802 	mov.w	r8, #2
 80060ec:	e7f9      	b.n	80060e2 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 80060ee:	f04f 0802 	mov.w	r8, #2
 80060f2:	e7f6      	b.n	80060e2 <HAL_SUBGHZ_WriteBuffer+0x7e>
 80060f4:	58000400 	.word	0x58000400

080060f8 <HAL_SUBGHZ_ReadBuffer>:
{
 80060f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060fc:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80060fe:	7980      	ldrb	r0, [r0, #6]
 8006100:	fa5f f880 	uxtb.w	r8, r0
 8006104:	f1b8 0f01 	cmp.w	r8, #1
 8006108:	d13d      	bne.n	8006186 <HAL_SUBGHZ_ReadBuffer+0x8e>
 800610a:	460c      	mov	r4, r1
 800610c:	4615      	mov	r5, r2
 800610e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006110:	7973      	ldrb	r3, [r6, #5]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d03a      	beq.n	800618c <HAL_SUBGHZ_ReadBuffer+0x94>
 8006116:	2301      	movs	r3, #1
 8006118:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff fdca 	bl	8005cb4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006120:	4a1c      	ldr	r2, [pc, #112]	@ (8006194 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8006122:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006126:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800612a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800612e:	211e      	movs	r1, #30
 8006130:	4630      	mov	r0, r6
 8006132:	f7ff fd17 	bl	8005b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006136:	4621      	mov	r1, r4
 8006138:	4630      	mov	r0, r6
 800613a:	f7ff fd13 	bl	8005b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800613e:	2100      	movs	r1, #0
 8006140:	4630      	mov	r0, r6
 8006142:	f7ff fd0f 	bl	8005b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006146:	2400      	movs	r4, #0
 8006148:	e006      	b.n	8006158 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800614a:	4629      	mov	r1, r5
 800614c:	4630      	mov	r0, r6
 800614e:	f7ff fd45 	bl	8005bdc <SUBGHZSPI_Receive>
      pData++;
 8006152:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006154:	3401      	adds	r4, #1
 8006156:	b2a4      	uxth	r4, r4
 8006158:	42bc      	cmp	r4, r7
 800615a:	d3f6      	bcc.n	800614a <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800615c:	4a0d      	ldr	r2, [pc, #52]	@ (8006194 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800615e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006166:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800616a:	4630      	mov	r0, r6
 800616c:	f7ff fd76 	bl	8005c5c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006170:	68b3      	ldr	r3, [r6, #8]
 8006172:	b90b      	cbnz	r3, 8006178 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8006174:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006178:	2301      	movs	r3, #1
 800617a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800617c:	2300      	movs	r3, #0
 800617e:	7173      	strb	r3, [r6, #5]
}
 8006180:	4640      	mov	r0, r8
 8006182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006186:	f04f 0802 	mov.w	r8, #2
 800618a:	e7f9      	b.n	8006180 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 800618c:	f04f 0802 	mov.w	r8, #2
 8006190:	e7f6      	b.n	8006180 <HAL_SUBGHZ_ReadBuffer+0x88>
 8006192:	bf00      	nop
 8006194:	58000400 	.word	0x58000400

08006198 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006198:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	e852 3f00 	ldrex	r3, [r2]
 800619e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	e842 3100 	strex	r1, r3, [r2]
 80061a6:	2900      	cmp	r1, #0
 80061a8:	d1f6      	bne.n	8006198 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80061aa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	f102 0308 	add.w	r3, r2, #8
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	3208      	adds	r2, #8
 80061ba:	e842 3100 	strex	r1, r3, [r2]
 80061be:	2900      	cmp	r1, #0
 80061c0:	d1f3      	bne.n	80061aa <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061c2:	2320      	movs	r3, #32
 80061c4:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 80061c8:	4770      	bx	lr

080061ca <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061ca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	e852 3f00 	ldrex	r3, [r2]
 80061d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	e842 3100 	strex	r1, r3, [r2]
 80061d8:	2900      	cmp	r1, #0
 80061da:	d1f6      	bne.n	80061ca <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061dc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	f102 0308 	add.w	r3, r2, #8
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061ea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	3208      	adds	r2, #8
 80061f0:	e842 3100 	strex	r1, r3, [r2]
 80061f4:	2900      	cmp	r1, #0
 80061f6:	d1f1      	bne.n	80061dc <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061f8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d006      	beq.n	800620c <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061fe:	2320      	movs	r3, #32
 8006200:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006204:	2300      	movs	r3, #0
 8006206:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006208:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800620a:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	e852 3f00 	ldrex	r3, [r2]
 8006212:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	e842 3100 	strex	r1, r3, [r2]
 800621a:	2900      	cmp	r1, #0
 800621c:	d1f6      	bne.n	800620c <UART_EndRxTransfer+0x42>
 800621e:	e7ee      	b.n	80061fe <UART_EndRxTransfer+0x34>

08006220 <HAL_UART_Transmit_DMA>:
{
 8006220:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006222:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8006226:	2a20      	cmp	r2, #32
 8006228:	d13d      	bne.n	80062a6 <HAL_UART_Transmit_DMA+0x86>
{
 800622a:	b510      	push	{r4, lr}
 800622c:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800622e:	2900      	cmp	r1, #0
 8006230:	d03b      	beq.n	80062aa <HAL_UART_Transmit_DMA+0x8a>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d03b      	beq.n	80062ae <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8006236:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006238:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 800623c:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006240:	2200      	movs	r2, #0
 8006242:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006246:	2221      	movs	r2, #33	@ 0x21
 8006248:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 800624c:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800624e:	b1ca      	cbz	r2, 8006284 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006250:	4918      	ldr	r1, [pc, #96]	@ (80062b4 <HAL_UART_Transmit_DMA+0x94>)
 8006252:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006254:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8006256:	4918      	ldr	r1, [pc, #96]	@ (80062b8 <HAL_UART_Transmit_DMA+0x98>)
 8006258:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800625a:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800625c:	4917      	ldr	r1, [pc, #92]	@ (80062bc <HAL_UART_Transmit_DMA+0x9c>)
 800625e:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8006260:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8006262:	2100      	movs	r1, #0
 8006264:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006266:	6802      	ldr	r2, [r0, #0]
 8006268:	3228      	adds	r2, #40	@ 0x28
 800626a:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800626c:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800626e:	f7fd fe45 	bl	8003efc <HAL_DMA_Start_IT>
 8006272:	b138      	cbz	r0, 8006284 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006274:	2310      	movs	r3, #16
 8006276:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 800627a:	2320      	movs	r3, #32
 800627c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_ERROR;
 8006280:	2001      	movs	r0, #1
 8006282:	e00f      	b.n	80062a4 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	2240      	movs	r2, #64	@ 0x40
 8006288:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800628a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	f102 0308 	add.w	r3, r2, #8
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	3208      	adds	r2, #8
 800629a:	e842 3100 	strex	r1, r3, [r2]
 800629e:	2900      	cmp	r1, #0
 80062a0:	d1f3      	bne.n	800628a <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 80062a2:	2000      	movs	r0, #0
}
 80062a4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80062a6:	2002      	movs	r0, #2
}
 80062a8:	4770      	bx	lr
      return HAL_ERROR;
 80062aa:	2001      	movs	r0, #1
 80062ac:	e7fa      	b.n	80062a4 <HAL_UART_Transmit_DMA+0x84>
 80062ae:	2001      	movs	r0, #1
 80062b0:	e7f8      	b.n	80062a4 <HAL_UART_Transmit_DMA+0x84>
 80062b2:	bf00      	nop
 80062b4:	080062c1 	.word	0x080062c1
 80062b8:	0800632f 	.word	0x0800632f
 80062bc:	0800633b 	.word	0x0800633b

080062c0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062c0:	b508      	push	{r3, lr}
 80062c2:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062c4:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f013 0f20 	tst.w	r3, #32
 80062ce:	d118      	bne.n	8006302 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062d6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	f102 0308 	add.w	r3, r2, #8
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e4:	3208      	adds	r2, #8
 80062e6:	e842 3100 	strex	r1, r3, [r2]
 80062ea:	2900      	cmp	r1, #0
 80062ec:	d1f3      	bne.n	80062d6 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062ee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	e852 3f00 	ldrex	r3, [r2]
 80062f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	e842 3100 	strex	r1, r3, [r2]
 80062fc:	2900      	cmp	r1, #0
 80062fe:	d1f6      	bne.n	80062ee <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006300:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8006302:	f7fc f8ad 	bl	8002460 <HAL_UART_TxCpltCallback>
}
 8006306:	e7fb      	b.n	8006300 <UART_DMATransmitCplt+0x40>

08006308 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006308:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800630a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	e852 3f00 	ldrex	r3, [r2]
 8006310:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	e842 3100 	strex	r1, r3, [r2]
 8006318:	2900      	cmp	r1, #0
 800631a:	d1f6      	bne.n	800630a <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800631c:	2320      	movs	r3, #32
 800631e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006326:	f7fc f89b 	bl	8002460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800632a:	bd08      	pop	{r3, pc}

0800632c <HAL_UART_TxHalfCpltCallback>:
}
 800632c:	4770      	bx	lr

0800632e <UART_DMATxHalfCplt>:
{
 800632e:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8006330:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8006332:	f7ff fffb 	bl	800632c <HAL_UART_TxHalfCpltCallback>
}
 8006336:	bd08      	pop	{r3, pc}

08006338 <HAL_UART_ErrorCallback>:
}
 8006338:	4770      	bx	lr

0800633a <UART_DMAError>:
{
 800633a:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800633c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800633e:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006342:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800634e:	d001      	beq.n	8006354 <UART_DMAError+0x1a>
 8006350:	2a21      	cmp	r2, #33	@ 0x21
 8006352:	d010      	beq.n	8006376 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800635c:	d001      	beq.n	8006362 <UART_DMAError+0x28>
 800635e:	2d22      	cmp	r5, #34	@ 0x22
 8006360:	d010      	beq.n	8006384 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006362:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006366:	f043 0310 	orr.w	r3, r3, #16
 800636a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  HAL_UART_ErrorCallback(huart);
 800636e:	4620      	mov	r0, r4
 8006370:	f7ff ffe2 	bl	8006338 <HAL_UART_ErrorCallback>
}
 8006374:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800637c:	4620      	mov	r0, r4
 800637e:	f7ff ff0b 	bl	8006198 <UART_EndTxTransfer>
 8006382:	e7e7      	b.n	8006354 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800638a:	4620      	mov	r0, r4
 800638c:	f7ff ff1d 	bl	80061ca <UART_EndRxTransfer>
 8006390:	e7e7      	b.n	8006362 <UART_DMAError+0x28>

08006392 <UART_DMAAbortOnError>:
{
 8006392:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006394:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800639c:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 80063a0:	f7ff ffca 	bl	8006338 <HAL_UART_ErrorCallback>
}
 80063a4:	bd08      	pop	{r3, pc}

080063a6 <HAL_UARTEx_RxEventCallback>:
}
 80063a6:	4770      	bx	lr

080063a8 <HAL_UART_IRQHandler>:
{
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063ac:	6802      	ldr	r2, [r0, #0]
 80063ae:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063b0:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063b2:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 80063b4:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 80063b8:	ea13 0f0c 	tst.w	r3, ip
 80063bc:	d10d      	bne.n	80063da <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063be:	f013 0f20 	tst.w	r3, #32
 80063c2:	d010      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063c4:	f010 0f20 	tst.w	r0, #32
 80063c8:	d102      	bne.n	80063d0 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063ca:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 80063ce:	d00a      	beq.n	80063e6 <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 80063d0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80063d2:	b393      	cbz	r3, 800643a <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 80063d4:	4620      	mov	r0, r4
 80063d6:	4798      	blx	r3
      return;
 80063d8:	e02f      	b.n	800643a <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80063da:	4db4      	ldr	r5, [pc, #720]	@ (80066ac <HAL_UART_IRQHandler+0x304>)
 80063dc:	400d      	ands	r5, r1
 80063de:	d12d      	bne.n	800643c <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80063e0:	4eb3      	ldr	r6, [pc, #716]	@ (80066b0 <HAL_UART_IRQHandler+0x308>)
 80063e2:	4230      	tst	r0, r6
 80063e4:	d12a      	bne.n	800643c <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e6:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 80063e8:	2d01      	cmp	r5, #1
 80063ea:	f000 80c0 	beq.w	800656e <HAL_UART_IRQHandler+0x1c6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063ee:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80063f2:	d003      	beq.n	80063fc <HAL_UART_IRQHandler+0x54>
 80063f4:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 80063f8:	f040 815e 	bne.w	80066b8 <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80063fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006400:	d007      	beq.n	8006412 <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006402:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8006406:	f040 815e 	bne.w	80066c6 <HAL_UART_IRQHandler+0x31e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800640a:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 800640e:	f040 815a 	bne.w	80066c6 <HAL_UART_IRQHandler+0x31e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006412:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006416:	d003      	beq.n	8006420 <HAL_UART_IRQHandler+0x78>
 8006418:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800641c:	f040 815a 	bne.w	80066d4 <HAL_UART_IRQHandler+0x32c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006420:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006424:	d003      	beq.n	800642e <HAL_UART_IRQHandler+0x86>
 8006426:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800642a:	f040 8157 	bne.w	80066dc <HAL_UART_IRQHandler+0x334>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800642e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8006432:	d002      	beq.n	800643a <HAL_UART_IRQHandler+0x92>
 8006434:	2800      	cmp	r0, #0
 8006436:	f2c0 8155 	blt.w	80066e4 <HAL_UART_IRQHandler+0x33c>
}
 800643a:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800643c:	f013 0f01 	tst.w	r3, #1
 8006440:	d009      	beq.n	8006456 <HAL_UART_IRQHandler+0xae>
 8006442:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8006446:	d006      	beq.n	8006456 <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006448:	2601      	movs	r6, #1
 800644a:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800644c:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8006450:	4332      	orrs	r2, r6
 8006452:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006456:	f013 0f02 	tst.w	r3, #2
 800645a:	d00b      	beq.n	8006474 <HAL_UART_IRQHandler+0xcc>
 800645c:	f011 0f01 	tst.w	r1, #1
 8006460:	d008      	beq.n	8006474 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006462:	6822      	ldr	r2, [r4, #0]
 8006464:	2602      	movs	r6, #2
 8006466:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006468:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800646c:	f042 0204 	orr.w	r2, r2, #4
 8006470:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006474:	f013 0f04 	tst.w	r3, #4
 8006478:	d00b      	beq.n	8006492 <HAL_UART_IRQHandler+0xea>
 800647a:	f011 0f01 	tst.w	r1, #1
 800647e:	d008      	beq.n	8006492 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006480:	6822      	ldr	r2, [r4, #0]
 8006482:	2604      	movs	r6, #4
 8006484:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006486:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800648a:	f042 0202 	orr.w	r2, r2, #2
 800648e:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006492:	f013 0f08 	tst.w	r3, #8
 8006496:	d00b      	beq.n	80064b0 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006498:	f010 0f20 	tst.w	r0, #32
 800649c:	d100      	bne.n	80064a0 <HAL_UART_IRQHandler+0xf8>
 800649e:	b13d      	cbz	r5, 80064b0 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064a0:	6822      	ldr	r2, [r4, #0]
 80064a2:	2508      	movs	r5, #8
 80064a4:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064a6:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80064aa:	432a      	orrs	r2, r5
 80064ac:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064b0:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80064b4:	d00c      	beq.n	80064d0 <HAL_UART_IRQHandler+0x128>
 80064b6:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 80064ba:	d009      	beq.n	80064d0 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064bc:	6822      	ldr	r2, [r4, #0]
 80064be:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 80064c2:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064c4:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80064c8:	f042 0220 	orr.w	r2, r2, #32
 80064cc:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064d0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80064d4:	2a00      	cmp	r2, #0
 80064d6:	d0b0      	beq.n	800643a <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064d8:	f013 0f20 	tst.w	r3, #32
 80064dc:	d009      	beq.n	80064f2 <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064de:	f010 0f20 	tst.w	r0, #32
 80064e2:	d102      	bne.n	80064ea <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064e4:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 80064e8:	d003      	beq.n	80064f2 <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 80064ea:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80064ec:	b10b      	cbz	r3, 80064f2 <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 80064ee:	4620      	mov	r0, r4
 80064f0:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80064f2:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80064fe:	d102      	bne.n	8006506 <HAL_UART_IRQHandler+0x15e>
 8006500:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8006504:	d02c      	beq.n	8006560 <HAL_UART_IRQHandler+0x1b8>
        UART_EndRxTransfer(huart);
 8006506:	4620      	mov	r0, r4
 8006508:	f7ff fe5f 	bl	80061ca <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006514:	d020      	beq.n	8006558 <HAL_UART_IRQHandler+0x1b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006516:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	f102 0308 	add.w	r3, r2, #8
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	3208      	adds	r2, #8
 8006526:	e842 3100 	strex	r1, r3, [r2]
 800652a:	2900      	cmp	r1, #0
 800652c:	d1f3      	bne.n	8006516 <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 800652e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8006532:	b16b      	cbz	r3, 8006550 <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006534:	4a5f      	ldr	r2, [pc, #380]	@ (80066b4 <HAL_UART_IRQHandler+0x30c>)
 8006536:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006538:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800653c:	f7fd fd64 	bl	8004008 <HAL_DMA_Abort_IT>
 8006540:	2800      	cmp	r0, #0
 8006542:	f43f af7a 	beq.w	800643a <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006546:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800654a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800654c:	4798      	blx	r3
 800654e:	e774      	b.n	800643a <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 8006550:	4620      	mov	r0, r4
 8006552:	f7ff fef1 	bl	8006338 <HAL_UART_ErrorCallback>
 8006556:	e770      	b.n	800643a <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 8006558:	4620      	mov	r0, r4
 800655a:	f7ff feed 	bl	8006338 <HAL_UART_ErrorCallback>
 800655e:	e76c      	b.n	800643a <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 8006560:	4620      	mov	r0, r4
 8006562:	f7ff fee9 	bl	8006338 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006566:	2300      	movs	r3, #0
 8006568:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    return;
 800656c:	e765      	b.n	800643a <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800656e:	f013 0f10 	tst.w	r3, #16
 8006572:	f43f af3c 	beq.w	80063ee <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006576:	f010 0f10 	tst.w	r0, #16
 800657a:	f43f af38 	beq.w	80063ee <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800657e:	2310      	movs	r3, #16
 8006580:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800658a:	d053      	beq.n	8006634 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800658c:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8006590:	6813      	ldr	r3, [r2, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8006596:	2b00      	cmp	r3, #0
 8006598:	f43f af4f 	beq.w	800643a <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800659c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80065a0:	4299      	cmp	r1, r3
 80065a2:	f67f af4a 	bls.w	800643a <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 80065a6:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065aa:	6813      	ldr	r3, [r2, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f013 0f20 	tst.w	r3, #32
 80065b2:	d132      	bne.n	800661a <HAL_UART_IRQHandler+0x272>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	e852 3f00 	ldrex	r3, [r2]
 80065ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	e842 3100 	strex	r1, r3, [r2]
 80065c2:	2900      	cmp	r1, #0
 80065c4:	d1f6      	bne.n	80065b4 <HAL_UART_IRQHandler+0x20c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c8:	f102 0308 	add.w	r3, r2, #8
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	3208      	adds	r2, #8
 80065d6:	e842 3100 	strex	r1, r3, [r2]
 80065da:	2900      	cmp	r1, #0
 80065dc:	d1f3      	bne.n	80065c6 <HAL_UART_IRQHandler+0x21e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065de:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	f102 0308 	add.w	r3, r2, #8
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ec:	3208      	adds	r2, #8
 80065ee:	e842 3100 	strex	r1, r3, [r2]
 80065f2:	2900      	cmp	r1, #0
 80065f4:	d1f3      	bne.n	80065de <HAL_UART_IRQHandler+0x236>
          huart->RxState = HAL_UART_STATE_READY;
 80065f6:	2320      	movs	r3, #32
 80065f8:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fc:	2300      	movs	r3, #0
 80065fe:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006600:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	e852 3f00 	ldrex	r3, [r2]
 8006606:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	e842 3100 	strex	r1, r3, [r2]
 800660e:	2900      	cmp	r1, #0
 8006610:	d1f6      	bne.n	8006600 <HAL_UART_IRQHandler+0x258>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006612:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8006616:	f7fd fcbd 	bl	8003f94 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800661a:	2302      	movs	r3, #2
 800661c:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800661e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8006622:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006626:	b29b      	uxth	r3, r3
 8006628:	1ac9      	subs	r1, r1, r3
 800662a:	b289      	uxth	r1, r1
 800662c:	4620      	mov	r0, r4
 800662e:	f7ff feba 	bl	80063a6 <HAL_UARTEx_RxEventCallback>
      return;
 8006632:	e702      	b.n	800643a <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006634:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8006638:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800663c:	b29b      	uxth	r3, r3
 800663e:	1ac9      	subs	r1, r1, r3
 8006640:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8006642:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006646:	b29b      	uxth	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	f43f aef6 	beq.w	800643a <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 800664e:	2900      	cmp	r1, #0
 8006650:	f43f aef3 	beq.w	800643a <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006654:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	e852 3f00 	ldrex	r3, [r2]
 800665a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	e842 3000 	strex	r0, r3, [r2]
 8006662:	2800      	cmp	r0, #0
 8006664:	d1f6      	bne.n	8006654 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006666:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	f102 0308 	add.w	r3, r2, #8
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006674:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	3208      	adds	r2, #8
 800667a:	e842 3000 	strex	r0, r3, [r2]
 800667e:	2800      	cmp	r0, #0
 8006680:	d1f1      	bne.n	8006666 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8006682:	2320      	movs	r3, #32
 8006684:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006688:	2300      	movs	r3, #0
 800668a:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 800668c:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	e852 3f00 	ldrex	r3, [r2]
 8006694:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	e842 3000 	strex	r0, r3, [r2]
 800669c:	2800      	cmp	r0, #0
 800669e:	d1f6      	bne.n	800668e <HAL_UART_IRQHandler+0x2e6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066a0:	2302      	movs	r3, #2
 80066a2:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066a4:	4620      	mov	r0, r4
 80066a6:	f7ff fe7e 	bl	80063a6 <HAL_UARTEx_RxEventCallback>
      return;
 80066aa:	e6c6      	b.n	800643a <HAL_UART_IRQHandler+0x92>
 80066ac:	10000001 	.word	0x10000001
 80066b0:	04000120 	.word	0x04000120
 80066b4:	08006393 	.word	0x08006393
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80066bc:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 fe60 	bl	8007384 <HAL_UARTEx_WakeupCallback>
    return;
 80066c4:	e6b9      	b.n	800643a <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 80066c6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f43f aeb6 	beq.w	800643a <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 80066ce:	4620      	mov	r0, r4
 80066d0:	4798      	blx	r3
    return;
 80066d2:	e6b2      	b.n	800643a <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 80066d4:	4620      	mov	r0, r4
 80066d6:	f7ff fe17 	bl	8006308 <UART_EndTransmit_IT>
    return;
 80066da:	e6ae      	b.n	800643a <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80066dc:	4620      	mov	r0, r4
 80066de:	f000 fe53 	bl	8007388 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80066e2:	e6aa      	b.n	800643a <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 fe4e 	bl	8007386 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80066ea:	e6a6      	b.n	800643a <HAL_UART_IRQHandler+0x92>

080066ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066ec:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80066ee:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066f2:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 80066f6:	2a22      	cmp	r2, #34	@ 0x22
 80066f8:	d005      	beq.n	8006706 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066fa:	6802      	ldr	r2, [r0, #0]
 80066fc:	6993      	ldr	r3, [r2, #24]
 80066fe:	f043 0308 	orr.w	r3, r3, #8
 8006702:	6193      	str	r3, [r2, #24]
  }
}
 8006704:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006706:	6802      	ldr	r2, [r0, #0]
 8006708:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800670a:	b2db      	uxtb	r3, r3
 800670c:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800670e:	400b      	ands	r3, r1
 8006710:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8006712:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8006714:	3301      	adds	r3, #1
 8006716:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8006718:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b01      	subs	r3, #1
 8006720:	b29b      	uxth	r3, r3
 8006722:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8006726:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800672a:	b29b      	uxth	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e9      	bne.n	8006704 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006730:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006732:	e852 3f00 	ldrex	r3, [r2]
 8006736:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	e842 3100 	strex	r1, r3, [r2]
 800673e:	2900      	cmp	r1, #0
 8006740:	d1f6      	bne.n	8006730 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006742:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	f102 0308 	add.w	r3, r2, #8
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006750:	3208      	adds	r2, #8
 8006752:	e842 3100 	strex	r1, r3, [r2]
 8006756:	2900      	cmp	r1, #0
 8006758:	d1f3      	bne.n	8006742 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800675a:	2320      	movs	r3, #32
 800675c:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 8006760:	2300      	movs	r3, #0
 8006762:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006764:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006766:	6803      	ldr	r3, [r0, #0]
 8006768:	4a16      	ldr	r2, [pc, #88]	@ (80067c4 <UART_RxISR_8BIT+0xd8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d00c      	beq.n	8006788 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006774:	d008      	beq.n	8006788 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006776:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006778:	e852 3f00 	ldrex	r3, [r2]
 800677c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006780:	e842 3100 	strex	r1, r3, [r2]
 8006784:	2900      	cmp	r1, #0
 8006786:	d1f6      	bne.n	8006776 <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006788:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800678a:	2b01      	cmp	r3, #1
 800678c:	d116      	bne.n	80067bc <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678e:	2300      	movs	r3, #0
 8006790:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006792:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	e852 3f00 	ldrex	r3, [r2]
 8006798:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	e842 3100 	strex	r1, r3, [r2]
 80067a0:	2900      	cmp	r1, #0
 80067a2:	d1f6      	bne.n	8006792 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067a4:	6803      	ldr	r3, [r0, #0]
 80067a6:	69da      	ldr	r2, [r3, #28]
 80067a8:	f012 0f10 	tst.w	r2, #16
 80067ac:	d001      	beq.n	80067b2 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067ae:	2210      	movs	r2, #16
 80067b0:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067b2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 80067b6:	f7ff fdf6 	bl	80063a6 <HAL_UARTEx_RxEventCallback>
 80067ba:	e7a3      	b.n	8006704 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80067bc:	f7fb fe60 	bl	8002480 <HAL_UART_RxCpltCallback>
 80067c0:	e7a0      	b.n	8006704 <UART_RxISR_8BIT+0x18>
 80067c2:	bf00      	nop
 80067c4:	40008000 	.word	0x40008000

080067c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067c8:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80067ca:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067ce:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 80067d2:	2b22      	cmp	r3, #34	@ 0x22
 80067d4:	d005      	beq.n	80067e2 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067d6:	6802      	ldr	r2, [r0, #0]
 80067d8:	6993      	ldr	r3, [r2, #24]
 80067da:	f043 0308 	orr.w	r3, r3, #8
 80067de:	6193      	str	r3, [r2, #24]
  }
}
 80067e0:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067e2:	6803      	ldr	r3, [r0, #0]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067e6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80067e8:	4013      	ands	r3, r2
 80067ea:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 80067ec:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80067ee:	3302      	adds	r3, #2
 80067f0:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80067f2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8006800:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8006804:	b29b      	uxth	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1ea      	bne.n	80067e0 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800680a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680c:	e852 3f00 	ldrex	r3, [r2]
 8006810:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006814:	e842 3100 	strex	r1, r3, [r2]
 8006818:	2900      	cmp	r1, #0
 800681a:	d1f6      	bne.n	800680a <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	f102 0308 	add.w	r3, r2, #8
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	3208      	adds	r2, #8
 800682c:	e842 3100 	strex	r1, r3, [r2]
 8006830:	2900      	cmp	r1, #0
 8006832:	d1f3      	bne.n	800681c <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8006834:	2320      	movs	r3, #32
 8006836:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 800683a:	2300      	movs	r3, #0
 800683c:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800683e:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006840:	6803      	ldr	r3, [r0, #0]
 8006842:	4a16      	ldr	r2, [pc, #88]	@ (800689c <UART_RxISR_16BIT+0xd4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00c      	beq.n	8006862 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800684e:	d008      	beq.n	8006862 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006850:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	e852 3f00 	ldrex	r3, [r2]
 8006856:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685a:	e842 3100 	strex	r1, r3, [r2]
 800685e:	2900      	cmp	r1, #0
 8006860:	d1f6      	bne.n	8006850 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006862:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006864:	2b01      	cmp	r3, #1
 8006866:	d116      	bne.n	8006896 <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006868:	2300      	movs	r3, #0
 800686a:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800686c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	e852 3f00 	ldrex	r3, [r2]
 8006872:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	e842 3100 	strex	r1, r3, [r2]
 800687a:	2900      	cmp	r1, #0
 800687c:	d1f6      	bne.n	800686c <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800687e:	6803      	ldr	r3, [r0, #0]
 8006880:	69da      	ldr	r2, [r3, #28]
 8006882:	f012 0f10 	tst.w	r2, #16
 8006886:	d001      	beq.n	800688c <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006888:	2210      	movs	r2, #16
 800688a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800688c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8006890:	f7ff fd89 	bl	80063a6 <HAL_UARTEx_RxEventCallback>
 8006894:	e7a4      	b.n	80067e0 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006896:	f7fb fdf3 	bl	8002480 <HAL_UART_RxCpltCallback>
 800689a:	e7a1      	b.n	80067e0 <UART_RxISR_16BIT+0x18>
 800689c:	40008000 	.word	0x40008000

080068a0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80068a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 80068a4:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80068a8:	6803      	ldr	r3, [r0, #0]
 80068aa:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80068ac:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80068b0:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068b4:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 80068b8:	2a22      	cmp	r2, #34	@ 0x22
 80068ba:	d005      	beq.n	80068c8 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068bc:	699a      	ldr	r2, [r3, #24]
 80068be:	f042 0208 	orr.w	r2, r2, #8
 80068c2:	619a      	str	r2, [r3, #24]
  }
}
 80068c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068c8:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80068ca:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068ce:	e008      	b.n	80068e2 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068d0:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d14c      	bne.n	8006972 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 80068d8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d04e      	beq.n	8006980 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068e2:	2f00      	cmp	r7, #0
 80068e4:	f000 809a 	beq.w	8006a1c <UART_RxISR_8BIT_FIFOEN+0x17c>
 80068e8:	f015 0f20 	tst.w	r5, #32
 80068ec:	f000 8096 	beq.w	8006a1c <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068f4:	b2f3      	uxtb	r3, r6
 80068f6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80068f8:	400b      	ands	r3, r1
 80068fa:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80068fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068fe:	3301      	adds	r3, #1
 8006900:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8006902:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006906:	b29b      	uxth	r3, r3
 8006908:	3b01      	subs	r3, #1
 800690a:	b29b      	uxth	r3, r3
 800690c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006914:	f015 0f07 	tst.w	r5, #7
 8006918:	d0de      	beq.n	80068d8 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800691a:	f015 0f01 	tst.w	r5, #1
 800691e:	d009      	beq.n	8006934 <UART_RxISR_8BIT_FIFOEN+0x94>
 8006920:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8006924:	d006      	beq.n	8006934 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006926:	2201      	movs	r2, #1
 8006928:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800692a:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800692e:	4313      	orrs	r3, r2
 8006930:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006934:	f015 0f02 	tst.w	r5, #2
 8006938:	d00b      	beq.n	8006952 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800693a:	f018 0f01 	tst.w	r8, #1
 800693e:	d008      	beq.n	8006952 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	2202      	movs	r2, #2
 8006944:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006946:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800694a:	f043 0304 	orr.w	r3, r3, #4
 800694e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006952:	f015 0f04 	tst.w	r5, #4
 8006956:	d0bb      	beq.n	80068d0 <UART_RxISR_8BIT_FIFOEN+0x30>
 8006958:	f018 0f01 	tst.w	r8, #1
 800695c:	d0b8      	beq.n	80068d0 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	2204      	movs	r2, #4
 8006962:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006964:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006968:	f043 0302 	orr.w	r3, r3, #2
 800696c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8006970:	e7ae      	b.n	80068d0 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006972:	4620      	mov	r0, r4
 8006974:	f7ff fce0 	bl	8006338 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006978:	2300      	movs	r3, #0
 800697a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800697e:	e7ab      	b.n	80068d8 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006980:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	e852 3f00 	ldrex	r3, [r2]
 8006986:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	e842 3100 	strex	r1, r3, [r2]
 800698e:	2900      	cmp	r1, #0
 8006990:	d1f6      	bne.n	8006980 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006992:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	f102 0308 	add.w	r3, r2, #8
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069a0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a4:	3208      	adds	r2, #8
 80069a6:	e842 3100 	strex	r1, r3, [r2]
 80069aa:	2900      	cmp	r1, #0
 80069ac:	d1f1      	bne.n	8006992 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80069ae:	2320      	movs	r3, #32
 80069b0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 80069b4:	2300      	movs	r3, #0
 80069b6:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069b8:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	4a29      	ldr	r2, [pc, #164]	@ (8006a64 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d003      	beq.n	80069ca <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80069c8:	d106      	bne.n	80069d8 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ca:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d00d      	beq.n	80069ec <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 80069d0:	4620      	mov	r0, r4
 80069d2:	f7fb fd55 	bl	8002480 <HAL_UART_RxCpltCallback>
 80069d6:	e784      	b.n	80068e2 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069d8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	e852 3f00 	ldrex	r3, [r2]
 80069de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	e842 3100 	strex	r1, r3, [r2]
 80069e6:	2900      	cmp	r1, #0
 80069e8:	d1f6      	bne.n	80069d8 <UART_RxISR_8BIT_FIFOEN+0x138>
 80069ea:	e7ee      	b.n	80069ca <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ec:	2300      	movs	r3, #0
 80069ee:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	e852 3f00 	ldrex	r3, [r2]
 80069f6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	e842 3100 	strex	r1, r3, [r2]
 80069fe:	2900      	cmp	r1, #0
 8006a00:	d1f6      	bne.n	80069f0 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	69da      	ldr	r2, [r3, #28]
 8006a06:	f012 0f10 	tst.w	r2, #16
 8006a0a:	d001      	beq.n	8006a10 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a0c:	2210      	movs	r2, #16
 8006a0e:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a10:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8006a14:	4620      	mov	r0, r4
 8006a16:	f7ff fcc6 	bl	80063a6 <HAL_UARTEx_RxEventCallback>
 8006a1a:	e762      	b.n	80068e2 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8006a1c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006a20:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f43f af4e 	beq.w	80068c4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8006a28:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	f67f af49 	bls.w	80068c4 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a32:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	f102 0308 	add.w	r3, r2, #8
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	3208      	adds	r2, #8
 8006a42:	e842 3100 	strex	r1, r3, [r2]
 8006a46:	2900      	cmp	r1, #0
 8006a48:	d1f3      	bne.n	8006a32 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 8006a4a:	4b07      	ldr	r3, [pc, #28]	@ (8006a68 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8006a4c:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a4e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	e852 3f00 	ldrex	r3, [r2]
 8006a54:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	e842 3100 	strex	r1, r3, [r2]
 8006a5c:	2900      	cmp	r1, #0
 8006a5e:	d1f6      	bne.n	8006a4e <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8006a60:	e730      	b.n	80068c4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8006a62:	bf00      	nop
 8006a64:	40008000 	.word	0x40008000
 8006a68:	080066ed 	.word	0x080066ed

08006a6c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006a70:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006a74:	6803      	ldr	r3, [r0, #0]
 8006a76:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006a78:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006a7c:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a80:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8006a84:	2a22      	cmp	r2, #34	@ 0x22
 8006a86:	d005      	beq.n	8006a94 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	f042 0208 	orr.w	r2, r2, #8
 8006a8e:	619a      	str	r2, [r3, #24]
  }
}
 8006a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a94:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8006a96:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a9a:	e008      	b.n	8006aae <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a9c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d14b      	bne.n	8006b3c <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8006aa4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d04d      	beq.n	8006b4a <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006aae:	2f00      	cmp	r7, #0
 8006ab0:	f000 8099 	beq.w	8006be6 <UART_RxISR_16BIT_FIFOEN+0x17a>
 8006ab4:	f015 0f20 	tst.w	r5, #32
 8006ab8:	f000 8095 	beq.w	8006be6 <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ac0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8006ac2:	4033      	ands	r3, r6
 8006ac4:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8006ac6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ac8:	3302      	adds	r3, #2
 8006aca:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8006acc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006ade:	f015 0f07 	tst.w	r5, #7
 8006ae2:	d0df      	beq.n	8006aa4 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ae4:	f015 0f01 	tst.w	r5, #1
 8006ae8:	d009      	beq.n	8006afe <UART_RxISR_16BIT_FIFOEN+0x92>
 8006aea:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8006aee:	d006      	beq.n	8006afe <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006af0:	2201      	movs	r2, #1
 8006af2:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006af4:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006af8:	4313      	orrs	r3, r2
 8006afa:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006afe:	f015 0f02 	tst.w	r5, #2
 8006b02:	d00b      	beq.n	8006b1c <UART_RxISR_16BIT_FIFOEN+0xb0>
 8006b04:	f018 0f01 	tst.w	r8, #1
 8006b08:	d008      	beq.n	8006b1c <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b10:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006b14:	f043 0304 	orr.w	r3, r3, #4
 8006b18:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b1c:	f015 0f04 	tst.w	r5, #4
 8006b20:	d0bc      	beq.n	8006a9c <UART_RxISR_16BIT_FIFOEN+0x30>
 8006b22:	f018 0f01 	tst.w	r8, #1
 8006b26:	d0b9      	beq.n	8006a9c <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	2204      	movs	r2, #4
 8006b2c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b2e:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006b32:	f043 0302 	orr.w	r3, r3, #2
 8006b36:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8006b3a:	e7af      	b.n	8006a9c <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f7ff fbfb 	bl	8006338 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8006b48:	e7ac      	b.n	8006aa4 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b4a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	e852 3f00 	ldrex	r3, [r2]
 8006b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b54:	e842 3100 	strex	r1, r3, [r2]
 8006b58:	2900      	cmp	r1, #0
 8006b5a:	d1f6      	bne.n	8006b4a <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b5c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	f102 0308 	add.w	r3, r2, #8
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b6a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	3208      	adds	r2, #8
 8006b70:	e842 3100 	strex	r1, r3, [r2]
 8006b74:	2900      	cmp	r1, #0
 8006b76:	d1f1      	bne.n	8006b5c <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8006b78:	2320      	movs	r3, #32
 8006b7a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b82:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	4a29      	ldr	r2, [pc, #164]	@ (8006c2c <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d003      	beq.n	8006b94 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006b92:	d106      	bne.n	8006ba2 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b94:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d00d      	beq.n	8006bb6 <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f7fb fc70 	bl	8002480 <HAL_UART_RxCpltCallback>
 8006ba0:	e785      	b.n	8006aae <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ba2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba4:	e852 3f00 	ldrex	r3, [r2]
 8006ba8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bac:	e842 3100 	strex	r1, r3, [r2]
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	d1f6      	bne.n	8006ba2 <UART_RxISR_16BIT_FIFOEN+0x136>
 8006bb4:	e7ee      	b.n	8006b94 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bba:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	e852 3f00 	ldrex	r3, [r2]
 8006bc0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	e842 3100 	strex	r1, r3, [r2]
 8006bc8:	2900      	cmp	r1, #0
 8006bca:	d1f6      	bne.n	8006bba <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	f012 0f10 	tst.w	r2, #16
 8006bd4:	d001      	beq.n	8006bda <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bd6:	2210      	movs	r2, #16
 8006bd8:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bda:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8006bde:	4620      	mov	r0, r4
 8006be0:	f7ff fbe1 	bl	80063a6 <HAL_UARTEx_RxEventCallback>
 8006be4:	e763      	b.n	8006aae <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8006be6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006bea:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f43f af4f 	beq.w	8006a90 <UART_RxISR_16BIT_FIFOEN+0x24>
 8006bf2:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	f67f af4a 	bls.w	8006a90 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006bfc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	f102 0308 	add.w	r3, r2, #8
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	3208      	adds	r2, #8
 8006c0c:	e842 3100 	strex	r1, r3, [r2]
 8006c10:	2900      	cmp	r1, #0
 8006c12:	d1f3      	bne.n	8006bfc <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8006c14:	4b06      	ldr	r3, [pc, #24]	@ (8006c30 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8006c16:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c18:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	e852 3f00 	ldrex	r3, [r2]
 8006c1e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	e842 3100 	strex	r1, r3, [r2]
 8006c26:	2900      	cmp	r1, #0
 8006c28:	d1f6      	bne.n	8006c18 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 8006c2a:	e731      	b.n	8006a90 <UART_RxISR_16BIT_FIFOEN+0x24>
 8006c2c:	40008000 	.word	0x40008000
 8006c30:	080067c9 	.word	0x080067c9

08006c34 <UART_SetConfig>:
{
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c38:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c3a:	6883      	ldr	r3, [r0, #8]
 8006c3c:	6902      	ldr	r2, [r0, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	6942      	ldr	r2, [r0, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	69c2      	ldr	r2, [r0, #28]
 8006c46:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c48:	6808      	ldr	r0, [r1, #0]
 8006c4a:	4a9d      	ldr	r2, [pc, #628]	@ (8006ec0 <UART_SetConfig+0x28c>)
 8006c4c:	4002      	ands	r2, r0
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c52:	6822      	ldr	r2, [r4, #0]
 8006c54:	6853      	ldr	r3, [r2, #4]
 8006c56:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006c5a:	68e1      	ldr	r1, [r4, #12]
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c60:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c62:	6822      	ldr	r2, [r4, #0]
 8006c64:	4b97      	ldr	r3, [pc, #604]	@ (8006ec4 <UART_SetConfig+0x290>)
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d001      	beq.n	8006c6e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8006c6a:	6a23      	ldr	r3, [r4, #32]
 8006c6c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c6e:	6893      	ldr	r3, [r2, #8]
 8006c70:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006c74:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c7c:	6822      	ldr	r2, [r4, #0]
 8006c7e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006c80:	f023 030f 	bic.w	r3, r3, #15
 8006c84:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006c86:	430b      	orrs	r3, r1
 8006c88:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	4a8e      	ldr	r2, [pc, #568]	@ (8006ec8 <UART_SetConfig+0x294>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d01c      	beq.n	8006ccc <UART_SetConfig+0x98>
 8006c92:	4a8e      	ldr	r2, [pc, #568]	@ (8006ecc <UART_SetConfig+0x298>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d031      	beq.n	8006cfc <UART_SetConfig+0xc8>
 8006c98:	4a8a      	ldr	r2, [pc, #552]	@ (8006ec4 <UART_SetConfig+0x290>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d04b      	beq.n	8006d36 <UART_SetConfig+0x102>
 8006c9e:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ca0:	4988      	ldr	r1, [pc, #544]	@ (8006ec4 <UART_SetConfig+0x290>)
 8006ca2:	428b      	cmp	r3, r1
 8006ca4:	d068      	beq.n	8006d78 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca6:	69e0      	ldr	r0, [r4, #28]
 8006ca8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006cac:	f000 80a5 	beq.w	8006dfa <UART_SetConfig+0x1c6>
    switch (clocksource)
 8006cb0:	2a08      	cmp	r2, #8
 8006cb2:	f200 811f 	bhi.w	8006ef4 <UART_SetConfig+0x2c0>
 8006cb6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006cba:	00d3      	.short	0x00d3
 8006cbc:	00d100f5 	.word	0x00d100f5
 8006cc0:	00f8011d 	.word	0x00f8011d
 8006cc4:	011d011d 	.word	0x011d011d
 8006cc8:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006ccc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cd0:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8006cd4:	f002 0203 	and.w	r2, r2, #3
 8006cd8:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cdc:	f5a2 3240 	sub.w	r2, r2, #196608	@ 0x30000
 8006ce0:	2a03      	cmp	r2, #3
 8006ce2:	d809      	bhi.n	8006cf8 <UART_SetConfig+0xc4>
 8006ce4:	e8df f002 	tbb	[pc, r2]
 8006ce8:	063c0402 	.word	0x063c0402
 8006cec:	2201      	movs	r2, #1
 8006cee:	e7d7      	b.n	8006ca0 <UART_SetConfig+0x6c>
 8006cf0:	2204      	movs	r2, #4
 8006cf2:	e7d5      	b.n	8006ca0 <UART_SetConfig+0x6c>
 8006cf4:	2208      	movs	r2, #8
 8006cf6:	e7d3      	b.n	8006ca0 <UART_SetConfig+0x6c>
 8006cf8:	2210      	movs	r2, #16
 8006cfa:	e7d1      	b.n	8006ca0 <UART_SetConfig+0x6c>
 8006cfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d00:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8006d04:	f002 020c 	and.w	r2, r2, #12
 8006d08:	f442 2240 	orr.w	r2, r2, #786432	@ 0xc0000
 8006d0c:	f5a2 2240 	sub.w	r2, r2, #786432	@ 0xc0000
 8006d10:	2a0c      	cmp	r2, #12
 8006d12:	d80e      	bhi.n	8006d32 <UART_SetConfig+0xfe>
 8006d14:	e8df f002 	tbb	[pc, r2]
 8006d18:	0d0d0d07 	.word	0x0d0d0d07
 8006d1c:	0d0d0d09 	.word	0x0d0d0d09
 8006d20:	0d0d0d26 	.word	0x0d0d0d26
 8006d24:	0b          	.byte	0x0b
 8006d25:	00          	.byte	0x00
 8006d26:	2200      	movs	r2, #0
 8006d28:	e7ba      	b.n	8006ca0 <UART_SetConfig+0x6c>
 8006d2a:	2204      	movs	r2, #4
 8006d2c:	e7b8      	b.n	8006ca0 <UART_SetConfig+0x6c>
 8006d2e:	2208      	movs	r2, #8
 8006d30:	e7b6      	b.n	8006ca0 <UART_SetConfig+0x6c>
 8006d32:	2210      	movs	r2, #16
 8006d34:	e7b4      	b.n	8006ca0 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006d36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d3a:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8006d3e:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8006d42:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8006d46:	d00f      	beq.n	8006d68 <UART_SetConfig+0x134>
 8006d48:	d805      	bhi.n	8006d56 <UART_SetConfig+0x122>
 8006d4a:	b17a      	cbz	r2, 8006d6c <UART_SetConfig+0x138>
 8006d4c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006d50:	d10e      	bne.n	8006d70 <UART_SetConfig+0x13c>
 8006d52:	2204      	movs	r2, #4
 8006d54:	e7a4      	b.n	8006ca0 <UART_SetConfig+0x6c>
 8006d56:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8006d5a:	d10b      	bne.n	8006d74 <UART_SetConfig+0x140>
 8006d5c:	2208      	movs	r2, #8
 8006d5e:	e79f      	b.n	8006ca0 <UART_SetConfig+0x6c>
 8006d60:	2202      	movs	r2, #2
 8006d62:	e79d      	b.n	8006ca0 <UART_SetConfig+0x6c>
 8006d64:	2202      	movs	r2, #2
 8006d66:	e79b      	b.n	8006ca0 <UART_SetConfig+0x6c>
 8006d68:	2202      	movs	r2, #2
 8006d6a:	e799      	b.n	8006ca0 <UART_SetConfig+0x6c>
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	e797      	b.n	8006ca0 <UART_SetConfig+0x6c>
 8006d70:	2210      	movs	r2, #16
 8006d72:	e795      	b.n	8006ca0 <UART_SetConfig+0x6c>
 8006d74:	2210      	movs	r2, #16
 8006d76:	e793      	b.n	8006ca0 <UART_SetConfig+0x6c>
    switch (clocksource)
 8006d78:	2a08      	cmp	r2, #8
 8006d7a:	f200 809c 	bhi.w	8006eb6 <UART_SetConfig+0x282>
 8006d7e:	e8df f002 	tbb	[pc, r2]
 8006d82:	9a08      	.short	0x9a08
 8006d84:	9a379a3a 	.word	0x9a379a3a
 8006d88:	9a9a      	.short	0x9a9a
 8006d8a:	05          	.byte	0x05
 8006d8b:	00          	.byte	0x00
 8006d8c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006d90:	e004      	b.n	8006d9c <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d92:	f7fe fabf 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006d96:	2800      	cmp	r0, #0
 8006d98:	f000 808f 	beq.w	8006eba <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d9c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006d9e:	4b4c      	ldr	r3, [pc, #304]	@ (8006ed0 <UART_SetConfig+0x29c>)
 8006da0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006da4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006da8:	6865      	ldr	r5, [r4, #4]
 8006daa:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006dae:	4299      	cmp	r1, r3
 8006db0:	f200 8094 	bhi.w	8006edc <UART_SetConfig+0x2a8>
 8006db4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006db8:	f200 8092 	bhi.w	8006ee0 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dbc:	2600      	movs	r6, #0
 8006dbe:	4633      	mov	r3, r6
 8006dc0:	4631      	mov	r1, r6
 8006dc2:	f7f9 fef1 	bl	8000ba8 <__aeabi_uldivmod>
 8006dc6:	0209      	lsls	r1, r1, #8
 8006dc8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006dcc:	0200      	lsls	r0, r0, #8
 8006dce:	086b      	lsrs	r3, r5, #1
 8006dd0:	18c0      	adds	r0, r0, r3
 8006dd2:	462a      	mov	r2, r5
 8006dd4:	4633      	mov	r3, r6
 8006dd6:	f141 0100 	adc.w	r1, r1, #0
 8006dda:	f7f9 fee5 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dde:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8006de2:	4b3c      	ldr	r3, [pc, #240]	@ (8006ed4 <UART_SetConfig+0x2a0>)
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d87d      	bhi.n	8006ee4 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	60d8      	str	r0, [r3, #12]
 8006dec:	4630      	mov	r0, r6
 8006dee:	e050      	b.n	8006e92 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8006df0:	f7fd fd92 	bl	8004918 <HAL_RCC_GetSysClockFreq>
        break;
 8006df4:	e7cf      	b.n	8006d96 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8006df6:	4838      	ldr	r0, [pc, #224]	@ (8006ed8 <UART_SetConfig+0x2a4>)
 8006df8:	e7d0      	b.n	8006d9c <UART_SetConfig+0x168>
    switch (clocksource)
 8006dfa:	2a08      	cmp	r2, #8
 8006dfc:	d874      	bhi.n	8006ee8 <UART_SetConfig+0x2b4>
 8006dfe:	e8df f002 	tbb	[pc, r2]
 8006e02:	2707      	.short	0x2707
 8006e04:	732a7305 	.word	0x732a7305
 8006e08:	7373      	.short	0x7373
 8006e0a:	0b          	.byte	0x0b
 8006e0b:	00          	.byte	0x00
 8006e0c:	4832      	ldr	r0, [pc, #200]	@ (8006ed8 <UART_SetConfig+0x2a4>)
 8006e0e:	e003      	b.n	8006e18 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e10:	f7fe fa80 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d069      	beq.n	8006eec <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e18:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8006ed0 <UART_SetConfig+0x29c>)
 8006e1c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006e20:	fbb0 f0f3 	udiv	r0, r0, r3
 8006e24:	6862      	ldr	r2, [r4, #4]
 8006e26:	0853      	lsrs	r3, r2, #1
 8006e28:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006e2c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e30:	f1a3 0110 	sub.w	r1, r3, #16
 8006e34:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8006e38:	4291      	cmp	r1, r2
 8006e3a:	d859      	bhi.n	8006ef0 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e42:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006e46:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8006e48:	6822      	ldr	r2, [r4, #0]
 8006e4a:	60d3      	str	r3, [r2, #12]
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	e020      	b.n	8006e92 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e50:	f7fe fa70 	bl	8005334 <HAL_RCC_GetPCLK2Freq>
        break;
 8006e54:	e7de      	b.n	8006e14 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8006e56:	f7fd fd5f 	bl	8004918 <HAL_RCC_GetSysClockFreq>
        break;
 8006e5a:	e7db      	b.n	8006e14 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8006e5c:	481e      	ldr	r0, [pc, #120]	@ (8006ed8 <UART_SetConfig+0x2a4>)
 8006e5e:	e003      	b.n	8006e68 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e60:	f7fe fa58 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d047      	beq.n	8006ef8 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e68:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006e6a:	4b19      	ldr	r3, [pc, #100]	@ (8006ed0 <UART_SetConfig+0x29c>)
 8006e6c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006e70:	fbb0 f0f3 	udiv	r0, r0, r3
 8006e74:	6863      	ldr	r3, [r4, #4]
 8006e76:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006e7a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e7e:	f1a0 0210 	sub.w	r2, r0, #16
 8006e82:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d838      	bhi.n	8006efc <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	b280      	uxth	r0, r0
 8006e8e:	60d8      	str	r0, [r3, #12]
 8006e90:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8006e92:	2301      	movs	r3, #1
 8006e94:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e98:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ea0:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ea4:	f7fe fa46 	bl	8005334 <HAL_RCC_GetPCLK2Freq>
        break;
 8006ea8:	e7dc      	b.n	8006e64 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8006eaa:	f7fd fd35 	bl	8004918 <HAL_RCC_GetSysClockFreq>
        break;
 8006eae:	e7d9      	b.n	8006e64 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8006eb0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006eb4:	e7d8      	b.n	8006e68 <UART_SetConfig+0x234>
    switch (clocksource)
 8006eb6:	2001      	movs	r0, #1
 8006eb8:	e7eb      	b.n	8006e92 <UART_SetConfig+0x25e>
 8006eba:	2000      	movs	r0, #0
 8006ebc:	e7e9      	b.n	8006e92 <UART_SetConfig+0x25e>
 8006ebe:	bf00      	nop
 8006ec0:	cfff69f3 	.word	0xcfff69f3
 8006ec4:	40008000 	.word	0x40008000
 8006ec8:	40013800 	.word	0x40013800
 8006ecc:	40004400 	.word	0x40004400
 8006ed0:	08011fcc 	.word	0x08011fcc
 8006ed4:	000ffcff 	.word	0x000ffcff
 8006ed8:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8006edc:	2001      	movs	r0, #1
 8006ede:	e7d8      	b.n	8006e92 <UART_SetConfig+0x25e>
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	e7d6      	b.n	8006e92 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8006ee4:	2001      	movs	r0, #1
 8006ee6:	e7d4      	b.n	8006e92 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006ee8:	2001      	movs	r0, #1
 8006eea:	e7d2      	b.n	8006e92 <UART_SetConfig+0x25e>
 8006eec:	2000      	movs	r0, #0
 8006eee:	e7d0      	b.n	8006e92 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	e7ce      	b.n	8006e92 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	e7cc      	b.n	8006e92 <UART_SetConfig+0x25e>
 8006ef8:	2000      	movs	r0, #0
 8006efa:	e7ca      	b.n	8006e92 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006efc:	2001      	movs	r0, #1
 8006efe:	e7c8      	b.n	8006e92 <UART_SetConfig+0x25e>

08006f00 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f00:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006f02:	f013 0f01 	tst.w	r3, #1
 8006f06:	d006      	beq.n	8006f16 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f08:	6802      	ldr	r2, [r0, #0]
 8006f0a:	6853      	ldr	r3, [r2, #4]
 8006f0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006f10:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006f12:	430b      	orrs	r3, r1
 8006f14:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f16:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006f18:	f013 0f02 	tst.w	r3, #2
 8006f1c:	d006      	beq.n	8006f2c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f1e:	6802      	ldr	r2, [r0, #0]
 8006f20:	6853      	ldr	r3, [r2, #4]
 8006f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f26:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f2c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006f2e:	f013 0f04 	tst.w	r3, #4
 8006f32:	d006      	beq.n	8006f42 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f34:	6802      	ldr	r2, [r0, #0]
 8006f36:	6853      	ldr	r3, [r2, #4]
 8006f38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f3c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8006f3e:	430b      	orrs	r3, r1
 8006f40:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f42:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006f44:	f013 0f08 	tst.w	r3, #8
 8006f48:	d006      	beq.n	8006f58 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f4a:	6802      	ldr	r2, [r0, #0]
 8006f4c:	6853      	ldr	r3, [r2, #4]
 8006f4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f52:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8006f54:	430b      	orrs	r3, r1
 8006f56:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f58:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006f5a:	f013 0f10 	tst.w	r3, #16
 8006f5e:	d006      	beq.n	8006f6e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f60:	6802      	ldr	r2, [r0, #0]
 8006f62:	6893      	ldr	r3, [r2, #8]
 8006f64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f68:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8006f6a:	430b      	orrs	r3, r1
 8006f6c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f6e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006f70:	f013 0f20 	tst.w	r3, #32
 8006f74:	d006      	beq.n	8006f84 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f76:	6802      	ldr	r2, [r0, #0]
 8006f78:	6893      	ldr	r3, [r2, #8]
 8006f7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f7e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8006f80:	430b      	orrs	r3, r1
 8006f82:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f84:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006f86:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006f8a:	d00a      	beq.n	8006fa2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f8c:	6802      	ldr	r2, [r0, #0]
 8006f8e:	6853      	ldr	r3, [r2, #4]
 8006f90:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f94:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8006f96:	430b      	orrs	r3, r1
 8006f98:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f9a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006f9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fa0:	d00b      	beq.n	8006fba <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fa2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006fa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006fa8:	d006      	beq.n	8006fb8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006faa:	6802      	ldr	r2, [r0, #0]
 8006fac:	6853      	ldr	r3, [r2, #4]
 8006fae:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006fb2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8006fb4:	430b      	orrs	r3, r1
 8006fb6:	6053      	str	r3, [r2, #4]
}
 8006fb8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fba:	6802      	ldr	r2, [r0, #0]
 8006fbc:	6853      	ldr	r3, [r2, #4]
 8006fbe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006fc2:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	6053      	str	r3, [r2, #4]
 8006fc8:	e7eb      	b.n	8006fa2 <UART_AdvFeatureConfig+0xa2>

08006fca <UART_WaitOnFlagUntilTimeout>:
{
 8006fca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fce:	4605      	mov	r5, r0
 8006fd0:	460f      	mov	r7, r1
 8006fd2:	4616      	mov	r6, r2
 8006fd4:	4699      	mov	r9, r3
 8006fd6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fda:	682b      	ldr	r3, [r5, #0]
 8006fdc:	69dc      	ldr	r4, [r3, #28]
 8006fde:	ea37 0404 	bics.w	r4, r7, r4
 8006fe2:	bf0c      	ite	eq
 8006fe4:	2401      	moveq	r4, #1
 8006fe6:	2400      	movne	r4, #0
 8006fe8:	42b4      	cmp	r4, r6
 8006fea:	d157      	bne.n	800709c <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8006fec:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006ff0:	d0f3      	beq.n	8006fda <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ff2:	f7fa fdff 	bl	8001bf4 <HAL_GetTick>
 8006ff6:	eba0 0009 	sub.w	r0, r0, r9
 8006ffa:	4540      	cmp	r0, r8
 8006ffc:	d82f      	bhi.n	800705e <UART_WaitOnFlagUntilTimeout+0x94>
 8006ffe:	f1b8 0f00 	cmp.w	r8, #0
 8007002:	d02c      	beq.n	800705e <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007004:	682b      	ldr	r3, [r5, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	f012 0f04 	tst.w	r2, #4
 800700c:	d0e5      	beq.n	8006fda <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800700e:	69da      	ldr	r2, [r3, #28]
 8007010:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8007014:	d0e1      	beq.n	8006fda <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007016:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800701a:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800701c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	e852 3f00 	ldrex	r3, [r2]
 8007022:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	e842 3100 	strex	r1, r3, [r2]
 800702a:	2900      	cmp	r1, #0
 800702c:	d1f6      	bne.n	800701c <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	f102 0308 	add.w	r3, r2, #8
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	3208      	adds	r2, #8
 800703e:	e842 3100 	strex	r1, r3, [r2]
 8007042:	2900      	cmp	r1, #0
 8007044:	d1f3      	bne.n	800702e <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8007046:	2320      	movs	r3, #32
 8007048:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800704c:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007050:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8007054:	2300      	movs	r3, #0
 8007056:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 800705a:	2003      	movs	r0, #3
 800705c:	e01f      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800705e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	e852 3f00 	ldrex	r3, [r2]
 8007064:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	e842 3100 	strex	r1, r3, [r2]
 800706c:	2900      	cmp	r1, #0
 800706e:	d1f6      	bne.n	800705e <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007070:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	f102 0308 	add.w	r3, r2, #8
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	3208      	adds	r2, #8
 8007080:	e842 3100 	strex	r1, r3, [r2]
 8007084:	2900      	cmp	r1, #0
 8007086:	d1f3      	bne.n	8007070 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8007088:	2320      	movs	r3, #32
 800708a:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800708e:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 8007092:	2300      	movs	r3, #0
 8007094:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
        return HAL_TIMEOUT;
 8007098:	2003      	movs	r0, #3
 800709a:	e000      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 800709c:	2000      	movs	r0, #0
}
 800709e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080070a2 <UART_CheckIdleState>:
{
 80070a2:	b530      	push	{r4, r5, lr}
 80070a4:	b083      	sub	sp, #12
 80070a6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a8:	2300      	movs	r3, #0
 80070aa:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 80070ae:	f7fa fda1 	bl	8001bf4 <HAL_GetTick>
 80070b2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070b4:	6822      	ldr	r2, [r4, #0]
 80070b6:	6812      	ldr	r2, [r2, #0]
 80070b8:	f012 0f08 	tst.w	r2, #8
 80070bc:	d110      	bne.n	80070e0 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f013 0f04 	tst.w	r3, #4
 80070c6:	d119      	bne.n	80070fc <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 80070c8:	2320      	movs	r3, #32
 80070ca:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070ce:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d2:	2000      	movs	r0, #0
 80070d4:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070d6:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 80070d8:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80070dc:	b003      	add	sp, #12
 80070de:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	4603      	mov	r3, r0
 80070e8:	2200      	movs	r2, #0
 80070ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80070ee:	4620      	mov	r0, r4
 80070f0:	f7ff ff6b 	bl	8006fca <UART_WaitOnFlagUntilTimeout>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d0e2      	beq.n	80070be <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80070f8:	2003      	movs	r0, #3
 80070fa:	e7ef      	b.n	80070dc <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	462b      	mov	r3, r5
 8007104:	2200      	movs	r2, #0
 8007106:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800710a:	4620      	mov	r0, r4
 800710c:	f7ff ff5d 	bl	8006fca <UART_WaitOnFlagUntilTimeout>
 8007110:	2800      	cmp	r0, #0
 8007112:	d0d9      	beq.n	80070c8 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8007114:	2003      	movs	r0, #3
 8007116:	e7e1      	b.n	80070dc <UART_CheckIdleState+0x3a>

08007118 <HAL_UART_Init>:
  if (huart == NULL)
 8007118:	b378      	cbz	r0, 800717a <HAL_UART_Init+0x62>
{
 800711a:	b510      	push	{r4, lr}
 800711c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800711e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8007122:	b30b      	cbz	r3, 8007168 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007124:	2324      	movs	r3, #36	@ 0x24
 8007126:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800712a:	6822      	ldr	r2, [r4, #0]
 800712c:	6813      	ldr	r3, [r2, #0]
 800712e:	f023 0301 	bic.w	r3, r3, #1
 8007132:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007134:	4620      	mov	r0, r4
 8007136:	f7ff fd7d 	bl	8006c34 <UART_SetConfig>
 800713a:	2801      	cmp	r0, #1
 800713c:	d013      	beq.n	8007166 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800713e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007140:	b9bb      	cbnz	r3, 8007172 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007142:	6822      	ldr	r2, [r4, #0]
 8007144:	6853      	ldr	r3, [r2, #4]
 8007146:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800714a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800714c:	6822      	ldr	r2, [r4, #0]
 800714e:	6893      	ldr	r3, [r2, #8]
 8007150:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8007154:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007156:	6822      	ldr	r2, [r4, #0]
 8007158:	6813      	ldr	r3, [r2, #0]
 800715a:	f043 0301 	orr.w	r3, r3, #1
 800715e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007160:	4620      	mov	r0, r4
 8007162:	f7ff ff9e 	bl	80070a2 <UART_CheckIdleState>
}
 8007166:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007168:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800716c:	f7fa ffb6 	bl	80020dc <HAL_UART_MspInit>
 8007170:	e7d8      	b.n	8007124 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8007172:	4620      	mov	r0, r4
 8007174:	f7ff fec4 	bl	8006f00 <UART_AdvFeatureConfig>
 8007178:	e7e3      	b.n	8007142 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800717a:	2001      	movs	r0, #1
}
 800717c:	4770      	bx	lr
	...

08007180 <UART_Start_Receive_IT>:
{
 8007180:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8007182:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007184:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007188:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800718c:	2300      	movs	r3, #0
 800718e:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8007190:	6883      	ldr	r3, [r0, #8]
 8007192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007196:	d006      	beq.n	80071a6 <UART_Start_Receive_IT+0x26>
 8007198:	b9a3      	cbnz	r3, 80071c4 <UART_Start_Receive_IT+0x44>
 800719a:	6903      	ldr	r3, [r0, #16]
 800719c:	b973      	cbnz	r3, 80071bc <UART_Start_Receive_IT+0x3c>
 800719e:	23ff      	movs	r3, #255	@ 0xff
 80071a0:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 80071a4:	e014      	b.n	80071d0 <UART_Start_Receive_IT+0x50>
 80071a6:	6903      	ldr	r3, [r0, #16]
 80071a8:	b923      	cbnz	r3, 80071b4 <UART_Start_Receive_IT+0x34>
 80071aa:	f240 13ff 	movw	r3, #511	@ 0x1ff
 80071ae:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 80071b2:	e00d      	b.n	80071d0 <UART_Start_Receive_IT+0x50>
 80071b4:	23ff      	movs	r3, #255	@ 0xff
 80071b6:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 80071ba:	e009      	b.n	80071d0 <UART_Start_Receive_IT+0x50>
 80071bc:	237f      	movs	r3, #127	@ 0x7f
 80071be:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 80071c2:	e005      	b.n	80071d0 <UART_Start_Receive_IT+0x50>
 80071c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071c8:	d02d      	beq.n	8007226 <UART_Start_Receive_IT+0xa6>
 80071ca:	2300      	movs	r3, #0
 80071cc:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d0:	2300      	movs	r3, #0
 80071d2:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071d6:	2322      	movs	r3, #34	@ 0x22
 80071d8:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071dc:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	f101 0308 	add.w	r3, r1, #8
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	3108      	adds	r1, #8
 80071ec:	e841 3400 	strex	r4, r3, [r1]
 80071f0:	2c00      	cmp	r4, #0
 80071f2:	d1f3      	bne.n	80071dc <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80071f4:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80071f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071fa:	d01e      	beq.n	800723a <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071fc:	6883      	ldr	r3, [r0, #8]
 80071fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007202:	d042      	beq.n	800728a <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8007204:	4b29      	ldr	r3, [pc, #164]	@ (80072ac <UART_Start_Receive_IT+0x12c>)
 8007206:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007208:	6903      	ldr	r3, [r0, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d043      	beq.n	8007296 <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800720e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007210:	e852 3f00 	ldrex	r3, [r2]
 8007214:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007218:	e842 3100 	strex	r1, r3, [r2]
 800721c:	2900      	cmp	r1, #0
 800721e:	d1f6      	bne.n	800720e <UART_Start_Receive_IT+0x8e>
}
 8007220:	2000      	movs	r0, #0
 8007222:	bc10      	pop	{r4}
 8007224:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8007226:	6903      	ldr	r3, [r0, #16]
 8007228:	b91b      	cbnz	r3, 8007232 <UART_Start_Receive_IT+0xb2>
 800722a:	237f      	movs	r3, #127	@ 0x7f
 800722c:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8007230:	e7ce      	b.n	80071d0 <UART_Start_Receive_IT+0x50>
 8007232:	233f      	movs	r3, #63	@ 0x3f
 8007234:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8007238:	e7ca      	b.n	80071d0 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800723a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 800723e:	4293      	cmp	r3, r2
 8007240:	d8dc      	bhi.n	80071fc <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007242:	6883      	ldr	r3, [r0, #8]
 8007244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007248:	d019      	beq.n	800727e <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800724a:	4b19      	ldr	r3, [pc, #100]	@ (80072b0 <UART_Start_Receive_IT+0x130>)
 800724c:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800724e:	6903      	ldr	r3, [r0, #16]
 8007250:	b143      	cbz	r3, 8007264 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007252:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007254:	e852 3f00 	ldrex	r3, [r2]
 8007258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	e842 3100 	strex	r1, r3, [r2]
 8007260:	2900      	cmp	r1, #0
 8007262:	d1f6      	bne.n	8007252 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007264:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007266:	f102 0308 	add.w	r3, r2, #8
 800726a:	e853 3f00 	ldrex	r3, [r3]
 800726e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007272:	3208      	adds	r2, #8
 8007274:	e842 3100 	strex	r1, r3, [r2]
 8007278:	2900      	cmp	r1, #0
 800727a:	d1f3      	bne.n	8007264 <UART_Start_Receive_IT+0xe4>
 800727c:	e7d0      	b.n	8007220 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800727e:	6903      	ldr	r3, [r0, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1e2      	bne.n	800724a <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007284:	4b0b      	ldr	r3, [pc, #44]	@ (80072b4 <UART_Start_Receive_IT+0x134>)
 8007286:	6743      	str	r3, [r0, #116]	@ 0x74
 8007288:	e7e1      	b.n	800724e <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800728a:	6903      	ldr	r3, [r0, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1b9      	bne.n	8007204 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8007290:	4b09      	ldr	r3, [pc, #36]	@ (80072b8 <UART_Start_Receive_IT+0x138>)
 8007292:	6743      	str	r3, [r0, #116]	@ 0x74
 8007294:	e7b8      	b.n	8007208 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007296:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	e852 3f00 	ldrex	r3, [r2]
 800729c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a0:	e842 3100 	strex	r1, r3, [r2]
 80072a4:	2900      	cmp	r1, #0
 80072a6:	d1f6      	bne.n	8007296 <UART_Start_Receive_IT+0x116>
 80072a8:	e7ba      	b.n	8007220 <UART_Start_Receive_IT+0xa0>
 80072aa:	bf00      	nop
 80072ac:	080066ed 	.word	0x080066ed
 80072b0:	080068a1 	.word	0x080068a1
 80072b4:	08006a6d 	.word	0x08006a6d
 80072b8:	080067c9 	.word	0x080067c9

080072bc <HAL_UART_Receive_IT>:
{
 80072bc:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80072be:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 80072c2:	2b20      	cmp	r3, #32
 80072c4:	d117      	bne.n	80072f6 <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 80072c6:	b1c1      	cbz	r1, 80072fa <HAL_UART_Receive_IT+0x3e>
 80072c8:	b1ca      	cbz	r2, 80072fe <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ca:	2300      	movs	r3, #0
 80072cc:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072ce:	6803      	ldr	r3, [r0, #0]
 80072d0:	4c0c      	ldr	r4, [pc, #48]	@ (8007304 <HAL_UART_Receive_IT+0x48>)
 80072d2:	42a3      	cmp	r3, r4
 80072d4:	d00c      	beq.n	80072f0 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80072dc:	d008      	beq.n	80072f0 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072de:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	e854 3f00 	ldrex	r3, [r4]
 80072e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	e844 3500 	strex	r5, r3, [r4]
 80072ec:	2d00      	cmp	r5, #0
 80072ee:	d1f6      	bne.n	80072de <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 80072f0:	f7ff ff46 	bl	8007180 <UART_Start_Receive_IT>
 80072f4:	e000      	b.n	80072f8 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 80072f6:	2002      	movs	r0, #2
}
 80072f8:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80072fa:	2001      	movs	r0, #1
 80072fc:	e7fc      	b.n	80072f8 <HAL_UART_Receive_IT+0x3c>
 80072fe:	2001      	movs	r0, #1
 8007300:	e7fa      	b.n	80072f8 <HAL_UART_Receive_IT+0x3c>
 8007302:	bf00      	nop
 8007304:	40008000 	.word	0x40008000

08007308 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007308:	b082      	sub	sp, #8
 800730a:	ab02      	add	r3, sp, #8
 800730c:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007310:	6802      	ldr	r2, [r0, #0]
 8007312:	6853      	ldr	r3, [r2, #4]
 8007314:	f023 0310 	bic.w	r3, r3, #16
 8007318:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800731c:	430b      	orrs	r3, r1
 800731e:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007320:	6802      	ldr	r2, [r0, #0]
 8007322:	6853      	ldr	r3, [r2, #4]
 8007324:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007328:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800732c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007330:	6053      	str	r3, [r2, #4]
}
 8007332:	b002      	add	sp, #8
 8007334:	4770      	bx	lr
	...

08007338 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007338:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800733a:	b92b      	cbnz	r3, 8007348 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800733c:	2301      	movs	r3, #1
 800733e:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007342:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 8007346:	4770      	bx	lr
{
 8007348:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800734a:	6803      	ldr	r3, [r0, #0]
 800734c:	689a      	ldr	r2, [r3, #8]
 800734e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007352:	6899      	ldr	r1, [r3, #8]
 8007354:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007356:	4d09      	ldr	r5, [pc, #36]	@ (800737c <UARTEx_SetNbDataToProcess+0x44>)
 8007358:	5c6b      	ldrb	r3, [r5, r1]
 800735a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800735c:	4c08      	ldr	r4, [pc, #32]	@ (8007380 <UARTEx_SetNbDataToProcess+0x48>)
 800735e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007360:	fb93 f3f1 	sdiv	r3, r3, r1
 8007364:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007368:	5cab      	ldrb	r3, [r5, r2]
 800736a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800736c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800736e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007372:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 8007376:	bc30      	pop	{r4, r5}
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	08011fec 	.word	0x08011fec
 8007380:	08011fe4 	.word	0x08011fe4

08007384 <HAL_UARTEx_WakeupCallback>:
}
 8007384:	4770      	bx	lr

08007386 <HAL_UARTEx_RxFifoFullCallback>:
}
 8007386:	4770      	bx	lr

08007388 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8007388:	4770      	bx	lr

0800738a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800738a:	b510      	push	{r4, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	ab04      	add	r3, sp, #16
 8007390:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8007394:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8007398:	2b01      	cmp	r3, #1
 800739a:	d035      	beq.n	8007408 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 800739c:	4604      	mov	r4, r0
 800739e:	2301      	movs	r3, #1
 80073a0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80073a4:	2324      	movs	r3, #36	@ 0x24
 80073a6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80073aa:	6802      	ldr	r2, [r0, #0]
 80073ac:	6813      	ldr	r3, [r2, #0]
 80073ae:	f023 0301 	bic.w	r3, r3, #1
 80073b2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80073b4:	6801      	ldr	r1, [r0, #0]
 80073b6:	688b      	ldr	r3, [r1, #8]
 80073b8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80073bc:	9a02      	ldr	r2, [sp, #8]
 80073be:	4313      	orrs	r3, r2
 80073c0:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80073c2:	b1aa      	cbz	r2, 80073f0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 80073c4:	6822      	ldr	r2, [r4, #0]
 80073c6:	6813      	ldr	r3, [r2, #0]
 80073c8:	f043 0301 	orr.w	r3, r3, #1
 80073cc:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80073ce:	f7fa fc11 	bl	8001bf4 <HAL_GetTick>
 80073d2:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073d4:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 80073d8:	9200      	str	r2, [sp, #0]
 80073da:	2200      	movs	r2, #0
 80073dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80073e0:	4620      	mov	r0, r4
 80073e2:	f7ff fdf2 	bl	8006fca <UART_WaitOnFlagUntilTimeout>
 80073e6:	b948      	cbnz	r0, 80073fc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 80073e8:	2320      	movs	r3, #32
 80073ea:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 80073ee:	e006      	b.n	80073fe <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80073f0:	ab04      	add	r3, sp, #16
 80073f2:	e913 0006 	ldmdb	r3, {r1, r2}
 80073f6:	f7ff ff87 	bl	8007308 <UARTEx_Wakeup_AddressConfig>
 80073fa:	e7e3      	b.n	80073c4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 80073fc:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 80073fe:	2300      	movs	r3, #0
 8007400:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8007404:	b004      	add	sp, #16
 8007406:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8007408:	2002      	movs	r0, #2
 800740a:	e7fb      	b.n	8007404 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

0800740c <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 800740c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8007410:	2b01      	cmp	r3, #1
 8007412:	d010      	beq.n	8007436 <HAL_UARTEx_EnableStopMode+0x2a>
 8007414:	2301      	movs	r3, #1
 8007416:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800741a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	e852 3f00 	ldrex	r3, [r2]
 8007420:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	e842 3100 	strex	r1, r3, [r2]
 8007428:	2900      	cmp	r1, #0
 800742a:	d1f6      	bne.n	800741a <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 800742c:	2300      	movs	r3, #0
 800742e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8007432:	4618      	mov	r0, r3
 8007434:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007436:	2002      	movs	r0, #2
}
 8007438:	4770      	bx	lr

0800743a <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800743a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800743e:	2b01      	cmp	r3, #1
 8007440:	d018      	beq.n	8007474 <HAL_UARTEx_DisableFifoMode+0x3a>
 8007442:	2301      	movs	r3, #1
 8007444:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007448:	2324      	movs	r3, #36	@ 0x24
 800744a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800744e:	6803      	ldr	r3, [r0, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007452:	6819      	ldr	r1, [r3, #0]
 8007454:	f021 0101 	bic.w	r1, r1, #1
 8007458:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800745a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800745e:	2300      	movs	r3, #0
 8007460:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007462:	6801      	ldr	r1, [r0, #0]
 8007464:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007466:	2220      	movs	r2, #32
 8007468:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800746c:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8007470:	4618      	mov	r0, r3
 8007472:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007474:	2002      	movs	r0, #2
}
 8007476:	4770      	bx	lr

08007478 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007478:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800747a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800747e:	2b01      	cmp	r3, #1
 8007480:	d01d      	beq.n	80074be <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007482:	4604      	mov	r4, r0
 8007484:	2301      	movs	r3, #1
 8007486:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800748a:	2324      	movs	r3, #36	@ 0x24
 800748c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007490:	6803      	ldr	r3, [r0, #0]
 8007492:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	f022 0201 	bic.w	r2, r2, #1
 800749a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800749c:	6802      	ldr	r2, [r0, #0]
 800749e:	6893      	ldr	r3, [r2, #8]
 80074a0:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80074a4:	4319      	orrs	r1, r3
 80074a6:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80074a8:	f7ff ff46 	bl	8007338 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80074b0:	2320      	movs	r3, #32
 80074b2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80074b6:	2000      	movs	r0, #0
 80074b8:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80074bc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80074be:	2002      	movs	r0, #2
 80074c0:	e7fc      	b.n	80074bc <HAL_UARTEx_SetTxFifoThreshold+0x44>

080074c2 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80074c2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80074c4:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d01d      	beq.n	8007508 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80074cc:	4604      	mov	r4, r0
 80074ce:	2301      	movs	r3, #1
 80074d0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80074d4:	2324      	movs	r3, #36	@ 0x24
 80074d6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074da:	6803      	ldr	r3, [r0, #0]
 80074dc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	f022 0201 	bic.w	r2, r2, #1
 80074e4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80074e6:	6802      	ldr	r2, [r0, #0]
 80074e8:	6893      	ldr	r3, [r2, #8]
 80074ea:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80074ee:	4319      	orrs	r1, r3
 80074f0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80074f2:	f7ff ff21 	bl	8007338 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80074fa:	2320      	movs	r3, #32
 80074fc:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8007500:	2000      	movs	r0, #0
 8007502:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8007506:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007508:	2002      	movs	r0, #2
 800750a:	e7fc      	b.n	8007506 <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800750c <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800750c:	2804      	cmp	r0, #4
 800750e:	d807      	bhi.n	8007520 <LmHandlerPackageIsInitialized+0x14>
{
 8007510:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8007512:	4b05      	ldr	r3, [pc, #20]	@ (8007528 <LmHandlerPackageIsInitialized+0x1c>)
 8007514:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	b11b      	cbz	r3, 8007524 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800751c:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 800751e:	bd08      	pop	{r3, pc}
        return false;
 8007520:	2000      	movs	r0, #0
}
 8007522:	4770      	bx	lr
        return false;
 8007524:	2000      	movs	r0, #0
 8007526:	e7fa      	b.n	800751e <LmHandlerPackageIsInitialized+0x12>
 8007528:	200007e0 	.word	0x200007e0

0800752c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800752c:	b570      	push	{r4, r5, r6, lr}
 800752e:	4605      	mov	r5, r0
 8007530:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007532:	2400      	movs	r4, #0
 8007534:	e005      	b.n	8007542 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	b10b      	cbz	r3, 800753e <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800753a:	4630      	mov	r0, r6
 800753c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800753e:	3401      	adds	r4, #1
 8007540:	b264      	sxtb	r4, r4
 8007542:	2c04      	cmp	r4, #4
 8007544:	dc24      	bgt.n	8007590 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8007546:	4b13      	ldr	r3, [pc, #76]	@ (8007594 <LmHandlerPackagesNotify+0x68>)
 8007548:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d0f6      	beq.n	800753e <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8007550:	2d03      	cmp	r5, #3
 8007552:	d8f4      	bhi.n	800753e <LmHandlerPackagesNotify+0x12>
 8007554:	a201      	add	r2, pc, #4	@ (adr r2, 800755c <LmHandlerPackagesNotify+0x30>)
 8007556:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800755a:	bf00      	nop
 800755c:	08007537 	.word	0x08007537
 8007560:	0800756d 	.word	0x0800756d
 8007564:	08007579 	.word	0x08007579
 8007568:	08007585 	.word	0x08007585
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d0e5      	beq.n	800753e <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 8007572:	4630      	mov	r0, r6
 8007574:	4798      	blx	r3
 8007576:	e7e2      	b.n	800753e <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0df      	beq.n	800753e <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800757e:	4630      	mov	r0, r6
 8007580:	4798      	blx	r3
 8007582:	e7dc      	b.n	800753e <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8007584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0d9      	beq.n	800753e <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800758a:	4630      	mov	r0, r6
 800758c:	4798      	blx	r3
 800758e:	e7d6      	b.n	800753e <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 8007590:	bd70      	pop	{r4, r5, r6, pc}
 8007592:	bf00      	nop
 8007594:	200007e0 	.word	0x200007e0

08007598 <MlmeIndication>:
{
 8007598:	b510      	push	{r4, lr}
 800759a:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 800759c:	4b11      	ldr	r3, [pc, #68]	@ (80075e4 <MlmeIndication+0x4c>)
 800759e:	2200      	movs	r2, #0
 80075a0:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 80075a2:	7842      	ldrb	r2, [r0, #1]
 80075a4:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 80075a6:	f990 2002 	ldrsb.w	r2, [r0, #2]
 80075aa:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80075ac:	f9b1 2000 	ldrsh.w	r2, [r1]
 80075b0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80075b2:	f991 2002 	ldrsb.w	r2, [r1, #2]
 80075b6:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80075b8:	78ca      	ldrb	r2, [r1, #3]
 80075ba:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 80075bc:	6842      	ldr	r2, [r0, #4]
 80075be:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 80075c0:	4b09      	ldr	r3, [pc, #36]	@ (80075e8 <MlmeIndication+0x50>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c6:	b13b      	cbz	r3, 80075d8 <MlmeIndication+0x40>
 80075c8:	7802      	ldrb	r2, [r0, #0]
 80075ca:	2a0a      	cmp	r2, #10
 80075cc:	d004      	beq.n	80075d8 <MlmeIndication+0x40>
 80075ce:	2a0e      	cmp	r2, #14
 80075d0:	d002      	beq.n	80075d8 <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80075d2:	4904      	ldr	r1, [pc, #16]	@ (80075e4 <MlmeIndication+0x4c>)
 80075d4:	2000      	movs	r0, #0
 80075d6:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80075d8:	4621      	mov	r1, r4
 80075da:	2003      	movs	r0, #3
 80075dc:	f7ff ffa6 	bl	800752c <LmHandlerPackagesNotify>
}
 80075e0:	bd10      	pop	{r4, pc}
 80075e2:	bf00      	nop
 80075e4:	2000007c 	.word	0x2000007c
 80075e8:	200007c4 	.word	0x200007c4

080075ec <McpsConfirm>:
{
 80075ec:	b510      	push	{r4, lr}
 80075ee:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 80075f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007628 <McpsConfirm+0x3c>)
 80075f2:	2201      	movs	r2, #1
 80075f4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 80075f6:	7842      	ldrb	r2, [r0, #1]
 80075f8:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 80075fa:	f990 2002 	ldrsb.w	r2, [r0, #2]
 80075fe:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8007600:	68c2      	ldr	r2, [r0, #12]
 8007602:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8007604:	f990 2003 	ldrsb.w	r2, [r0, #3]
 8007608:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800760a:	6902      	ldr	r2, [r0, #16]
 800760c:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800760e:	7902      	ldrb	r2, [r0, #4]
 8007610:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8007612:	4b06      	ldr	r3, [pc, #24]	@ (800762c <McpsConfirm+0x40>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007618:	b10b      	cbz	r3, 800761e <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 800761a:	4803      	ldr	r0, [pc, #12]	@ (8007628 <McpsConfirm+0x3c>)
 800761c:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800761e:	4621      	mov	r1, r4
 8007620:	2000      	movs	r0, #0
 8007622:	f7ff ff83 	bl	800752c <LmHandlerPackagesNotify>
}
 8007626:	bd10      	pop	{r4, pc}
 8007628:	20000090 	.word	0x20000090
 800762c:	200007c4 	.word	0x200007c4

08007630 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8007630:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007632:	2400      	movs	r4, #0
 8007634:	e001      	b.n	800763a <LmHandlerPackageIsTxPending+0xa>
 8007636:	3401      	adds	r4, #1
 8007638:	b264      	sxtb	r4, r4
 800763a:	2c04      	cmp	r4, #4
 800763c:	dc0a      	bgt.n	8007654 <LmHandlerPackageIsTxPending+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800763e:	4b07      	ldr	r3, [pc, #28]	@ (800765c <LmHandlerPackageIsTxPending+0x2c>)
 8007640:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0f6      	beq.n	8007636 <LmHandlerPackageIsTxPending+0x6>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	4798      	blx	r3
 800764c:	4603      	mov	r3, r0
 800764e:	2800      	cmp	r0, #0
 8007650:	d0f1      	beq.n	8007636 <LmHandlerPackageIsTxPending+0x6>
 8007652:	e000      	b.n	8007656 <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	bd10      	pop	{r4, pc}
 800765a:	bf00      	nop
 800765c:	200007e0 	.word	0x200007e0

08007660 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8007660:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007662:	2400      	movs	r4, #0
 8007664:	e001      	b.n	800766a <LmHandlerPackagesProcess+0xa>
 8007666:	3401      	adds	r4, #1
 8007668:	b264      	sxtb	r4, r4
 800766a:	2c04      	cmp	r4, #4
 800766c:	dc12      	bgt.n	8007694 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800766e:	4b0a      	ldr	r3, [pc, #40]	@ (8007698 <LmHandlerPackagesProcess+0x38>)
 8007670:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0f6      	beq.n	8007666 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007678:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0f3      	beq.n	8007666 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800767e:	b2e0      	uxtb	r0, r4
 8007680:	f7ff ff44 	bl	800750c <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007684:	2800      	cmp	r0, #0
 8007686:	d0ee      	beq.n	8007666 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8007688:	4b03      	ldr	r3, [pc, #12]	@ (8007698 <LmHandlerPackagesProcess+0x38>)
 800768a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	4798      	blx	r3
 8007692:	e7e8      	b.n	8007666 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8007694:	bd38      	pop	{r3, r4, r5, pc}
 8007696:	bf00      	nop
 8007698:	200007e0 	.word	0x200007e0

0800769c <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800769c:	b508      	push	{r3, lr}
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800769e:	4b04      	ldr	r3, [pc, #16]	@ (80076b0 <LmHandlerOnTxFrameCtrlChanged+0x14>)
 80076a0:	70d8      	strb	r0, [r3, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 80076a2:	4b04      	ldr	r3, [pc, #16]	@ (80076b4 <LmHandlerOnTxFrameCtrlChanged+0x18>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a8:	b103      	cbz	r3, 80076ac <LmHandlerOnTxFrameCtrlChanged+0x10>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 80076aa:	4798      	blx	r3
    }
}
 80076ac:	bd08      	pop	{r3, pc}
 80076ae:	bf00      	nop
 80076b0:	200007c8 	.word	0x200007c8
 80076b4:	200007c4 	.word	0x200007c4

080076b8 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 80076b8:	b508      	push	{r3, lr}
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80076ba:	4b04      	ldr	r3, [pc, #16]	@ (80076cc <LmHandlerOnPingSlotPeriodicityChanged+0x14>)
 80076bc:	7418      	strb	r0, [r3, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 80076be:	4b04      	ldr	r3, [pc, #16]	@ (80076d0 <LmHandlerOnPingSlotPeriodicityChanged+0x18>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c4:	b103      	cbz	r3, 80076c8 <LmHandlerOnPingSlotPeriodicityChanged+0x10>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 80076c6:	4798      	blx	r3
    }
}
 80076c8:	bd08      	pop	{r3, pc}
 80076ca:	bf00      	nop
 80076cc:	200007c8 	.word	0x200007c8
 80076d0:	200007c4 	.word	0x200007c4

080076d4 <LmHandlerJoin>:
{
 80076d4:	b530      	push	{r4, r5, lr}
 80076d6:	b091      	sub	sp, #68	@ 0x44
 80076d8:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 80076da:	2301      	movs	r3, #1
 80076dc:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80076e0:	4b33      	ldr	r3, [pc, #204]	@ (80077b0 <LmHandlerJoin+0xdc>)
 80076e2:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80076e6:	f88d 2031 	strb.w	r2, [sp, #49]	@ 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 80076ea:	f993 1005 	ldrsb.w	r1, [r3, #5]
 80076ee:	f88d 1032 	strb.w	r1, [sp, #50]	@ 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 80076f2:	2802      	cmp	r0, #2
 80076f4:	d022      	beq.n	800773c <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 80076f6:	2001      	movs	r0, #1
 80076f8:	f88d 0030 	strb.w	r0, [sp, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80076fc:	4b2d      	ldr	r3, [pc, #180]	@ (80077b4 <LmHandlerJoin+0xe0>)
 80076fe:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8007700:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 8007702:	7159      	strb	r1, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007704:	2100      	movs	r1, #0
 8007706:	7199      	strb	r1, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8007708:	721c      	strb	r4, [r3, #8]
        if( CtxRestoreDone == false )
 800770a:	4b2b      	ldr	r3, [pc, #172]	@ (80077b8 <LmHandlerJoin+0xe4>)
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	b1f3      	cbz	r3, 800774e <LmHandlerJoin+0x7a>
        LoRaMacStart();
 8007710:	f003 fb12 	bl	800ad38 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007714:	2301      	movs	r3, #1
 8007716:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800771a:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800771e:	a801      	add	r0, sp, #4
 8007720:	f003 fd46 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 8007724:	4b24      	ldr	r3, [pc, #144]	@ (80077b8 <LmHandlerJoin+0xe4>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	b103      	cbz	r3, 800772c <LmHandlerJoin+0x58>
 800772a:	b114      	cbz	r4, 8007732 <LmHandlerJoin+0x5e>
        LoRaMacMlmeRequest( &mlmeReq );
 800772c:	a80b      	add	r0, sp, #44	@ 0x2c
 800772e:	f003 fff3 	bl	800b718 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8007732:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007734:	4b21      	ldr	r3, [pc, #132]	@ (80077bc <LmHandlerJoin+0xe8>)
 8007736:	601a      	str	r2, [r3, #0]
}
 8007738:	b011      	add	sp, #68	@ 0x44
 800773a:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800773c:	2202      	movs	r2, #2
 800773e:	f88d 2030 	strb.w	r2, [sp, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8007742:	4b1c      	ldr	r3, [pc, #112]	@ (80077b4 <LmHandlerJoin+0xe0>)
 8007744:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 8007746:	721c      	strb	r4, [r3, #8]
        LoRaMacStart();
 8007748:	f003 faf6 	bl	800ad38 <LoRaMacStart>
 800774c:	e7ea      	b.n	8007724 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800774e:	231f      	movs	r3, #31
 8007750:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8007754:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007758:	a801      	add	r0, sp, #4
 800775a:	f003 fd29 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800775e:	2320      	movs	r3, #32
 8007760:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8007764:	4d12      	ldr	r5, [pc, #72]	@ (80077b0 <LmHandlerJoin+0xdc>)
 8007766:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800776a:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800776e:	a801      	add	r0, sp, #4
 8007770:	f003 fd1e 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8007774:	2322      	movs	r3, #34	@ 0x22
 8007776:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800777a:	f995 3005 	ldrsb.w	r3, [r5, #5]
 800777e:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007782:	a801      	add	r0, sp, #4
 8007784:	f003 fd14 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 8007788:	2321      	movs	r3, #33	@ 0x21
 800778a:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800778e:	f995 3005 	ldrsb.w	r3, [r5, #5]
 8007792:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007796:	a801      	add	r0, sp, #4
 8007798:	f003 fd0a 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800779c:	2329      	movs	r3, #41	@ 0x29
 800779e:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80077a2:	4b07      	ldr	r3, [pc, #28]	@ (80077c0 <LmHandlerJoin+0xec>)
 80077a4:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80077a6:	a801      	add	r0, sp, #4
 80077a8:	f003 fd02 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
 80077ac:	e7b0      	b.n	8007710 <LmHandlerJoin+0x3c>
 80077ae:	bf00      	nop
 80077b0:	200007c8 	.word	0x200007c8
 80077b4:	200000ac 	.word	0x200000ac
 80077b8:	200006a0 	.word	0x200006a0
 80077bc:	20000798 	.word	0x20000798
 80077c0:	01000400 	.word	0x01000400

080077c4 <LmHandlerDeviceTimeReq>:
{
 80077c4:	b500      	push	{lr}
 80077c6:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 80077c8:	2309      	movs	r3, #9
 80077ca:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 80077ce:	a801      	add	r0, sp, #4
 80077d0:	f003 ffa2 	bl	800b718 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 80077d4:	9a05      	ldr	r2, [sp, #20]
 80077d6:	4b04      	ldr	r3, [pc, #16]	@ (80077e8 <LmHandlerDeviceTimeReq+0x24>)
 80077d8:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 80077da:	b910      	cbnz	r0, 80077e2 <LmHandlerDeviceTimeReq+0x1e>
}
 80077dc:	b007      	add	sp, #28
 80077de:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80077e2:	f04f 30ff 	mov.w	r0, #4294967295
 80077e6:	e7f9      	b.n	80077dc <LmHandlerDeviceTimeReq+0x18>
 80077e8:	20000798 	.word	0x20000798

080077ec <LmHandlerGetDutyCycleWaitTime>:
}
 80077ec:	4b01      	ldr	r3, [pc, #4]	@ (80077f4 <LmHandlerGetDutyCycleWaitTime+0x8>)
 80077ee:	6818      	ldr	r0, [r3, #0]
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	20000798 	.word	0x20000798

080077f8 <LmHandlerJoinStatus>:
{
 80077f8:	b500      	push	{lr}
 80077fa:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80077fc:	2301      	movs	r3, #1
 80077fe:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8007802:	4668      	mov	r0, sp
 8007804:	f003 fb60 	bl	800aec8 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8007808:	b920      	cbnz	r0, 8007814 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800780a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800780e:	b110      	cbz	r0, 8007816 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8007810:	2001      	movs	r0, #1
 8007812:	e000      	b.n	8007816 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8007814:	2000      	movs	r0, #0
}
 8007816:	b00b      	add	sp, #44	@ 0x2c
 8007818:	f85d fb04 	ldr.w	pc, [sp], #4

0800781c <LmHandlerIsBusy>:
{
 800781c:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 800781e:	f003 f839 	bl	800a894 <LoRaMacIsBusy>
 8007822:	b100      	cbz	r0, 8007826 <LmHandlerIsBusy+0xa>
}
 8007824:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8007826:	f7ff ffe7 	bl	80077f8 <LmHandlerJoinStatus>
 800782a:	2801      	cmp	r0, #1
 800782c:	d006      	beq.n	800783c <LmHandlerIsBusy+0x20>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800782e:	4b05      	ldr	r3, [pc, #20]	@ (8007844 <LmHandlerIsBusy+0x28>)
 8007830:	7a19      	ldrb	r1, [r3, #8]
 8007832:	79d8      	ldrb	r0, [r3, #7]
 8007834:	f7ff ff4e 	bl	80076d4 <LmHandlerJoin>
        return true;
 8007838:	2001      	movs	r0, #1
 800783a:	e7f3      	b.n	8007824 <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 800783c:	f7ff fef8 	bl	8007630 <LmHandlerPackageIsTxPending>
 8007840:	e7f0      	b.n	8007824 <LmHandlerIsBusy+0x8>
 8007842:	bf00      	nop
 8007844:	200000ac 	.word	0x200000ac

08007848 <LmHandlerSend>:
{
 8007848:	b570      	push	{r4, r5, r6, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	4604      	mov	r4, r0
 800784e:	460d      	mov	r5, r1
 8007850:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 8007852:	f003 f81f 	bl	800a894 <LoRaMacIsBusy>
 8007856:	2800      	cmp	r0, #0
 8007858:	d168      	bne.n	800792c <LmHandlerSend+0xe4>
    if( LoRaMacIsStopped() == true )
 800785a:	f003 f839 	bl	800a8d0 <LoRaMacIsStopped>
 800785e:	2800      	cmp	r0, #0
 8007860:	d167      	bne.n	8007932 <LmHandlerSend+0xea>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8007862:	f7ff ffc9 	bl	80077f8 <LmHandlerJoinStatus>
 8007866:	2801      	cmp	r0, #1
 8007868:	d137      	bne.n	80078da <LmHandlerSend+0x92>
    TxParams.MsgType = isTxConfirmed;
 800786a:	4b35      	ldr	r3, [pc, #212]	@ (8007940 <LmHandlerSend+0xf8>)
 800786c:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800786e:	3d00      	subs	r5, #0
 8007870:	bf18      	it	ne
 8007872:	2501      	movne	r5, #1
 8007874:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8007878:	4b32      	ldr	r3, [pc, #200]	@ (8007944 <LmHandlerSend+0xfc>)
 800787a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800787e:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8007882:	4669      	mov	r1, sp
 8007884:	7860      	ldrb	r0, [r4, #1]
 8007886:	f003 fab5 	bl	800adf4 <LoRaMacQueryTxPossible>
 800788a:	b370      	cbz	r0, 80078ea <LmHandlerSend+0xa2>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800788c:	2300      	movs	r3, #0
 800788e:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8007892:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8007894:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8007898:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 800789c:	4b28      	ldr	r3, [pc, #160]	@ (8007940 <LmHandlerSend+0xf8>)
 800789e:	f103 0c10 	add.w	ip, r3, #16
 80078a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80078a6:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 80078aa:	4a26      	ldr	r2, [pc, #152]	@ (8007944 <LmHandlerSend+0xfc>)
 80078ac:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80078b0:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 80078b2:	4631      	mov	r1, r6
 80078b4:	a801      	add	r0, sp, #4
 80078b6:	f004 f833 	bl	800b920 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 80078ba:	9a05      	ldr	r2, [sp, #20]
 80078bc:	4b22      	ldr	r3, [pc, #136]	@ (8007948 <LmHandlerSend+0x100>)
 80078be:	601a      	str	r2, [r3, #0]
    switch( status )
 80078c0:	2811      	cmp	r0, #17
 80078c2:	d830      	bhi.n	8007926 <LmHandlerSend+0xde>
 80078c4:	e8df f000 	tbb	[pc, r0]
 80078c8:	2f2f1c21 	.word	0x2f2f1c21
 80078cc:	382f2f2f 	.word	0x382f2f2f
 80078d0:	2c2f2f2f 	.word	0x2c2f2f2f
 80078d4:	1c1c2f2f 	.word	0x1c1c2f2f
 80078d8:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 80078da:	4b1c      	ldr	r3, [pc, #112]	@ (800794c <LmHandlerSend+0x104>)
 80078dc:	7a19      	ldrb	r1, [r3, #8]
 80078de:	79d8      	ldrb	r0, [r3, #7]
 80078e0:	f7ff fef8 	bl	80076d4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80078e4:	f06f 0502 	mvn.w	r5, #2
 80078e8:	e00c      	b.n	8007904 <LmHandlerSend+0xbc>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80078ea:	7823      	ldrb	r3, [r4, #0]
 80078ec:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80078f0:	7863      	ldrb	r3, [r4, #1]
 80078f2:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 80078f6:	6863      	ldr	r3, [r4, #4]
 80078f8:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 80078fa:	f04f 35ff 	mov.w	r5, #4294967295
 80078fe:	e7cd      	b.n	800789c <LmHandlerSend+0x54>
    switch( status )
 8007900:	f06f 0501 	mvn.w	r5, #1
}
 8007904:	4628      	mov	r0, r5
 8007906:	b006      	add	sp, #24
 8007908:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 800790a:	4b11      	ldr	r3, [pc, #68]	@ (8007950 <LmHandlerSend+0x108>)
 800790c:	2200      	movs	r2, #0
 800790e:	701a      	strb	r2, [r3, #0]
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8007910:	f115 0f07 	cmn.w	r5, #7
 8007914:	d0f6      	beq.n	8007904 <LmHandlerSend+0xbc>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8007916:	2500      	movs	r5, #0
 8007918:	e7f4      	b.n	8007904 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800791a:	f06f 0504 	mvn.w	r5, #4
            break;
 800791e:	e7f1      	b.n	8007904 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8007920:	f06f 0505 	mvn.w	r5, #5
            break;
 8007924:	e7ee      	b.n	8007904 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007926:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 800792a:	e7eb      	b.n	8007904 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800792c:	f06f 0501 	mvn.w	r5, #1
 8007930:	e7e8      	b.n	8007904 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007932:	f06f 0502 	mvn.w	r5, #2
 8007936:	e7e5      	b.n	8007904 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007938:	f06f 0502 	mvn.w	r5, #2
 800793c:	e7e2      	b.n	8007904 <LmHandlerSend+0xbc>
 800793e:	bf00      	nop
 8007940:	20000090 	.word	0x20000090
 8007944:	200007c8 	.word	0x200007c8
 8007948:	20000798 	.word	0x20000798
 800794c:	200000ac 	.word	0x200000ac
 8007950:	20000796 	.word	0x20000796

08007954 <LmHandlerProcess>:
{
 8007954:	b500      	push	{lr}
 8007956:	b083      	sub	sp, #12
    LoRaMacProcess( );
 8007958:	f002 ffc6 	bl	800a8e8 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800795c:	f7ff fe80 	bl	8007660 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 8007960:	f7ff fe66 	bl	8007630 <LmHandlerPackageIsTxPending>
 8007964:	b910      	cbnz	r0, 800796c <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 8007966:	4b0b      	ldr	r3, [pc, #44]	@ (8007994 <LmHandlerProcess+0x40>)
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	b913      	cbnz	r3, 8007972 <LmHandlerProcess+0x1e>
}
 800796c:	b003      	add	sp, #12
 800796e:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 8007972:	2200      	movs	r2, #0
 8007974:	f88d 2000 	strb.w	r2, [sp]
 8007978:	f88d 2001 	strb.w	r2, [sp, #1]
 800797c:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800797e:	4b06      	ldr	r3, [pc, #24]	@ (8007998 <LmHandlerProcess+0x44>)
 8007980:	78d9      	ldrb	r1, [r3, #3]
 8007982:	4668      	mov	r0, sp
 8007984:	f7ff ff60 	bl	8007848 <LmHandlerSend>
 8007988:	2800      	cmp	r0, #0
 800798a:	d1ef      	bne.n	800796c <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 800798c:	4b01      	ldr	r3, [pc, #4]	@ (8007994 <LmHandlerProcess+0x40>)
 800798e:	2200      	movs	r2, #0
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	e7eb      	b.n	800796c <LmHandlerProcess+0x18>
 8007994:	20000796 	.word	0x20000796
 8007998:	200007c8 	.word	0x200007c8

0800799c <LmHandlerRequestClass>:
{
 800799c:	b510      	push	{r4, lr}
 800799e:	b08a      	sub	sp, #40	@ 0x28
 80079a0:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 80079a2:	f002 ff77 	bl	800a894 <LoRaMacIsBusy>
 80079a6:	bbb0      	cbnz	r0, 8007a16 <LmHandlerRequestClass+0x7a>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 80079a8:	f7ff ff26 	bl	80077f8 <LmHandlerJoinStatus>
 80079ac:	2801      	cmp	r0, #1
 80079ae:	d135      	bne.n	8007a1c <LmHandlerRequestClass+0x80>
    mibReq.Type = MIB_DEVICE_CLASS;
 80079b0:	2300      	movs	r3, #0
 80079b2:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80079b6:	4668      	mov	r0, sp
 80079b8:	f003 fa86 	bl	800aec8 <LoRaMacMibGetRequestConfirm>
 80079bc:	bb88      	cbnz	r0, 8007a22 <LmHandlerRequestClass+0x86>
    currentClass = mibReq.Param.Class;
 80079be:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 80079c2:	42a3      	cmp	r3, r4
 80079c4:	d030      	beq.n	8007a28 <LmHandlerRequestClass+0x8c>
        switch( newClass )
 80079c6:	2c01      	cmp	r4, #1
 80079c8:	d030      	beq.n	8007a2c <LmHandlerRequestClass+0x90>
 80079ca:	2c02      	cmp	r4, #2
 80079cc:	d014      	beq.n	80079f8 <LmHandlerRequestClass+0x5c>
 80079ce:	b114      	cbz	r4, 80079d6 <LmHandlerRequestClass+0x3a>
 80079d0:	2000      	movs	r0, #0
}
 80079d2:	b00a      	add	sp, #40	@ 0x28
 80079d4:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 80079d6:	b90b      	cbnz	r3, 80079dc <LmHandlerRequestClass+0x40>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80079d8:	2000      	movs	r0, #0
 80079da:	e7fa      	b.n	80079d2 <LmHandlerRequestClass+0x36>
                        mibReq.Param.Class = newClass;
 80079dc:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80079e0:	4668      	mov	r0, sp
 80079e2:	f003 fbe5 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
 80079e6:	bb20      	cbnz	r0, 8007a32 <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 80079e8:	4b18      	ldr	r3, [pc, #96]	@ (8007a4c <LmHandlerRequestClass+0xb0>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ee:	b31b      	cbz	r3, 8007a38 <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 80079f0:	4620      	mov	r0, r4
 80079f2:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80079f4:	2000      	movs	r0, #0
 80079f6:	e7ec      	b.n	80079d2 <LmHandlerRequestClass+0x36>
                    if( currentClass != CLASS_A )
 80079f8:	bb03      	cbnz	r3, 8007a3c <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 80079fa:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80079fe:	4668      	mov	r0, sp
 8007a00:	f003 fbd6 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
 8007a04:	b9e8      	cbnz	r0, 8007a42 <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8007a06:	4b11      	ldr	r3, [pc, #68]	@ (8007a4c <LmHandlerRequestClass+0xb0>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0c:	b1e3      	cbz	r3, 8007a48 <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8007a0e:	4620      	mov	r0, r4
 8007a10:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007a12:	2000      	movs	r0, #0
 8007a14:	e7dd      	b.n	80079d2 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007a16:	f06f 0001 	mvn.w	r0, #1
 8007a1a:	e7da      	b.n	80079d2 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007a1c:	f06f 0002 	mvn.w	r0, #2
 8007a20:	e7d7      	b.n	80079d2 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_ERROR;
 8007a22:	f04f 30ff 	mov.w	r0, #4294967295
 8007a26:	e7d4      	b.n	80079d2 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007a28:	2000      	movs	r0, #0
 8007a2a:	e7d2      	b.n	80079d2 <LmHandlerRequestClass+0x36>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8007a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a30:	e7cf      	b.n	80079d2 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8007a32:	f04f 30ff 	mov.w	r0, #4294967295
 8007a36:	e7cc      	b.n	80079d2 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007a38:	2000      	movs	r0, #0
 8007a3a:	e7ca      	b.n	80079d2 <LmHandlerRequestClass+0x36>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	e7c7      	b.n	80079d2 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8007a42:	f04f 30ff 	mov.w	r0, #4294967295
 8007a46:	e7c4      	b.n	80079d2 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007a48:	2000      	movs	r0, #0
 8007a4a:	e7c2      	b.n	80079d2 <LmHandlerRequestClass+0x36>
 8007a4c:	200007c4 	.word	0x200007c4

08007a50 <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 8007a50:	b170      	cbz	r0, 8007a70 <LmHandlerGetCurrentClass+0x20>
{
 8007a52:	b510      	push	{r4, lr}
 8007a54:	b08a      	sub	sp, #40	@ 0x28
 8007a56:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007a5e:	4668      	mov	r0, sp
 8007a60:	f003 fa32 	bl	800aec8 <LoRaMacMibGetRequestConfirm>
 8007a64:	b938      	cbnz	r0, 8007a76 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8007a66:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007a6a:	7023      	strb	r3, [r4, #0]
}
 8007a6c:	b00a      	add	sp, #40	@ 0x28
 8007a6e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007a74:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007a76:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7a:	e7f7      	b.n	8007a6c <LmHandlerGetCurrentClass+0x1c>

08007a7c <McpsIndication>:
{
 8007a7c:	b510      	push	{r4, lr}
 8007a7e:	b084      	sub	sp, #16
    DeviceClass_t deviceClass = CLASS_A;
 8007a80:	2300      	movs	r3, #0
 8007a82:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 8007a86:	4a1d      	ldr	r2, [pc, #116]	@ (8007afc <McpsIndication+0x80>)
 8007a88:	2301      	movs	r3, #1
 8007a8a:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 8007a8c:	7843      	ldrb	r3, [r0, #1]
 8007a8e:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d131      	bne.n	8007af8 <McpsIndication+0x7c>
 8007a94:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8007a96:	f990 2004 	ldrsb.w	r2, [r0, #4]
 8007a9a:	4b18      	ldr	r3, [pc, #96]	@ (8007afc <McpsIndication+0x80>)
 8007a9c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8007a9e:	f9b1 2000 	ldrsh.w	r2, [r1]
 8007aa2:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8007aa4:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8007aa8:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8007aaa:	78ca      	ldrb	r2, [r1, #3]
 8007aac:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8007aae:	6902      	ldr	r2, [r0, #16]
 8007ab0:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 8007ab2:	78c3      	ldrb	r3, [r0, #3]
 8007ab4:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 8007ab8:	7b03      	ldrb	r3, [r0, #12]
 8007aba:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 8007abe:	6883      	ldr	r3, [r0, #8]
 8007ac0:	9303      	str	r3, [sp, #12]
    if( LmHandlerCallbacks->OnRxData != NULL )
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8007b00 <McpsIndication+0x84>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac8:	b113      	cbz	r3, 8007ad0 <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8007aca:	490c      	ldr	r1, [pc, #48]	@ (8007afc <McpsIndication+0x80>)
 8007acc:	a802      	add	r0, sp, #8
 8007ace:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 8007ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8007b00 <McpsIndication+0x84>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad6:	b113      	cbz	r3, 8007ade <McpsIndication+0x62>
 8007ad8:	7e22      	ldrb	r2, [r4, #24]
 8007ada:	b102      	cbz	r2, 8007ade <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8007adc:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8007ade:	4621      	mov	r1, r4
 8007ae0:	2001      	movs	r0, #1
 8007ae2:	f7ff fd23 	bl	800752c <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 8007ae6:	f10d 0007 	add.w	r0, sp, #7
 8007aea:	f7ff ffb1 	bl	8007a50 <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 8007aee:	7963      	ldrb	r3, [r4, #5]
 8007af0:	b113      	cbz	r3, 8007af8 <McpsIndication+0x7c>
        IsUplinkTxPending = true;
 8007af2:	4b04      	ldr	r3, [pc, #16]	@ (8007b04 <McpsIndication+0x88>)
 8007af4:	2201      	movs	r2, #1
 8007af6:	701a      	strb	r2, [r3, #0]
}
 8007af8:	b004      	add	sp, #16
 8007afa:	bd10      	pop	{r4, pc}
 8007afc:	2000007c 	.word	0x2000007c
 8007b00:	200007c4 	.word	0x200007c4
 8007b04:	20000796 	.word	0x20000796

08007b08 <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 8007b08:	b180      	cbz	r0, 8007b2c <LmHandlerGetTxDatarate+0x24>
{
 8007b0a:	b510      	push	{r4, lr}
 8007b0c:	b08a      	sub	sp, #40	@ 0x28
 8007b0e:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8007b10:	2320      	movs	r3, #32
 8007b12:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 8007b16:	4668      	mov	r0, sp
 8007b18:	f003 f9d6 	bl	800aec8 <LoRaMacMibGetRequestConfirm>
 8007b1c:	b948      	cbnz	r0, 8007b32 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8007b1e:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8007b22:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8007b24:	4a04      	ldr	r2, [pc, #16]	@ (8007b38 <LmHandlerGetTxDatarate+0x30>)
 8007b26:	7113      	strb	r3, [r2, #4]
}
 8007b28:	b00a      	add	sp, #40	@ 0x28
 8007b2a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007b30:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007b32:	f04f 30ff 	mov.w	r0, #4294967295
 8007b36:	e7f7      	b.n	8007b28 <LmHandlerGetTxDatarate+0x20>
 8007b38:	200007c8 	.word	0x200007c8

08007b3c <LmHandlerSetSystemMaxRxError>:
{
 8007b3c:	b500      	push	{lr}
 8007b3e:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007b40:	2323      	movs	r3, #35	@ 0x23
 8007b42:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8007b46:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007b48:	4668      	mov	r0, sp
 8007b4a:	f003 fb31 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
 8007b4e:	b910      	cbnz	r0, 8007b56 <LmHandlerSetSystemMaxRxError+0x1a>
}
 8007b50:	b00b      	add	sp, #44	@ 0x2c
 8007b52:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8007b56:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5a:	e7f9      	b.n	8007b50 <LmHandlerSetSystemMaxRxError+0x14>

08007b5c <LmHandlerConfigure>:
{
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	b08e      	sub	sp, #56	@ 0x38
 8007b60:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 8007b62:	4c6d      	ldr	r4, [pc, #436]	@ (8007d18 <LmHandlerConfigure+0x1bc>)
 8007b64:	2218      	movs	r2, #24
 8007b66:	4620      	mov	r0, r4
 8007b68:	f007 f9eb 	bl	800ef42 <memcpy1>
    IsUplinkTxPending = false;
 8007b6c:	4b6b      	ldr	r3, [pc, #428]	@ (8007d1c <LmHandlerConfigure+0x1c0>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 8007b72:	f7fb f941 	bl	8002df8 <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 8007b76:	7822      	ldrb	r2, [r4, #0]
 8007b78:	2301      	movs	r3, #1
 8007b7a:	4093      	lsls	r3, r2
 8007b7c:	6841      	ldr	r1, [r0, #4]
 8007b7e:	420b      	tst	r3, r1
 8007b80:	d106      	bne.n	8007b90 <LmHandlerConfigure+0x34>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 8007b82:	4b67      	ldr	r3, [pc, #412]	@ (8007d20 <LmHandlerConfigure+0x1c4>)
 8007b84:	2201      	movs	r2, #1
 8007b86:	2100      	movs	r1, #0
 8007b88:	4608      	mov	r0, r1
 8007b8a:	f009 f8b5 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 8007b8e:	e7fe      	b.n	8007b8e <LmHandlerConfigure+0x32>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 8007b90:	4964      	ldr	r1, [pc, #400]	@ (8007d24 <LmHandlerConfigure+0x1c8>)
 8007b92:	4865      	ldr	r0, [pc, #404]	@ (8007d28 <LmHandlerConfigure+0x1cc>)
 8007b94:	f002 fef0 	bl	800a978 <LoRaMacInitialization>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	f040 80b7 	bne.w	8007d0c <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_NVM_CTXS;
 8007b9e:	2327      	movs	r3, #39	@ 0x27
 8007ba0:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8007ba4:	a804      	add	r0, sp, #16
 8007ba6:	f003 fb03 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d17c      	bne.n	8007ca8 <LmHandlerConfigure+0x14c>
        CtxRestoreDone = true;
 8007bae:	4b5f      	ldr	r3, [pc, #380]	@ (8007d2c <LmHandlerConfigure+0x1d0>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 8007bb4:	4b5d      	ldr	r3, [pc, #372]	@ (8007d2c <LmHandlerConfigure+0x1d0>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 809e 	beq.w	8007cfa <LmHandlerConfigure+0x19e>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 8007bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8007d30 <LmHandlerConfigure+0x1d4>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	b10b      	cbz	r3, 8007bca <LmHandlerConfigure+0x6e>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8007bca:	2327      	movs	r3, #39	@ 0x27
 8007bcc:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8007bd0:	a804      	add	r0, sp, #16
 8007bd2:	f003 f979 	bl	800aec8 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 8007bd6:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 8007bd8:	f892 1048 	ldrb.w	r1, [r2, #72]	@ 0x48
 8007bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8007d18 <LmHandlerConfigure+0x1bc>)
 8007bde:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 8007be0:	f892 1118 	ldrb.w	r1, [r2, #280]	@ 0x118
 8007be4:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 8007be6:	f892 211a 	ldrb.w	r2, [r2, #282]	@ 0x11a
 8007bea:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 8007bec:	4b4d      	ldr	r3, [pc, #308]	@ (8007d24 <LmHandlerConfigure+0x1c8>)
 8007bee:	68d9      	ldr	r1, [r3, #12]
 8007bf0:	6898      	ldr	r0, [r3, #8]
 8007bf2:	f007 f8b9 	bl	800ed68 <SecureElementInitMcuID>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	f040 808b 	bne.w	8007d12 <LmHandlerConfigure+0x1b6>
    mibReq.Type = MIB_DEV_ADDR;
 8007bfc:	2306      	movs	r3, #6
 8007bfe:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007c02:	a804      	add	r0, sp, #16
 8007c04:	f003 f960 	bl	800aec8 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007c08:	4c4a      	ldr	r4, [pc, #296]	@ (8007d34 <LmHandlerConfigure+0x1d8>)
 8007c0a:	9b05      	ldr	r3, [sp, #20]
 8007c0c:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007c0e:	a804      	add	r0, sp, #16
 8007c10:	f003 face 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 8007c14:	2302      	movs	r3, #2
 8007c16:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 8007c1a:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007c1c:	a804      	add	r0, sp, #16
 8007c1e:	f003 f953 	bl	800aec8 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 8007c22:	2303      	movs	r3, #3
 8007c24:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 8007c28:	3408      	adds	r4, #8
 8007c2a:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007c2c:	a804      	add	r0, sp, #16
 8007c2e:	f003 f94b 	bl	800aec8 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 8007c32:	f007 f933 	bl	800ee9c <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8007c36:	260f      	movs	r6, #15
 8007c38:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007c42:	a804      	add	r0, sp, #16
 8007c44:	f003 fab4 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8007c48:	2310      	movs	r3, #16
 8007c4a:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8007c4e:	2500      	movs	r5, #0
 8007c50:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007c54:	eb0d 0003 	add.w	r0, sp, r3
 8007c58:	f003 faaa 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8007c62:	4c2d      	ldr	r4, [pc, #180]	@ (8007d18 <LmHandlerConfigure+0x1bc>)
 8007c64:	78a3      	ldrb	r3, [r4, #2]
 8007c66:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007c6a:	a804      	add	r0, sp, #16
 8007c6c:	f003 faa0 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8007c70:	233a      	movs	r3, #58	@ 0x3a
 8007c72:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8007c76:	6963      	ldr	r3, [r4, #20]
 8007c78:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007c7a:	a804      	add	r0, sp, #16
 8007c7c:	f003 fa98 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007c80:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8007c84:	a902      	add	r1, sp, #8
 8007c86:	7820      	ldrb	r0, [r4, #0]
 8007c88:	f004 ffea 	bl	800cc60 <RegionGetPhyParam>
 8007c8c:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 8007c8e:	1b43      	subs	r3, r0, r5
 8007c90:	bf18      	it	ne
 8007c92:	2301      	movne	r3, #1
 8007c94:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 8007c96:	2014      	movs	r0, #20
 8007c98:	f7ff ff50 	bl	8007b3c <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8007c9c:	79e0      	ldrb	r0, [r4, #7]
 8007c9e:	f003 ff2d 	bl	800bafc <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8007ca2:	4628      	mov	r0, r5
}
 8007ca4:	b00e      	add	sp, #56	@ 0x38
 8007ca6:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8007ca8:	2328      	movs	r3, #40	@ 0x28
 8007caa:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 8007cae:	4b20      	ldr	r3, [pc, #128]	@ (8007d30 <LmHandlerConfigure+0x1d4>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	b14b      	cbz	r3, 8007cca <LmHandlerConfigure+0x16e>
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007cb6:	a804      	add	r0, sp, #16
 8007cb8:	f003 f906 	bl	800aec8 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 8007cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8007d30 <LmHandlerConfigure+0x1d4>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 8007cc6:	9805      	ldr	r0, [sp, #20]
 8007cc8:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8007cca:	2327      	movs	r3, #39	@ 0x27
 8007ccc:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8007cd0:	a804      	add	r0, sp, #16
 8007cd2:	f003 fa6d 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	f47f af6c 	bne.w	8007bb4 <LmHandlerConfigure+0x58>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007ce2:	a804      	add	r0, sp, #16
 8007ce4:	f003 f8f0 	bl	800aec8 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 8007ce8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f43f af61 	beq.w	8007bb4 <LmHandlerConfigure+0x58>
                CtxRestoreDone = true;
 8007cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8007d2c <LmHandlerConfigure+0x1d0>)
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	701a      	strb	r2, [r3, #0]
 8007cf8:	e75c      	b.n	8007bb4 <LmHandlerConfigure+0x58>
        mibReq.Type = MIB_NET_ID;
 8007cfa:	2305      	movs	r3, #5
 8007cfc:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8007d00:	2301      	movs	r3, #1
 8007d02:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007d04:	a804      	add	r0, sp, #16
 8007d06:	f003 fa53 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
 8007d0a:	e76f      	b.n	8007bec <LmHandlerConfigure+0x90>
        return LORAMAC_HANDLER_ERROR;
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	e7c8      	b.n	8007ca4 <LmHandlerConfigure+0x148>
        return LORAMAC_HANDLER_ERROR;
 8007d12:	f04f 30ff 	mov.w	r0, #4294967295
 8007d16:	e7c5      	b.n	8007ca4 <LmHandlerConfigure+0x148>
 8007d18:	200007c8 	.word	0x200007c8
 8007d1c:	20000796 	.word	0x20000796
 8007d20:	08011ff4 	.word	0x08011ff4
 8007d24:	2000079c 	.word	0x2000079c
 8007d28:	200007b4 	.word	0x200007b4
 8007d2c:	200006a0 	.word	0x200006a0
 8007d30:	200007c4 	.word	0x200007c4
 8007d34:	200000b8 	.word	0x200000b8

08007d38 <LmHandlerPackageRegister>:
{
 8007d38:	b530      	push	{r4, r5, lr}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	9301      	str	r3, [sp, #4]
    switch( id )
 8007d42:	4604      	mov	r4, r0
 8007d44:	b9d8      	cbnz	r0, 8007d7e <LmHandlerPackageRegister+0x46>
                package = LmhpCompliancePackageFactory( );
 8007d46:	f000 fc1f 	bl	8008588 <LmhpCompliancePackageFactory>
 8007d4a:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 8007d4c:	9b01      	ldr	r3, [sp, #4]
 8007d4e:	b1f3      	cbz	r3, 8007d8e <LmHandlerPackageRegister+0x56>
        LmHandlerPackages[id] = package;
 8007d50:	4a10      	ldr	r2, [pc, #64]	@ (8007d94 <LmHandlerPackageRegister+0x5c>)
 8007d52:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8007d56:	4a10      	ldr	r2, [pc, #64]	@ (8007d98 <LmHandlerPackageRegister+0x60>)
 8007d58:	629a      	str	r2, [r3, #40]	@ 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 8007d5a:	4a10      	ldr	r2, [pc, #64]	@ (8007d9c <LmHandlerPackageRegister+0x64>)
 8007d5c:	6812      	ldr	r2, [r2, #0]
 8007d5e:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8007d60:	6319      	str	r1, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 8007d62:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8007d64:	6359      	str	r1, [r3, #52]	@ 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8007d66:	490e      	ldr	r1, [pc, #56]	@ (8007da0 <LmHandlerPackageRegister+0x68>)
 8007d68:	62d9      	str	r1, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8007d6a:	6992      	ldr	r2, [r2, #24]
 8007d6c:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	22f2      	movs	r2, #242	@ 0xf2
 8007d72:	490c      	ldr	r1, [pc, #48]	@ (8007da4 <LmHandlerPackageRegister+0x6c>)
 8007d74:	4628      	mov	r0, r5
 8007d76:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8007d78:	2000      	movs	r0, #0
}
 8007d7a:	b003      	add	sp, #12
 8007d7c:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8007d7e:	a901      	add	r1, sp, #4
 8007d80:	f000 fc08 	bl	8008594 <LmhpPackagesRegister>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d0e1      	beq.n	8007d4c <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 8007d88:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8c:	e7f5      	b.n	8007d7a <LmHandlerPackageRegister+0x42>
        return LORAMAC_HANDLER_ERROR;
 8007d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d92:	e7f2      	b.n	8007d7a <LmHandlerPackageRegister+0x42>
 8007d94:	200007e0 	.word	0x200007e0
 8007d98:	080076d5 	.word	0x080076d5
 8007d9c:	200007c4 	.word	0x200007c4
 8007da0:	080077c5 	.word	0x080077c5
 8007da4:	200006a4 	.word	0x200006a4

08007da8 <LmHandlerInit>:
{
 8007da8:	b500      	push	{lr}
 8007daa:	b083      	sub	sp, #12
 8007dac:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 8007dae:	4b19      	ldr	r3, [pc, #100]	@ (8007e14 <LmHandlerInit+0x6c>)
 8007db0:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007db2:	4b19      	ldr	r3, [pc, #100]	@ (8007e18 <LmHandlerInit+0x70>)
 8007db4:	4a19      	ldr	r2, [pc, #100]	@ (8007e1c <LmHandlerInit+0x74>)
 8007db6:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007db8:	4a19      	ldr	r2, [pc, #100]	@ (8007e20 <LmHandlerInit+0x78>)
 8007dba:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007dbc:	4a19      	ldr	r2, [pc, #100]	@ (8007e24 <LmHandlerInit+0x7c>)
 8007dbe:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007dc0:	4a19      	ldr	r2, [pc, #100]	@ (8007e28 <LmHandlerInit+0x80>)
 8007dc2:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8007dc4:	6802      	ldr	r2, [r0, #0]
 8007dc6:	4b19      	ldr	r3, [pc, #100]	@ (8007e2c <LmHandlerInit+0x84>)
 8007dc8:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8007dca:	6842      	ldr	r2, [r0, #4]
 8007dcc:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8007dce:	6882      	ldr	r2, [r0, #8]
 8007dd0:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 8007dd2:	68c2      	ldr	r2, [r0, #12]
 8007dd4:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8007dd6:	4a16      	ldr	r2, [pc, #88]	@ (8007e30 <LmHandlerInit+0x88>)
 8007dd8:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8007dda:	6982      	ldr	r2, [r0, #24]
 8007ddc:	615a      	str	r2, [r3, #20]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 8007dde:	4b15      	ldr	r3, [pc, #84]	@ (8007e34 <LmHandlerInit+0x8c>)
 8007de0:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 8007de2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007de4:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 8007de6:	4a14      	ldr	r2, [pc, #80]	@ (8007e38 <LmHandlerInit+0x90>)
 8007de8:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 8007dea:	4a14      	ldr	r2, [pc, #80]	@ (8007e3c <LmHandlerInit+0x94>)
 8007dec:	60da      	str	r2, [r3, #12]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 8007dee:	4619      	mov	r1, r3
 8007df0:	2000      	movs	r0, #0
 8007df2:	f7ff ffa1 	bl	8007d38 <LmHandlerPackageRegister>
 8007df6:	b930      	cbnz	r0, 8007e06 <LmHandlerInit+0x5e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 8007df8:	a801      	add	r0, sp, #4
 8007dfa:	f000 fbc9 	bl	8008590 <LmhpPackagesRegistrationInit>
 8007dfe:	b928      	cbnz	r0, 8007e0c <LmHandlerInit+0x64>
}
 8007e00:	b003      	add	sp, #12
 8007e02:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8007e06:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0a:	e7f9      	b.n	8007e00 <LmHandlerInit+0x58>
        return LORAMAC_HANDLER_ERROR;
 8007e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e10:	e7f6      	b.n	8007e00 <LmHandlerInit+0x58>
 8007e12:	bf00      	nop
 8007e14:	200007c4 	.word	0x200007c4
 8007e18:	200007b4 	.word	0x200007b4
 8007e1c:	080075ed 	.word	0x080075ed
 8007e20:	08007a7d 	.word	0x08007a7d
 8007e24:	08007ec1 	.word	0x08007ec1
 8007e28:	08007599 	.word	0x08007599
 8007e2c:	2000079c 	.word	0x2000079c
 8007e30:	0800cc11 	.word	0x0800cc11
 8007e34:	200007f4 	.word	0x200007f4
 8007e38:	0800769d 	.word	0x0800769d
 8007e3c:	080076b9 	.word	0x080076b9

08007e40 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 8007e40:	b161      	cbz	r1, 8007e5c <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 8007e42:	b118      	cbz	r0, 8007e4c <LmHandlerGetVersion+0xc>
 8007e44:	2801      	cmp	r0, #1
 8007e46:	d005      	beq.n	8007e54 <LmHandlerGetVersion+0x14>
 8007e48:	2000      	movs	r0, #0
 8007e4a:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 8007e4c:	4a05      	ldr	r2, [pc, #20]	@ (8007e64 <LmHandlerGetVersion+0x24>)
 8007e4e:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 8007e50:	2000      	movs	r0, #0
            break;
 8007e52:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 8007e54:	4a04      	ldr	r2, [pc, #16]	@ (8007e68 <LmHandlerGetVersion+0x28>)
 8007e56:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8007e58:	2000      	movs	r0, #0
            break;
 8007e5a:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007e5c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	01000400 	.word	0x01000400
 8007e68:	02010001 	.word	0x02010001

08007e6c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8007e6c:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8007e6e:	f003 fe63 	bl	800bb38 <LoRaMacDeInitialization>
 8007e72:	b900      	cbnz	r0, 8007e76 <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8007e74:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007e76:	f06f 0001 	mvn.w	r0, #1
 8007e7a:	e7fb      	b.n	8007e74 <LmHandlerStop+0x8>

08007e7c <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 8007e7c:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 8007e7e:	f002 ff89 	bl	800ad94 <LoRaMacHalt>
 8007e82:	b900      	cbnz	r0, 8007e86 <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8007e84:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007e86:	f06f 0001 	mvn.w	r0, #1
 8007e8a:	e7fb      	b.n	8007e84 <LmHandlerHalt+0x8>

08007e8c <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 8007e8c:	b180      	cbz	r0, 8007eb0 <LmHandlerGetTxPower+0x24>
{
 8007e8e:	b510      	push	{r4, lr}
 8007e90:	b08a      	sub	sp, #40	@ 0x28
 8007e92:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8007e94:	2321      	movs	r3, #33	@ 0x21
 8007e96:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007e9a:	4668      	mov	r0, sp
 8007e9c:	f003 f814 	bl	800aec8 <LoRaMacMibGetRequestConfirm>
 8007ea0:	b948      	cbnz	r0, 8007eb6 <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 8007ea2:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8007ea6:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 8007ea8:	4a04      	ldr	r2, [pc, #16]	@ (8007ebc <LmHandlerGetTxPower+0x30>)
 8007eaa:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 8007eac:	b00a      	add	sp, #40	@ 0x28
 8007eae:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007eb0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007eb4:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eba:	e7f7      	b.n	8007eac <LmHandlerGetTxPower+0x20>
 8007ebc:	200007c8 	.word	0x200007c8

08007ec0 <MlmeConfirm>:
{
 8007ec0:	b510      	push	{r4, lr}
 8007ec2:	b08a      	sub	sp, #40	@ 0x28
 8007ec4:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 8007ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8007f78 <MlmeConfirm+0xb8>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 8007ecc:	7842      	ldrb	r2, [r0, #1]
 8007ece:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8007ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8007f7c <MlmeConfirm+0xbc>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed6:	b10b      	cbz	r3, 8007edc <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 8007ed8:	4827      	ldr	r0, [pc, #156]	@ (8007f78 <MlmeConfirm+0xb8>)
 8007eda:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8007edc:	4621      	mov	r1, r4
 8007ede:	2002      	movs	r0, #2
 8007ee0:	f7ff fb24 	bl	800752c <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8007ee4:	7823      	ldrb	r3, [r4, #0]
 8007ee6:	2b05      	cmp	r3, #5
 8007ee8:	d038      	beq.n	8007f5c <MlmeConfirm+0x9c>
 8007eea:	2b0b      	cmp	r3, #11
 8007eec:	d03e      	beq.n	8007f6c <MlmeConfirm+0xac>
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d001      	beq.n	8007ef6 <MlmeConfirm+0x36>
}
 8007ef2:	b00a      	add	sp, #40	@ 0x28
 8007ef4:	bd10      	pop	{r4, pc}
                mibReq.Type = MIB_DEV_ADDR;
 8007ef6:	2306      	movs	r3, #6
 8007ef8:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8007efc:	4668      	mov	r0, sp
 8007efe:	f002 ffe3 	bl	800aec8 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 8007f02:	9901      	ldr	r1, [sp, #4]
 8007f04:	4b1e      	ldr	r3, [pc, #120]	@ (8007f80 <MlmeConfirm+0xc0>)
 8007f06:	79d8      	ldrb	r0, [r3, #7]
 8007f08:	f006 ff0c 	bl	800ed24 <SecureElementSetDevAddr>
 8007f0c:	b910      	cbnz	r0, 8007f14 <MlmeConfirm+0x54>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007f0e:	9a01      	ldr	r2, [sp, #4]
 8007f10:	4b1c      	ldr	r3, [pc, #112]	@ (8007f84 <MlmeConfirm+0xc4>)
 8007f12:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8007f14:	4c1c      	ldr	r4, [pc, #112]	@ (8007f88 <MlmeConfirm+0xc8>)
 8007f16:	4620      	mov	r0, r4
 8007f18:	f7ff fdf6 	bl	8007b08 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 8007f1c:	1c60      	adds	r0, r4, #1
 8007f1e:	f7ff ffb5 	bl	8007e8c <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007f22:	4b15      	ldr	r3, [pc, #84]	@ (8007f78 <MlmeConfirm+0xb8>)
 8007f24:	785b      	ldrb	r3, [r3, #1]
 8007f26:	b18b      	cbz	r3, 8007f4c <MlmeConfirm+0x8c>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8007f28:	4b15      	ldr	r3, [pc, #84]	@ (8007f80 <MlmeConfirm+0xc0>)
 8007f2a:	22ff      	movs	r2, #255	@ 0xff
 8007f2c:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8007f2e:	4b13      	ldr	r3, [pc, #76]	@ (8007f7c <MlmeConfirm+0xbc>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f34:	b10b      	cbz	r3, 8007f3a <MlmeConfirm+0x7a>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007f36:	4812      	ldr	r0, [pc, #72]	@ (8007f80 <MlmeConfirm+0xc0>)
 8007f38:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8007f78 <MlmeConfirm+0xb8>)
 8007f3c:	785b      	ldrb	r3, [r3, #1]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1d7      	bne.n	8007ef2 <MlmeConfirm+0x32>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8007f42:	4b0f      	ldr	r3, [pc, #60]	@ (8007f80 <MlmeConfirm+0xc0>)
 8007f44:	79d8      	ldrb	r0, [r3, #7]
 8007f46:	f006 ffbb 	bl	800eec0 <SecureElementPrintSessionKeys>
            break;
 8007f4a:	e7d2      	b.n	8007ef2 <MlmeConfirm+0x32>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007f4c:	1f23      	subs	r3, r4, #4
 8007f4e:	2200      	movs	r2, #0
 8007f50:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8007f52:	4b0e      	ldr	r3, [pc, #56]	@ (8007f8c <MlmeConfirm+0xcc>)
 8007f54:	7858      	ldrb	r0, [r3, #1]
 8007f56:	f7ff fd21 	bl	800799c <LmHandlerRequestClass>
 8007f5a:	e7e8      	b.n	8007f2e <MlmeConfirm+0x6e>
                RxParams.LinkCheck = true;
 8007f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007f90 <MlmeConfirm+0xd0>)
 8007f5e:	2201      	movs	r2, #1
 8007f60:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8007f62:	7a22      	ldrb	r2, [r4, #8]
 8007f64:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8007f66:	7a62      	ldrb	r2, [r4, #9]
 8007f68:	74da      	strb	r2, [r3, #19]
            break;
 8007f6a:	e7c2      	b.n	8007ef2 <MlmeConfirm+0x32>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007f6c:	7863      	ldrb	r3, [r4, #1]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0bf      	beq.n	8007ef2 <MlmeConfirm+0x32>
                    LmHandlerDeviceTimeReq( );
 8007f72:	f7ff fc27 	bl	80077c4 <LmHandlerDeviceTimeReq>
}
 8007f76:	e7bc      	b.n	8007ef2 <MlmeConfirm+0x32>
 8007f78:	20000090 	.word	0x20000090
 8007f7c:	200007c4 	.word	0x200007c4
 8007f80:	200000ac 	.word	0x200000ac
 8007f84:	200000b8 	.word	0x200000b8
 8007f88:	200000b0 	.word	0x200000b0
 8007f8c:	200007c8 	.word	0x200007c8
 8007f90:	2000007c 	.word	0x2000007c

08007f94 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8007f94:	b510      	push	{r4, lr}
 8007f96:	b08a      	sub	sp, #40	@ 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 8007f98:	f7ff ff70 	bl	8007e7c <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	b110      	cbz	r0, 8007fa6 <LmHandlerNvmDataStore+0x12>

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	b00a      	add	sp, #40	@ 0x28
 8007fa4:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 8007fa6:	f004 fe3b 	bl	800cc20 <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 8007faa:	f110 0f02 	cmn.w	r0, #2
 8007fae:	d012      	beq.n	8007fd6 <LmHandlerNvmDataStore+0x42>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 8007fb0:	bb00      	cbnz	r0, 8007ff4 <LmHandlerNvmDataStore+0x60>
 8007fb2:	4b15      	ldr	r3, [pc, #84]	@ (8008008 <LmHandlerNvmDataStore+0x74>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	b1fb      	cbz	r3, 8007ffa <LmHandlerNvmDataStore+0x66>
            mibReq.Type = MIB_NVM_CTXS;
 8007fba:	2327      	movs	r3, #39	@ 0x27
 8007fbc:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007fc0:	4668      	mov	r0, sp
 8007fc2:	f002 ff81 	bl	800aec8 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 8007fc6:	4b10      	ldr	r3, [pc, #64]	@ (8008008 <LmHandlerNvmDataStore+0x74>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	f44f 61b8 	mov.w	r1, #1472	@ 0x5c0
 8007fd0:	9801      	ldr	r0, [sp, #4]
 8007fd2:	4798      	blx	r3
 8007fd4:	e001      	b.n	8007fda <LmHandlerNvmDataStore+0x46>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8007fd6:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8007fda:	f004 fe31 	bl	800cc40 <NvmDataMgmtStoreEnd>
 8007fde:	b978      	cbnz	r0, 8008000 <LmHandlerNvmDataStore+0x6c>
    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 8007fe0:	2c00      	cmp	r4, #0
 8007fe2:	d1dd      	bne.n	8007fa0 <LmHandlerNvmDataStore+0xc>
 8007fe4:	4b08      	ldr	r3, [pc, #32]	@ (8008008 <LmHandlerNvmDataStore+0x74>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0d8      	beq.n	8007fa0 <LmHandlerNvmDataStore+0xc>
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8007fee:	2001      	movs	r0, #1
 8007ff0:	4798      	blx	r3
 8007ff2:	e7d5      	b.n	8007fa0 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007ff4:	f04f 34ff 	mov.w	r4, #4294967295
 8007ff8:	e7ef      	b.n	8007fda <LmHandlerNvmDataStore+0x46>
 8007ffa:	f04f 34ff 	mov.w	r4, #4294967295
 8007ffe:	e7ec      	b.n	8007fda <LmHandlerNvmDataStore+0x46>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8008000:	f04f 34ff 	mov.w	r4, #4294967295
 8008004:	e7cc      	b.n	8007fa0 <LmHandlerNvmDataStore+0xc>
 8008006:	bf00      	nop
 8008008:	200007c4 	.word	0x200007c4

0800800c <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 800800c:	4b01      	ldr	r3, [pc, #4]	@ (8008014 <LmhpComplianceIsInitialized+0x8>)
 800800e:	7818      	ldrb	r0, [r3, #0]
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	20000820 	.word	0x20000820

08008018 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 8008018:	4b01      	ldr	r3, [pc, #4]	@ (8008020 <LmhpComplianceIsTxPending+0x8>)
 800801a:	7858      	ldrb	r0, [r3, #1]
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	20000820 	.word	0x20000820

08008024 <LmhpComplianceOnMlmeConfirm>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8008024:	4770      	bx	lr

08008026 <LmhpComplianceOnMlmeIndication>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8008026:	4770      	bx	lr

08008028 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 8008028:	b508      	push	{r3, lr}
    if( ComplianceTestState.DataBufferSize != 0 )
 800802a:	4b05      	ldr	r3, [pc, #20]	@ (8008040 <OnProcessTimer+0x18>)
 800802c:	7a9b      	ldrb	r3, [r3, #10]
 800802e:	b113      	cbz	r3, 8008036 <OnProcessTimer+0xe>
    {
        ComplianceTestState.IsTxPending = true;
 8008030:	4b03      	ldr	r3, [pc, #12]	@ (8008040 <OnProcessTimer+0x18>)
 8008032:	2201      	movs	r2, #1
 8008034:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 8008036:	4b03      	ldr	r3, [pc, #12]	@ (8008044 <OnProcessTimer+0x1c>)
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	b103      	cbz	r3, 800803e <OnProcessTimer+0x16>
    {
        CompliancePackage.OnPackageProcessEvent();
 800803c:	4798      	blx	r3
    }
}
 800803e:	bd08      	pop	{r3, pc}
 8008040:	20000820 	.word	0x20000820
 8008044:	200000d0 	.word	0x200000d0

08008048 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8008048:	4b8c      	ldr	r3, [pc, #560]	@ (800827c <LmhpComplianceOnMcpsIndication+0x234>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 8205 	beq.w	800845c <LmhpComplianceOnMcpsIndication+0x414>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 8008052:	78c3      	ldrb	r3, [r0, #3]
 8008054:	b90b      	cbnz	r3, 800805a <LmhpComplianceOnMcpsIndication+0x12>
 8008056:	7b83      	ldrb	r3, [r0, #14]
 8008058:	b11b      	cbz	r3, 8008062 <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 800805a:	4a88      	ldr	r2, [pc, #544]	@ (800827c <LmhpComplianceOnMcpsIndication+0x234>)
 800805c:	8a13      	ldrh	r3, [r2, #16]
 800805e:	3301      	adds	r3, #1
 8008060:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 8008062:	7b43      	ldrb	r3, [r0, #13]
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 81f9 	beq.w	800845c <LmhpComplianceOnMcpsIndication+0x414>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800806a:	78c3      	ldrb	r3, [r0, #3]
 800806c:	2be0      	cmp	r3, #224	@ 0xe0
 800806e:	f040 81f5 	bne.w	800845c <LmhpComplianceOnMcpsIndication+0x414>
{
 8008072:	b570      	push	{r4, r5, r6, lr}
 8008074:	b096      	sub	sp, #88	@ 0x58
    ComplianceTestState.DataBufferSize = 0;
 8008076:	4b81      	ldr	r3, [pc, #516]	@ (800827c <LmhpComplianceOnMcpsIndication+0x234>)
 8008078:	2200      	movs	r2, #0
 800807a:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 800807c:	6884      	ldr	r4, [r0, #8]
 800807e:	7823      	ldrb	r3, [r4, #0]
 8008080:	2b7f      	cmp	r3, #127	@ 0x7f
 8008082:	f200 8093 	bhi.w	80081ac <LmhpComplianceOnMcpsIndication+0x164>
 8008086:	e8df f013 	tbh	[pc, r3, lsl #1]
 800808a:	0080      	.short	0x0080
 800808c:	00a2009d 	.word	0x00a2009d
 8008090:	00b200aa 	.word	0x00b200aa
 8008094:	00c600bf 	.word	0x00c600bf
 8008098:	00f000df 	.word	0x00f000df
 800809c:	0131011d 	.word	0x0131011d
 80080a0:	00910091 	.word	0x00910091
 80080a4:	00910091 	.word	0x00910091
 80080a8:	00910091 	.word	0x00910091
 80080ac:	00910091 	.word	0x00910091
 80080b0:	00910091 	.word	0x00910091
 80080b4:	00910091 	.word	0x00910091
 80080b8:	00910091 	.word	0x00910091
 80080bc:	00910091 	.word	0x00910091
 80080c0:	00910091 	.word	0x00910091
 80080c4:	00910091 	.word	0x00910091
 80080c8:	01350091 	.word	0x01350091
 80080cc:	0140013c 	.word	0x0140013c
 80080d0:	00910091 	.word	0x00910091
 80080d4:	00910091 	.word	0x00910091
 80080d8:	00910091 	.word	0x00910091
 80080dc:	00910091 	.word	0x00910091
 80080e0:	00910091 	.word	0x00910091
 80080e4:	00910091 	.word	0x00910091
 80080e8:	00910091 	.word	0x00910091
 80080ec:	00910091 	.word	0x00910091
 80080f0:	00910091 	.word	0x00910091
 80080f4:	00910091 	.word	0x00910091
 80080f8:	00910091 	.word	0x00910091
 80080fc:	00910091 	.word	0x00910091
 8008100:	00910091 	.word	0x00910091
 8008104:	00910091 	.word	0x00910091
 8008108:	00910091 	.word	0x00910091
 800810c:	00910091 	.word	0x00910091
 8008110:	00910091 	.word	0x00910091
 8008114:	00910091 	.word	0x00910091
 8008118:	00910091 	.word	0x00910091
 800811c:	00910091 	.word	0x00910091
 8008120:	00910091 	.word	0x00910091
 8008124:	00910091 	.word	0x00910091
 8008128:	00910091 	.word	0x00910091
 800812c:	00910091 	.word	0x00910091
 8008130:	00910091 	.word	0x00910091
 8008134:	00910091 	.word	0x00910091
 8008138:	00910091 	.word	0x00910091
 800813c:	00910091 	.word	0x00910091
 8008140:	00910091 	.word	0x00910091
 8008144:	00910091 	.word	0x00910091
 8008148:	00910091 	.word	0x00910091
 800814c:	00910091 	.word	0x00910091
 8008150:	00910091 	.word	0x00910091
 8008154:	00910091 	.word	0x00910091
 8008158:	00910091 	.word	0x00910091
 800815c:	00910091 	.word	0x00910091
 8008160:	00910091 	.word	0x00910091
 8008164:	00910091 	.word	0x00910091
 8008168:	00910091 	.word	0x00910091
 800816c:	00910091 	.word	0x00910091
 8008170:	00910091 	.word	0x00910091
 8008174:	00910091 	.word	0x00910091
 8008178:	00910091 	.word	0x00910091
 800817c:	00910091 	.word	0x00910091
 8008180:	00910091 	.word	0x00910091
 8008184:	016c014b 	.word	0x016c014b
 8008188:	017a      	.short	0x017a
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800818a:	4b3c      	ldr	r3, [pc, #240]	@ (800827c <LmhpComplianceOnMcpsIndication+0x234>)
 800818c:	68da      	ldr	r2, [r3, #12]
 800818e:	2101      	movs	r1, #1
 8008190:	7299      	strb	r1, [r3, #10]
 8008192:	2000      	movs	r0, #0
 8008194:	7010      	strb	r0, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8008196:	68d8      	ldr	r0, [r3, #12]
 8008198:	7a9a      	ldrb	r2, [r3, #10]
 800819a:	1854      	adds	r4, r2, r1
 800819c:	729c      	strb	r4, [r3, #10]
 800819e:	2406      	movs	r4, #6
 80081a0:	5484      	strb	r4, [r0, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 80081a2:	68d8      	ldr	r0, [r3, #12]
 80081a4:	7a9a      	ldrb	r2, [r3, #10]
 80081a6:	1854      	adds	r4, r2, r1
 80081a8:	729c      	strb	r4, [r3, #10]
 80081aa:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 80081ac:	4b33      	ldr	r3, [pc, #204]	@ (800827c <LmhpComplianceOnMcpsIndication+0x234>)
 80081ae:	7a9b      	ldrb	r3, [r3, #10]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 814c 	beq.w	800844e <LmhpComplianceOnMcpsIndication+0x406>
        if( ProcessTimer.IsRunning == 0U)
 80081b6:	4b32      	ldr	r3, [pc, #200]	@ (8008280 <LmhpComplianceOnMcpsIndication+0x238>)
 80081b8:	7a5b      	ldrb	r3, [r3, #9]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 813d 	beq.w	800843a <LmhpComplianceOnMcpsIndication+0x3f2>
}
 80081c0:	b016      	add	sp, #88	@ 0x58
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
                ComplianceTestState.IsResetCmdPending = true;
 80081c4:	4b2d      	ldr	r3, [pc, #180]	@ (800827c <LmhpComplianceOnMcpsIndication+0x234>)
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 80081cc:	e7ee      	b.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                if( CompliancePackage.OnJoinRequest != NULL )
 80081ce:	4b2d      	ldr	r3, [pc, #180]	@ (8008284 <LmhpComplianceOnMcpsIndication+0x23c>)
 80081d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d0ea      	beq.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80081d6:	2101      	movs	r1, #1
 80081d8:	2002      	movs	r0, #2
 80081da:	4798      	blx	r3
 80081dc:	e7e6      	b.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 80081de:	7862      	ldrb	r2, [r4, #1]
 80081e0:	4b26      	ldr	r3, [pc, #152]	@ (800827c <LmhpComplianceOnMcpsIndication+0x234>)
 80081e2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                break;
 80081ec:	e7de      	b.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type            = MIB_ADR;
 80081ee:	2304      	movs	r3, #4
 80081f0:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 80081f4:	7863      	ldrb	r3, [r4, #1]
 80081f6:	3b00      	subs	r3, #0
 80081f8:	bf18      	it	ne
 80081fa:	2301      	movne	r3, #1
 80081fc:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008200:	a801      	add	r0, sp, #4
 8008202:	f002 ffd5 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
                break;
 8008206:	e7d1      	b.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8008208:	7860      	ldrb	r0, [r4, #1]
 800820a:	3800      	subs	r0, #0
 800820c:	bf18      	it	ne
 800820e:	2001      	movne	r0, #1
 8008210:	f003 fc74 	bl	800bafc <LoRaMacTestSetDutyCycleOn>
                break;
 8008214:	e7ca      	b.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8008216:	ad01      	add	r5, sp, #4
 8008218:	4e1b      	ldr	r6, [pc, #108]	@ (8008288 <LmhpComplianceOnMcpsIndication+0x240>)
 800821a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800821c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800821e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008222:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008226:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800822a:	7863      	ldrb	r3, [r4, #1]
                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800822c:	2b0a      	cmp	r3, #10
 800822e:	d8bd      	bhi.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8008230:	4a16      	ldr	r2, [pc, #88]	@ (800828c <LmhpComplianceOnMcpsIndication+0x244>)
 8008232:	6812      	ldr	r2, [r2, #0]
 8008234:	6852      	ldr	r2, [r2, #4]
 8008236:	2a00      	cmp	r2, #0
 8008238:	d0b8      	beq.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800823a:	a916      	add	r1, sp, #88	@ 0x58
 800823c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008240:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8008244:	4790      	blx	r2
                break;
 8008246:	e7b1      	b.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8008248:	7862      	ldrb	r2, [r4, #1]
                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800824a:	1e53      	subs	r3, r2, #1
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b01      	cmp	r3, #1
 8008250:	d8ac      	bhi.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8008252:	1e50      	subs	r0, r2, #1
 8008254:	bf18      	it	ne
 8008256:	2001      	movne	r0, #1
 8008258:	4b08      	ldr	r3, [pc, #32]	@ (800827c <LmhpComplianceOnMcpsIndication+0x234>)
 800825a:	7218      	strb	r0, [r3, #8]
                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800825c:	4b0b      	ldr	r3, [pc, #44]	@ (800828c <LmhpComplianceOnMcpsIndication+0x244>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0a2      	beq.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 8008266:	4798      	blx	r3
 8008268:	e7a0      	b.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800826a:	4b04      	ldr	r3, [pc, #16]	@ (800827c <LmhpComplianceOnMcpsIndication+0x234>)
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	2101      	movs	r1, #1
 8008270:	7299      	strb	r1, [r3, #10]
 8008272:	2308      	movs	r3, #8
 8008274:	7013      	strb	r3, [r2, #0]
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8008276:	460b      	mov	r3, r1
 8008278:	e01b      	b.n	80082b2 <LmhpComplianceOnMcpsIndication+0x26a>
 800827a:	bf00      	nop
 800827c:	20000820 	.word	0x20000820
 8008280:	20000804 	.word	0x20000804
 8008284:	200000d0 	.word	0x200000d0
 8008288:	080119ec 	.word	0x080119ec
 800828c:	2000081c 	.word	0x2000081c
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8008290:	6882      	ldr	r2, [r0, #8]
 8008292:	f101 0c01 	add.w	ip, r1, #1
 8008296:	5c52      	ldrb	r2, [r2, r1]
 8008298:	4971      	ldr	r1, [pc, #452]	@ (8008460 <LmhpComplianceOnMcpsIndication+0x418>)
 800829a:	68cd      	ldr	r5, [r1, #12]
 800829c:	7a8c      	ldrb	r4, [r1, #10]
 800829e:	f104 0e01 	add.w	lr, r4, #1
 80082a2:	f881 e00a 	strb.w	lr, [r1, #10]
 80082a6:	3201      	adds	r2, #1
 80082a8:	552a      	strb	r2, [r5, r4]
                     i++ )
 80082aa:	3301      	adds	r3, #1
 80082ac:	b2db      	uxtb	r3, r3
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 80082ae:	fa5f f18c 	uxtb.w	r1, ip
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 80082b2:	4a6b      	ldr	r2, [pc, #428]	@ (8008460 <LmhpComplianceOnMcpsIndication+0x418>)
 80082b4:	7a52      	ldrb	r2, [r2, #9]
 80082b6:	7b04      	ldrb	r4, [r0, #12]
 80082b8:	42a2      	cmp	r2, r4
 80082ba:	bf28      	it	cs
 80082bc:	4622      	movcs	r2, r4
 80082be:	429a      	cmp	r2, r3
 80082c0:	d8e6      	bhi.n	8008290 <LmhpComplianceOnMcpsIndication+0x248>
 80082c2:	e773      	b.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 80082c4:	4b66      	ldr	r3, [pc, #408]	@ (8008460 <LmhpComplianceOnMcpsIndication+0x418>)
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	2101      	movs	r1, #1
 80082ca:	7299      	strb	r1, [r3, #10]
 80082cc:	2109      	movs	r1, #9
 80082ce:	7011      	strb	r1, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 80082d0:	8a18      	ldrh	r0, [r3, #16]
 80082d2:	68d9      	ldr	r1, [r3, #12]
 80082d4:	7a9a      	ldrb	r2, [r3, #10]
 80082d6:	1c54      	adds	r4, r2, #1
 80082d8:	729c      	strb	r4, [r3, #10]
 80082da:	5488      	strb	r0, [r1, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 80082dc:	8a1a      	ldrh	r2, [r3, #16]
 80082de:	68d8      	ldr	r0, [r3, #12]
 80082e0:	7a99      	ldrb	r1, [r3, #10]
 80082e2:	1c4c      	adds	r4, r1, #1
 80082e4:	729c      	strb	r4, [r3, #10]
 80082e6:	0a13      	lsrs	r3, r2, #8
 80082e8:	5443      	strb	r3, [r0, r1]
                break;
 80082ea:	e75f      	b.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.RxAppCnt = 0;
 80082ec:	4b5c      	ldr	r3, [pc, #368]	@ (8008460 <LmhpComplianceOnMcpsIndication+0x418>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	821a      	strh	r2, [r3, #16]
                break;
 80082f2:	e75b      	b.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                mlmeReq.Type = MLME_LINK_CHECK;
 80082f4:	2305      	movs	r3, #5
 80082f6:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 80082fa:	a801      	add	r0, sp, #4
 80082fc:	f003 fa0c 	bl	800b718 <LoRaMacMlmeRequest>
                break;
 8008300:	e754      	b.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                CompliancePackage.OnDeviceTimeRequest( );
 8008302:	4b58      	ldr	r3, [pc, #352]	@ (8008464 <LmhpComplianceOnMcpsIndication+0x41c>)
 8008304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008306:	4798      	blx	r3
                break;
 8008308:	e750      	b.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800830a:	7860      	ldrb	r0, [r4, #1]
 800830c:	4b54      	ldr	r3, [pc, #336]	@ (8008460 <LmhpComplianceOnMcpsIndication+0x418>)
 800830e:	7558      	strb	r0, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8008310:	4b55      	ldr	r3, [pc, #340]	@ (8008468 <LmhpComplianceOnMcpsIndication+0x420>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	2b00      	cmp	r3, #0
 8008318:	f43f af48 	beq.w	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800831c:	4798      	blx	r3
 800831e:	e745      	b.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                if( mcpsIndication->BufferSize == 7 )
 8008320:	7b03      	ldrb	r3, [r0, #12]
 8008322:	2b07      	cmp	r3, #7
 8008324:	f47f af42 	bne.w	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                    mlmeReq.Type = MLME_TXCW;
 8008328:	2306      	movs	r3, #6
 800832a:	f88d 3004 	strb.w	r3, [sp, #4]
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800832e:	7863      	ldrb	r3, [r4, #1]
 8008330:	78a2      	ldrb	r2, [r4, #2]
 8008332:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    mlmeReq.Req.TxCw.Timeout =
 8008336:	f8ad 3008 	strh.w	r3, [sp, #8]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800833a:	78e3      	ldrb	r3, [r4, #3]
 800833c:	7922      	ldrb	r2, [r4, #4]
 800833e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8008342:	7962      	ldrb	r2, [r4, #5]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8008344:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8008348:	2264      	movs	r2, #100	@ 0x64
 800834a:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800834e:	9303      	str	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8008350:	6883      	ldr	r3, [r0, #8]
 8008352:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8008356:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacMlmeRequest( &mlmeReq );
 800835a:	a801      	add	r0, sp, #4
 800835c:	f003 f9dc 	bl	800b718 <LoRaMacMlmeRequest>
                break;
 8008360:	e724      	b.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8008362:	233b      	movs	r3, #59	@ 0x3b
 8008364:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
                mibReq.Param.IsCertPortOn = false;
 8008368:	2300      	movs	r3, #0
 800836a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
                LoRaMacMibSetRequestConfirm( &mibReq );
 800836e:	a80c      	add	r0, sp, #48	@ 0x30
 8008370:	f002 ff1e 	bl	800b1b0 <LoRaMacMibSetRequestConfirm>
                ComplianceTestState.IsResetCmdPending = true;
 8008374:	4b3a      	ldr	r3, [pc, #232]	@ (8008460 <LmhpComplianceOnMcpsIndication+0x418>)
 8008376:	2201      	movs	r2, #1
 8008378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800837c:	e716      	b.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_LORAWAN_VERSION;
 800837e:	232a      	movs	r3, #42	@ 0x2a
 8008380:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8008384:	a801      	add	r0, sp, #4
 8008386:	f002 fd9f 	bl	800aec8 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800838a:	9902      	ldr	r1, [sp, #8]
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800838c:	9a03      	ldr	r2, [sp, #12]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800838e:	4b34      	ldr	r3, [pc, #208]	@ (8008460 <LmhpComplianceOnMcpsIndication+0x418>)
 8008390:	68dc      	ldr	r4, [r3, #12]
 8008392:	7a98      	ldrb	r0, [r3, #10]
 8008394:	1c45      	adds	r5, r0, #1
 8008396:	729d      	strb	r5, [r3, #10]
 8008398:	257f      	movs	r5, #127	@ 0x7f
 800839a:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800839c:	4832      	ldr	r0, [pc, #200]	@ (8008468 <LmhpComplianceOnMcpsIndication+0x420>)
 800839e:	6800      	ldr	r0, [r0, #0]
 80083a0:	68dd      	ldr	r5, [r3, #12]
 80083a2:	7a9c      	ldrb	r4, [r3, #10]
 80083a4:	1c66      	adds	r6, r4, #1
 80083a6:	729e      	strb	r6, [r3, #10]
 80083a8:	78c6      	ldrb	r6, [r0, #3]
 80083aa:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 80083ac:	68dd      	ldr	r5, [r3, #12]
 80083ae:	7a9c      	ldrb	r4, [r3, #10]
 80083b0:	1c66      	adds	r6, r4, #1
 80083b2:	729e      	strb	r6, [r3, #10]
 80083b4:	7886      	ldrb	r6, [r0, #2]
 80083b6:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 80083b8:	68dd      	ldr	r5, [r3, #12]
 80083ba:	7a9c      	ldrb	r4, [r3, #10]
 80083bc:	1c66      	adds	r6, r4, #1
 80083be:	729e      	strb	r6, [r3, #10]
 80083c0:	7846      	ldrb	r6, [r0, #1]
 80083c2:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 80083c4:	68dd      	ldr	r5, [r3, #12]
 80083c6:	7a9c      	ldrb	r4, [r3, #10]
 80083c8:	1c66      	adds	r6, r4, #1
 80083ca:	729e      	strb	r6, [r3, #10]
 80083cc:	7800      	ldrb	r0, [r0, #0]
 80083ce:	5528      	strb	r0, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 80083d0:	68dc      	ldr	r4, [r3, #12]
 80083d2:	7a98      	ldrb	r0, [r3, #10]
 80083d4:	1c45      	adds	r5, r0, #1
 80083d6:	729d      	strb	r5, [r3, #10]
 80083d8:	f3c1 6507 	ubfx	r5, r1, #24, #8
 80083dc:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 80083de:	68dc      	ldr	r4, [r3, #12]
 80083e0:	7a98      	ldrb	r0, [r3, #10]
 80083e2:	1c45      	adds	r5, r0, #1
 80083e4:	729d      	strb	r5, [r3, #10]
 80083e6:	f3c1 4507 	ubfx	r5, r1, #16, #8
 80083ea:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 80083ec:	68dc      	ldr	r4, [r3, #12]
 80083ee:	7a98      	ldrb	r0, [r3, #10]
 80083f0:	1c45      	adds	r5, r0, #1
 80083f2:	729d      	strb	r5, [r3, #10]
 80083f4:	f3c1 2507 	ubfx	r5, r1, #8, #8
 80083f8:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 80083fa:	68dc      	ldr	r4, [r3, #12]
 80083fc:	7a98      	ldrb	r0, [r3, #10]
 80083fe:	1c45      	adds	r5, r0, #1
 8008400:	729d      	strb	r5, [r3, #10]
 8008402:	5421      	strb	r1, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8008404:	68d8      	ldr	r0, [r3, #12]
 8008406:	7a99      	ldrb	r1, [r3, #10]
 8008408:	1c4c      	adds	r4, r1, #1
 800840a:	729c      	strb	r4, [r3, #10]
 800840c:	f3c2 6407 	ubfx	r4, r2, #24, #8
 8008410:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8008412:	68d8      	ldr	r0, [r3, #12]
 8008414:	7a99      	ldrb	r1, [r3, #10]
 8008416:	1c4c      	adds	r4, r1, #1
 8008418:	729c      	strb	r4, [r3, #10]
 800841a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800841e:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8008420:	68d8      	ldr	r0, [r3, #12]
 8008422:	7a99      	ldrb	r1, [r3, #10]
 8008424:	1c4c      	adds	r4, r1, #1
 8008426:	729c      	strb	r4, [r3, #10]
 8008428:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800842c:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800842e:	68d8      	ldr	r0, [r3, #12]
 8008430:	7a99      	ldrb	r1, [r3, #10]
 8008432:	1c4c      	adds	r4, r1, #1
 8008434:	729c      	strb	r4, [r3, #10]
 8008436:	5442      	strb	r2, [r0, r1]
                break;
 8008438:	e6b8      	b.n	80081ac <LmhpComplianceOnMcpsIndication+0x164>
            TimerSetValue( &ProcessTimer, 1000 );
 800843a:	4c0c      	ldr	r4, [pc, #48]	@ (800846c <LmhpComplianceOnMcpsIndication+0x424>)
 800843c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008440:	4620      	mov	r0, r4
 8008442:	f009 f84b 	bl	80114dc <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 8008446:	4620      	mov	r0, r4
 8008448:	f009 f802 	bl	8011450 <UTIL_TIMER_Start>
 800844c:	e6b8      	b.n	80081c0 <LmhpComplianceOnMcpsIndication+0x178>
        TimerStop( &ProcessTimer );
 800844e:	4807      	ldr	r0, [pc, #28]	@ (800846c <LmhpComplianceOnMcpsIndication+0x424>)
 8008450:	f008 ffa4 	bl	801139c <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8008454:	4b02      	ldr	r3, [pc, #8]	@ (8008460 <LmhpComplianceOnMcpsIndication+0x418>)
 8008456:	2200      	movs	r2, #0
 8008458:	705a      	strb	r2, [r3, #1]
 800845a:	e6b1      	b.n	80081c0 <LmhpComplianceOnMcpsIndication+0x178>
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	20000820 	.word	0x20000820
 8008464:	200000d0 	.word	0x200000d0
 8008468:	2000081c 	.word	0x2000081c
 800846c:	20000804 	.word	0x20000804

08008470 <LmhpComplianceProcess>:
{
 8008470:	b530      	push	{r4, r5, lr}
 8008472:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 8008474:	4b27      	ldr	r3, [pc, #156]	@ (8008514 <LmhpComplianceProcess+0xa4>)
 8008476:	785b      	ldrb	r3, [r3, #1]
 8008478:	b993      	cbnz	r3, 80084a0 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800847a:	4b26      	ldr	r3, [pc, #152]	@ (8008514 <LmhpComplianceProcess+0xa4>)
 800847c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008480:	2b00      	cmp	r3, #0
 8008482:	d13d      	bne.n	8008500 <LmhpComplianceProcess+0x90>
    if( ComplianceTestState.IsResetCmdPending == true )
 8008484:	4b23      	ldr	r3, [pc, #140]	@ (8008514 <LmhpComplianceProcess+0xa4>)
 8008486:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800848a:	b13b      	cbz	r3, 800849c <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 800848c:	4b21      	ldr	r3, [pc, #132]	@ (8008514 <LmhpComplianceProcess+0xa4>)
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        if( CompliancePackage.OnSystemReset != NULL )
 8008494:	4b20      	ldr	r3, [pc, #128]	@ (8008518 <LmhpComplianceProcess+0xa8>)
 8008496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008498:	b103      	cbz	r3, 800849c <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 800849a:	4798      	blx	r3
}
 800849c:	b003      	add	sp, #12
 800849e:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 80084a0:	f008 ff3c 	bl	801131c <UTIL_TIMER_GetCurrentTime>
 80084a4:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 80084a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008514 <LmhpComplianceProcess+0xa4>)
 80084a8:	685d      	ldr	r5, [r3, #4]
 80084aa:	f7ff f99f 	bl	80077ec <LmHandlerGetDutyCycleWaitTime>
 80084ae:	4405      	add	r5, r0
 80084b0:	42a5      	cmp	r5, r4
 80084b2:	d2e7      	bcs.n	8008484 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 80084b4:	4b17      	ldr	r3, [pc, #92]	@ (8008514 <LmhpComplianceProcess+0xa4>)
 80084b6:	7a9b      	ldrb	r3, [r3, #10]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d0e3      	beq.n	8008484 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData =
 80084bc:	22e0      	movs	r2, #224	@ 0xe0
 80084be:	f88d 2000 	strb.w	r2, [sp]
 80084c2:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 80084c6:	4b13      	ldr	r3, [pc, #76]	@ (8008514 <LmhpComplianceProcess+0xa4>)
 80084c8:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData =
 80084ca:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 80084cc:	2201      	movs	r2, #1
 80084ce:	7a19      	ldrb	r1, [r3, #8]
 80084d0:	4668      	mov	r0, sp
 80084d2:	f7ff f9b9 	bl	8007848 <LmHandlerSend>
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 80084d6:	b110      	cbz	r0, 80084de <LmhpComplianceProcess+0x6e>
 80084d8:	f110 0f07 	cmn.w	r0, #7
 80084dc:	d106      	bne.n	80084ec <LmhpComplianceProcess+0x7c>
                    ComplianceTestState.IsTxPending = false;
 80084de:	4b0d      	ldr	r3, [pc, #52]	@ (8008514 <LmhpComplianceProcess+0xa4>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 80084e4:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 80084e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008514 <LmhpComplianceProcess+0xa4>)
 80084e8:	605c      	str	r4, [r3, #4]
 80084ea:	e7cb      	b.n	8008484 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1500 );
 80084ec:	4d0b      	ldr	r5, [pc, #44]	@ (800851c <LmhpComplianceProcess+0xac>)
 80084ee:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80084f2:	4628      	mov	r0, r5
 80084f4:	f008 fff2 	bl	80114dc <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 80084f8:	4628      	mov	r0, r5
 80084fa:	f008 ffa9 	bl	8011450 <UTIL_TIMER_Start>
 80084fe:	e7f2      	b.n	80084e6 <LmhpComplianceProcess+0x76>
            ComplianceTestState.IsClassReqCmdPending = false;
 8008500:	4b04      	ldr	r3, [pc, #16]	@ (8008514 <LmhpComplianceProcess+0xa4>)
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8008508:	f893 0036 	ldrb.w	r0, [r3, #54]	@ 0x36
 800850c:	f7ff fa46 	bl	800799c <LmHandlerRequestClass>
 8008510:	e7b8      	b.n	8008484 <LmhpComplianceProcess+0x14>
 8008512:	bf00      	nop
 8008514:	20000820 	.word	0x20000820
 8008518:	200000d0 	.word	0x200000d0
 800851c:	20000804 	.word	0x20000804

08008520 <LmhpComplianceInit>:
{
 8008520:	b530      	push	{r4, r5, lr}
 8008522:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8008524:	b188      	cbz	r0, 800854a <LmhpComplianceInit+0x2a>
 8008526:	4603      	mov	r3, r0
 8008528:	b179      	cbz	r1, 800854a <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800852a:	4813      	ldr	r0, [pc, #76]	@ (8008578 <LmhpComplianceInit+0x58>)
 800852c:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800852e:	4b13      	ldr	r3, [pc, #76]	@ (800857c <LmhpComplianceInit+0x5c>)
 8008530:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8008532:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 8008534:	2201      	movs	r2, #1
 8008536:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8008538:	2200      	movs	r2, #0
 800853a:	9200      	str	r2, [sp, #0]
 800853c:	4b10      	ldr	r3, [pc, #64]	@ (8008580 <LmhpComplianceInit+0x60>)
 800853e:	f04f 31ff 	mov.w	r1, #4294967295
 8008542:	4810      	ldr	r0, [pc, #64]	@ (8008584 <LmhpComplianceInit+0x64>)
 8008544:	f008 fecc 	bl	80112e0 <UTIL_TIMER_Create>
 8008548:	e004      	b.n	8008554 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 800854a:	2300      	movs	r3, #0
 800854c:	4a0a      	ldr	r2, [pc, #40]	@ (8008578 <LmhpComplianceInit+0x58>)
 800854e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8008550:	4a0a      	ldr	r2, [pc, #40]	@ (800857c <LmhpComplianceInit+0x5c>)
 8008552:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 8008554:	4c09      	ldr	r4, [pc, #36]	@ (800857c <LmhpComplianceInit+0x5c>)
 8008556:	2500      	movs	r5, #0
 8008558:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800855a:	2220      	movs	r2, #32
 800855c:	4629      	mov	r1, r5
 800855e:	f104 0014 	add.w	r0, r4, #20
 8008562:	f006 fd06 	bl	800ef72 <memset1>
    ComplianceTestState.IsTxPending = false;
 8008566:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 8008568:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800856a:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800856e:	f884 5035 	strb.w	r5, [r4, #53]	@ 0x35
}
 8008572:	b003      	add	sp, #12
 8008574:	bd30      	pop	{r4, r5, pc}
 8008576:	bf00      	nop
 8008578:	2000081c 	.word	0x2000081c
 800857c:	20000820 	.word	0x20000820
 8008580:	08008029 	.word	0x08008029
 8008584:	20000804 	.word	0x20000804

08008588 <LmhpCompliancePackageFactory>:
}
 8008588:	4800      	ldr	r0, [pc, #0]	@ (800858c <LmhpCompliancePackageFactory+0x4>)
 800858a:	4770      	bx	lr
 800858c:	200000d0 	.word	0x200000d0

08008590 <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 8008590:	2000      	movs	r0, #0
 8008592:	4770      	bx	lr

08008594 <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8008594:	f04f 30ff 	mov.w	r0, #4294967295
 8008598:	4770      	bx	lr
	...

0800859c <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800859c:	4b07      	ldr	r3, [pc, #28]	@ (80085bc <UpdateRxSlotIdleState+0x20>)
 800859e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d004      	beq.n	80085b0 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80085a6:	4b06      	ldr	r3, [pc, #24]	@ (80085c0 <UpdateRxSlotIdleState+0x24>)
 80085a8:	2206      	movs	r2, #6
 80085aa:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
 80085ae:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80085b0:	4b03      	ldr	r3, [pc, #12]	@ (80085c0 <UpdateRxSlotIdleState+0x24>)
 80085b2:	2202      	movs	r2, #2
 80085b4:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	20008000 	.word	0x20008000
 80085c0:	20000900 	.word	0x20000900

080085c4 <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 80085c4:	4b01      	ldr	r3, [pc, #4]	@ (80085cc <LoRaMacEnableRequests+0x8>)
 80085c6:	f883 0492 	strb.w	r0, [r3, #1170]	@ 0x492
}
 80085ca:	4770      	bx	lr
 80085cc:	20000900 	.word	0x20000900

080085d0 <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 80085d0:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80085d2:	4b15      	ldr	r3, [pc, #84]	@ (8008628 <LoRaMacHandleIndicationEvents+0x58>)
 80085d4:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80085d8:	f013 0f08 	tst.w	r3, #8
 80085dc:	d00e      	beq.n	80085fc <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80085de:	4812      	ldr	r0, [pc, #72]	@ (8008628 <LoRaMacHandleIndicationEvents+0x58>)
 80085e0:	f890 3491 	ldrb.w	r3, [r0, #1169]	@ 0x491
 80085e4:	f36f 03c3 	bfc	r3, #3, #1
 80085e8:	f880 3491 	strb.w	r3, [r0, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80085ec:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	f200 418c 	addw	r1, r0, #1164	@ 0x48c
 80085f6:	f500 608d 	add.w	r0, r0, #1128	@ 0x468
 80085fa:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80085fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008628 <LoRaMacHandleIndicationEvents+0x58>)
 80085fe:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8008602:	f013 0f02 	tst.w	r3, #2
 8008606:	d00e      	beq.n	8008626 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8008608:	4807      	ldr	r0, [pc, #28]	@ (8008628 <LoRaMacHandleIndicationEvents+0x58>)
 800860a:	f890 3491 	ldrb.w	r3, [r0, #1169]	@ 0x491
 800860e:	f36f 0341 	bfc	r3, #1, #1
 8008612:	f880 3491 	strb.w	r3, [r0, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8008616:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f200 418c 	addw	r1, r0, #1164	@ 0x48c
 8008620:	f500 6084 	add.w	r0, r0, #1056	@ 0x420
 8008624:	4798      	blx	r3
    }
}
 8008626:	bd08      	pop	{r3, pc}
 8008628:	20000900 	.word	0x20000900

0800862c <CheckForMinimumAbpDatarate>:
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 800862c:	b110      	cbz	r0, 8008634 <CheckForMinimumAbpDatarate+0x8>
 800862e:	2901      	cmp	r1, #1
 8008630:	d001      	beq.n	8008636 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 8008632:	2000      	movs	r0, #0
}
 8008634:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8008636:	2a00      	cmp	r2, #0
 8008638:	d0fc      	beq.n	8008634 <CheckForMinimumAbpDatarate+0x8>
    return false;
 800863a:	2000      	movs	r0, #0
 800863c:	4770      	bx	lr
	...

08008640 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008640:	4b07      	ldr	r3, [pc, #28]	@ (8008660 <LoRaMacCheckForRxAbort+0x20>)
 8008642:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8008646:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800864a:	d008      	beq.n	800865e <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800864c:	4a04      	ldr	r2, [pc, #16]	@ (8008660 <LoRaMacCheckForRxAbort+0x20>)
 800864e:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8008652:	f8c2 1340 	str.w	r1, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008656:	f023 0382 	bic.w	r3, r3, #130	@ 0x82
 800865a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800865e:	4770      	bx	lr
 8008660:	20000900 	.word	0x20000900

08008664 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8008664:	4b06      	ldr	r3, [pc, #24]	@ (8008680 <CalculateBackOff+0x1c>)
 8008666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008668:	b94b      	cbnz	r3, 800867e <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800866a:	4a05      	ldr	r2, [pc, #20]	@ (8008680 <CalculateBackOff+0x1c>)
 800866c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	@ 0x120
 8008670:	4904      	ldr	r1, [pc, #16]	@ (8008684 <CalculateBackOff+0x20>)
 8008672:	f8d1 141c 	ldr.w	r1, [r1, #1052]	@ 0x41c
 8008676:	3b01      	subs	r3, #1
 8008678:	fb01 f303 	mul.w	r3, r1, r3
 800867c:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 800867e:	4770      	bx	lr
 8008680:	20008000 	.word	0x20008000
 8008684:	20000900 	.word	0x20000900

08008688 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8008688:	b508      	push	{r3, lr}
 800868a:	4684      	mov	ip, r0
 800868c:	4608      	mov	r0, r1
 800868e:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008690:	4b06      	ldr	r3, [pc, #24]	@ (80086ac <SetTxContinuousWave+0x24>)
 8008692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008694:	4662      	mov	r2, ip
 8008696:	b249      	sxtb	r1, r1
 8008698:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800869a:	4a05      	ldr	r2, [pc, #20]	@ (80086b0 <SetTxContinuousWave+0x28>)
 800869c:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 80086a0:	f043 0302 	orr.w	r3, r3, #2
 80086a4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
}
 80086a8:	2000      	movs	r0, #0
 80086aa:	bd08      	pop	{r3, pc}
 80086ac:	080126d4 	.word	0x080126d4
 80086b0:	20000900 	.word	0x20000900

080086b4 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80086b4:	4602      	mov	r2, r0
 80086b6:	b1f8      	cbz	r0, 80086f8 <DetermineFrameType+0x44>
 80086b8:	b301      	cbz	r1, 80086fc <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80086ba:	7b03      	ldrb	r3, [r0, #12]
 80086bc:	f013 030f 	ands.w	r3, r3, #15
 80086c0:	d005      	beq.n	80086ce <DetermineFrameType+0x1a>
 80086c2:	f890 0020 	ldrb.w	r0, [r0, #32]
 80086c6:	b110      	cbz	r0, 80086ce <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 80086c8:	2000      	movs	r0, #0
 80086ca:	7008      	strb	r0, [r1, #0]
 80086cc:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80086ce:	f892 0028 	ldrb.w	r0, [r2, #40]	@ 0x28
 80086d2:	b910      	cbnz	r0, 80086da <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 80086d4:	2301      	movs	r3, #1
 80086d6:	700b      	strb	r3, [r1, #0]
 80086d8:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80086da:	b92b      	cbnz	r3, 80086e8 <DetermineFrameType+0x34>
 80086dc:	f892 0020 	ldrb.w	r0, [r2, #32]
 80086e0:	b910      	cbnz	r0, 80086e8 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 80086e2:	2302      	movs	r3, #2
 80086e4:	700b      	strb	r3, [r1, #0]
 80086e6:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80086e8:	b953      	cbnz	r3, 8008700 <DetermineFrameType+0x4c>
 80086ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80086ee:	b14a      	cbz	r2, 8008704 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 80086f0:	2203      	movs	r2, #3
 80086f2:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 80086f4:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 80086f6:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80086f8:	2003      	movs	r0, #3
 80086fa:	4770      	bx	lr
 80086fc:	2003      	movs	r0, #3
 80086fe:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8008700:	2018      	movs	r0, #24
 8008702:	4770      	bx	lr
 8008704:	2018      	movs	r0, #24
}
 8008706:	4770      	bx	lr

08008708 <CheckRetrans>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 8008708:	4288      	cmp	r0, r1
 800870a:	d201      	bcs.n	8008710 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 800870c:	2000      	movs	r0, #0
 800870e:	4770      	bx	lr
        return true;
 8008710:	2001      	movs	r0, #1
}
 8008712:	4770      	bx	lr

08008714 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8008714:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8008716:	4b0b      	ldr	r3, [pc, #44]	@ (8008744 <CheckRetransUnconfirmedUplink+0x30>)
 8008718:	f893 1068 	ldrb.w	r1, [r3, #104]	@ 0x68
 800871c:	4b0a      	ldr	r3, [pc, #40]	@ (8008748 <CheckRetransUnconfirmedUplink+0x34>)
 800871e:	f893 0418 	ldrb.w	r0, [r3, #1048]	@ 0x418
 8008722:	f7ff fff1 	bl	8008708 <CheckRetrans>
 8008726:	b950      	cbnz	r0, 800873e <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008728:	4b07      	ldr	r3, [pc, #28]	@ (8008748 <CheckRetransUnconfirmedUplink+0x34>)
 800872a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800872e:	f013 0f02 	tst.w	r3, #2
 8008732:	d004      	beq.n	800873e <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008734:	4b04      	ldr	r3, [pc, #16]	@ (8008748 <CheckRetransUnconfirmedUplink+0x34>)
 8008736:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800873a:	2b01      	cmp	r3, #1
 800873c:	d900      	bls.n	8008740 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 800873e:	bd08      	pop	{r3, pc}
            return true;
 8008740:	2001      	movs	r0, #1
 8008742:	e7fc      	b.n	800873e <CheckRetransUnconfirmedUplink+0x2a>
 8008744:	20008000 	.word	0x20008000
 8008748:	20000900 	.word	0x20000900

0800874c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800874c:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800874e:	4b09      	ldr	r3, [pc, #36]	@ (8008774 <CheckRetransConfirmedUplink+0x28>)
 8008750:	f893 1068 	ldrb.w	r1, [r3, #104]	@ 0x68
 8008754:	4b08      	ldr	r3, [pc, #32]	@ (8008778 <CheckRetransConfirmedUplink+0x2c>)
 8008756:	f893 0418 	ldrb.w	r0, [r3, #1048]	@ 0x418
 800875a:	f7ff ffd5 	bl	8008708 <CheckRetrans>
 800875e:	b940      	cbnz	r0, 8008772 <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008760:	4b05      	ldr	r3, [pc, #20]	@ (8008778 <CheckRetransConfirmedUplink+0x2c>)
 8008762:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8008766:	f013 0f02 	tst.w	r3, #2
 800876a:	d002      	beq.n	8008772 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800876c:	4b02      	ldr	r3, [pc, #8]	@ (8008778 <CheckRetransConfirmedUplink+0x2c>)
 800876e:	f893 0444 	ldrb.w	r0, [r3, #1092]	@ 0x444
        {
            return true;
        }
    }
    return false;
}
 8008772:	bd08      	pop	{r3, pc}
 8008774:	20008000 	.word	0x20008000
 8008778:	20000900 	.word	0x20000900

0800877c <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 800877c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008780:	d000      	beq.n	8008784 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 8008782:	3001      	adds	r0, #1
    }
    return counter;
}
 8008784:	4770      	bx	lr
	...

08008788 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8008788:	b510      	push	{r4, lr}
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800878a:	4b12      	ldr	r3, [pc, #72]	@ (80087d4 <StopRetransmission+0x4c>)
 800878c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8008790:	f013 0f02 	tst.w	r3, #2
 8008794:	d004      	beq.n	80087a0 <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8008796:	4b0f      	ldr	r3, [pc, #60]	@ (80087d4 <StopRetransmission+0x4c>)
 8008798:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800879c:	2b01      	cmp	r3, #1
 800879e:	d908      	bls.n	80087b2 <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80087a0:	4b0d      	ldr	r3, [pc, #52]	@ (80087d8 <StopRetransmission+0x50>)
 80087a2:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80087a6:	b123      	cbz	r3, 80087b2 <StopRetransmission+0x2a>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80087a8:	4c0b      	ldr	r4, [pc, #44]	@ (80087d8 <StopRetransmission+0x50>)
 80087aa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80087ac:	f7ff ffe6 	bl	800877c <IncreaseAdrAckCounter>
 80087b0:	62a0      	str	r0, [r4, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80087b2:	4b08      	ldr	r3, [pc, #32]	@ (80087d4 <StopRetransmission+0x4c>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 80087ba:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 80087be:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80087c2:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 80087c6:	f022 0202 	bic.w	r2, r2, #2
 80087ca:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return true;
}
 80087ce:	2001      	movs	r0, #1
 80087d0:	bd10      	pop	{r4, pc}
 80087d2:	bf00      	nop
 80087d4:	20000900 	.word	0x20000900
 80087d8:	20008000 	.word	0x20008000

080087dc <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 80087dc:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80087de:	4b04      	ldr	r3, [pc, #16]	@ (80087f0 <OnMacProcessNotify+0x14>)
 80087e0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80087e4:	b113      	cbz	r3, 80087ec <OnMacProcessNotify+0x10>
 80087e6:	695b      	ldr	r3, [r3, #20]
 80087e8:	b103      	cbz	r3, 80087ec <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80087ea:	4798      	blx	r3
    }
}
 80087ec:	bd08      	pop	{r3, pc}
 80087ee:	bf00      	nop
 80087f0:	20000900 	.word	0x20000900

080087f4 <OnRadioRxError>:
{
 80087f4:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 80087f6:	4a04      	ldr	r2, [pc, #16]	@ (8008808 <OnRadioRxError+0x14>)
 80087f8:	7813      	ldrb	r3, [r2, #0]
 80087fa:	f043 0304 	orr.w	r3, r3, #4
 80087fe:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8008800:	f7ff ffec 	bl	80087dc <OnMacProcessNotify>
}
 8008804:	bd08      	pop	{r3, pc}
 8008806:	bf00      	nop
 8008808:	2000086c 	.word	0x2000086c

0800880c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800880c:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800880e:	4b04      	ldr	r3, [pc, #16]	@ (8008820 <CallNvmDataChangeCallback+0x14>)
 8008810:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8008814:	b113      	cbz	r3, 800881c <CallNvmDataChangeCallback+0x10>
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	b103      	cbz	r3, 800881c <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800881a:	4798      	blx	r3
    }
}
 800881c:	bd08      	pop	{r3, pc}
 800881e:	bf00      	nop
 8008820:	20000900 	.word	0x20000900

08008824 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8008824:	4b04      	ldr	r3, [pc, #16]	@ (8008838 <IsRequestPending+0x14>)
 8008826:	f893 0491 	ldrb.w	r0, [r3, #1169]	@ 0x491
 800882a:	f010 0005 	ands.w	r0, r0, #5
 800882e:	d100      	bne.n	8008832 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8008830:	4770      	bx	lr
        return 1;
 8008832:	2001      	movs	r0, #1
 8008834:	e7fc      	b.n	8008830 <IsRequestPending+0xc>
 8008836:	bf00      	nop
 8008838:	20000900 	.word	0x20000900

0800883c <GetMaxAppPayloadWithoutFOptsLength>:
{
 800883c:	b500      	push	{lr}
 800883e:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008840:	4b0d      	ldr	r3, [pc, #52]	@ (8008878 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8008842:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8008846:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 800884a:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800884e:	220d      	movs	r2, #13
 8008850:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008854:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8008858:	b113      	cbz	r3, 8008860 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800885a:	230e      	movs	r3, #14
 800885c:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008860:	a902      	add	r1, sp, #8
 8008862:	4b05      	ldr	r3, [pc, #20]	@ (8008878 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8008864:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008868:	f004 f9fa 	bl	800cc60 <RegionGetPhyParam>
 800886c:	9001      	str	r0, [sp, #4]
}
 800886e:	b2c0      	uxtb	r0, r0
 8008870:	b005      	add	sp, #20
 8008872:	f85d fb04 	ldr.w	pc, [sp], #4
 8008876:	bf00      	nop
 8008878:	20008000 	.word	0x20008000

0800887c <ValidatePayloadLength>:
{
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	4604      	mov	r4, r0
 8008880:	4615      	mov	r5, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008882:	4608      	mov	r0, r1
 8008884:	f7ff ffda 	bl	800883c <GetMaxAppPayloadWithoutFOptsLength>
    payloadSize = ( lenN + fOptsLen );
 8008888:	442c      	add	r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800888a:	42a0      	cmp	r0, r4
 800888c:	d201      	bcs.n	8008892 <ValidatePayloadLength+0x16>
    return false;
 800888e:	2000      	movs	r0, #0
}
 8008890:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8008892:	2001      	movs	r0, #1
 8008894:	e7fc      	b.n	8008890 <ValidatePayloadLength+0x14>
	...

08008898 <ProcessRadioTxDone>:
{
 8008898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800889a:	b08f      	sub	sp, #60	@ 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800889c:	4b3b      	ldr	r3, [pc, #236]	@ (800898c <ProcessRadioTxDone+0xf4>)
 800889e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d002      	beq.n	80088ac <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 80088a6:	4b3a      	ldr	r3, [pc, #232]	@ (8008990 <ProcessRadioTxDone+0xf8>)
 80088a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088aa:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ac:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80088b0:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 80088b2:	f008 fd33 	bl	801131c <UTIL_TIMER_GetCurrentTime>
 80088b6:	4b37      	ldr	r3, [pc, #220]	@ (8008994 <ProcessRadioTxDone+0xfc>)
 80088b8:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 80088ba:	4c37      	ldr	r4, [pc, #220]	@ (8008998 <ProcessRadioTxDone+0x100>)
 80088bc:	f8d4 13b0 	ldr.w	r1, [r4, #944]	@ 0x3b0
 80088c0:	1a2d      	subs	r5, r5, r0
 80088c2:	f504 7660 	add.w	r6, r4, #896	@ 0x380
 80088c6:	4429      	add	r1, r5
 80088c8:	4630      	mov	r0, r6
 80088ca:	f008 fe07 	bl	80114dc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80088ce:	4630      	mov	r0, r6
 80088d0:	f008 fdbe 	bl	8011450 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 80088d4:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 80088d8:	f504 7666 	add.w	r6, r4, #920	@ 0x398
 80088dc:	4429      	add	r1, r5
 80088de:	4630      	mov	r0, r6
 80088e0:	f008 fdfc 	bl	80114dc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80088e4:	4630      	mov	r0, r6
 80088e6:	f008 fdb3 	bl	8011450 <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ea:	f387 8810 	msr	PRIMASK, r7
    if( MacCtx.NodeAckRequested == true )
 80088ee:	f894 341a 	ldrb.w	r3, [r4, #1050]	@ 0x41a
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d134      	bne.n	8008960 <ProcessRadioTxDone+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80088f6:	4b28      	ldr	r3, [pc, #160]	@ (8008998 <ProcessRadioTxDone+0x100>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 80088fe:	4b25      	ldr	r3, [pc, #148]	@ (8008994 <ProcessRadioTxDone+0xfc>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4c22      	ldr	r4, [pc, #136]	@ (800898c <ProcessRadioTxDone+0xf4>)
 8008904:	62e3      	str	r3, [r4, #44]	@ 0x2c
    txDone.Channel = MacCtx.Channel;
 8008906:	4f24      	ldr	r7, [pc, #144]	@ (8008998 <ProcessRadioTxDone+0x100>)
 8008908:	f897 241b 	ldrb.w	r2, [r7, #1051]	@ 0x41b
 800890c:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8008910:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8008912:	ae0c      	add	r6, sp, #48	@ 0x30
 8008914:	4630      	mov	r0, r6
 8008916:	f008 fc75 	bl	8011204 <SysTimeGetMcuTime>
 800891a:	ad02      	add	r5, sp, #8
 800891c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
 8008926:	e896 0006 	ldmia.w	r6, {r1, r2}
 800892a:	4628      	mov	r0, r5
 800892c:	f008 fc07 	bl	801113e <SysTimeSub>
 8008930:	ab07      	add	r3, sp, #28
 8008932:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008936:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800893a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800893e:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8008940:	2301      	movs	r3, #1
 8008942:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008946:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 800894a:	b90b      	cbnz	r3, 8008950 <ProcessRadioTxDone+0xb8>
        txDone.Joined  = false;
 800894c:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8008950:	a904      	add	r1, sp, #16
 8008952:	4b0e      	ldr	r3, [pc, #56]	@ (800898c <ProcessRadioTxDone+0xf4>)
 8008954:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008958:	f004 f993 	bl	800cc82 <RegionSetBandTxDone>
}
 800895c:	b00f      	add	sp, #60	@ 0x3c
 800895e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8008960:	2315      	movs	r3, #21
 8008962:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008966:	a90a      	add	r1, sp, #40	@ 0x28
 8008968:	4b08      	ldr	r3, [pc, #32]	@ (800898c <ProcessRadioTxDone+0xf4>)
 800896a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800896e:	f004 f977 	bl	800cc60 <RegionGetPhyParam>
 8008972:	9009      	str	r0, [sp, #36]	@ 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008974:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 8008978:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800897c:	4401      	add	r1, r0
 800897e:	4620      	mov	r0, r4
 8008980:	f008 fdac 	bl	80114dc <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8008984:	4620      	mov	r0, r4
 8008986:	f008 fd63 	bl	8011450 <UTIL_TIMER_Start>
 800898a:	e7b8      	b.n	80088fe <ProcessRadioTxDone+0x66>
 800898c:	20008000 	.word	0x20008000
 8008990:	080126d4 	.word	0x080126d4
 8008994:	20000868 	.word	0x20000868
 8008998:	20000900 	.word	0x20000900

0800899c <OnRetransmitTimeoutTimerEvent>:
{
 800899c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800899e:	4c07      	ldr	r4, [pc, #28]	@ (80089bc <OnRetransmitTimeoutTimerEvent+0x20>)
 80089a0:	4620      	mov	r0, r4
 80089a2:	f008 fcfb 	bl	801139c <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 80089a6:	7ea3      	ldrb	r3, [r4, #26]
 80089a8:	b123      	cbz	r3, 80089b4 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 80089aa:	f5a4 6380 	sub.w	r3, r4, #1024	@ 0x400
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    OnMacProcessNotify( );
 80089b4:	f7ff ff12 	bl	80087dc <OnMacProcessNotify>
}
 80089b8:	bd10      	pop	{r4, pc}
 80089ba:	bf00      	nop
 80089bc:	20000d00 	.word	0x20000d00

080089c0 <PrepareRxDoneAbort>:
{
 80089c0:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80089c2:	4b0e      	ldr	r3, [pc, #56]	@ (80089fc <PrepareRxDoneAbort+0x3c>)
 80089c4:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 80089c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80089cc:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == true )
 80089d0:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 80089d4:	b973      	cbnz	r3, 80089f4 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80089d6:	4b09      	ldr	r3, [pc, #36]	@ (80089fc <PrepareRxDoneAbort+0x3c>)
 80089d8:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 80089dc:	f042 0202 	orr.w	r2, r2, #2
 80089e0:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 80089e4:	b2d2      	uxtb	r2, r2
 80089e6:	f042 0210 	orr.w	r2, r2, #16
 80089ea:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    UpdateRxSlotIdleState( );
 80089ee:	f7ff fdd5 	bl	800859c <UpdateRxSlotIdleState>
}
 80089f2:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 80089f4:	2000      	movs	r0, #0
 80089f6:	f7ff ffd1 	bl	800899c <OnRetransmitTimeoutTimerEvent>
 80089fa:	e7ec      	b.n	80089d6 <PrepareRxDoneAbort+0x16>
 80089fc:	20000900 	.word	0x20000900

08008a00 <LoRaMacCheckForBeaconAcquisition>:
{
 8008a00:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008a02:	200b      	movs	r0, #11
 8008a04:	f003 fbb6 	bl	800c174 <LoRaMacConfirmQueueIsCmdActive>
 8008a08:	b188      	cbz	r0, 8008a2e <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8008a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a38 <LoRaMacCheckForBeaconAcquisition+0x38>)
 8008a0c:	f893 0491 	ldrb.w	r0, [r3, #1169]	@ 0x491
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008a10:	f010 0f01 	tst.w	r0, #1
 8008a14:	d10d      	bne.n	8008a32 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008a16:	f010 0004 	ands.w	r0, r0, #4
 8008a1a:	d009      	beq.n	8008a30 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8008a22:	f023 0302 	bic.w	r3, r3, #2
 8008a26:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 8008a2a:	2001      	movs	r0, #1
 8008a2c:	e000      	b.n	8008a30 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8008a2e:	2000      	movs	r0, #0
}
 8008a30:	bd08      	pop	{r3, pc}
    return 0x00;
 8008a32:	2000      	movs	r0, #0
 8008a34:	e7fc      	b.n	8008a30 <LoRaMacCheckForBeaconAcquisition+0x30>
 8008a36:	bf00      	nop
 8008a38:	20000900 	.word	0x20000900

08008a3c <GetFCntDown>:
{
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	9c04      	ldr	r4, [sp, #16]
 8008a40:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8008a42:	b1f2      	cbz	r2, 8008a82 <GetFCntDown+0x46>
 8008a44:	4694      	mov	ip, r2
 8008a46:	b1f4      	cbz	r4, 8008a86 <GetFCntDown+0x4a>
 8008a48:	b1fd      	cbz	r5, 8008a8a <GetFCntDown+0x4e>
    switch( addrID )
 8008a4a:	b188      	cbz	r0, 8008a70 <GetFCntDown+0x34>
 8008a4c:	2801      	cmp	r0, #1
 8008a4e:	d11e      	bne.n	8008a8e <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 8008a50:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d002      	beq.n	8008a5e <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	7023      	strb	r3, [r4, #0]
 8008a5c:	e00a      	b.n	8008a74 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8008a5e:	b121      	cbz	r1, 8008a6a <GetFCntDown+0x2e>
 8008a60:	2903      	cmp	r1, #3
 8008a62:	d002      	beq.n	8008a6a <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8008a64:	2301      	movs	r3, #1
 8008a66:	7023      	strb	r3, [r4, #0]
 8008a68:	e004      	b.n	8008a74 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	7023      	strb	r3, [r4, #0]
 8008a6e:	e001      	b.n	8008a74 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8008a70:	2304      	movs	r3, #4
 8008a72:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8008a74:	462a      	mov	r2, r5
 8008a76:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 8008a7a:	7820      	ldrb	r0, [r4, #0]
 8008a7c:	f003 fda4 	bl	800c5c8 <LoRaMacCryptoGetFCntDown>
}
 8008a80:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008a82:	2009      	movs	r0, #9
 8008a84:	e7fc      	b.n	8008a80 <GetFCntDown+0x44>
 8008a86:	2009      	movs	r0, #9
 8008a88:	e7fa      	b.n	8008a80 <GetFCntDown+0x44>
 8008a8a:	2009      	movs	r0, #9
 8008a8c:	e7f8      	b.n	8008a80 <GetFCntDown+0x44>
    switch( addrID )
 8008a8e:	2005      	movs	r0, #5
 8008a90:	e7f6      	b.n	8008a80 <GetFCntDown+0x44>

08008a92 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8008a92:	2801      	cmp	r0, #1
 8008a94:	d900      	bls.n	8008a98 <RemoveMacCommands+0x6>
 8008a96:	4770      	bx	lr
{
 8008a98:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8008a9a:	2a01      	cmp	r2, #1
 8008a9c:	d105      	bne.n	8008aaa <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8008a9e:	f011 0f20 	tst.w	r1, #32
 8008aa2:	d004      	beq.n	8008aae <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8008aa4:	f003 fa12 	bl	800becc <LoRaMacCommandsRemoveStickyAnsCmds>
 8008aa8:	e001      	b.n	8008aae <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8008aaa:	f003 fa0f 	bl	800becc <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8008aae:	bd08      	pop	{r3, pc}

08008ab0 <ProcessMacCommands>:
{
 8008ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab4:	b08f      	sub	sp, #60	@ 0x3c
 8008ab6:	4698      	mov	r8, r3
    uint8_t status = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8008abe:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8008ac2:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	f200 82d8 	bhi.w	800907c <ProcessMacCommands+0x5cc>
 8008acc:	4605      	mov	r5, r0
 8008ace:	460c      	mov	r4, r1
 8008ad0:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 8008ad2:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 8008ad6:	42bc      	cmp	r4, r7
 8008ad8:	f080 82d0 	bcs.w	800907c <ProcessMacCommands+0x5cc>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8008adc:	5d28      	ldrb	r0, [r5, r4]
 8008ade:	f003 fa4d 	bl	800bf7c <LoRaMacCommandsGetCmdSize>
 8008ae2:	4420      	add	r0, r4
 8008ae4:	42b8      	cmp	r0, r7
 8008ae6:	f300 82c9 	bgt.w	800907c <ProcessMacCommands+0x5cc>
        switch( payload[macIndex++] )
 8008aea:	1c66      	adds	r6, r4, #1
 8008aec:	b2f6      	uxtb	r6, r6
 8008aee:	5d2b      	ldrb	r3, [r5, r4]
 8008af0:	3b02      	subs	r3, #2
 8008af2:	2b11      	cmp	r3, #17
 8008af4:	f200 82c2 	bhi.w	800907c <ProcessMacCommands+0x5cc>
 8008af8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008afc:	00280012 	.word	0x00280012
 8008b00:	00c000ad 	.word	0x00c000ad
 8008b04:	011d0105 	.word	0x011d0105
 8008b08:	01720156 	.word	0x01720156
 8008b0c:	02c001be 	.word	0x02c001be
 8008b10:	01ee02c0 	.word	0x01ee02c0
 8008b14:	02c002c0 	.word	0x02c002c0
 8008b18:	02670250 	.word	0x02670250
 8008b1c:	02a00286 	.word	0x02a00286
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8008b20:	2005      	movs	r0, #5
 8008b22:	f003 fb27 	bl	800c174 <LoRaMacConfirmQueueIsCmdActive>
 8008b26:	b908      	cbnz	r0, 8008b2c <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 8008b28:	4634      	mov	r4, r6
 8008b2a:	e7d4      	b.n	8008ad6 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8008b2c:	2105      	movs	r1, #5
 8008b2e:	2000      	movs	r0, #0
 8008b30:	f003 fad4 	bl	800c0dc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8008b34:	1ca3      	adds	r3, r4, #2
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	5da9      	ldrb	r1, [r5, r6]
 8008b3a:	4aa6      	ldr	r2, [pc, #664]	@ (8008dd4 <ProcessMacCommands+0x324>)
 8008b3c:	f882 145c 	strb.w	r1, [r2, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8008b40:	3403      	adds	r4, #3
 8008b42:	b2e4      	uxtb	r4, r4
 8008b44:	5ceb      	ldrb	r3, [r5, r3]
 8008b46:	f882 345d 	strb.w	r3, [r2, #1117]	@ 0x45d
 8008b4a:	e7c4      	b.n	8008ad6 <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8008b52:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 8008b56:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 8008b5a:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8008b5e:	f1b9 0f00 	cmp.w	r9, #0
 8008b62:	d036      	beq.n	8008bd2 <ProcessMacCommands+0x122>
                    macIndex += 4;
 8008b64:	3405      	adds	r4, #5
 8008b66:	b2e4      	uxtb	r4, r4
 8008b68:	e7b5      	b.n	8008ad6 <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 8008b6a:	2305      	movs	r3, #5
 8008b6c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8008b70:	e050      	b.n	8008c14 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8008b72:	4b99      	ldr	r3, [pc, #612]	@ (8008dd8 <ProcessMacCommands+0x328>)
 8008b74:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8008b78:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	da03      	bge.n	8008b88 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8008b80:	4b95      	ldr	r3, [pc, #596]	@ (8008dd8 <ProcessMacCommands+0x328>)
 8008b82:	2101      	movs	r1, #1
 8008b84:	f883 111d 	strb.w	r1, [r3, #285]	@ 0x11d
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8008b88:	4b93      	ldr	r3, [pc, #588]	@ (8008dd8 <ProcessMacCommands+0x328>)
 8008b8a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8008b8e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8008b92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8008b96:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008b9a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8008b9e:	e04d      	b.n	8008c3c <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f10d 012f 	add.w	r1, sp, #47	@ 0x2f
 8008ba6:	2003      	movs	r0, #3
 8008ba8:	f003 f91c 	bl	800bde4 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8008bac:	3401      	adds	r4, #1
 8008bae:	b2e4      	uxtb	r4, r4
 8008bb0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008bb4:	4989      	ldr	r1, [pc, #548]	@ (8008ddc <ProcessMacCommands+0x32c>)
 8008bb6:	fba1 2103 	umull	r2, r1, r1, r3
 8008bba:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 8008bbe:	d3ef      	bcc.n	8008ba0 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 8008bc0:	4433      	add	r3, r6
 8008bc2:	b2de      	uxtb	r6, r3
 8008bc4:	1e74      	subs	r4, r6, #1
 8008bc6:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 8008bc8:	42a7      	cmp	r7, r4
 8008bca:	d93a      	bls.n	8008c42 <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8008bcc:	5d2b      	ldrb	r3, [r5, r4]
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d136      	bne.n	8008c40 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8008bd2:	1e73      	subs	r3, r6, #1
 8008bd4:	442b      	add	r3, r5
 8008bd6:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8008bd8:	4b7f      	ldr	r3, [pc, #508]	@ (8008dd8 <ProcessMacCommands+0x328>)
 8008bda:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8008bde:	f88d 2026 	strb.w	r2, [sp, #38]	@ 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008be2:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 8008be6:	f88d 1025 	strb.w	r1, [sp, #37]	@ 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8008bea:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 8008bee:	f88d 1027 	strb.w	r1, [sp, #39]	@ 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008bf2:	f993 1038 	ldrsb.w	r1, [r3, #56]	@ 0x38
 8008bf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8008bfa:	f893 1068 	ldrb.w	r1, [r3, #104]	@ 0x68
 8008bfe:	f88d 1029 	strb.w	r1, [sp, #41]	@ 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8008c02:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8008c06:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8008c08:	2a00      	cmp	r2, #0
 8008c0a:	d0ae      	beq.n	8008b6a <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8008c0c:	1bbb      	subs	r3, r7, r6
 8008c0e:	3301      	adds	r3, #1
 8008c10:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8008c14:	ab05      	add	r3, sp, #20
 8008c16:	9301      	str	r3, [sp, #4]
 8008c18:	ab03      	add	r3, sp, #12
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	f10d 030b 	add.w	r3, sp, #11
 8008c20:	f10d 020a 	add.w	r2, sp, #10
 8008c24:	a907      	add	r1, sp, #28
 8008c26:	486c      	ldr	r0, [pc, #432]	@ (8008dd8 <ProcessMacCommands+0x328>)
 8008c28:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 8008c2c:	f004 f878 	bl	800cd20 <RegionLinkAdrReq>
 8008c30:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 8008c34:	f000 0007 	and.w	r0, r0, #7
 8008c38:	2807      	cmp	r0, #7
 8008c3a:	d09a      	beq.n	8008b72 <ProcessMacCommands+0xc2>
{
 8008c3c:	2400      	movs	r4, #0
 8008c3e:	e7b7      	b.n	8008bb0 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8008c40:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 8008c42:	42bc      	cmp	r4, r7
 8008c44:	d204      	bcs.n	8008c50 <ProcessMacCommands+0x1a0>
                        macIndex--;
 8008c46:	3c01      	subs	r4, #1
 8008c48:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 8008c4a:	f04f 0901 	mov.w	r9, #1
 8008c4e:	e742      	b.n	8008ad6 <ProcessMacCommands+0x26>
 8008c50:	f04f 0901 	mov.w	r9, #1
                break;
 8008c54:	e73f      	b.n	8008ad6 <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8008c56:	3402      	adds	r4, #2
 8008c58:	b2e4      	uxtb	r4, r4
 8008c5a:	5dab      	ldrb	r3, [r5, r6]
 8008c5c:	f003 030f 	and.w	r3, r3, #15
 8008c60:	495d      	ldr	r1, [pc, #372]	@ (8008dd8 <ProcessMacCommands+0x328>)
 8008c62:	f881 311b 	strb.w	r3, [r1, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8008c66:	2201      	movs	r2, #1
 8008c68:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6c:	f8a1 3120 	strh.w	r3, [r1, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8008c70:	2200      	movs	r2, #0
 8008c72:	a90b      	add	r1, sp, #44	@ 0x2c
 8008c74:	2004      	movs	r0, #4
 8008c76:	f003 f8b5 	bl	800bde4 <LoRaMacCommandsAddCmd>
                break;
 8008c7a:	e72c      	b.n	8008ad6 <ProcessMacCommands+0x26>
                status = 0x07;
 8008c7c:	2307      	movs	r3, #7
 8008c7e:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8008c82:	5dab      	ldrb	r3, [r5, r6]
 8008c84:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8008c88:	f88d 201d 	strb.w	r2, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8008c8c:	f003 030f 	and.w	r3, r3, #15
 8008c90:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 8008c94:	1ca3      	adds	r3, r4, #2
 8008c96:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008c98:	1ce1      	adds	r1, r4, #3
 8008c9a:	b2c9      	uxtb	r1, r1
 8008c9c:	5ceb      	ldrb	r3, [r5, r3]
 8008c9e:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008ca0:	1d22      	adds	r2, r4, #4
 8008ca2:	b2d2      	uxtb	r2, r2
 8008ca4:	5c69      	ldrb	r1, [r5, r1]
 8008ca6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008caa:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008cac:	3405      	adds	r4, #5
 8008cae:	b2e4      	uxtb	r4, r4
 8008cb0:	5caa      	ldrb	r2, [r5, r2]
 8008cb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cb6:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 8008cb8:	2264      	movs	r2, #100	@ 0x64
 8008cba:	fb02 f303 	mul.w	r3, r2, r3
 8008cbe:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8008cc0:	a907      	add	r1, sp, #28
 8008cc2:	4b45      	ldr	r3, [pc, #276]	@ (8008dd8 <ProcessMacCommands+0x328>)
 8008cc4:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008cc8:	f004 f83c 	bl	800cd44 <RegionRxParamSetupReq>
 8008ccc:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
                if( ( status & 0x07 ) == 0x07 )
 8008cd0:	f000 0307 	and.w	r3, r0, #7
 8008cd4:	2b07      	cmp	r3, #7
 8008cd6:	d007      	beq.n	8008ce8 <ProcessMacCommands+0x238>
                macCmdPayload[0] = status;
 8008cd8:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8008cdc:	2201      	movs	r2, #1
 8008cde:	a90b      	add	r1, sp, #44	@ 0x2c
 8008ce0:	2005      	movs	r0, #5
 8008ce2:	f003 f87f 	bl	800bde4 <LoRaMacCommandsAddCmd>
                break;
 8008ce6:	e6f6      	b.n	8008ad6 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8008ce8:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8008cec:	4b3a      	ldr	r3, [pc, #232]	@ (8008dd8 <ProcessMacCommands+0x328>)
 8008cee:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8008cf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8008cf6:	9a08      	ldr	r2, [sp, #32]
 8008cf8:	66da      	str	r2, [r3, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8008cfa:	675a      	str	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8008cfc:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8008d00:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 8008d04:	e7e8      	b.n	8008cd8 <ProcessMacCommands+0x228>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8008d06:	4b33      	ldr	r3, [pc, #204]	@ (8008dd4 <ProcessMacCommands+0x324>)
 8008d08:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8008d0c:	b17b      	cbz	r3, 8008d2e <ProcessMacCommands+0x27e>
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	b17b      	cbz	r3, 8008d32 <ProcessMacCommands+0x282>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8008d12:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8008d14:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8008d18:	f008 033f 	and.w	r3, r8, #63	@ 0x3f
 8008d1c:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8008d20:	2202      	movs	r2, #2
 8008d22:	a90b      	add	r1, sp, #44	@ 0x2c
 8008d24:	2006      	movs	r0, #6
 8008d26:	f003 f85d 	bl	800bde4 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8008d2a:	4634      	mov	r4, r6
                break;
 8008d2c:	e6d3      	b.n	8008ad6 <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8008d2e:	20ff      	movs	r0, #255	@ 0xff
 8008d30:	e7f0      	b.n	8008d14 <ProcessMacCommands+0x264>
 8008d32:	20ff      	movs	r0, #255	@ 0xff
 8008d34:	e7ee      	b.n	8008d14 <ProcessMacCommands+0x264>
                status = 0x03;
 8008d36:	2303      	movs	r3, #3
 8008d38:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 8008d3c:	1ca3      	adds	r3, r4, #2
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	57aa      	ldrsb	r2, [r5, r6]
 8008d42:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 8008d46:	aa07      	add	r2, sp, #28
 8008d48:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8008d4a:	1ce2      	adds	r2, r4, #3
 8008d4c:	b2d2      	uxtb	r2, r2
 8008d4e:	5ceb      	ldrb	r3, [r5, r3]
 8008d50:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008d52:	1d21      	adds	r1, r4, #4
 8008d54:	b2c9      	uxtb	r1, r1
 8008d56:	5caa      	ldrb	r2, [r5, r2]
 8008d58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d5c:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008d5e:	1d62      	adds	r2, r4, #5
 8008d60:	b2d2      	uxtb	r2, r2
 8008d62:	5c69      	ldrb	r1, [r5, r1]
 8008d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008d68:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 8008d6a:	2164      	movs	r1, #100	@ 0x64
 8008d6c:	fb01 f303 	mul.w	r3, r1, r3
 8008d70:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 8008d72:	2300      	movs	r3, #0
 8008d74:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 8008d76:	3406      	adds	r4, #6
 8008d78:	b2e4      	uxtb	r4, r4
 8008d7a:	56ab      	ldrsb	r3, [r5, r2]
 8008d7c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8008d80:	a905      	add	r1, sp, #20
 8008d82:	4b15      	ldr	r3, [pc, #84]	@ (8008dd8 <ProcessMacCommands+0x328>)
 8008d84:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008d88:	f003 ffe5 	bl	800cd56 <RegionNewChannelReq>
 8008d8c:	b2c3      	uxtb	r3, r0
 8008d8e:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                if( ( int8_t )status >= 0 )
 8008d92:	2800      	cmp	r0, #0
 8008d94:	f6ff ae9f 	blt.w	8008ad6 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 8008d98:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	a90b      	add	r1, sp, #44	@ 0x2c
 8008da0:	2007      	movs	r0, #7
 8008da2:	f003 f81f 	bl	800bde4 <LoRaMacCommandsAddCmd>
                break;
 8008da6:	e696      	b.n	8008ad6 <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008da8:	3402      	adds	r4, #2
 8008daa:	b2e4      	uxtb	r4, r4
 8008dac:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 8008dae:	f013 030f 	ands.w	r3, r3, #15
 8008db2:	d100      	bne.n	8008db6 <ProcessMacCommands+0x306>
                    delay++;
 8008db4:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8008db6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008dba:	fb02 f303 	mul.w	r3, r2, r3
 8008dbe:	4a06      	ldr	r2, [pc, #24]	@ (8008dd8 <ProcessMacCommands+0x328>)
 8008dc0:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008dc2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8008dc6:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8008dc8:	2200      	movs	r2, #0
 8008dca:	a90b      	add	r1, sp, #44	@ 0x2c
 8008dcc:	2008      	movs	r0, #8
 8008dce:	f003 f809 	bl	800bde4 <LoRaMacCommandsAddCmd>
                break;
 8008dd2:	e680      	b.n	8008ad6 <ProcessMacCommands+0x26>
 8008dd4:	20000900 	.word	0x20000900
 8008dd8:	20008000 	.word	0x20008000
 8008ddc:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 8008de0:	3402      	adds	r4, #2
 8008de2:	b2e4      	uxtb	r4, r4
 8008de4:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 8008de6:	2200      	movs	r2, #0
 8008de8:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8008dec:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8008df0:	f013 0f20 	tst.w	r3, #32
 8008df4:	d002      	beq.n	8008dfc <ProcessMacCommands+0x34c>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8008df6:	2201      	movs	r2, #1
 8008df8:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8008dfc:	f013 0f10 	tst.w	r3, #16
 8008e00:	d002      	beq.n	8008e08 <ProcessMacCommands+0x358>
                    txParamSetupReq.UplinkDwellTime = 1;
 8008e02:	2201      	movs	r2, #1
 8008e04:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008e08:	f003 030f 	and.w	r3, r3, #15
 8008e0c:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8008e10:	a903      	add	r1, sp, #12
 8008e12:	4b9c      	ldr	r3, [pc, #624]	@ (8009084 <ProcessMacCommands+0x5d4>)
 8008e14:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008e18:	f003 ffa6 	bl	800cd68 <RegionTxParamSetupReq>
 8008e1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008e20:	f43f ae59 	beq.w	8008ad6 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8008e24:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8008e28:	4e96      	ldr	r6, [pc, #600]	@ (8009084 <ProcessMacCommands+0x5d4>)
 8008e2a:	f886 a07c 	strb.w	sl, [r6, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8008e2e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8008e32:	f886 307d 	strb.w	r3, [r6, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8008e36:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008e3a:	4a93      	ldr	r2, [pc, #588]	@ (8009088 <ProcessMacCommands+0x5d8>)
 8008e3c:	5cd0      	ldrb	r0, [r2, r3]
 8008e3e:	f7f7 fcc5 	bl	80007cc <__aeabi_ui2f>
 8008e42:	f8c6 0080 	str.w	r0, [r6, #128]	@ 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8008e46:	2302      	movs	r3, #2
 8008e48:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008e4c:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008e50:	a907      	add	r1, sp, #28
 8008e52:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 8008e56:	f003 ff03 	bl	800cc60 <RegionGetPhyParam>
 8008e5a:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8008e5c:	b240      	sxtb	r0, r0
 8008e5e:	f996 3039 	ldrsb.w	r3, [r6, #57]	@ 0x39
 8008e62:	4298      	cmp	r0, r3
 8008e64:	bfb8      	it	lt
 8008e66:	4618      	movlt	r0, r3
 8008e68:	f886 0039 	strb.w	r0, [r6, #57]	@ 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	a90b      	add	r1, sp, #44	@ 0x2c
 8008e70:	2009      	movs	r0, #9
 8008e72:	f002 ffb7 	bl	800bde4 <LoRaMacCommandsAddCmd>
                break;
 8008e76:	e62e      	b.n	8008ad6 <ProcessMacCommands+0x26>
                status = 0x03;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 8008e7e:	1ca3      	adds	r3, r4, #2
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	5daa      	ldrb	r2, [r5, r6]
 8008e84:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008e88:	1ce1      	adds	r1, r4, #3
 8008e8a:	b2c9      	uxtb	r1, r1
 8008e8c:	5ceb      	ldrb	r3, [r5, r3]
 8008e8e:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008e90:	1d22      	adds	r2, r4, #4
 8008e92:	b2d2      	uxtb	r2, r2
 8008e94:	5c69      	ldrb	r1, [r5, r1]
 8008e96:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008e9a:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008e9c:	3405      	adds	r4, #5
 8008e9e:	b2e4      	uxtb	r4, r4
 8008ea0:	5caa      	ldrb	r2, [r5, r2]
 8008ea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ea6:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 8008ea8:	2264      	movs	r2, #100	@ 0x64
 8008eaa:	fb02 f303 	mul.w	r3, r2, r3
 8008eae:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8008eb0:	a907      	add	r1, sp, #28
 8008eb2:	4b74      	ldr	r3, [pc, #464]	@ (8009084 <ProcessMacCommands+0x5d4>)
 8008eb4:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008eb8:	f003 ff5f 	bl	800cd7a <RegionDlChannelReq>
 8008ebc:	b2c3      	uxtb	r3, r0
 8008ebe:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                if( ( int8_t )status >= 0 )
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	f6ff ae07 	blt.w	8008ad6 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 8008ec8:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8008ecc:	2201      	movs	r2, #1
 8008ece:	a90b      	add	r1, sp, #44	@ 0x2c
 8008ed0:	200a      	movs	r0, #10
 8008ed2:	f002 ff87 	bl	800bde4 <LoRaMacCommandsAddCmd>
                break;
 8008ed6:	e5fe      	b.n	8008ad6 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8008ed8:	2009      	movs	r0, #9
 8008eda:	f003 f94b 	bl	800c174 <LoRaMacConfirmQueueIsCmdActive>
 8008ede:	b928      	cbnz	r0, 8008eec <ProcessMacCommands+0x43c>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008ee0:	4b6a      	ldr	r3, [pc, #424]	@ (800908c <ProcessMacCommands+0x5dc>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
        switch( payload[macIndex++] )
 8008ee8:	4634      	mov	r4, r6
 8008eea:	e5f4      	b.n	8008ad6 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8008eec:	2109      	movs	r1, #9
 8008eee:	2000      	movs	r0, #0
 8008ef0:	f003 f8f4 	bl	800c0dc <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8008ef4:	a903      	add	r1, sp, #12
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9303      	str	r3, [sp, #12]
 8008efa:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 8008efc:	f10d 0a14 	add.w	sl, sp, #20
 8008f00:	9305      	str	r3, [sp, #20]
 8008f02:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 8008f04:	f10d 0b1c 	add.w	fp, sp, #28
 8008f08:	9307      	str	r3, [sp, #28]
 8008f0a:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8008f0c:	1ca0      	adds	r0, r4, #2
 8008f0e:	b2c0      	uxtb	r0, r0
 8008f10:	5dab      	ldrb	r3, [r5, r6]
 8008f12:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8008f14:	1ce2      	adds	r2, r4, #3
 8008f16:	b2d2      	uxtb	r2, r2
 8008f18:	5c28      	ldrb	r0, [r5, r0]
 8008f1a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008f1e:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008f20:	1d20      	adds	r0, r4, #4
 8008f22:	b2c0      	uxtb	r0, r0
 8008f24:	5caa      	ldrb	r2, [r5, r2]
 8008f26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f2a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008f2c:	1d62      	adds	r2, r4, #5
 8008f2e:	b2d2      	uxtb	r2, r2
 8008f30:	5c28      	ldrb	r0, [r5, r0]
 8008f32:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8008f36:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8008f38:	3406      	adds	r4, #6
 8008f3a:	b2e4      	uxtb	r4, r4
 8008f3c:	5caa      	ldrb	r2, [r5, r2]
 8008f3e:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8008f42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008f46:	fb00 f202 	mul.w	r2, r0, r2
 8008f4a:	0a12      	lsrs	r2, r2, #8
 8008f4c:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8008f50:	c903      	ldmia	r1, {r0, r1}
 8008f52:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8008f56:	4a4e      	ldr	r2, [pc, #312]	@ (8009090 <ProcessMacCommands+0x5e0>)
 8008f58:	441a      	add	r2, r3
 8008f5a:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8008f5c:	4658      	mov	r0, fp
 8008f5e:	f008 f92f 	bl	80111c0 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8008f62:	4e4a      	ldr	r6, [pc, #296]	@ (800908c <ProcessMacCommands+0x5dc>)
 8008f64:	f8d6 333c 	ldr.w	r3, [r6, #828]	@ 0x33c
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	f8d6 3338 	ldr.w	r3, [r6, #824]	@ 0x338
 8008f6e:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8008f72:	a80c      	add	r0, sp, #48	@ 0x30
 8008f74:	f008 f8e3 	bl	801113e <SysTimeSub>
 8008f78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f7e:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8008f82:	4650      	mov	r0, sl
 8008f84:	f008 f8bc 	bl	8011100 <SysTimeAdd>
                    SysTimeSet( sysTime );
 8008f88:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8008f8c:	f008 f8f6 	bl	801117c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8008f90:	f002 fe8e 	bl	800bcb0 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8008f94:	2301      	movs	r3, #1
 8008f96:	f886 3438 	strb.w	r3, [r6, #1080]	@ 0x438
 8008f9a:	e59c      	b.n	8008ad6 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8008f9c:	200c      	movs	r0, #12
 8008f9e:	f003 f8e9 	bl	800c174 <LoRaMacConfirmQueueIsCmdActive>
 8008fa2:	b908      	cbnz	r0, 8008fa8 <ProcessMacCommands+0x4f8>
        switch( payload[macIndex++] )
 8008fa4:	4634      	mov	r4, r6
 8008fa6:	e596      	b.n	8008ad6 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8008fa8:	210c      	movs	r1, #12
 8008faa:	2000      	movs	r0, #0
 8008fac:	f003 f896 	bl	800c0dc <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8008fb0:	4b36      	ldr	r3, [pc, #216]	@ (800908c <ProcessMacCommands+0x5dc>)
 8008fb2:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8008fb6:	3b04      	subs	r3, #4
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d801      	bhi.n	8008fc2 <ProcessMacCommands+0x512>
        switch( payload[macIndex++] )
 8008fbe:	4634      	mov	r4, r6
 8008fc0:	e589      	b.n	8008ad6 <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 8008fc2:	f002 fe71 	bl	800bca8 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8008fc6:	4634      	mov	r4, r6
 8008fc8:	e585      	b.n	8008ad6 <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 8008fca:	1ca2      	adds	r2, r4, #2
 8008fcc:	b2d2      	uxtb	r2, r2
 8008fce:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008fd0:	1ce1      	adds	r1, r4, #3
 8008fd2:	b2c9      	uxtb	r1, r1
 8008fd4:	5caa      	ldrb	r2, [r5, r2]
 8008fd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008fda:	1d22      	adds	r2, r4, #4
 8008fdc:	b2d2      	uxtb	r2, r2
 8008fde:	5c69      	ldrb	r1, [r5, r1]
 8008fe0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8008fe4:	3405      	adds	r4, #5
 8008fe6:	b2e4      	uxtb	r4, r4
 8008fe8:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8008fea:	2164      	movs	r1, #100	@ 0x64
 8008fec:	fb03 f101 	mul.w	r1, r3, r1
 8008ff0:	f000 000f 	and.w	r0, r0, #15
 8008ff4:	f002 fe59 	bl	800bcaa <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8008ff8:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	a90b      	add	r1, sp, #44	@ 0x2c
 8009000:	2011      	movs	r0, #17
 8009002:	f002 feef 	bl	800bde4 <LoRaMacCommandsAddCmd>
                break;
 8009006:	e566      	b.n	8008ad6 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8009008:	200d      	movs	r0, #13
 800900a:	f003 f8b3 	bl	800c174 <LoRaMacConfirmQueueIsCmdActive>
 800900e:	b908      	cbnz	r0, 8009014 <ProcessMacCommands+0x564>
        switch( payload[macIndex++] )
 8009010:	4634      	mov	r4, r6
 8009012:	e560      	b.n	8008ad6 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8009014:	210d      	movs	r1, #13
 8009016:	2000      	movs	r0, #0
 8009018:	f003 f860 	bl	800c0dc <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800901c:	1ca2      	adds	r2, r4, #2
 800901e:	b2d2      	uxtb	r2, r2
 8009020:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8009022:	1ce3      	adds	r3, r4, #3
 8009024:	b2db      	uxtb	r3, r3
 8009026:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8009028:	3404      	adds	r4, #4
 800902a:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800902c:	4a19      	ldr	r2, [pc, #100]	@ (8009094 <ProcessMacCommands+0x5e4>)
 800902e:	6812      	ldr	r2, [r2, #0]
 8009030:	5ce9      	ldrb	r1, [r5, r3]
 8009032:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8009036:	f002 fe3a 	bl	800bcae <LoRaMacClassBBeaconTimingAns>
 800903a:	e54c      	b.n	8008ad6 <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 800903c:	1ca1      	adds	r1, r4, #2
 800903e:	b2c9      	uxtb	r1, r1
 8009040:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009042:	1ce2      	adds	r2, r4, #3
 8009044:	b2d2      	uxtb	r2, r2
 8009046:	5c69      	ldrb	r1, [r5, r1]
 8009048:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800904c:	3404      	adds	r4, #4
 800904e:	b2e4      	uxtb	r4, r4
 8009050:	5caa      	ldrb	r2, [r5, r2]
 8009052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8009056:	2064      	movs	r0, #100	@ 0x64
 8009058:	fb03 f000 	mul.w	r0, r3, r0
 800905c:	f002 fe29 	bl	800bcb2 <LoRaMacClassBBeaconFreqReq>
 8009060:	b140      	cbz	r0, 8009074 <ProcessMacCommands+0x5c4>
                        macCmdPayload[0] = 1;
 8009062:	2301      	movs	r3, #1
 8009064:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8009068:	2201      	movs	r2, #1
 800906a:	a90b      	add	r1, sp, #44	@ 0x2c
 800906c:	2013      	movs	r0, #19
 800906e:	f002 feb9 	bl	800bde4 <LoRaMacCommandsAddCmd>
                break;
 8009072:	e530      	b.n	8008ad6 <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 8009074:	2300      	movs	r3, #0
 8009076:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800907a:	e7f5      	b.n	8009068 <ProcessMacCommands+0x5b8>
}
 800907c:	b00f      	add	sp, #60	@ 0x3c
 800907e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009082:	bf00      	nop
 8009084:	20008000 	.word	0x20008000
 8009088:	08012080 	.word	0x08012080
 800908c:	20000900 	.word	0x20000900
 8009090:	12d53d80 	.word	0x12d53d80
 8009094:	20000858 	.word	0x20000858

08009098 <ProcessRadioRxDone>:
{
 8009098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800909c:	b0a5      	sub	sp, #148	@ 0x94
    uint8_t *payload = RxDoneParams.Payload;
 800909e:	4ba5      	ldr	r3, [pc, #660]	@ (8009334 <ProcessRadioRxDone+0x29c>)
 80090a0:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 80090a2:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80090a4:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 80090a8:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 80090ac:	2300      	movs	r3, #0
 80090ae:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80090b0:	4aa1      	ldr	r2, [pc, #644]	@ (8009338 <ProcessRadioRxDone+0x2a0>)
 80090b2:	f8d2 90e4 	ldr.w	r9, [r2, #228]	@ 0xe4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 80090b6:	4aa1      	ldr	r2, [pc, #644]	@ (800933c <ProcessRadioRxDone+0x2a4>)
 80090b8:	7811      	ldrb	r1, [r2, #0]
 80090ba:	f363 0100 	bfi	r1, r3, #0, #1
 80090be:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 80090c0:	4c9f      	ldr	r4, [pc, #636]	@ (8009340 <ProcessRadioRxDone+0x2a8>)
 80090c2:	f884 3444 	strb.w	r3, [r4, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 80090c6:	f8a4 848c 	strh.w	r8, [r4, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 80090ca:	f884 748e 	strb.w	r7, [r4, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80090ce:	f894 2490 	ldrb.w	r2, [r4, #1168]	@ 0x490
 80090d2:	f884 248f 	strb.w	r2, [r4, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 80090d6:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 80090da:	f884 3422 	strb.w	r3, [r4, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 80090de:	f884 3425 	strb.w	r3, [r4, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 80090e2:	f8c4 3428 	str.w	r3, [r4, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 80090e6:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 80090ea:	f884 342d 	strb.w	r3, [r4, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 80090ee:	f884 342e 	strb.w	r3, [r4, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80090f2:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80090f6:	f884 3420 	strb.w	r3, [r4, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 80090fa:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80090fe:	f884 3438 	strb.w	r3, [r4, #1080]	@ 0x438
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8009102:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    Radio.Sleep( );
 8009106:	4b8f      	ldr	r3, [pc, #572]	@ (8009344 <ProcessRadioRxDone+0x2ac>)
 8009108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910a:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800910c:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 8009110:	b1d3      	cbz	r3, 8009148 <ProcessRadioRxDone+0xb0>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8009112:	4629      	mov	r1, r5
 8009114:	4630      	mov	r0, r6
 8009116:	f002 fdb4 	bl	800bc82 <LoRaMacClassBRxBeacon>
 800911a:	b9d0      	cbnz	r0, 8009152 <ProcessRadioRxDone+0xba>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800911c:	4b86      	ldr	r3, [pc, #536]	@ (8009338 <ProcessRadioRxDone+0x2a0>)
 800911e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009122:	2b01      	cmp	r3, #1
 8009124:	d01d      	beq.n	8009162 <ProcessRadioRxDone+0xca>
    if( size == 0 )
 8009126:	2d00      	cmp	r5, #0
 8009128:	d038      	beq.n	800919c <ProcessRadioRxDone+0x104>
    macHdr.Value = payload[pktHeaderLen++];
 800912a:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800912c:	0963      	lsrs	r3, r4, #5
 800912e:	3b01      	subs	r3, #1
 8009130:	2b06      	cmp	r3, #6
 8009132:	f200 82fb 	bhi.w	800972c <ProcessRadioRxDone+0x694>
 8009136:	e8df f013 	tbh	[pc, r3, lsl #1]
 800913a:	0038      	.short	0x0038
 800913c:	00d102f9 	.word	0x00d102f9
 8009140:	00cd02f9 	.word	0x00cd02f9
 8009144:	02cd02f9 	.word	0x02cd02f9
        TimerStop( &MacCtx.RxWindowTimer2 );
 8009148:	f504 7066 	add.w	r0, r4, #920	@ 0x398
 800914c:	f008 f926 	bl	801139c <UTIL_TIMER_Stop>
 8009150:	e7df      	b.n	8009112 <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8009152:	4b7b      	ldr	r3, [pc, #492]	@ (8009340 <ProcessRadioRxDone+0x2a8>)
 8009154:	f8a3 847e 	strh.w	r8, [r3, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8009158:	f883 7480 	strb.w	r7, [r3, #1152]	@ 0x480
}
 800915c:	b025      	add	sp, #148	@ 0x94
 800915e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009162:	f002 fd92 	bl	800bc8a <LoRaMacClassBIsPingExpected>
 8009166:	b150      	cbz	r0, 800917e <ProcessRadioRxDone+0xe6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009168:	2000      	movs	r0, #0
 800916a:	f002 fd83 	bl	800bc74 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800916e:	2000      	movs	r0, #0
 8009170:	f002 fd85 	bl	800bc7e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8009174:	4b72      	ldr	r3, [pc, #456]	@ (8009340 <ProcessRadioRxDone+0x2a8>)
 8009176:	2204      	movs	r2, #4
 8009178:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800917c:	e7d3      	b.n	8009126 <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800917e:	f002 fd86 	bl	800bc8e <LoRaMacClassBIsMulticastExpected>
 8009182:	2800      	cmp	r0, #0
 8009184:	d0cf      	beq.n	8009126 <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009186:	2000      	movs	r0, #0
 8009188:	f002 fd75 	bl	800bc76 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800918c:	2000      	movs	r0, #0
 800918e:	f002 fd77 	bl	800bc80 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8009192:	4b6b      	ldr	r3, [pc, #428]	@ (8009340 <ProcessRadioRxDone+0x2a8>)
 8009194:	2205      	movs	r2, #5
 8009196:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800919a:	e7c4      	b.n	8009126 <ProcessRadioRxDone+0x8e>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800919c:	4b68      	ldr	r3, [pc, #416]	@ (8009340 <ProcessRadioRxDone+0x2a8>)
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 80091a4:	f7ff fc0c 	bl	80089c0 <PrepareRxDoneAbort>
        return;
 80091a8:	e7d8      	b.n	800915c <ProcessRadioRxDone+0xc4>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80091aa:	2d10      	cmp	r5, #16
 80091ac:	d92e      	bls.n	800920c <ProcessRadioRxDone+0x174>
            macMsgJoinAccept.Buffer = payload;
 80091ae:	9608      	str	r6, [sp, #32]
            macMsgJoinAccept.BufSize = size;
 80091b0:	b2ed      	uxtb	r5, r5
 80091b2:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80091b6:	4b60      	ldr	r3, [pc, #384]	@ (8009338 <ProcessRadioRxDone+0x2a0>)
 80091b8:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80091bc:	bb6b      	cbnz	r3, 800921a <ProcessRadioRxDone+0x182>
            SecureElementGetJoinEui( joinEui );
 80091be:	a804      	add	r0, sp, #16
 80091c0:	f005 fda2 	bl	800ed08 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 80091c4:	aa08      	add	r2, sp, #32
 80091c6:	a904      	add	r1, sp, #16
 80091c8:	20ff      	movs	r0, #255	@ 0xff
 80091ca:	f003 fb4f 	bl	800c86c <LoRaMacCryptoHandleJoinAccept>
 80091ce:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80091d0:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 80091d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80091d8:	f88d 300c 	strb.w	r3, [sp, #12]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80091dc:	4b56      	ldr	r3, [pc, #344]	@ (8009338 <ProcessRadioRxDone+0x2a0>)
 80091de:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80091e2:	f88d 200d 	strb.w	r2, [sp, #13]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 80091e6:	2207      	movs	r2, #7
 80091e8:	a903      	add	r1, sp, #12
 80091ea:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80091ee:	f003 fd58 	bl	800cca2 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 80091f2:	b904      	cbnz	r4, 80091f6 <ProcessRadioRxDone+0x15e>
 80091f4:	b9c0      	cbnz	r0, 8009228 <ProcessRadioRxDone+0x190>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80091f6:	2001      	movs	r0, #1
 80091f8:	f002 ffbc 	bl	800c174 <LoRaMacConfirmQueueIsCmdActive>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	f000 8281 	beq.w	8009704 <ProcessRadioRxDone+0x66c>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8009202:	2101      	movs	r1, #1
 8009204:	2007      	movs	r0, #7
 8009206:	f002 ff69 	bl	800c0dc <LoRaMacConfirmQueueSetStatus>
 800920a:	e27b      	b.n	8009704 <ProcessRadioRxDone+0x66c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800920c:	4b4c      	ldr	r3, [pc, #304]	@ (8009340 <ProcessRadioRxDone+0x2a8>)
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8009214:	f7ff fbd4 	bl	80089c0 <PrepareRxDoneAbort>
                return;
 8009218:	e7a0      	b.n	800915c <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800921a:	4b49      	ldr	r3, [pc, #292]	@ (8009340 <ProcessRadioRxDone+0x2a8>)
 800921c:	2201      	movs	r2, #1
 800921e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8009222:	f7ff fbcd 	bl	80089c0 <PrepareRxDoneAbort>
                return;
 8009226:	e799      	b.n	800915c <ProcessRadioRxDone+0xc4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8009228:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 800922c:	4c42      	ldr	r4, [pc, #264]	@ (8009338 <ProcessRadioRxDone+0x2a0>)
 800922e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8009232:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 8009236:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800923a:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800923e:	f89d 202b 	ldrb.w	r2, [sp, #43]	@ 0x2b
 8009242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009246:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800924a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800924c:	f8c4 10e4 	str.w	r1, [r4, #228]	@ 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 8009250:	2002      	movs	r0, #2
 8009252:	f005 fd67 	bl	800ed24 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8009256:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800925a:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800925e:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009262:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009266:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800926a:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800926e:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8009272:	65a3      	str	r3, [r4, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8009274:	b90b      	cbnz	r3, 800927a <ProcessRadioRxDone+0x1e2>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8009276:	2201      	movs	r2, #1
 8009278:	65a2      	str	r2, [r4, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800927a:	4c2f      	ldr	r4, [pc, #188]	@ (8009338 <ProcessRadioRxDone+0x2a0>)
 800927c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800927e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009282:	fb02 f303 	mul.w	r3, r2, r3
 8009286:	65a3      	str	r3, [r4, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8009288:	4413      	add	r3, r2
 800928a:	65e3      	str	r3, [r4, #92]	@ 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800928c:	2601      	movs	r6, #1
 800928e:	f884 6068 	strb.w	r6, [r4, #104]	@ 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8009292:	2300      	movs	r3, #0
 8009294:	f884 312e 	strb.w	r3, [r4, #302]	@ 0x12e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8009298:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800929c:	9322      	str	r3, [sp, #136]	@ 0x88
                applyCFList.Size = size - 17;
 800929e:	3d11      	subs	r5, #17
 80092a0:	f88d 508c 	strb.w	r5, [sp, #140]	@ 0x8c
                applyCFList.JoinChannel = MacCtx.Channel;
 80092a4:	4b26      	ldr	r3, [pc, #152]	@ (8009340 <ProcessRadioRxDone+0x2a8>)
 80092a6:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 80092aa:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80092ae:	a921      	add	r1, sp, #132	@ 0x84
 80092b0:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 80092b4:	f003 fd00 	bl	800ccb8 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80092b8:	2302      	movs	r3, #2
 80092ba:	f884 3130 	strb.w	r3, [r4, #304]	@ 0x130
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80092be:	4630      	mov	r0, r6
 80092c0:	f002 ff58 	bl	800c174 <LoRaMacConfirmQueueIsCmdActive>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	f000 821d 	beq.w	8009704 <ProcessRadioRxDone+0x66c>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 80092ca:	4631      	mov	r1, r6
 80092cc:	2000      	movs	r0, #0
 80092ce:	f002 ff05 	bl	800c0dc <LoRaMacConfirmQueueSetStatus>
 80092d2:	e217      	b.n	8009704 <ProcessRadioRxDone+0x66c>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80092d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009340 <ProcessRadioRxDone+0x2a8>)
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80092dc:	4b16      	ldr	r3, [pc, #88]	@ (8009338 <ProcessRadioRxDone+0x2a0>)
 80092de:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80092e2:	f88d 207e 	strb.w	r2, [sp, #126]	@ 0x7e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80092e6:	4a16      	ldr	r2, [pc, #88]	@ (8009340 <ProcessRadioRxDone+0x2a8>)
 80092e8:	f992 2424 	ldrsb.w	r2, [r2, #1060]	@ 0x424
 80092ec:	f88d 207d 	strb.w	r2, [sp, #125]	@ 0x7d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80092f0:	220d      	movs	r2, #13
 80092f2:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80092f6:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80092fa:	b113      	cbz	r3, 8009302 <ProcessRadioRxDone+0x26a>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80092fc:	230e      	movs	r3, #14
 80092fe:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009302:	a91f      	add	r1, sp, #124	@ 0x7c
 8009304:	4b0c      	ldr	r3, [pc, #48]	@ (8009338 <ProcessRadioRxDone+0x2a0>)
 8009306:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800930a:	f003 fca9 	bl	800cc60 <RegionGetPhyParam>
 800930e:	901e      	str	r0, [sp, #120]	@ 0x78
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8009310:	f1a5 030d 	sub.w	r3, r5, #13
 8009314:	b21b      	sxth	r3, r3
 8009316:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800931a:	b200      	sxth	r0, r0
 800931c:	4283      	cmp	r3, r0
 800931e:	dc01      	bgt.n	8009324 <ProcessRadioRxDone+0x28c>
 8009320:	2d0b      	cmp	r5, #11
 8009322:	d811      	bhi.n	8009348 <ProcessRadioRxDone+0x2b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009324:	4b06      	ldr	r3, [pc, #24]	@ (8009340 <ProcessRadioRxDone+0x2a8>)
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800932c:	f7ff fb48 	bl	80089c0 <PrepareRxDoneAbort>
                return;
 8009330:	e714      	b.n	800915c <ProcessRadioRxDone+0xc4>
 8009332:	bf00      	nop
 8009334:	20000858 	.word	0x20000858
 8009338:	20008000 	.word	0x20008000
 800933c:	2000086c 	.word	0x2000086c
 8009340:	20000900 	.word	0x20000900
 8009344:	080126d4 	.word	0x080126d4
            macMsgData.Buffer = payload;
 8009348:	9612      	str	r6, [sp, #72]	@ 0x48
            macMsgData.BufSize = size;
 800934a:	f88d 504c 	strb.w	r5, [sp, #76]	@ 0x4c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800934e:	4ba5      	ldr	r3, [pc, #660]	@ (80095e4 <ProcessRadioRxDone+0x54c>)
 8009350:	931b      	str	r3, [sp, #108]	@ 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8009352:	23ff      	movs	r3, #255	@ 0xff
 8009354:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009358:	a812      	add	r0, sp, #72	@ 0x48
 800935a:	f003 fb55 	bl	800ca08 <LoRaMacParserData>
 800935e:	2800      	cmp	r0, #0
 8009360:	d142      	bne.n	80093e8 <ProcessRadioRxDone+0x350>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009362:	4ba1      	ldr	r3, [pc, #644]	@ (80095e8 <ProcessRadioRxDone+0x550>)
 8009364:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009368:	2b01      	cmp	r3, #1
 800936a:	d044      	beq.n	80093f6 <ProcessRadioRxDone+0x35e>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800936c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800936e:	4b9f      	ldr	r3, [pc, #636]	@ (80095ec <ProcessRadioRxDone+0x554>)
 8009370:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8009374:	a904      	add	r1, sp, #16
 8009376:	a812      	add	r0, sp, #72	@ 0x48
 8009378:	f7ff f99c 	bl	80086b4 <DetermineFrameType>
 800937c:	4605      	mov	r5, r0
 800937e:	2800      	cmp	r0, #0
 8009380:	d164      	bne.n	800944c <ProcessRadioRxDone+0x3b4>
            downLinkCounter = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	9307      	str	r3, [sp, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d066      	beq.n	800945a <ProcessRadioRxDone+0x3c2>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800938c:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800938e:	2d01      	cmp	r5, #1
 8009390:	d10a      	bne.n	80093a8 <ProcessRadioRxDone+0x310>
 8009392:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009396:	2b03      	cmp	r3, #3
 8009398:	f040 808e 	bne.w	80094b8 <ProcessRadioRxDone+0x420>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800939c:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80093a0:	f013 0f60 	tst.w	r3, #96	@ 0x60
 80093a4:	f040 8088 	bne.w	80094b8 <ProcessRadioRxDone+0x420>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 80093a8:	ab07      	add	r3, sp, #28
 80093aa:	9301      	str	r3, [sp, #4]
 80093ac:	f10d 031b 	add.w	r3, sp, #27
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	4b8d      	ldr	r3, [pc, #564]	@ (80095e8 <ProcessRadioRxDone+0x550>)
 80093b4:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80093b8:	aa12      	add	r2, sp, #72	@ 0x48
 80093ba:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80093be:	4630      	mov	r0, r6
 80093c0:	f7ff fb3c 	bl	8008a3c <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80093c4:	2800      	cmp	r0, #0
 80093c6:	f000 8083 	beq.w	80094d0 <ProcessRadioRxDone+0x438>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80093ca:	2807      	cmp	r0, #7
 80093cc:	d07b      	beq.n	80094c6 <ProcessRadioRxDone+0x42e>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80093ce:	4b87      	ldr	r3, [pc, #540]	@ (80095ec <ProcessRadioRxDone+0x554>)
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80093d6:	9a07      	ldr	r2, [sp, #28]
 80093d8:	4b84      	ldr	r3, [pc, #528]	@ (80095ec <ProcessRadioRxDone+0x554>)
 80093da:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80093de:	f8c3 246c 	str.w	r2, [r3, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 80093e2:	f7ff faed 	bl	80089c0 <PrepareRxDoneAbort>
                return;
 80093e6:	e6b9      	b.n	800915c <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80093e8:	4b80      	ldr	r3, [pc, #512]	@ (80095ec <ProcessRadioRxDone+0x554>)
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 80093f0:	f7ff fae6 	bl	80089c0 <PrepareRxDoneAbort>
                return;
 80093f4:	e6b2      	b.n	800915c <ProcessRadioRxDone+0xc4>
                if( LoRaMacClassBIsPingExpected( ) == true )
 80093f6:	f002 fc48 	bl	800bc8a <LoRaMacClassBIsPingExpected>
 80093fa:	b188      	cbz	r0, 8009420 <ProcessRadioRxDone+0x388>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80093fc:	2000      	movs	r0, #0
 80093fe:	f002 fc39 	bl	800bc74 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8009402:	2000      	movs	r0, #0
 8009404:	f002 fc3b 	bl	800bc7e <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8009408:	4b78      	ldr	r3, [pc, #480]	@ (80095ec <ProcessRadioRxDone+0x554>)
 800940a:	2204      	movs	r2, #4
 800940c:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8009410:	f89d 1054 	ldrb.w	r1, [sp, #84]	@ 0x54
 8009414:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8009418:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800941a:	f002 fc4f 	bl	800bcbc <LoRaMacClassBSetFPendingBit>
 800941e:	e7a5      	b.n	800936c <ProcessRadioRxDone+0x2d4>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009420:	f002 fc35 	bl	800bc8e <LoRaMacClassBIsMulticastExpected>
 8009424:	2800      	cmp	r0, #0
 8009426:	d0a1      	beq.n	800936c <ProcessRadioRxDone+0x2d4>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009428:	2000      	movs	r0, #0
 800942a:	f002 fc24 	bl	800bc76 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800942e:	2000      	movs	r0, #0
 8009430:	f002 fc26 	bl	800bc80 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8009434:	4b6d      	ldr	r3, [pc, #436]	@ (80095ec <ProcessRadioRxDone+0x554>)
 8009436:	2205      	movs	r2, #5
 8009438:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800943c:	f89d 1054 	ldrb.w	r1, [sp, #84]	@ 0x54
 8009440:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8009444:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8009446:	f002 fc39 	bl	800bcbc <LoRaMacClassBSetFPendingBit>
 800944a:	e78f      	b.n	800936c <ProcessRadioRxDone+0x2d4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800944c:	4b67      	ldr	r3, [pc, #412]	@ (80095ec <ProcessRadioRxDone+0x554>)
 800944e:	2201      	movs	r2, #1
 8009450:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8009454:	f7ff fab4 	bl	80089c0 <PrepareRxDoneAbort>
                return;
 8009458:	e680      	b.n	800915c <ProcessRadioRxDone+0xc4>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800945a:	4618      	mov	r0, r3
 800945c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8009460:	4a61      	ldr	r2, [pc, #388]	@ (80095e8 <ProcessRadioRxDone+0x550>)
 8009462:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8009466:	f8d2 20ec 	ldr.w	r2, [r2, #236]	@ 0xec
 800946a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800946c:	428a      	cmp	r2, r1
 800946e:	d002      	beq.n	8009476 <ProcessRadioRxDone+0x3de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009470:	3301      	adds	r3, #1
 8009472:	b2db      	uxtb	r3, r3
 8009474:	e788      	b.n	8009388 <ProcessRadioRxDone+0x2f0>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8009476:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800947a:	495b      	ldr	r1, [pc, #364]	@ (80095e8 <ProcessRadioRxDone+0x550>)
 800947c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8009480:	f891 10e9 	ldrb.w	r1, [r1, #233]	@ 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009484:	2900      	cmp	r1, #0
 8009486:	d0f3      	beq.n	8009470 <ProcessRadioRxDone+0x3d8>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8009488:	4b57      	ldr	r3, [pc, #348]	@ (80095e8 <ProcessRadioRxDone+0x550>)
 800948a:	2130      	movs	r1, #48	@ 0x30
 800948c:	fb01 3000 	mla	r0, r1, r0, r3
 8009490:	f890 60ea 	ldrb.w	r6, [r0, #234]	@ 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8009494:	f8d0 110c 	ldr.w	r1, [r0, #268]	@ 0x10c
 8009498:	6809      	ldr	r1, [r1, #0]
 800949a:	9107      	str	r1, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800949c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d002      	beq.n	80094aa <ProcessRadioRxDone+0x412>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80094a4:	4691      	mov	r9, r2
                    multicast = 1;
 80094a6:	2501      	movs	r5, #1
 80094a8:	e771      	b.n	800938e <ProcessRadioRxDone+0x2f6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80094aa:	4b50      	ldr	r3, [pc, #320]	@ (80095ec <ProcessRadioRxDone+0x554>)
 80094ac:	2103      	movs	r1, #3
 80094ae:	f883 148f 	strb.w	r1, [r3, #1167]	@ 0x48f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80094b2:	4691      	mov	r9, r2
                    multicast = 1;
 80094b4:	2501      	movs	r5, #1
 80094b6:	e76a      	b.n	800938e <ProcessRadioRxDone+0x2f6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80094b8:	4b4c      	ldr	r3, [pc, #304]	@ (80095ec <ProcessRadioRxDone+0x554>)
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 80094c0:	f7ff fa7e 	bl	80089c0 <PrepareRxDoneAbort>
                return;
 80094c4:	e64a      	b.n	800915c <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80094c6:	4b49      	ldr	r3, [pc, #292]	@ (80095ec <ProcessRadioRxDone+0x554>)
 80094c8:	2208      	movs	r2, #8
 80094ca:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 80094ce:	e782      	b.n	80093d6 <ProcessRadioRxDone+0x33e>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80094d0:	ab12      	add	r3, sp, #72	@ 0x48
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	9b07      	ldr	r3, [sp, #28]
 80094d6:	f89d 201b 	ldrb.w	r2, [sp, #27]
 80094da:	4649      	mov	r1, r9
 80094dc:	4630      	mov	r0, r6
 80094de:	f003 f91d 	bl	800c71c <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d14a      	bne.n	800957c <ProcessRadioRxDone+0x4e4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80094e6:	4b41      	ldr	r3, [pc, #260]	@ (80095ec <ProcessRadioRxDone+0x554>)
 80094e8:	2100      	movs	r1, #0
 80094ea:	f883 1421 	strb.w	r1, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 80094ee:	f883 5422 	strb.w	r5, [r3, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 80094f2:	f8c3 1428 	str.w	r1, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 80094f6:	f883 142c 	strb.w	r1, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80094fa:	9a07      	ldr	r2, [sp, #28]
 80094fc:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8009500:	f8c3 246c 	str.w	r2, [r3, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009504:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8009508:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800950c:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009510:	f883 1441 	strb.w	r1, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009514:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009518:	f893 048f 	ldrb.w	r0, [r3, #1167]	@ 0x48f
 800951c:	2801      	cmp	r0, #1
 800951e:	d93b      	bls.n	8009598 <ProcessRadioRxDone+0x500>
            if( multicast == 1 )
 8009520:	2d01      	cmp	r5, #1
 8009522:	d03f      	beq.n	80095a4 <ProcessRadioRxDone+0x50c>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8009524:	f004 04e0 	and.w	r4, r4, #224	@ 0xe0
 8009528:	2ca0      	cmp	r4, #160	@ 0xa0
 800952a:	d040      	beq.n	80095ae <ProcessRadioRxDone+0x516>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800952c:	2300      	movs	r3, #0
 800952e:	4a2e      	ldr	r2, [pc, #184]	@ (80095e8 <ProcessRadioRxDone+0x550>)
 8009530:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009534:	4a2d      	ldr	r2, [pc, #180]	@ (80095ec <ProcessRadioRxDone+0x554>)
 8009536:	f882 3420 	strb.w	r3, [r2, #1056]	@ 0x420
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800953a:	4b2b      	ldr	r3, [pc, #172]	@ (80095e8 <ProcessRadioRxDone+0x550>)
 800953c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009540:	b923      	cbnz	r3, 800954c <ProcessRadioRxDone+0x4b4>
 8009542:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8009546:	f013 0f10 	tst.w	r3, #16
 800954a:	d007      	beq.n	800955c <ProcessRadioRxDone+0x4c4>
 800954c:	4b26      	ldr	r3, [pc, #152]	@ (80095e8 <ProcessRadioRxDone+0x550>)
 800954e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009552:	b91b      	cbnz	r3, 800955c <ProcessRadioRxDone+0x4c4>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8009554:	4b25      	ldr	r3, [pc, #148]	@ (80095ec <ProcessRadioRxDone+0x554>)
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800955c:	4b23      	ldr	r3, [pc, #140]	@ (80095ec <ProcessRadioRxDone+0x554>)
 800955e:	f893 2440 	ldrb.w	r2, [r3, #1088]	@ 0x440
 8009562:	f89d 1054 	ldrb.w	r1, [sp, #84]	@ 0x54
 8009566:	f7ff fa94 	bl	8008a92 <RemoveMacCommands>
            switch( fType )
 800956a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800956e:	2b03      	cmp	r3, #3
 8009570:	f200 8099 	bhi.w	80096a6 <ProcessRadioRxDone+0x60e>
 8009574:	e8df f003 	tbb	[pc, r3]
 8009578:	8777653e 	.word	0x8777653e
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800957c:	2802      	cmp	r0, #2
 800957e:	d006      	beq.n	800958e <ProcessRadioRxDone+0x4f6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8009580:	4b1a      	ldr	r3, [pc, #104]	@ (80095ec <ProcessRadioRxDone+0x554>)
 8009582:	220b      	movs	r2, #11
 8009584:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8009588:	f7ff fa1a 	bl	80089c0 <PrepareRxDoneAbort>
                return;
 800958c:	e5e6      	b.n	800915c <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800958e:	4b17      	ldr	r3, [pc, #92]	@ (80095ec <ProcessRadioRxDone+0x554>)
 8009590:	220a      	movs	r2, #10
 8009592:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 8009596:	e7f7      	b.n	8009588 <ProcessRadioRxDone+0x4f0>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8009598:	4b13      	ldr	r3, [pc, #76]	@ (80095e8 <ProcessRadioRxDone+0x550>)
 800959a:	6299      	str	r1, [r3, #40]	@ 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800959c:	2201      	movs	r2, #1
 800959e:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
 80095a2:	e7bd      	b.n	8009520 <ProcessRadioRxDone+0x488>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 80095a4:	4b11      	ldr	r3, [pc, #68]	@ (80095ec <ProcessRadioRxDone+0x554>)
 80095a6:	2202      	movs	r2, #2
 80095a8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 80095ac:	e7c5      	b.n	800953a <ProcessRadioRxDone+0x4a2>
                    Nvm.MacGroup1.SrvAckRequested = true;
 80095ae:	4b0e      	ldr	r3, [pc, #56]	@ (80095e8 <ProcessRadioRxDone+0x550>)
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80095b6:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 80095ba:	b913      	cbnz	r3, 80095c2 <ProcessRadioRxDone+0x52a>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 80095bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80095be:	4b0a      	ldr	r3, [pc, #40]	@ (80095e8 <ProcessRadioRxDone+0x550>)
 80095c0:	635a      	str	r2, [r3, #52]	@ 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80095c2:	4b0a      	ldr	r3, [pc, #40]	@ (80095ec <ProcessRadioRxDone+0x554>)
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80095ca:	4290      	cmp	r0, r2
 80095cc:	d9b5      	bls.n	800953a <ProcessRadioRxDone+0x4a2>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80095ce:	4b06      	ldr	r3, [pc, #24]	@ (80095e8 <ProcessRadioRxDone+0x550>)
 80095d0:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80095d4:	4b05      	ldr	r3, [pc, #20]	@ (80095ec <ProcessRadioRxDone+0x554>)
 80095d6:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 80095da:	4a05      	ldr	r2, [pc, #20]	@ (80095f0 <ProcessRadioRxDone+0x558>)
 80095dc:	6812      	ldr	r2, [r2, #0]
 80095de:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
 80095e2:	e7aa      	b.n	800953a <ProcessRadioRxDone+0x4a2>
 80095e4:	20000b38 	.word	0x20000b38
 80095e8:	20008000 	.word	0x20008000
 80095ec:	20000900 	.word	0x20000900
 80095f0:	20000858 	.word	0x20000858
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80095f4:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 80095f8:	4c57      	ldr	r4, [pc, #348]	@ (8009758 <ProcessRadioRxDone+0x6c0>)
 80095fa:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	463b      	mov	r3, r7
 8009602:	f002 020f 	and.w	r2, r2, #15
 8009606:	2100      	movs	r1, #0
 8009608:	a816      	add	r0, sp, #88	@ 0x58
 800960a:	f7ff fa51 	bl	8008ab0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800960e:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 8009612:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009616:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009618:	f8c4 3428 	str.w	r3, [r4, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800961c:	f89d 3070 	ldrb.w	r3, [sp, #112]	@ 0x70
 8009620:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8009624:	2301      	movs	r3, #1
 8009626:	f884 342d 	strb.w	r3, [r4, #1069]	@ 0x42d
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800962a:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 800962e:	2be0      	cmp	r3, #224	@ 0xe0
 8009630:	d040      	beq.n	80096b4 <ProcessRadioRxDone+0x61c>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009632:	4a49      	ldr	r2, [pc, #292]	@ (8009758 <ProcessRadioRxDone+0x6c0>)
 8009634:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8009638:	f043 0302 	orr.w	r3, r3, #2
 800963c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 8009640:	e060      	b.n	8009704 <ProcessRadioRxDone+0x66c>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8009642:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8009646:	4c44      	ldr	r4, [pc, #272]	@ (8009758 <ProcessRadioRxDone+0x6c0>)
 8009648:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	463b      	mov	r3, r7
 8009650:	f002 020f 	and.w	r2, r2, #15
 8009654:	2100      	movs	r1, #0
 8009656:	a816      	add	r0, sp, #88	@ 0x58
 8009658:	f7ff fa2a 	bl	8008ab0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800965c:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 8009660:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    break;
 8009664:	e7e1      	b.n	800962a <ProcessRadioRxDone+0x592>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8009666:	4c3c      	ldr	r4, [pc, #240]	@ (8009758 <ProcessRadioRxDone+0x6c0>)
 8009668:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	463b      	mov	r3, r7
 8009670:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8009674:	2100      	movs	r1, #0
 8009676:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8009678:	f7ff fa1a 	bl	8008ab0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800967c:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 8009680:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    break;
 8009684:	e7d1      	b.n	800962a <ProcessRadioRxDone+0x592>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009686:	f89d 2068 	ldrb.w	r2, [sp, #104]	@ 0x68
 800968a:	4b33      	ldr	r3, [pc, #204]	@ (8009758 <ProcessRadioRxDone+0x6c0>)
 800968c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009690:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009692:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009696:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 800969a:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 80096a4:	e7c1      	b.n	800962a <ProcessRadioRxDone+0x592>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80096a6:	4b2c      	ldr	r3, [pc, #176]	@ (8009758 <ProcessRadioRxDone+0x6c0>)
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 80096ae:	f7ff f987 	bl	80089c0 <PrepareRxDoneAbort>
                    break;
 80096b2:	e7ba      	b.n	800962a <ProcessRadioRxDone+0x592>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 80096b4:	4a29      	ldr	r2, [pc, #164]	@ (800975c <ProcessRadioRxDone+0x6c4>)
 80096b6:	f892 211f 	ldrb.w	r2, [r2, #287]	@ 0x11f
 80096ba:	2a00      	cmp	r2, #0
 80096bc:	d1b9      	bne.n	8009632 <ProcessRadioRxDone+0x59a>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 80096be:	4a26      	ldr	r2, [pc, #152]	@ (8009758 <ProcessRadioRxDone+0x6c0>)
 80096c0:	f882 3423 	strb.w	r3, [r2, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 80096c4:	2300      	movs	r3, #0
 80096c6:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 80096ca:	f882 342c 	strb.w	r3, [r2, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 80096ce:	f882 342d 	strb.w	r3, [r2, #1069]	@ 0x42d
 80096d2:	e7ae      	b.n	8009632 <ProcessRadioRxDone+0x59a>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80096d4:	1e6a      	subs	r2, r5, #1
 80096d6:	4c22      	ldr	r4, [pc, #136]	@ (8009760 <ProcessRadioRxDone+0x6c8>)
 80096d8:	b292      	uxth	r2, r2
 80096da:	1c71      	adds	r1, r6, #1
 80096dc:	4620      	mov	r0, r4
 80096de:	f005 fc30 	bl	800ef42 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80096e2:	2203      	movs	r2, #3
 80096e4:	f884 21e8 	strb.w	r2, [r4, #488]	@ 0x1e8
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80096e8:	2200      	movs	r2, #0
 80096ea:	f884 21e9 	strb.w	r2, [r4, #489]	@ 0x1e9
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80096ee:	f8c4 41f0 	str.w	r4, [r4, #496]	@ 0x1f0
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80096f2:	3d01      	subs	r5, #1
 80096f4:	f884 51f4 	strb.w	r5, [r4, #500]	@ 0x1f4
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80096f8:	f894 2259 	ldrb.w	r2, [r4, #601]	@ 0x259
 80096fc:	f042 0202 	orr.w	r2, r2, #2
 8009700:	f884 2259 	strb.w	r2, [r4, #601]	@ 0x259
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009704:	4b14      	ldr	r3, [pc, #80]	@ (8009758 <ProcessRadioRxDone+0x6c0>)
 8009706:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800970a:	2b01      	cmp	r3, #1
 800970c:	d915      	bls.n	800973a <ProcessRadioRxDone+0x6a2>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800970e:	4b12      	ldr	r3, [pc, #72]	@ (8009758 <ProcessRadioRxDone+0x6c0>)
 8009710:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8009714:	2b02      	cmp	r3, #2
 8009716:	d006      	beq.n	8009726 <ProcessRadioRxDone+0x68e>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8009718:	4a0f      	ldr	r2, [pc, #60]	@ (8009758 <ProcessRadioRxDone+0x6c0>)
 800971a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800971e:	f043 0310 	orr.w	r3, r3, #16
 8009722:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    UpdateRxSlotIdleState( );
 8009726:	f7fe ff39 	bl	800859c <UpdateRxSlotIdleState>
 800972a:	e517      	b.n	800915c <ProcessRadioRxDone+0xc4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800972c:	4b0a      	ldr	r3, [pc, #40]	@ (8009758 <ProcessRadioRxDone+0x6c0>)
 800972e:	2201      	movs	r2, #1
 8009730:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 8009734:	f7ff f944 	bl	80089c0 <PrepareRxDoneAbort>
            break;
 8009738:	e7e4      	b.n	8009704 <ProcessRadioRxDone+0x66c>
        if( MacCtx.NodeAckRequested == true )
 800973a:	4b07      	ldr	r3, [pc, #28]	@ (8009758 <ProcessRadioRxDone+0x6c0>)
 800973c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8009740:	2b00      	cmp	r3, #0
 8009742:	d0e4      	beq.n	800970e <ProcessRadioRxDone+0x676>
            if( MacCtx.McpsConfirm.AckReceived == true )
 8009744:	4b04      	ldr	r3, [pc, #16]	@ (8009758 <ProcessRadioRxDone+0x6c0>)
 8009746:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800974a:	2b00      	cmp	r3, #0
 800974c:	d0df      	beq.n	800970e <ProcessRadioRxDone+0x676>
                OnRetransmitTimeoutTimerEvent( NULL );
 800974e:	2000      	movs	r0, #0
 8009750:	f7ff f924 	bl	800899c <OnRetransmitTimeoutTimerEvent>
 8009754:	e7db      	b.n	800970e <ProcessRadioRxDone+0x676>
 8009756:	bf00      	nop
 8009758:	20000900 	.word	0x20000900
 800975c:	20008000 	.word	0x20008000
 8009760:	20000b38 	.word	0x20000b38

08009764 <ProcessRadioTxTimeout>:
{
 8009764:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009766:	4b0f      	ldr	r3, [pc, #60]	@ (80097a4 <ProcessRadioTxTimeout+0x40>)
 8009768:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800976c:	2b02      	cmp	r3, #2
 800976e:	d002      	beq.n	8009776 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8009770:	4b0d      	ldr	r3, [pc, #52]	@ (80097a8 <ProcessRadioTxTimeout+0x44>)
 8009772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009774:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8009776:	f7fe ff11 	bl	800859c <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800977a:	4c0c      	ldr	r4, [pc, #48]	@ (80097ac <ProcessRadioTxTimeout+0x48>)
 800977c:	2002      	movs	r0, #2
 800977e:	f884 0441 	strb.w	r0, [r4, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009782:	f002 fcd9 	bl	800c138 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8009786:	f894 341a 	ldrb.w	r3, [r4, #1050]	@ 0x41a
 800978a:	b113      	cbz	r3, 8009792 <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800978c:	2201      	movs	r2, #1
 800978e:	f884 2419 	strb.w	r2, [r4, #1049]	@ 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009792:	4a06      	ldr	r2, [pc, #24]	@ (80097ac <ProcessRadioTxTimeout+0x48>)
 8009794:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8009798:	f043 0310 	orr.w	r3, r3, #16
 800979c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 80097a0:	bd10      	pop	{r4, pc}
 80097a2:	bf00      	nop
 80097a4:	20008000 	.word	0x20008000
 80097a8:	080126d4 	.word	0x080126d4
 80097ac:	20000900 	.word	0x20000900

080097b0 <CheckForClassBCollision>:
{
 80097b0:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80097b2:	f002 fa68 	bl	800bc86 <LoRaMacClassBIsBeaconExpected>
 80097b6:	b978      	cbnz	r0, 80097d8 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80097b8:	4b09      	ldr	r3, [pc, #36]	@ (80097e0 <CheckForClassBCollision+0x30>)
 80097ba:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d001      	beq.n	80097c6 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 80097c2:	2000      	movs	r0, #0
}
 80097c4:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 80097c6:	f002 fa60 	bl	800bc8a <LoRaMacClassBIsPingExpected>
 80097ca:	b938      	cbnz	r0, 80097dc <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80097cc:	f002 fa5f 	bl	800bc8e <LoRaMacClassBIsMulticastExpected>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d0f7      	beq.n	80097c4 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80097d4:	200f      	movs	r0, #15
 80097d6:	e7f5      	b.n	80097c4 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80097d8:	200e      	movs	r0, #14
 80097da:	e7f3      	b.n	80097c4 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80097dc:	200f      	movs	r0, #15
 80097de:	e7f1      	b.n	80097c4 <CheckForClassBCollision+0x14>
 80097e0:	20008000 	.word	0x20008000

080097e4 <HandleRadioRxErrorTimeout>:
{
 80097e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e6:	4605      	mov	r5, r0
 80097e8:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80097ea:	4b34      	ldr	r3, [pc, #208]	@ (80098bc <HandleRadioRxErrorTimeout+0xd8>)
 80097ec:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d002      	beq.n	80097fa <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 80097f4:	4b32      	ldr	r3, [pc, #200]	@ (80098c0 <HandleRadioRxErrorTimeout+0xdc>)
 80097f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f8:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80097fa:	f002 fa44 	bl	800bc86 <LoRaMacClassBIsBeaconExpected>
 80097fe:	4606      	mov	r6, r0
 8009800:	bb48      	cbnz	r0, 8009856 <HandleRadioRxErrorTimeout+0x72>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009802:	4b2e      	ldr	r3, [pc, #184]	@ (80098bc <HandleRadioRxErrorTimeout+0xd8>)
 8009804:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009808:	2b01      	cmp	r3, #1
 800980a:	d02b      	beq.n	8009864 <HandleRadioRxErrorTimeout+0x80>
    if( classBRx == false )
 800980c:	2e00      	cmp	r6, #0
 800980e:	d151      	bne.n	80098b4 <HandleRadioRxErrorTimeout+0xd0>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009810:	4b2c      	ldr	r3, [pc, #176]	@ (80098c4 <HandleRadioRxErrorTimeout+0xe0>)
 8009812:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8009816:	2b00      	cmp	r3, #0
 8009818:	d13b      	bne.n	8009892 <HandleRadioRxErrorTimeout+0xae>
            if( MacCtx.NodeAckRequested == true )
 800981a:	4b2a      	ldr	r3, [pc, #168]	@ (80098c4 <HandleRadioRxErrorTimeout+0xe0>)
 800981c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8009820:	b113      	cbz	r3, 8009828 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8009822:	4b28      	ldr	r3, [pc, #160]	@ (80098c4 <HandleRadioRxErrorTimeout+0xe0>)
 8009824:	f883 5441 	strb.w	r5, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8009828:	4628      	mov	r0, r5
 800982a:	f002 fc85 	bl	800c138 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800982e:	4b23      	ldr	r3, [pc, #140]	@ (80098bc <HandleRadioRxErrorTimeout+0xd8>)
 8009830:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8009832:	f007 fd7d 	bl	8011330 <UTIL_TIMER_GetElapsedTime>
 8009836:	4b23      	ldr	r3, [pc, #140]	@ (80098c4 <HandleRadioRxErrorTimeout+0xe0>)
 8009838:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800983c:	4298      	cmp	r0, r3
 800983e:	d339      	bcc.n	80098b4 <HandleRadioRxErrorTimeout+0xd0>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8009840:	4c21      	ldr	r4, [pc, #132]	@ (80098c8 <HandleRadioRxErrorTimeout+0xe4>)
 8009842:	4620      	mov	r0, r4
 8009844:	f007 fdaa 	bl	801139c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8009848:	f894 30f9 	ldrb.w	r3, [r4, #249]	@ 0xf9
 800984c:	f043 0310 	orr.w	r3, r3, #16
 8009850:	f884 30f9 	strb.w	r3, [r4, #249]	@ 0xf9
 8009854:	e02e      	b.n	80098b4 <HandleRadioRxErrorTimeout+0xd0>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8009856:	2002      	movs	r0, #2
 8009858:	f002 fa0b 	bl	800bc72 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800985c:	2000      	movs	r0, #0
 800985e:	f002 fa0d 	bl	800bc7c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8009862:	e7ce      	b.n	8009802 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009864:	f002 fa11 	bl	800bc8a <LoRaMacClassBIsPingExpected>
 8009868:	4607      	mov	r7, r0
 800986a:	b950      	cbnz	r0, 8009882 <HandleRadioRxErrorTimeout+0x9e>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800986c:	f002 fa0f 	bl	800bc8e <LoRaMacClassBIsMulticastExpected>
 8009870:	2800      	cmp	r0, #0
 8009872:	d0cb      	beq.n	800980c <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009874:	2000      	movs	r0, #0
 8009876:	f002 f9fe 	bl	800bc76 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800987a:	2000      	movs	r0, #0
 800987c:	f002 fa00 	bl	800bc80 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8009880:	e018      	b.n	80098b4 <HandleRadioRxErrorTimeout+0xd0>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009882:	2000      	movs	r0, #0
 8009884:	f002 f9f6 	bl	800bc74 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009888:	2000      	movs	r0, #0
 800988a:	f002 f9f8 	bl	800bc7e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800988e:	463e      	mov	r6, r7
 8009890:	e7ec      	b.n	800986c <HandleRadioRxErrorTimeout+0x88>
            if( MacCtx.NodeAckRequested == true )
 8009892:	4b0c      	ldr	r3, [pc, #48]	@ (80098c4 <HandleRadioRxErrorTimeout+0xe0>)
 8009894:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8009898:	b113      	cbz	r3, 80098a0 <HandleRadioRxErrorTimeout+0xbc>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800989a:	4b0a      	ldr	r3, [pc, #40]	@ (80098c4 <HandleRadioRxErrorTimeout+0xe0>)
 800989c:	f883 4441 	strb.w	r4, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80098a0:	4620      	mov	r0, r4
 80098a2:	f002 fc49 	bl	800c138 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 80098a6:	4a07      	ldr	r2, [pc, #28]	@ (80098c4 <HandleRadioRxErrorTimeout+0xe0>)
 80098a8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80098ac:	f043 0310 	orr.w	r3, r3, #16
 80098b0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    UpdateRxSlotIdleState( );
 80098b4:	f7fe fe72 	bl	800859c <UpdateRxSlotIdleState>
}
 80098b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098ba:	bf00      	nop
 80098bc:	20008000 	.word	0x20008000
 80098c0:	080126d4 	.word	0x080126d4
 80098c4:	20000900 	.word	0x20000900
 80098c8:	20000c98 	.word	0x20000c98

080098cc <ProcessRadioRxError>:
{
 80098cc:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80098ce:	2106      	movs	r1, #6
 80098d0:	2005      	movs	r0, #5
 80098d2:	f7ff ff87 	bl	80097e4 <HandleRadioRxErrorTimeout>
}
 80098d6:	bd08      	pop	{r3, pc}

080098d8 <ProcessRadioRxTimeout>:
{
 80098d8:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80098da:	2104      	movs	r1, #4
 80098dc:	2003      	movs	r0, #3
 80098de:	f7ff ff81 	bl	80097e4 <HandleRadioRxErrorTimeout>
}
 80098e2:	bd08      	pop	{r3, pc}

080098e4 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098e4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80098e8:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 80098ea:	4a14      	ldr	r2, [pc, #80]	@ (800993c <LoRaMacHandleIrqEvents+0x58>)
 80098ec:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 80098ee:	2000      	movs	r0, #0
 80098f0:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098f2:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 80098f6:	b303      	cbz	r3, 800993a <LoRaMacHandleIrqEvents+0x56>
{
 80098f8:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 80098fa:	b2dc      	uxtb	r4, r3
 80098fc:	f013 0f20 	tst.w	r3, #32
 8009900:	d10c      	bne.n	800991c <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 8009902:	f014 0f10 	tst.w	r4, #16
 8009906:	d10c      	bne.n	8009922 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 8009908:	f014 0f08 	tst.w	r4, #8
 800990c:	d10c      	bne.n	8009928 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800990e:	f014 0f04 	tst.w	r4, #4
 8009912:	d10c      	bne.n	800992e <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 8009914:	f014 0f02 	tst.w	r4, #2
 8009918:	d10c      	bne.n	8009934 <LoRaMacHandleIrqEvents+0x50>
}
 800991a:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800991c:	f7fe ffbc 	bl	8008898 <ProcessRadioTxDone>
 8009920:	e7ef      	b.n	8009902 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 8009922:	f7ff fbb9 	bl	8009098 <ProcessRadioRxDone>
 8009926:	e7ef      	b.n	8009908 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 8009928:	f7ff ff1c 	bl	8009764 <ProcessRadioTxTimeout>
 800992c:	e7ef      	b.n	800990e <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800992e:	f7ff ffcd 	bl	80098cc <ProcessRadioRxError>
 8009932:	e7ef      	b.n	8009914 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 8009934:	f7ff ffd0 	bl	80098d8 <ProcessRadioRxTimeout>
}
 8009938:	e7ef      	b.n	800991a <LoRaMacHandleIrqEvents+0x36>
 800993a:	4770      	bx	lr
 800993c:	2000086c 	.word	0x2000086c

08009940 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 8009940:	b909      	cbnz	r1, 8009946 <LoRaMacHandleResponseTimeout+0x6>
    return false;
 8009942:	2000      	movs	r0, #0
}
 8009944:	4770      	bx	lr
{
 8009946:	b510      	push	{r4, lr}
 8009948:	4604      	mov	r4, r0
 800994a:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800994c:	f007 fcf0 	bl	8011330 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 8009950:	42a0      	cmp	r0, r4
 8009952:	d801      	bhi.n	8009958 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 8009954:	2000      	movs	r0, #0
}
 8009956:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 8009958:	4b02      	ldr	r3, [pc, #8]	@ (8009964 <LoRaMacHandleResponseTimeout+0x24>)
 800995a:	2200      	movs	r2, #0
 800995c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 8009960:	2001      	movs	r0, #1
 8009962:	e7f8      	b.n	8009956 <LoRaMacHandleResponseTimeout+0x16>
 8009964:	20008000 	.word	0x20008000

08009968 <LoRaMacHandleMlmeRequest>:
{
 8009968:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800996a:	4b14      	ldr	r3, [pc, #80]	@ (80099bc <LoRaMacHandleMlmeRequest+0x54>)
 800996c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8009970:	f013 0f04 	tst.w	r3, #4
 8009974:	d100      	bne.n	8009978 <LoRaMacHandleMlmeRequest+0x10>
}
 8009976:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009978:	2001      	movs	r0, #1
 800997a:	f002 fbfb 	bl	800c174 <LoRaMacConfirmQueueIsCmdActive>
 800997e:	b178      	cbz	r0, 80099a0 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8009980:	2001      	movs	r0, #1
 8009982:	f002 fbc1 	bl	800c108 <LoRaMacConfirmQueueGetStatus>
 8009986:	b918      	cbnz	r0, 8009990 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 8009988:	4b0c      	ldr	r3, [pc, #48]	@ (80099bc <LoRaMacHandleMlmeRequest+0x54>)
 800998a:	2200      	movs	r2, #0
 800998c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009990:	4a0a      	ldr	r2, [pc, #40]	@ (80099bc <LoRaMacHandleMlmeRequest+0x54>)
 8009992:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 8009996:	f023 0302 	bic.w	r3, r3, #2
 800999a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
 800999e:	e7ea      	b.n	8009976 <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 80099a0:	2006      	movs	r0, #6
 80099a2:	f002 fbe7 	bl	800c174 <LoRaMacConfirmQueueIsCmdActive>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d0e5      	beq.n	8009976 <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80099aa:	4a04      	ldr	r2, [pc, #16]	@ (80099bc <LoRaMacHandleMlmeRequest+0x54>)
 80099ac:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 80099b0:	f023 0302 	bic.w	r3, r3, #2
 80099b4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 80099b8:	e7dd      	b.n	8009976 <LoRaMacHandleMlmeRequest+0xe>
 80099ba:	bf00      	nop
 80099bc:	20000900 	.word	0x20000900

080099c0 <SerializeTxFrame>:
{
 80099c0:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 80099c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009a00 <SerializeTxFrame+0x40>)
 80099c4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80099c8:	b11b      	cbz	r3, 80099d2 <SerializeTxFrame+0x12>
 80099ca:	2b04      	cmp	r3, #4
 80099cc:	d00a      	beq.n	80099e4 <SerializeTxFrame+0x24>
 80099ce:	2003      	movs	r0, #3
}
 80099d0:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80099d2:	480c      	ldr	r0, [pc, #48]	@ (8009a04 <SerializeTxFrame+0x44>)
 80099d4:	f003 f877 	bl	800cac6 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80099d8:	b968      	cbnz	r0, 80099f6 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80099da:	4b09      	ldr	r3, [pc, #36]	@ (8009a00 <SerializeTxFrame+0x40>)
 80099dc:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 80099e0:	801a      	strh	r2, [r3, #0]
            break;
 80099e2:	e7f5      	b.n	80099d0 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80099e4:	4807      	ldr	r0, [pc, #28]	@ (8009a04 <SerializeTxFrame+0x44>)
 80099e6:	f003 f8a4 	bl	800cb32 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80099ea:	b930      	cbnz	r0, 80099fa <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80099ec:	4b04      	ldr	r3, [pc, #16]	@ (8009a00 <SerializeTxFrame+0x40>)
 80099ee:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 80099f2:	801a      	strh	r2, [r3, #0]
            break;
 80099f4:	e7ec      	b.n	80099d0 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80099f6:	2011      	movs	r0, #17
 80099f8:	e7ea      	b.n	80099d0 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80099fa:	2011      	movs	r0, #17
 80099fc:	e7e8      	b.n	80099d0 <SerializeTxFrame+0x10>
 80099fe:	bf00      	nop
 8009a00:	20000900 	.word	0x20000900
 8009a04:	20000a08 	.word	0x20000a08

08009a08 <ComputeRxWindowParameters>:
{
 8009a08:	b570      	push	{r4, r5, r6, lr}
 8009a0a:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009a0c:	4c1e      	ldr	r4, [pc, #120]	@ (8009a88 <ComputeRxWindowParameters+0x80>)
 8009a0e:	f894 6048 	ldrb.w	r6, [r4, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8009a12:	f994 3069 	ldrsb.w	r3, [r4, #105]	@ 0x69
 8009a16:	f994 2039 	ldrsb.w	r2, [r4, #57]	@ 0x39
 8009a1a:	f894 107d 	ldrb.w	r1, [r4, #125]	@ 0x7d
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f003 f9cc 	bl	800cdbc <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009a24:	4d19      	ldr	r5, [pc, #100]	@ (8009a8c <ComputeRxWindowParameters+0x84>)
 8009a26:	9500      	str	r5, [sp, #0]
 8009a28:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009a2a:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 8009a2e:	b241      	sxtb	r1, r0
 8009a30:	4630      	mov	r0, r6
 8009a32:	f003 f952 	bl	800ccda <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009a36:	f105 0318 	add.w	r3, r5, #24
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009a3e:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 8009a42:	f994 1070 	ldrsb.w	r1, [r4, #112]	@ 0x70
 8009a46:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 8009a4a:	f003 f946 	bl	800ccda <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009a4e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8009a50:	f5a5 736e 	sub.w	r3, r5, #952	@ 0x3b8
 8009a54:	68e8      	ldr	r0, [r5, #12]
 8009a56:	4402      	add	r2, r0
 8009a58:	f845 2c08 	str.w	r2, [r5, #-8]
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009a5c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8009a5e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8009a60:	440a      	add	r2, r1
 8009a62:	f845 2c04 	str.w	r2, [r5, #-4]
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8009a66:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8009a6a:	2b04      	cmp	r3, #4
 8009a6c:	d009      	beq.n	8009a82 <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009a6e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8009a70:	4418      	add	r0, r3
 8009a72:	f5a5 736e 	sub.w	r3, r5, #952	@ 0x3b8
 8009a76:	f8c3 03b0 	str.w	r0, [r3, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009a7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a7c:	4411      	add	r1, r2
 8009a7e:	f8c3 13b4 	str.w	r1, [r3, #948]	@ 0x3b4
}
 8009a82:	b002      	add	sp, #8
 8009a84:	bd70      	pop	{r4, r5, r6, pc}
 8009a86:	bf00      	nop
 8009a88:	20008000 	.word	0x20008000
 8009a8c:	20000cb8 	.word	0x20000cb8

08009a90 <VerifyTxFrame>:
{
 8009a90:	b510      	push	{r4, lr}
 8009a92:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8009a94:	2300      	movs	r3, #0
 8009a96:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8009a98:	4b0d      	ldr	r3, [pc, #52]	@ (8009ad0 <VerifyTxFrame+0x40>)
 8009a9a:	f893 4130 	ldrb.w	r4, [r3, #304]	@ 0x130
 8009a9e:	b914      	cbnz	r4, 8009aa6 <VerifyTxFrame+0x16>
}
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	b002      	add	sp, #8
 8009aa4:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009aa6:	a801      	add	r0, sp, #4
 8009aa8:	f002 fa2a 	bl	800bf00 <LoRaMacCommandsGetSizeSerializedCmds>
 8009aac:	4604      	mov	r4, r0
 8009aae:	b968      	cbnz	r0, 8009acc <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8009ab0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009ab4:	4b06      	ldr	r3, [pc, #24]	@ (8009ad0 <VerifyTxFrame+0x40>)
 8009ab6:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 8009aba:	4b06      	ldr	r3, [pc, #24]	@ (8009ad4 <VerifyTxFrame+0x44>)
 8009abc:	f893 0237 	ldrb.w	r0, [r3, #567]	@ 0x237
 8009ac0:	f7fe fedc 	bl	800887c <ValidatePayloadLength>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d1eb      	bne.n	8009aa0 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8009ac8:	2408      	movs	r4, #8
 8009aca:	e7e9      	b.n	8009aa0 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009acc:	2413      	movs	r4, #19
 8009ace:	e7e7      	b.n	8009aa0 <VerifyTxFrame+0x10>
 8009ad0:	20008000 	.word	0x20008000
 8009ad4:	20000900 	.word	0x20000900

08009ad8 <SecureFrame>:
{
 8009ad8:	b530      	push	{r4, r5, lr}
 8009ada:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 8009adc:	2300      	movs	r3, #0
 8009ade:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 8009ae0:	4b18      	ldr	r3, [pc, #96]	@ (8009b44 <SecureFrame+0x6c>)
 8009ae2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8009ae6:	b133      	cbz	r3, 8009af6 <SecureFrame+0x1e>
 8009ae8:	4605      	mov	r5, r0
 8009aea:	460c      	mov	r4, r1
 8009aec:	2b04      	cmp	r3, #4
 8009aee:	d00b      	beq.n	8009b08 <SecureFrame+0x30>
 8009af0:	2003      	movs	r0, #3
}
 8009af2:	b003      	add	sp, #12
 8009af4:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8009af6:	4814      	ldr	r0, [pc, #80]	@ (8009b48 <SecureFrame+0x70>)
 8009af8:	f002 fda6 	bl	800c648 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8009afc:	b9d8      	cbnz	r0, 8009b36 <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8009afe:	4b11      	ldr	r3, [pc, #68]	@ (8009b44 <SecureFrame+0x6c>)
 8009b00:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 8009b04:	801a      	strh	r2, [r3, #0]
            break;
 8009b06:	e7f4      	b.n	8009af2 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009b08:	a801      	add	r0, sp, #4
 8009b0a:	f002 fd51 	bl	800c5b0 <LoRaMacCryptoGetFCntUp>
 8009b0e:	b9a0      	cbnz	r0, 8009b3a <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8009b10:	4b0c      	ldr	r3, [pc, #48]	@ (8009b44 <SecureFrame+0x6c>)
 8009b12:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8009b16:	b113      	cbz	r3, 8009b1e <SecureFrame+0x46>
                fCntUp -= 1;
 8009b18:	9b01      	ldr	r3, [sp, #4]
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8009b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8009b48 <SecureFrame+0x70>)
 8009b20:	4622      	mov	r2, r4
 8009b22:	4629      	mov	r1, r5
 8009b24:	9801      	ldr	r0, [sp, #4]
 8009b26:	f002 fdb5 	bl	800c694 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8009b2a:	b940      	cbnz	r0, 8009b3e <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009b2c:	4b05      	ldr	r3, [pc, #20]	@ (8009b44 <SecureFrame+0x6c>)
 8009b2e:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 8009b32:	801a      	strh	r2, [r3, #0]
            break;
 8009b34:	e7dd      	b.n	8009af2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009b36:	2011      	movs	r0, #17
 8009b38:	e7db      	b.n	8009af2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009b3a:	2012      	movs	r0, #18
 8009b3c:	e7d9      	b.n	8009af2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009b3e:	2011      	movs	r0, #17
 8009b40:	e7d7      	b.n	8009af2 <SecureFrame+0x1a>
 8009b42:	bf00      	nop
 8009b44:	20000900 	.word	0x20000900
 8009b48:	20000a08 	.word	0x20000a08

08009b4c <SendFrameOnChannel>:
{
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	4606      	mov	r6, r0
    int8_t txPower = 0;
 8009b52:	2300      	movs	r3, #0
 8009b54:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 8009b58:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009b5c:	4d36      	ldr	r5, [pc, #216]	@ (8009c38 <SendFrameOnChannel+0xec>)
 8009b5e:	f995 3039 	ldrsb.w	r3, [r5, #57]	@ 0x39
 8009b62:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009b66:	f995 3038 	ldrsb.w	r3, [r5, #56]	@ 0x38
 8009b6a:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009b6e:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8009b72:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009b74:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8009b78:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8009b7a:	4c30      	ldr	r4, [pc, #192]	@ (8009c3c <SendFrameOnChannel+0xf0>)
 8009b7c:	8823      	ldrh	r3, [r4, #0]
 8009b7e:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009b82:	f895 3130 	ldrb.w	r3, [r5, #304]	@ 0x130
 8009b86:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009b8a:	f204 431c 	addw	r3, r4, #1052	@ 0x41c
 8009b8e:	f10d 0207 	add.w	r2, sp, #7
 8009b92:	a902      	add	r1, sp, #8
 8009b94:	f895 0048 	ldrb.w	r0, [r5, #72]	@ 0x48
 8009b98:	f003 f8b6 	bl	800cd08 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	f884 3441 	strb.w	r3, [r4, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009ba2:	f895 3039 	ldrb.w	r3, [r5, #57]	@ 0x39
 8009ba6:	f884 3442 	strb.w	r3, [r4, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8009baa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009bae:	f884 3443 	strb.w	r3, [r4, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8009bb2:	f8c4 6450 	str.w	r6, [r4, #1104]	@ 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009bb6:	f8d4 341c 	ldr.w	r3, [r4, #1052]	@ 0x41c
 8009bba:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009bbe:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8009bc2:	f002 f866 	bl	800bc92 <LoRaMacClassBIsBeaconModeActive>
 8009bc6:	bb60      	cbnz	r0, 8009c22 <SendFrameOnChannel+0xd6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8009c38 <SendFrameOnChannel+0xec>)
 8009bca:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d02f      	beq.n	8009c32 <SendFrameOnChannel+0xe6>
    LoRaMacClassBHaltBeaconing( );
 8009bd2:	f002 f861 	bl	800bc98 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8009bd6:	4b18      	ldr	r3, [pc, #96]	@ (8009c38 <SendFrameOnChannel+0xec>)
 8009bd8:	f993 0039 	ldrsb.w	r0, [r3, #57]	@ 0x39
 8009bdc:	4b17      	ldr	r3, [pc, #92]	@ (8009c3c <SendFrameOnChannel+0xf0>)
 8009bde:	f893 141b 	ldrb.w	r1, [r3, #1051]	@ 0x41b
 8009be2:	b2c0      	uxtb	r0, r0
 8009be4:	f7ff ff78 	bl	8009ad8 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 8009be8:	4604      	mov	r4, r0
 8009bea:	b9b8      	cbnz	r0, 8009c1c <SendFrameOnChannel+0xd0>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009bec:	4813      	ldr	r0, [pc, #76]	@ (8009c3c <SendFrameOnChannel+0xf0>)
 8009bee:	f8d0 3340 	ldr.w	r3, [r0, #832]	@ 0x340
 8009bf2:	f043 0302 	orr.w	r3, r3, #2
 8009bf6:	f8c0 3340 	str.w	r3, [r0, #832]	@ 0x340
    MacCtx.ChannelsNbTransCounter++;
 8009bfa:	f890 3418 	ldrb.w	r3, [r0, #1048]	@ 0x418
 8009bfe:	3301      	adds	r3, #1
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	f880 3418 	strb.w	r3, [r0, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8009c06:	f880 3445 	strb.w	r3, [r0, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f8c0 3498 	str.w	r3, [r0, #1176]	@ 0x498
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8009c10:	4b0b      	ldr	r3, [pc, #44]	@ (8009c40 <SendFrameOnChannel+0xf4>)
 8009c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c14:	f830 1b02 	ldrh.w	r1, [r0], #2
 8009c18:	b2c9      	uxtb	r1, r1
 8009c1a:	4798      	blx	r3
}
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	b006      	add	sp, #24
 8009c20:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8009c22:	f8d4 041c 	ldr.w	r0, [r4, #1052]	@ 0x41c
 8009c26:	f002 f846 	bl	800bcb6 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d0cc      	beq.n	8009bc8 <SendFrameOnChannel+0x7c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8009c2e:	2410      	movs	r4, #16
 8009c30:	e7f4      	b.n	8009c1c <SendFrameOnChannel+0xd0>
        LoRaMacClassBStopRxSlots( );
 8009c32:	f002 f842 	bl	800bcba <LoRaMacClassBStopRxSlots>
 8009c36:	e7cc      	b.n	8009bd2 <SendFrameOnChannel+0x86>
 8009c38:	20008000 	.word	0x20008000
 8009c3c:	20000900 	.word	0x20000900
 8009c40:	080126d4 	.word	0x080126d4

08009c44 <ScheduleTx>:
{
 8009c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c48:	b08c      	sub	sp, #48	@ 0x30
 8009c4a:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 8009c4c:	f7ff fdb0 	bl	80097b0 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 8009c50:	4604      	mov	r4, r0
 8009c52:	b118      	cbz	r0, 8009c5c <ScheduleTx+0x18>
}
 8009c54:	4620      	mov	r0, r4
 8009c56:	b00c      	add	sp, #48	@ 0x30
 8009c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 8009c5c:	f7fe fd02 	bl	8008664 <CalculateBackOff>
    status = SerializeTxFrame( );
 8009c60:	f7ff feae 	bl	80099c0 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8009c64:	4604      	mov	r4, r0
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d1f4      	bne.n	8009c54 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8009c6a:	4e35      	ldr	r6, [pc, #212]	@ (8009d40 <ScheduleTx+0xfc>)
 8009c6c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8009c6e:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009c70:	f996 3039 	ldrsb.w	r3, [r6, #57]	@ 0x39
 8009c74:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8009c78:	f896 311c 	ldrb.w	r3, [r6, #284]	@ 0x11c
 8009c7c:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009c80:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8009c84:	4640      	mov	r0, r8
 8009c86:	f007 fabd 	bl	8011204 <SysTimeGetMcuTime>
 8009c8a:	af02      	add	r7, sp, #8
 8009c8c:	f8d6 3128 	ldr.w	r3, [r6, #296]	@ 0x128
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	f8d6 3124 	ldr.w	r3, [r6, #292]	@ 0x124
 8009c96:	e898 0006 	ldmia.w	r8, {r1, r2}
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	f007 fa4f 	bl	801113e <SysTimeSub>
 8009ca0:	ab07      	add	r3, sp, #28
 8009ca2:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009ca6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8009caa:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8009cac:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    nextChan.Joined = true;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8009cba:	4b22      	ldr	r3, [pc, #136]	@ (8009d44 <ScheduleTx+0x100>)
 8009cbc:	881b      	ldrh	r3, [r3, #0]
 8009cbe:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009cc2:	f896 3130 	ldrb.w	r3, [r6, #304]	@ 0x130
 8009cc6:	b92b      	cbnz	r3, 8009cd4 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
        nextChan.Joined = false;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8009cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8009d48 <ScheduleTx+0x104>)
 8009cd6:	481a      	ldr	r0, [pc, #104]	@ (8009d40 <ScheduleTx+0xfc>)
 8009cd8:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8009cdc:	9200      	str	r2, [sp, #0]
 8009cde:	f1a3 0279 	sub.w	r2, r3, #121	@ 0x79
 8009ce2:	a904      	add	r1, sp, #16
 8009ce4:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 8009ce8:	f003 f85b 	bl	800cda2 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8009cec:	b1c0      	cbz	r0, 8009d20 <ScheduleTx+0xdc>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8009cee:	280b      	cmp	r0, #11
 8009cf0:	d124      	bne.n	8009d3c <ScheduleTx+0xf8>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8009cf2:	4a14      	ldr	r2, [pc, #80]	@ (8009d44 <ScheduleTx+0x100>)
 8009cf4:	f8d2 1494 	ldr.w	r1, [r2, #1172]	@ 0x494
 8009cf8:	b191      	cbz	r1, 8009d20 <ScheduleTx+0xdc>
                if( allowDelayedTx == true )
 8009cfa:	b90d      	cbnz	r5, 8009d00 <ScheduleTx+0xbc>
                return status;
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	e7a9      	b.n	8009c54 <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8009d00:	4615      	mov	r5, r2
 8009d02:	f8d2 2340 	ldr.w	r2, [r2, #832]	@ 0x340
 8009d06:	f042 0220 	orr.w	r2, r2, #32
 8009d0a:	f8c5 2340 	str.w	r2, [r5, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8009d0e:	f505 755a 	add.w	r5, r5, #872	@ 0x368
 8009d12:	4628      	mov	r0, r5
 8009d14:	f007 fbe2 	bl	80114dc <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8009d18:	4628      	mov	r0, r5
 8009d1a:	f007 fb99 	bl	8011450 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8009d1e:	e799      	b.n	8009c54 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 8009d20:	f7ff fe72 	bl	8009a08 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 8009d24:	f7ff feb4 	bl	8009a90 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8009d28:	4604      	mov	r4, r0
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	d192      	bne.n	8009c54 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 8009d2e:	4b05      	ldr	r3, [pc, #20]	@ (8009d44 <ScheduleTx+0x100>)
 8009d30:	f893 041b 	ldrb.w	r0, [r3, #1051]	@ 0x41b
 8009d34:	f7ff ff0a 	bl	8009b4c <SendFrameOnChannel>
 8009d38:	4604      	mov	r4, r0
 8009d3a:	e78b      	b.n	8009c54 <ScheduleTx+0x10>
            return status;
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	e789      	b.n	8009c54 <ScheduleTx+0x10>
 8009d40:	20008000 	.word	0x20008000
 8009d44:	20000900 	.word	0x20000900
 8009d48:	20000d94 	.word	0x20000d94

08009d4c <OnTxDelayedTimerEvent>:
{
 8009d4c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8009d4e:	4c16      	ldr	r4, [pc, #88]	@ (8009da8 <OnTxDelayedTimerEvent+0x5c>)
 8009d50:	4620      	mov	r0, r4
 8009d52:	f007 fb23 	bl	801139c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009d56:	f854 3c28 	ldr.w	r3, [r4, #-40]
 8009d5a:	f023 0320 	bic.w	r3, r3, #32
 8009d5e:	f844 3c28 	str.w	r3, [r4, #-40]
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8009d62:	f8d4 1130 	ldr.w	r1, [r4, #304]	@ 0x130
 8009d66:	4b11      	ldr	r3, [pc, #68]	@ (8009dac <OnTxDelayedTimerEvent+0x60>)
 8009d68:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8009d6c:	f7ff fde8 	bl	8009940 <LoRaMacHandleResponseTimeout>
 8009d70:	b100      	cbz	r0, 8009d74 <OnTxDelayedTimerEvent+0x28>
}
 8009d72:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 8009d74:	2001      	movs	r0, #1
 8009d76:	f7ff ff65 	bl	8009c44 <ScheduleTx>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d0f9      	beq.n	8009d72 <OnTxDelayedTimerEvent+0x26>
 8009d7e:	280b      	cmp	r0, #11
 8009d80:	d0f7      	beq.n	8009d72 <OnTxDelayedTimerEvent+0x26>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009d82:	4b0a      	ldr	r3, [pc, #40]	@ (8009dac <OnTxDelayedTimerEvent+0x60>)
 8009d84:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8009d88:	f5a4 735a 	sub.w	r3, r4, #872	@ 0x368
 8009d8c:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8009d90:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8009d94:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009d98:	2009      	movs	r0, #9
 8009d9a:	f883 0441 	strb.w	r0, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8009d9e:	f002 f9cb 	bl	800c138 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8009da2:	f7fe fcf1 	bl	8008788 <StopRetransmission>
            break;
 8009da6:	e7e4      	b.n	8009d72 <OnTxDelayedTimerEvent+0x26>
 8009da8:	20000c68 	.word	0x20000c68
 8009dac:	20008000 	.word	0x20008000

08009db0 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009db0:	4b1c      	ldr	r3, [pc, #112]	@ (8009e24 <LoRaMacHandleMcpsRequest+0x74>)
 8009db2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8009db6:	f013 0f01 	tst.w	r3, #1
 8009dba:	d031      	beq.n	8009e20 <LoRaMacHandleMcpsRequest+0x70>
{
 8009dbc:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8009dbe:	4b19      	ldr	r3, [pc, #100]	@ (8009e24 <LoRaMacHandleMcpsRequest+0x74>)
 8009dc0:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 8009dc4:	b12b      	cbz	r3, 8009dd2 <LoRaMacHandleMcpsRequest+0x22>
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d003      	beq.n	8009dd2 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d006      	beq.n	8009ddc <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 8009dce:	2000      	movs	r0, #0
 8009dd0:	e002      	b.n	8009dd8 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8009dd2:	f7fe fc9f 	bl	8008714 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 8009dd6:	b940      	cbnz	r0, 8009dea <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 8009dd8:	b1b0      	cbz	r0, 8009e08 <LoRaMacHandleMcpsRequest+0x58>
}
 8009dda:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 8009ddc:	4b11      	ldr	r3, [pc, #68]	@ (8009e24 <LoRaMacHandleMcpsRequest+0x74>)
 8009dde:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8009de2:	b17b      	cbz	r3, 8009e04 <LoRaMacHandleMcpsRequest+0x54>
                stopRetransmission = CheckRetransConfirmedUplink( );
 8009de4:	f7fe fcb2 	bl	800874c <CheckRetransConfirmedUplink>
 8009de8:	e7f5      	b.n	8009dd6 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 8009dea:	4c0f      	ldr	r4, [pc, #60]	@ (8009e28 <LoRaMacHandleMcpsRequest+0x78>)
 8009dec:	4620      	mov	r0, r4
 8009dee:	f007 fad5 	bl	801139c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009df2:	f854 3c28 	ldr.w	r3, [r4, #-40]
 8009df6:	f023 0320 	bic.w	r3, r3, #32
 8009dfa:	f844 3c28 	str.w	r3, [r4, #-40]
            StopRetransmission( );
 8009dfe:	f7fe fcc3 	bl	8008788 <StopRetransmission>
 8009e02:	e7ea      	b.n	8009dda <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 8009e04:	2001      	movs	r0, #1
 8009e06:	e7e7      	b.n	8009dd8 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8009e08:	4b06      	ldr	r3, [pc, #24]	@ (8009e24 <LoRaMacHandleMcpsRequest+0x74>)
 8009e0a:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 8009e0e:	f36f 1204 	bfc	r2, #4, #1
 8009e12:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 8009e16:	f883 0419 	strb.w	r0, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 8009e1a:	f7ff ff97 	bl	8009d4c <OnTxDelayedTimerEvent>
}
 8009e1e:	e7dc      	b.n	8009dda <LoRaMacHandleMcpsRequest+0x2a>
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	20000900 	.word	0x20000900
 8009e28:	20000c68 	.word	0x20000c68

08009e2c <LoRaMacHandleRequestEvents>:
{
 8009e2c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009e2e:	4b22      	ldr	r3, [pc, #136]	@ (8009eb8 <LoRaMacHandleRequestEvents+0x8c>)
 8009e30:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8009e34:	bb7b      	cbnz	r3, 8009e96 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009e36:	4b20      	ldr	r3, [pc, #128]	@ (8009eb8 <LoRaMacHandleRequestEvents+0x8c>)
 8009e38:	f893 4491 	ldrb.w	r4, [r3, #1169]	@ 0x491
 8009e3c:	f014 0501 	ands.w	r5, r4, #1
 8009e40:	d005      	beq.n	8009e4e <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8009e42:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 8009e46:	f36f 0200 	bfc	r2, #0, #1
 8009e4a:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8009eb8 <LoRaMacHandleRequestEvents+0x8c>)
 8009e50:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8009e54:	f013 0f04 	tst.w	r3, #4
 8009e58:	d006      	beq.n	8009e68 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009e5a:	4b17      	ldr	r3, [pc, #92]	@ (8009eb8 <LoRaMacHandleRequestEvents+0x8c>)
 8009e5c:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 8009e60:	f36f 0282 	bfc	r2, #2, #1
 8009e64:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009e68:	2001      	movs	r0, #1
 8009e6a:	f7fe fbab 	bl	80085c4 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 8009e6e:	b135      	cbz	r5, 8009e7e <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8009e70:	4811      	ldr	r0, [pc, #68]	@ (8009eb8 <LoRaMacHandleRequestEvents+0x8c>)
 8009e72:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f500 6088 	add.w	r0, r0, #1088	@ 0x440
 8009e7c:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8009e7e:	f014 0f04 	tst.w	r4, #4
 8009e82:	d109      	bne.n	8009e98 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 8009e84:	f001 ff09 	bl	800bc9a <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8009e88:	4b0b      	ldr	r3, [pc, #44]	@ (8009eb8 <LoRaMacHandleRequestEvents+0x8c>)
 8009e8a:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 8009e8e:	f36f 1204 	bfc	r2, #4, #1
 8009e92:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
}
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8009e98:	4808      	ldr	r0, [pc, #32]	@ (8009ebc <LoRaMacHandleRequestEvents+0x90>)
 8009e9a:	f002 f977 	bl	800c18c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8009e9e:	f002 f9ad 	bl	800c1fc <LoRaMacConfirmQueueGetCnt>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d0ee      	beq.n	8009e84 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009ea6:	4a04      	ldr	r2, [pc, #16]	@ (8009eb8 <LoRaMacHandleRequestEvents+0x8c>)
 8009ea8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8009eac:	f043 0304 	orr.w	r3, r3, #4
 8009eb0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 8009eb4:	e7e6      	b.n	8009e84 <LoRaMacHandleRequestEvents+0x58>
 8009eb6:	bf00      	nop
 8009eb8:	20000900 	.word	0x20000900
 8009ebc:	20000d54 	.word	0x20000d54

08009ec0 <OpenContinuousRxCWindow>:
{
 8009ec0:	b530      	push	{r4, r5, lr}
 8009ec2:	b083      	sub	sp, #12
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8009ec4:	4c15      	ldr	r4, [pc, #84]	@ (8009f1c <OpenContinuousRxCWindow+0x5c>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009ec6:	4d16      	ldr	r5, [pc, #88]	@ (8009f20 <OpenContinuousRxCWindow+0x60>)
 8009ec8:	9500      	str	r5, [sp, #0]
 8009eca:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009ecc:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 8009ed0:	f994 1078 	ldrsb.w	r1, [r4, #120]	@ 0x78
 8009ed4:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 8009ed8:	f002 feff 	bl	800ccda <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009edc:	2302      	movs	r3, #2
 8009ede:	74eb      	strb	r3, [r5, #19]
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009ee0:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 8009ee4:	752b      	strb	r3, [r5, #20]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	74ab      	strb	r3, [r5, #18]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009eea:	f105 023c 	add.w	r2, r5, #60	@ 0x3c
 8009eee:	4629      	mov	r1, r5
 8009ef0:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 8009ef4:	f002 fefd 	bl	800ccf2 <RegionRxConfig>
 8009ef8:	b168      	cbz	r0, 8009f16 <OpenContinuousRxCWindow+0x56>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8009efa:	f5a5 747a 	sub.w	r4, r5, #1000	@ 0x3e8
 8009efe:	f894 3424 	ldrb.w	r3, [r4, #1060]	@ 0x424
 8009f02:	f884 346a 	strb.w	r3, [r4, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8009f06:	4b07      	ldr	r3, [pc, #28]	@ (8009f24 <OpenContinuousRxCWindow+0x64>)
 8009f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8009f0e:	f894 33fb 	ldrb.w	r3, [r4, #1019]	@ 0x3fb
 8009f12:	f884 3490 	strb.w	r3, [r4, #1168]	@ 0x490
}
 8009f16:	b003      	add	sp, #12
 8009f18:	bd30      	pop	{r4, r5, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20008000 	.word	0x20008000
 8009f20:	20000ce8 	.word	0x20000ce8
 8009f24:	080126d4 	.word	0x080126d4

08009f28 <RxWindowSetup>:
{
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 8009f2c:	f007 fa36 	bl	801139c <UTIL_TIMER_Stop>
    Radio.Standby( );
 8009f30:	4b0c      	ldr	r3, [pc, #48]	@ (8009f64 <RxWindowSetup+0x3c>)
 8009f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f34:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009f36:	4a0c      	ldr	r2, [pc, #48]	@ (8009f68 <RxWindowSetup+0x40>)
 8009f38:	4621      	mov	r1, r4
 8009f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8009f6c <RxWindowSetup+0x44>)
 8009f3c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8009f40:	f002 fed7 	bl	800ccf2 <RegionRxConfig>
 8009f44:	b160      	cbz	r0, 8009f60 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8009f46:	4d0a      	ldr	r5, [pc, #40]	@ (8009f70 <RxWindowSetup+0x48>)
 8009f48:	f895 3424 	ldrb.w	r3, [r5, #1060]	@ 0x424
 8009f4c:	f885 346a 	strb.w	r3, [r5, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8009f50:	4b04      	ldr	r3, [pc, #16]	@ (8009f64 <RxWindowSetup+0x3c>)
 8009f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f54:	4a05      	ldr	r2, [pc, #20]	@ (8009f6c <RxWindowSetup+0x44>)
 8009f56:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8009f58:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8009f5a:	7ce3      	ldrb	r3, [r4, #19]
 8009f5c:	f885 3490 	strb.w	r3, [r5, #1168]	@ 0x490
}
 8009f60:	bd38      	pop	{r3, r4, r5, pc}
 8009f62:	bf00      	nop
 8009f64:	080126d4 	.word	0x080126d4
 8009f68:	20000d24 	.word	0x20000d24
 8009f6c:	20008000 	.word	0x20008000
 8009f70:	20000900 	.word	0x20000900

08009f74 <OnRxWindow2TimerEvent>:
{
 8009f74:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009f76:	4b13      	ldr	r3, [pc, #76]	@ (8009fc4 <OnRxWindow2TimerEvent+0x50>)
 8009f78:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8009f7c:	b903      	cbnz	r3, 8009f80 <OnRxWindow2TimerEvent+0xc>
}
 8009f7e:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009f80:	4810      	ldr	r0, [pc, #64]	@ (8009fc4 <OnRxWindow2TimerEvent+0x50>)
 8009f82:	f890 341b 	ldrb.w	r3, [r0, #1051]	@ 0x41b
 8009f86:	f880 33d0 	strb.w	r3, [r0, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8009fc8 <OnRxWindow2TimerEvent+0x54>)
 8009f8c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009f8e:	f8c0 23d4 	str.w	r2, [r0, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009f92:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8009f96:	f880 23e0 	strb.w	r2, [r0, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009f9a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8009f9e:	f880 23e1 	strb.w	r2, [r0, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f880 23e2 	strb.w	r2, [r0, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f880 23e3 	strb.w	r2, [r0, #995]	@ 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009fae:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8009fb2:	f880 33e4 	strb.w	r3, [r0, #996]	@ 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009fb6:	f500 7174 	add.w	r1, r0, #976	@ 0x3d0
 8009fba:	f500 7066 	add.w	r0, r0, #920	@ 0x398
 8009fbe:	f7ff ffb3 	bl	8009f28 <RxWindowSetup>
 8009fc2:	e7dc      	b.n	8009f7e <OnRxWindow2TimerEvent+0xa>
 8009fc4:	20000900 	.word	0x20000900
 8009fc8:	20008000 	.word	0x20008000

08009fcc <OnRxWindow1TimerEvent>:
{
 8009fcc:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8009fce:	4811      	ldr	r0, [pc, #68]	@ (800a014 <OnRxWindow1TimerEvent+0x48>)
 8009fd0:	f890 341b 	ldrb.w	r3, [r0, #1051]	@ 0x41b
 8009fd4:	f880 33b8 	strb.w	r3, [r0, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8009fd8:	4b0f      	ldr	r3, [pc, #60]	@ (800a018 <OnRxWindow1TimerEvent+0x4c>)
 8009fda:	f993 2069 	ldrsb.w	r2, [r3, #105]	@ 0x69
 8009fde:	f880 23bb 	strb.w	r2, [r0, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009fe2:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8009fe6:	f880 23c8 	strb.w	r2, [r0, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8009fea:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8009fee:	f880 23c9 	strb.w	r2, [r0, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f880 23ca 	strb.w	r2, [r0, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8009ff8:	f880 23cb 	strb.w	r2, [r0, #971]	@ 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009ffc:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800a000:	f880 33cc 	strb.w	r3, [r0, #972]	@ 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800a004:	f500 716e 	add.w	r1, r0, #952	@ 0x3b8
 800a008:	f500 7060 	add.w	r0, r0, #896	@ 0x380
 800a00c:	f7ff ff8c 	bl	8009f28 <RxWindowSetup>
}
 800a010:	bd08      	pop	{r3, pc}
 800a012:	bf00      	nop
 800a014:	20000900 	.word	0x20000900
 800a018:	20008000 	.word	0x20008000

0800a01c <LoRaMacHandleNvm>:
{
 800a01c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800a01e:	4b31      	ldr	r3, [pc, #196]	@ (800a0e4 <LoRaMacHandleNvm+0xc8>)
 800a020:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800a024:	b103      	cbz	r3, 800a028 <LoRaMacHandleNvm+0xc>
}
 800a026:	bd38      	pop	{r3, r4, r5, pc}
 800a028:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800a02a:	2124      	movs	r1, #36	@ 0x24
 800a02c:	f004 ffaa 	bl	800ef84 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800a030:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a032:	4283      	cmp	r3, r0
 800a034:	d053      	beq.n	800a0de <LoRaMacHandleNvm+0xc2>
        nvmData->Crypto.Crc32 = crc;
 800a036:	6260      	str	r0, [r4, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800a038:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800a03a:	211c      	movs	r1, #28
 800a03c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a040:	f004 ffa0 	bl	800ef84 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800a044:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a046:	4283      	cmp	r3, r0
 800a048:	d002      	beq.n	800a050 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800a04a:	6460      	str	r0, [r4, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800a04c:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800a050:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a054:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800a058:	f004 ff94 	bl	800ef84 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800a05c:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 800a060:	4283      	cmp	r3, r0
 800a062:	d003      	beq.n	800a06c <LoRaMacHandleNvm+0x50>
        nvmData->MacGroup2.Crc32 = crc;
 800a064:	f8c4 0148 	str.w	r0, [r4, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800a068:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800a06c:	21d4      	movs	r1, #212	@ 0xd4
 800a06e:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 800a072:	f004 ff87 	bl	800ef84 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800a076:	f8d4 3220 	ldr.w	r3, [r4, #544]	@ 0x220
 800a07a:	4283      	cmp	r3, r0
 800a07c:	d003      	beq.n	800a086 <LoRaMacHandleNvm+0x6a>
        nvmData->SecureElement.Crc32 = crc;
 800a07e:	f8c4 0220 	str.w	r0, [r4, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800a082:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800a086:	2100      	movs	r1, #0
 800a088:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 800a08c:	f004 ff7a 	bl	800ef84 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800a090:	f8d4 3224 	ldr.w	r3, [r4, #548]	@ 0x224
 800a094:	4283      	cmp	r3, r0
 800a096:	d003      	beq.n	800a0a0 <LoRaMacHandleNvm+0x84>
        nvmData->RegionGroup1.Crc32 = crc;
 800a098:	f8c4 0224 	str.w	r0, [r4, #548]	@ 0x224
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800a09c:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800a0a0:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800a0a4:	f504 700a 	add.w	r0, r4, #552	@ 0x228
 800a0a8:	f004 ff6c 	bl	800ef84 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800a0ac:	f8d4 35a0 	ldr.w	r3, [r4, #1440]	@ 0x5a0
 800a0b0:	4283      	cmp	r3, r0
 800a0b2:	d003      	beq.n	800a0bc <LoRaMacHandleNvm+0xa0>
        nvmData->RegionGroup2.Crc32 = crc;
 800a0b4:	f8c4 05a0 	str.w	r0, [r4, #1440]	@ 0x5a0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800a0b8:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800a0bc:	2114      	movs	r1, #20
 800a0be:	f204 50a4 	addw	r0, r4, #1444	@ 0x5a4
 800a0c2:	f004 ff5f 	bl	800ef84 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800a0c6:	f8d4 35b8 	ldr.w	r3, [r4, #1464]	@ 0x5b8
 800a0ca:	4283      	cmp	r3, r0
 800a0cc:	d003      	beq.n	800a0d6 <LoRaMacHandleNvm+0xba>
        nvmData->ClassB.Crc32 = crc;
 800a0ce:	f8c4 05b8 	str.w	r0, [r4, #1464]	@ 0x5b8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800a0d2:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f7fe fb98 	bl	800880c <CallNvmDataChangeCallback>
 800a0dc:	e7a3      	b.n	800a026 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800a0de:	2500      	movs	r5, #0
 800a0e0:	e7ab      	b.n	800a03a <LoRaMacHandleNvm+0x1e>
 800a0e2:	bf00      	nop
 800a0e4:	20000900 	.word	0x20000900

0800a0e8 <RestoreNvmData>:
{
 800a0e8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800a0ea:	4b3e      	ldr	r3, [pc, #248]	@ (800a1e4 <RestoreNvmData+0xfc>)
 800a0ec:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d001      	beq.n	800a0f8 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800a0f4:	2001      	movs	r0, #1
}
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800a0f8:	4c3b      	ldr	r4, [pc, #236]	@ (800a1e8 <RestoreNvmData+0x100>)
 800a0fa:	2124      	movs	r1, #36	@ 0x24
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	f004 ff41 	bl	800ef84 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800a102:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a104:	4283      	cmp	r3, r0
 800a106:	d001      	beq.n	800a10c <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800a108:	2017      	movs	r0, #23
 800a10a:	e7f4      	b.n	800a0f6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800a10c:	3428      	adds	r4, #40	@ 0x28
 800a10e:	211c      	movs	r1, #28
 800a110:	4620      	mov	r0, r4
 800a112:	f004 ff37 	bl	800ef84 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800a116:	69e3      	ldr	r3, [r4, #28]
 800a118:	4283      	cmp	r3, r0
 800a11a:	d001      	beq.n	800a120 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800a11c:	2017      	movs	r0, #23
 800a11e:	e7ea      	b.n	800a0f6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800a120:	3420      	adds	r4, #32
 800a122:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a126:	4620      	mov	r0, r4
 800a128:	f004 ff2c 	bl	800ef84 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800a12c:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 800a130:	4283      	cmp	r3, r0
 800a132:	d001      	beq.n	800a138 <RestoreNvmData+0x50>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800a134:	2017      	movs	r0, #23
 800a136:	e7de      	b.n	800a0f6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800a138:	f504 7482 	add.w	r4, r4, #260	@ 0x104
 800a13c:	21d4      	movs	r1, #212	@ 0xd4
 800a13e:	4620      	mov	r0, r4
 800a140:	f004 ff20 	bl	800ef84 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800a144:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 800a148:	4283      	cmp	r3, r0
 800a14a:	d001      	beq.n	800a150 <RestoreNvmData+0x68>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800a14c:	2017      	movs	r0, #23
 800a14e:	e7d2      	b.n	800a0f6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800a150:	34d8      	adds	r4, #216	@ 0xd8
 800a152:	2100      	movs	r1, #0
 800a154:	4620      	mov	r0, r4
 800a156:	f004 ff15 	bl	800ef84 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	4283      	cmp	r3, r0
 800a15e:	d001      	beq.n	800a164 <RestoreNvmData+0x7c>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800a160:	2017      	movs	r0, #23
 800a162:	e7c8      	b.n	800a0f6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800a164:	3404      	adds	r4, #4
 800a166:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800a16a:	4620      	mov	r0, r4
 800a16c:	f004 ff0a 	bl	800ef84 <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800a170:	f8d4 3378 	ldr.w	r3, [r4, #888]	@ 0x378
 800a174:	4283      	cmp	r3, r0
 800a176:	d001      	beq.n	800a17c <RestoreNvmData+0x94>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800a178:	2017      	movs	r0, #23
 800a17a:	e7bc      	b.n	800a0f6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800a17c:	f504 745f 	add.w	r4, r4, #892	@ 0x37c
 800a180:	2114      	movs	r1, #20
 800a182:	4620      	mov	r0, r4
 800a184:	f004 fefe 	bl	800ef84 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800a188:	6963      	ldr	r3, [r4, #20]
 800a18a:	4283      	cmp	r3, r0
 800a18c:	d001      	beq.n	800a192 <RestoreNvmData+0xaa>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800a18e:	2017      	movs	r0, #23
 800a190:	e7b1      	b.n	800a0f6 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800a192:	f2a4 55a4 	subw	r5, r4, #1444	@ 0x5a4
 800a196:	4c15      	ldr	r4, [pc, #84]	@ (800a1ec <RestoreNvmData+0x104>)
 800a198:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 800a19c:	4629      	mov	r1, r5
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f004 fecf 	bl	800ef42 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800a1a4:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f004 fee1 	bl	800ef72 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800a1b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e4 <RestoreNvmData+0xfc>)
 800a1b2:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800a1b6:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800a1ba:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800a1bc:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a1c0:	f894 207d 	ldrb.w	r2, [r4, #125]	@ 0x7d
 800a1c4:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a1d4:	4b06      	ldr	r3, [pc, #24]	@ (800a1f0 <RestoreNvmData+0x108>)
 800a1d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1d8:	f894 0119 	ldrb.w	r0, [r4, #281]	@ 0x119
 800a1dc:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800a1de:	2000      	movs	r0, #0
 800a1e0:	e789      	b.n	800a0f6 <RestoreNvmData+0xe>
 800a1e2:	bf00      	nop
 800a1e4:	20000900 	.word	0x20000900
 800a1e8:	200085bc 	.word	0x200085bc
 800a1ec:	20008000 	.word	0x20008000
 800a1f0:	080126d4 	.word	0x080126d4

0800a1f4 <OnRadioRxTimeout>:
{
 800a1f4:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800a1f6:	4a07      	ldr	r2, [pc, #28]	@ (800a214 <OnRadioRxTimeout+0x20>)
 800a1f8:	7813      	ldrb	r3, [r2, #0]
 800a1fa:	f043 0302 	orr.w	r3, r3, #2
 800a1fe:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800a200:	f7fe faec 	bl	80087dc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800a204:	4b04      	ldr	r3, [pc, #16]	@ (800a218 <OnRadioRxTimeout+0x24>)
 800a206:	2201      	movs	r2, #1
 800a208:	2100      	movs	r1, #0
 800a20a:	2002      	movs	r0, #2
 800a20c:	f006 fd74 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
}
 800a210:	bd08      	pop	{r3, pc}
 800a212:	bf00      	nop
 800a214:	2000086c 	.word	0x2000086c
 800a218:	08012040 	.word	0x08012040

0800a21c <OnRadioTxTimeout>:
{
 800a21c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800a21e:	4a07      	ldr	r2, [pc, #28]	@ (800a23c <OnRadioTxTimeout+0x20>)
 800a220:	7813      	ldrb	r3, [r2, #0]
 800a222:	f043 0308 	orr.w	r3, r3, #8
 800a226:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800a228:	f7fe fad8 	bl	80087dc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800a22c:	4b04      	ldr	r3, [pc, #16]	@ (800a240 <OnRadioTxTimeout+0x24>)
 800a22e:	2201      	movs	r2, #1
 800a230:	2100      	movs	r1, #0
 800a232:	2002      	movs	r0, #2
 800a234:	f006 fd60 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
}
 800a238:	bd08      	pop	{r3, pc}
 800a23a:	bf00      	nop
 800a23c:	2000086c 	.word	0x2000086c
 800a240:	08012050 	.word	0x08012050

0800a244 <OnRadioRxDone>:
{
 800a244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a248:	4680      	mov	r8, r0
 800a24a:	460f      	mov	r7, r1
 800a24c:	4616      	mov	r6, r2
 800a24e:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800a250:	f007 f864 	bl	801131c <UTIL_TIMER_GetCurrentTime>
 800a254:	4c0c      	ldr	r4, [pc, #48]	@ (800a288 <OnRadioRxDone+0x44>)
 800a256:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800a258:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800a25c:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800a25e:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800a260:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800a262:	4b0a      	ldr	r3, [pc, #40]	@ (800a28c <OnRadioRxDone+0x48>)
 800a264:	781a      	ldrb	r2, [r3, #0]
 800a266:	f042 0210 	orr.w	r2, r2, #16
 800a26a:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800a26c:	b2d2      	uxtb	r2, r2
 800a26e:	f042 0201 	orr.w	r2, r2, #1
 800a272:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800a274:	f7fe fab2 	bl	80087dc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800a278:	4b05      	ldr	r3, [pc, #20]	@ (800a290 <OnRadioRxDone+0x4c>)
 800a27a:	2201      	movs	r2, #1
 800a27c:	2100      	movs	r1, #0
 800a27e:	2002      	movs	r0, #2
 800a280:	f006 fd3a 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
}
 800a284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a288:	20000858 	.word	0x20000858
 800a28c:	2000086c 	.word	0x2000086c
 800a290:	08012060 	.word	0x08012060

0800a294 <OnRadioTxDone>:
{
 800a294:	b510      	push	{r4, lr}
 800a296:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800a298:	f007 f840 	bl	801131c <UTIL_TIMER_GetCurrentTime>
 800a29c:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d0 <OnRadioTxDone+0x3c>)
 800a29e:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800a2a0:	466c      	mov	r4, sp
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f006 ff8c 	bl	80111c0 <SysTimeGet>
 800a2a8:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d4 <OnRadioTxDone+0x40>)
 800a2aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a2ae:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800a2b2:	4a09      	ldr	r2, [pc, #36]	@ (800a2d8 <OnRadioTxDone+0x44>)
 800a2b4:	7813      	ldrb	r3, [r2, #0]
 800a2b6:	f043 0320 	orr.w	r3, r3, #32
 800a2ba:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800a2bc:	f7fe fa8e 	bl	80087dc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800a2c0:	4b06      	ldr	r3, [pc, #24]	@ (800a2dc <OnRadioTxDone+0x48>)
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	2002      	movs	r0, #2
 800a2c8:	f006 fd16 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
}
 800a2cc:	b002      	add	sp, #8
 800a2ce:	bd10      	pop	{r4, pc}
 800a2d0:	20000868 	.word	0x20000868
 800a2d4:	20000c38 	.word	0x20000c38
 800a2d8:	2000086c 	.word	0x2000086c
 800a2dc:	08012070 	.word	0x08012070

0800a2e0 <ResetMacParameters>:
{
 800a2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2e2:	b091      	sub	sp, #68	@ 0x44
    if( isRejoin == false )
 800a2e4:	b918      	cbnz	r0, 800a2ee <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800a2e6:	4b5e      	ldr	r3, [pc, #376]	@ (800a460 <ResetMacParameters+0x180>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    Nvm.MacGroup1.AdrAckCounter = 0;
 800a2ee:	4c5c      	ldr	r4, [pc, #368]	@ (800a460 <ResetMacParameters+0x180>)
 800a2f0:	2500      	movs	r5, #0
 800a2f2:	62a5      	str	r5, [r4, #40]	@ 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800a2f4:	4e5b      	ldr	r6, [pc, #364]	@ (800a464 <ResetMacParameters+0x184>)
 800a2f6:	f886 5418 	strb.w	r5, [r6, #1048]	@ 0x418
    MacCtx.RetransmitTimeoutRetry = false;
 800a2fa:	f886 5419 	strb.w	r5, [r6, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800a2fe:	f8c6 5498 	str.w	r5, [r6, #1176]	@ 0x498
    Nvm.MacGroup2.MaxDCycle = 0;
 800a302:	f884 511b 	strb.w	r5, [r4, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800a306:	2701      	movs	r7, #1
 800a308:	f8a4 7120 	strh.w	r7, [r4, #288]	@ 0x120
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a30c:	f994 30dc 	ldrsb.w	r3, [r4, #220]	@ 0xdc
 800a310:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a314:	f994 30dd 	ldrsb.w	r3, [r4, #221]	@ 0xdd
 800a318:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800a31c:	f894 30b1 	ldrb.w	r3, [r4, #177]	@ 0xb1
 800a320:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800a324:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 800a328:	f104 02b4 	add.w	r2, r4, #180	@ 0xb4
 800a32c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a330:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800a334:	f104 0374 	add.w	r3, r4, #116	@ 0x74
 800a338:	f104 02bc 	add.w	r2, r4, #188	@ 0xbc
 800a33c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a340:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800a344:	f894 30c4 	ldrb.w	r3, [r4, #196]	@ 0xc4
 800a348:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800a34c:	f894 30c5 	ldrb.w	r3, [r4, #197]	@ 0xc5
 800a350:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800a354:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 800a358:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800a35c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 800a360:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800a364:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	@ 0xd0
 800a368:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800a36c:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	@ 0xd2
 800a370:	f8a4 308a 	strh.w	r3, [r4, #138]	@ 0x8a
    MacCtx.NodeAckRequested = false;
 800a374:	f886 541a 	strb.w	r5, [r6, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800a378:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800a37c:	f884 511d 	strb.w	r5, [r4, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800a380:	f884 511e 	strb.w	r5, [r4, #286]	@ 0x11e
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800a384:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800a388:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800a38c:	f884 5139 	strb.w	r5, [r4, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800a390:	f8c4 513c 	str.w	r5, [r4, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800a394:	f8c4 5140 	str.w	r5, [r4, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800a398:	f884 5145 	strb.w	r5, [r4, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800a39c:	f884 5146 	strb.w	r5, [r4, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800a3a0:	f884 5147 	strb.w	r5, [r4, #327]	@ 0x147
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800a3a4:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800a3a8:	f504 7309 	add.w	r3, r4, #548	@ 0x224
 800a3ac:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800a3ae:	f504 730a 	add.w	r3, r4, #552	@ 0x228
 800a3b2:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800a3b4:	4b2c      	ldr	r3, [pc, #176]	@ (800a468 <ResetMacParameters+0x188>)
 800a3b6:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a3b8:	a901      	add	r1, sp, #4
 800a3ba:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a3be:	f002 fc68 	bl	800cc92 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800a3c2:	f886 541b 	strb.w	r5, [r6, #1051]	@ 0x41b
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800a3c6:	f886 53d0 	strb.w	r5, [r6, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800a3ca:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800a3cc:	f8c6 33d4 	str.w	r3, [r6, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a3d0:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800a3d4:	f886 33e0 	strb.w	r3, [r6, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a3d8:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 800a3dc:	f886 33e1 	strb.w	r3, [r6, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800a3e0:	f886 53e2 	strb.w	r5, [r6, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800a3e4:	f886 73e3 	strb.w	r7, [r6, #995]	@ 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a3e8:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 800a3ec:	f886 33e4 	strb.w	r3, [r6, #996]	@ 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800a3f0:	f506 747a 	add.w	r4, r6, #1000	@ 0x3e8
 800a3f4:	f506 7c74 	add.w	ip, r6, #976	@ 0x3d0
 800a3f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a3fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3fe:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800a402:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800a406:	f886 73fa 	strb.w	r7, [r6, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a40a:	2302      	movs	r3, #2
 800a40c:	f886 33fb 	strb.w	r3, [r6, #1019]	@ 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800a410:	950e      	str	r5, [sp, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800a412:	950f      	str	r5, [sp, #60]	@ 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800a414:	f8d6 3348 	ldr.w	r3, [r6, #840]	@ 0x348
 800a418:	b11b      	cbz	r3, 800a422 <ResetMacParameters+0x142>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800a41a:	685a      	ldr	r2, [r3, #4]
 800a41c:	920e      	str	r2, [sp, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800a41e:	695b      	ldr	r3, [r3, #20]
 800a420:	930f      	str	r3, [sp, #60]	@ 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800a422:	4b12      	ldr	r3, [pc, #72]	@ (800a46c <ResetMacParameters+0x18c>)
 800a424:	9305      	str	r3, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800a426:	f1a3 0248 	sub.w	r2, r3, #72	@ 0x48
 800a42a:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800a42c:	f1a3 0214 	sub.w	r2, r3, #20
 800a430:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800a432:	3329      	adds	r3, #41	@ 0x29
 800a434:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800a436:	4a0e      	ldr	r2, [pc, #56]	@ (800a470 <ResetMacParameters+0x190>)
 800a438:	9209      	str	r2, [sp, #36]	@ 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800a43a:	f1a2 039c 	sub.w	r3, r2, #156	@ 0x9c
 800a43e:	930a      	str	r3, [sp, #40]	@ 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800a440:	f1a2 0398 	sub.w	r3, r2, #152	@ 0x98
 800a444:	930b      	str	r3, [sp, #44]	@ 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800a446:	1d13      	adds	r3, r2, #4
 800a448:	930c      	str	r3, [sp, #48]	@ 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800a44a:	f102 034c 	add.w	r3, r2, #76	@ 0x4c
 800a44e:	930d      	str	r3, [sp, #52]	@ 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800a450:	f502 6298 	add.w	r2, r2, #1216	@ 0x4c0
 800a454:	a90e      	add	r1, sp, #56	@ 0x38
 800a456:	a805      	add	r0, sp, #20
 800a458:	f001 fc0a 	bl	800bc70 <LoRaMacClassBInit>
}
 800a45c:	b011      	add	sp, #68	@ 0x44
 800a45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a460:	20008000 	.word	0x20008000
 800a464:	20000900 	.word	0x20000900
 800a468:	20000870 	.word	0x20000870
 800a46c:	20000d68 	.word	0x20000d68
 800a470:	200080e4 	.word	0x200080e4

0800a474 <SwitchClass>:
{
 800a474:	b570      	push	{r4, r5, r6, lr}
 800a476:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800a478:	4b45      	ldr	r3, [pc, #276]	@ (800a590 <SwitchClass+0x11c>)
 800a47a:	f893 5118 	ldrb.w	r5, [r3, #280]	@ 0x118
 800a47e:	2d01      	cmp	r5, #1
 800a480:	d06e      	beq.n	800a560 <SwitchClass+0xec>
 800a482:	2d02      	cmp	r5, #2
 800a484:	d074      	beq.n	800a570 <SwitchClass+0xfc>
 800a486:	b10d      	cbz	r5, 800a48c <SwitchClass+0x18>
 800a488:	2003      	movs	r0, #3
}
 800a48a:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800a48c:	bb58      	cbnz	r0, 800a4e6 <SwitchClass+0x72>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800a48e:	f103 0274 	add.w	r2, r3, #116	@ 0x74
 800a492:	336c      	adds	r3, #108	@ 0x6c
 800a494:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a498:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800a49c:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 800a49e:	2c01      	cmp	r4, #1
 800a4a0:	d023      	beq.n	800a4ea <SwitchClass+0x76>
            if( deviceClass == CLASS_C )
 800a4a2:	2c02      	cmp	r4, #2
 800a4a4:	d1f1      	bne.n	800a48a <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800a4a6:	4b3a      	ldr	r3, [pc, #232]	@ (800a590 <SwitchClass+0x11c>)
 800a4a8:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800a4ac:	4e39      	ldr	r6, [pc, #228]	@ (800a594 <SwitchClass+0x120>)
 800a4ae:	f506 747a 	add.w	r4, r6, #1000	@ 0x3e8
 800a4b2:	f506 7c74 	add.w	ip, r6, #976	@ 0x3d0
 800a4b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a4ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4bc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800a4c0:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	f886 33fb 	strb.w	r3, [r6, #1019]	@ 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	dd15      	ble.n	800a4fc <SwitchClass+0x88>
                MacCtx.NodeAckRequested = false;
 800a4d0:	4b30      	ldr	r3, [pc, #192]	@ (800a594 <SwitchClass+0x120>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                Radio.Sleep( );
 800a4d8:	4b2f      	ldr	r3, [pc, #188]	@ (800a598 <SwitchClass+0x124>)
 800a4da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4dc:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800a4de:	f7ff fcef 	bl	8009ec0 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	e7d1      	b.n	800a48a <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a4e6:	2003      	movs	r0, #3
 800a4e8:	e7d9      	b.n	800a49e <SwitchClass+0x2a>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f001 fbd6 	bl	800bc9c <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	d1d6      	bne.n	800a4a2 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800a4f4:	4b26      	ldr	r3, [pc, #152]	@ (800a590 <SwitchClass+0x11c>)
 800a4f6:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
 800a4fa:	e7d2      	b.n	800a4a2 <SwitchClass+0x2e>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800a4fc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800a500:	4a23      	ldr	r2, [pc, #140]	@ (800a590 <SwitchClass+0x11c>)
 800a502:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800a506:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
 800a50a:	b132      	cbz	r2, 800a51a <SwitchClass+0xa6>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800a50c:	4a20      	ldr	r2, [pc, #128]	@ (800a590 <SwitchClass+0x11c>)
 800a50e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800a512:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800a516:	2a02      	cmp	r2, #2
 800a518:	d002      	beq.n	800a520 <SwitchClass+0xac>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a51a:	3301      	adds	r3, #1
 800a51c:	b25b      	sxtb	r3, r3
 800a51e:	e7d5      	b.n	800a4cc <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800a520:	4a1b      	ldr	r2, [pc, #108]	@ (800a590 <SwitchClass+0x11c>)
 800a522:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 800a526:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
 800a52a:	6751      	str	r1, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800a52c:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 800a530:	f882 3078 	strb.w	r3, [r2, #120]	@ 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800a534:	4b17      	ldr	r3, [pc, #92]	@ (800a594 <SwitchClass+0x120>)
 800a536:	f893 041b 	ldrb.w	r0, [r3, #1051]	@ 0x41b
 800a53a:	f883 03e8 	strb.w	r0, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800a53e:	f8c3 13ec 	str.w	r1, [r3, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a542:	f892 107d 	ldrb.w	r1, [r2, #125]	@ 0x7d
 800a546:	f883 13f8 	strb.w	r1, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a54a:	f892 208c 	ldrb.w	r2, [r2, #140]	@ 0x8c
 800a54e:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a552:	2203      	movs	r2, #3
 800a554:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800a55e:	e7b7      	b.n	800a4d0 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800a560:	f001 fb9c 	bl	800bc9c <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800a564:	2800      	cmp	r0, #0
 800a566:	d190      	bne.n	800a48a <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800a568:	4b09      	ldr	r3, [pc, #36]	@ (800a590 <SwitchClass+0x11c>)
 800a56a:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
 800a56e:	e78c      	b.n	800a48a <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800a570:	b958      	cbnz	r0, 800a58a <SwitchClass+0x116>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800a572:	4b08      	ldr	r3, [pc, #32]	@ (800a594 <SwitchClass+0x120>)
 800a574:	2206      	movs	r2, #6
 800a576:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800a57a:	4b05      	ldr	r3, [pc, #20]	@ (800a590 <SwitchClass+0x11c>)
 800a57c:	f883 0118 	strb.w	r0, [r3, #280]	@ 0x118
                Radio.Sleep( );
 800a580:	4b05      	ldr	r3, [pc, #20]	@ (800a598 <SwitchClass+0x124>)
 800a582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a584:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800a586:	4620      	mov	r0, r4
 800a588:	e77f      	b.n	800a48a <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a58a:	2003      	movs	r0, #3
 800a58c:	e77d      	b.n	800a48a <SwitchClass+0x16>
 800a58e:	bf00      	nop
 800a590:	20008000 	.word	0x20008000
 800a594:	20000900 	.word	0x20000900
 800a598:	080126d4 	.word	0x080126d4

0800a59c <SendReJoinReq>:
{
 800a59c:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800a59e:	28ff      	cmp	r0, #255	@ 0xff
 800a5a0:	d003      	beq.n	800a5aa <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800a5a2:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800a5a4:	f7ff fb4e 	bl	8009c44 <ScheduleTx>
}
 800a5a8:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800a5aa:	2000      	movs	r0, #0
 800a5ac:	f7ff ff62 	bl	800a474 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800a5b0:	4d0a      	ldr	r5, [pc, #40]	@ (800a5dc <SendReJoinReq+0x40>)
 800a5b2:	2400      	movs	r4, #0
 800a5b4:	f885 4104 	strb.w	r4, [r5, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800a5b8:	1cab      	adds	r3, r5, #2
 800a5ba:	f8c5 3108 	str.w	r3, [r5, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a5be:	23ff      	movs	r3, #255	@ 0xff
 800a5c0:	f885 310c 	strb.w	r3, [r5, #268]	@ 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800a5c4:	f885 410d 	strb.w	r4, [r5, #269]	@ 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800a5c8:	f505 7087 	add.w	r0, r5, #270	@ 0x10e
 800a5cc:	f004 fb9c 	bl	800ed08 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800a5d0:	f505 708b 	add.w	r0, r5, #278	@ 0x116
 800a5d4:	f004 fb7a 	bl	800eccc <SecureElementGetDevEui>
            allowDelayedTx = false;
 800a5d8:	4620      	mov	r0, r4
            break;
 800a5da:	e7e3      	b.n	800a5a4 <SendReJoinReq+0x8>
 800a5dc:	20000900 	.word	0x20000900

0800a5e0 <PrepareFrame>:
{
 800a5e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5e4:	b083      	sub	sp, #12
 800a5e6:	4605      	mov	r5, r0
 800a5e8:	460e      	mov	r6, r1
 800a5ea:	4617      	mov	r7, r2
 800a5ec:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
    MacCtx.PktBufferLen = 0;
 800a5f0:	495a      	ldr	r1, [pc, #360]	@ (800a75c <PrepareFrame+0x17c>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800a5f6:	f881 241a 	strb.w	r2, [r1, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 800a5fa:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800a5fc:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800a5fe:	4699      	mov	r9, r3
 800a600:	b1cb      	cbz	r3, 800a636 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800a602:	4c57      	ldr	r4, [pc, #348]	@ (800a760 <PrepareFrame+0x180>)
 800a604:	4642      	mov	r2, r8
 800a606:	4649      	mov	r1, r9
 800a608:	4620      	mov	r0, r4
 800a60a:	f004 fc9a 	bl	800ef42 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800a60e:	fa5f f088 	uxtb.w	r0, r8
 800a612:	f884 00ff 	strb.w	r0, [r4, #255]	@ 0xff
 800a616:	f5a4 749c 	sub.w	r4, r4, #312	@ 0x138
    MacCtx.PktBuffer[0] = macHdr->Value;
 800a61a:	782b      	ldrb	r3, [r5, #0]
 800a61c:	70a3      	strb	r3, [r4, #2]
    switch( macHdr->Bits.MType )
 800a61e:	782b      	ldrb	r3, [r5, #0]
 800a620:	095b      	lsrs	r3, r3, #5
 800a622:	2b04      	cmp	r3, #4
 800a624:	d009      	beq.n	800a63a <PrepareFrame+0x5a>
 800a626:	2b07      	cmp	r3, #7
 800a628:	d079      	beq.n	800a71e <PrepareFrame+0x13e>
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d009      	beq.n	800a642 <PrepareFrame+0x62>
 800a62e:	2002      	movs	r0, #2
}
 800a630:	b003      	add	sp, #12
 800a632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800a636:	4690      	mov	r8, r2
 800a638:	e7e3      	b.n	800a602 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800a63a:	4b48      	ldr	r3, [pc, #288]	@ (800a75c <PrepareFrame+0x17c>)
 800a63c:	2201      	movs	r2, #1
 800a63e:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800a642:	4b46      	ldr	r3, [pc, #280]	@ (800a75c <PrepareFrame+0x17c>)
 800a644:	2204      	movs	r2, #4
 800a646:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800a64a:	1c9a      	adds	r2, r3, #2
 800a64c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a650:	22ff      	movs	r2, #255	@ 0xff
 800a652:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800a656:	782a      	ldrb	r2, [r5, #0]
 800a658:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800a65c:	f883 7128 	strb.w	r7, [r3, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800a660:	4a40      	ldr	r2, [pc, #256]	@ (800a764 <PrepareFrame+0x184>)
 800a662:	f8d2 20e4 	ldr.w	r2, [r2, #228]	@ 0xe4
 800a666:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a66a:	7832      	ldrb	r2, [r6, #0]
 800a66c:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800a670:	f883 0130 	strb.w	r0, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800a674:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 800a678:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a67c:	a801      	add	r0, sp, #4
 800a67e:	f001 ff97 	bl	800c5b0 <LoRaMacCryptoGetFCntUp>
 800a682:	2800      	cmp	r0, #0
 800a684:	d15e      	bne.n	800a744 <PrepareFrame+0x164>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800a686:	9a01      	ldr	r2, [sp, #4]
 800a688:	4b34      	ldr	r3, [pc, #208]	@ (800a75c <PrepareFrame+0x17c>)
 800a68a:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800a68e:	2100      	movs	r1, #0
 800a690:	f883 1445 	strb.w	r1, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 800a694:	f883 1444 	strb.w	r1, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800a698:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a69c:	4668      	mov	r0, sp
 800a69e:	f001 fc2f 	bl	800bf00 <LoRaMacCommandsGetSizeSerializedCmds>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d150      	bne.n	800a748 <PrepareFrame+0x168>
            if( macCmdsSize > 0 )
 800a6a6:	9b00      	ldr	r3, [sp, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d0c1      	beq.n	800a630 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800a6ac:	4b2d      	ldr	r3, [pc, #180]	@ (800a764 <PrepareFrame+0x184>)
 800a6ae:	f993 0039 	ldrsb.w	r0, [r3, #57]	@ 0x39
 800a6b2:	f7fe f8c3 	bl	800883c <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a6b6:	4b29      	ldr	r3, [pc, #164]	@ (800a75c <PrepareFrame+0x17c>)
 800a6b8:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800a6bc:	b113      	cbz	r3, 800a6c4 <PrepareFrame+0xe4>
 800a6be:	9a00      	ldr	r2, [sp, #0]
 800a6c0:	2a0f      	cmp	r2, #15
 800a6c2:	d915      	bls.n	800a6f0 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a6c4:	b113      	cbz	r3, 800a6cc <PrepareFrame+0xec>
 800a6c6:	9b00      	ldr	r3, [sp, #0]
 800a6c8:	2b0f      	cmp	r3, #15
 800a6ca:	d821      	bhi.n	800a710 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a6cc:	4a26      	ldr	r2, [pc, #152]	@ (800a768 <PrepareFrame+0x188>)
 800a6ce:	4669      	mov	r1, sp
 800a6d0:	f001 fc22 	bl	800bf18 <LoRaMacCommandsSerializeCmds>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d13d      	bne.n	800a754 <PrepareFrame+0x174>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800a6d8:	4b20      	ldr	r3, [pc, #128]	@ (800a75c <PrepareFrame+0x17c>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800a6e0:	f203 429c 	addw	r2, r3, #1180	@ 0x49c
 800a6e4:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800a6e8:	9a00      	ldr	r2, [sp, #0]
 800a6ea:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 800a6ee:	e79f      	b.n	800a630 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800a6f0:	4a1e      	ldr	r2, [pc, #120]	@ (800a76c <PrepareFrame+0x18c>)
 800a6f2:	4669      	mov	r1, sp
 800a6f4:	200f      	movs	r0, #15
 800a6f6:	f001 fc0f 	bl	800bf18 <LoRaMacCommandsSerializeCmds>
 800a6fa:	bb38      	cbnz	r0, 800a74c <PrepareFrame+0x16c>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800a6fc:	7833      	ldrb	r3, [r6, #0]
 800a6fe:	9a00      	ldr	r2, [sp, #0]
 800a700:	f362 0303 	bfi	r3, r2, #0, #4
 800a704:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a706:	b2da      	uxtb	r2, r3
 800a708:	4b14      	ldr	r3, [pc, #80]	@ (800a75c <PrepareFrame+0x17c>)
 800a70a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 800a70e:	e78f      	b.n	800a630 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a710:	4a15      	ldr	r2, [pc, #84]	@ (800a768 <PrepareFrame+0x188>)
 800a712:	4669      	mov	r1, sp
 800a714:	f001 fc00 	bl	800bf18 <LoRaMacCommandsSerializeCmds>
 800a718:	b1d0      	cbz	r0, 800a750 <PrepareFrame+0x170>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a71a:	2013      	movs	r0, #19
 800a71c:	e788      	b.n	800a630 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800a71e:	f1b9 0f00 	cmp.w	r9, #0
 800a722:	d019      	beq.n	800a758 <PrepareFrame+0x178>
 800a724:	2800      	cmp	r0, #0
 800a726:	d083      	beq.n	800a630 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800a728:	4c11      	ldr	r4, [pc, #68]	@ (800a770 <PrepareFrame+0x190>)
 800a72a:	fa5f f288 	uxtb.w	r2, r8
 800a72e:	4649      	mov	r1, r9
 800a730:	4620      	mov	r0, r4
 800a732:	f004 fc06 	bl	800ef42 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800a736:	f894 3234 	ldrb.w	r3, [r4, #564]	@ 0x234
 800a73a:	3301      	adds	r3, #1
 800a73c:	f824 3c03 	strh.w	r3, [r4, #-3]
    return LORAMAC_STATUS_OK;
 800a740:	2000      	movs	r0, #0
 800a742:	e775      	b.n	800a630 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800a744:	2012      	movs	r0, #18
 800a746:	e773      	b.n	800a630 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a748:	2013      	movs	r0, #19
 800a74a:	e771      	b.n	800a630 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a74c:	2013      	movs	r0, #19
 800a74e:	e76f      	b.n	800a630 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800a750:	200a      	movs	r0, #10
 800a752:	e76d      	b.n	800a630 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a754:	2013      	movs	r0, #19
 800a756:	e76b      	b.n	800a630 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800a758:	2000      	movs	r0, #0
 800a75a:	e769      	b.n	800a630 <PrepareFrame+0x50>
 800a75c:	20000900 	.word	0x20000900
 800a760:	20000a38 	.word	0x20000a38
 800a764:	20008000 	.word	0x20008000
 800a768:	20000d9c 	.word	0x20000d9c
 800a76c:	20000a18 	.word	0x20000a18
 800a770:	20000903 	.word	0x20000903

0800a774 <Send>:
{
 800a774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a778:	b08a      	sub	sp, #40	@ 0x28
 800a77a:	4617      	mov	r7, r2
 800a77c:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a77e:	4c44      	ldr	r4, [pc, #272]	@ (800a890 <Send+0x11c>)
 800a780:	f994 a039 	ldrsb.w	sl, [r4, #57]	@ 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800a784:	f994 9038 	ldrsb.w	r9, [r4, #56]	@ 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a788:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a78a:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a78c:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 800a790:	2b00      	cmp	r3, #0
 800a792:	d07a      	beq.n	800a88a <Send+0x116>
 800a794:	4605      	mov	r5, r0
 800a796:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800a798:	f894 311b 	ldrb.w	r3, [r4, #283]	@ 0x11b
 800a79c:	b90b      	cbnz	r3, 800a7a2 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a79e:	2100      	movs	r1, #0
 800a7a0:	6321      	str	r1, [r4, #48]	@ 0x30
    fCtrl.Value = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800a7a8:	4839      	ldr	r0, [pc, #228]	@ (800a890 <Send+0x11c>)
 800a7aa:	f890 111a 	ldrb.w	r1, [r0, #282]	@ 0x11a
 800a7ae:	f361 13c7 	bfi	r3, r1, #7, #1
 800a7b2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a7b6:	f890 3118 	ldrb.w	r3, [r0, #280]	@ 0x118
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d052      	beq.n	800a864 <Send+0xf0>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800a7be:	4b34      	ldr	r3, [pc, #208]	@ (800a890 <Send+0x11c>)
 800a7c0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800a7c4:	b12b      	cbz	r3, 800a7d2 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800a7c6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a7ca:	f043 0320 	orr.w	r3, r3, #32
 800a7ce:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    adrNext.UpdateChanMask = true;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800a7d8:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a7dc:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800a7de:	492c      	ldr	r1, [pc, #176]	@ (800a890 <Send+0x11c>)
 800a7e0:	f8b1 3088 	ldrh.w	r3, [r1, #136]	@ 0x88
 800a7e4:	f8ad 3014 	strh.w	r3, [sp, #20]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800a7e8:	f8b1 308a 	ldrh.w	r3, [r1, #138]	@ 0x8a
 800a7ec:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a7f0:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a7f4:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a7f8:	f891 307c 	ldrb.w	r3, [r1, #124]	@ 0x7c
 800a7fc:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800a800:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 800a804:	f88d 301c 	strb.w	r3, [sp, #28]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a808:	460b      	mov	r3, r1
 800a80a:	f813 2f68 	ldrb.w	r2, [r3, #104]!
 800a80e:	f88d 201a 	strb.w	r2, [sp, #26]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800a812:	aa08      	add	r2, sp, #32
 800a814:	9200      	str	r2, [sp, #0]
 800a816:	f101 0238 	add.w	r2, r1, #56	@ 0x38
 800a81a:	3139      	adds	r1, #57	@ 0x39
 800a81c:	a803      	add	r0, sp, #12
 800a81e:	f001 f9ad 	bl	800bb7c <LoRaMacAdrCalcNext>
 800a822:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a826:	f360 1386 	bfi	r3, r0, #6, #1
 800a82a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800a82e:	f8cd 8000 	str.w	r8, [sp]
 800a832:	463b      	mov	r3, r7
 800a834:	4632      	mov	r2, r6
 800a836:	a909      	add	r1, sp, #36	@ 0x24
 800a838:	4628      	mov	r0, r5
 800a83a:	f7ff fed1 	bl	800a5e0 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800a83e:	4604      	mov	r4, r0
 800a840:	b108      	cbz	r0, 800a846 <Send+0xd2>
 800a842:	280a      	cmp	r0, #10
 800a844:	d104      	bne.n	800a850 <Send+0xdc>
        status = ScheduleTx( allowDelayedTx );
 800a846:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 800a84a:	f7ff f9fb 	bl	8009c44 <ScheduleTx>
 800a84e:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800a850:	b17c      	cbz	r4, 800a872 <Send+0xfe>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800a852:	4b0f      	ldr	r3, [pc, #60]	@ (800a890 <Send+0x11c>)
 800a854:	f883 a039 	strb.w	sl, [r3, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800a858:	f883 9038 	strb.w	r9, [r3, #56]	@ 0x38
}
 800a85c:	4620      	mov	r0, r4
 800a85e:	b00a      	add	sp, #40	@ 0x28
 800a860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800a864:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a868:	f043 0310 	orr.w	r3, r3, #16
 800a86c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800a870:	e7a5      	b.n	800a7be <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800a872:	4b07      	ldr	r3, [pc, #28]	@ (800a890 <Send+0x11c>)
 800a874:	2200      	movs	r2, #0
 800a876:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800a87a:	9a08      	ldr	r2, [sp, #32]
 800a87c:	629a      	str	r2, [r3, #40]	@ 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800a87e:	f001 fb0d 	bl	800be9c <LoRaMacCommandsRemoveNoneStickyCmds>
 800a882:	2800      	cmp	r0, #0
 800a884:	d0ea      	beq.n	800a85c <Send+0xe8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a886:	2413      	movs	r4, #19
 800a888:	e7e8      	b.n	800a85c <Send+0xe8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800a88a:	2407      	movs	r4, #7
 800a88c:	e7e6      	b.n	800a85c <Send+0xe8>
 800a88e:	bf00      	nop
 800a890:	20008000 	.word	0x20008000

0800a894 <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800a894:	4b0c      	ldr	r3, [pc, #48]	@ (800a8c8 <LoRaMacIsBusy+0x34>)
 800a896:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d00c      	beq.n	800a8b8 <LoRaMacIsBusy+0x24>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800a89e:	4a0b      	ldr	r2, [pc, #44]	@ (800a8cc <LoRaMacIsBusy+0x38>)
 800a8a0:	7812      	ldrb	r2, [r2, #0]
 800a8a2:	f012 0f01 	tst.w	r2, #1
 800a8a6:	d109      	bne.n	800a8bc <LoRaMacIsBusy+0x28>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a8a8:	b953      	cbnz	r3, 800a8c0 <LoRaMacIsBusy+0x2c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800a8aa:	4b07      	ldr	r3, [pc, #28]	@ (800a8c8 <LoRaMacIsBusy+0x34>)
 800a8ac:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d007      	beq.n	800a8c4 <LoRaMacIsBusy+0x30>
    return true;
 800a8b4:	2001      	movs	r0, #1
 800a8b6:	4770      	bx	lr
        return false;
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	4770      	bx	lr
        return true;
 800a8bc:	2001      	movs	r0, #1
 800a8be:	4770      	bx	lr
    return true;
 800a8c0:	2001      	movs	r0, #1
 800a8c2:	4770      	bx	lr
        return false;
 800a8c4:	2000      	movs	r0, #0
}
 800a8c6:	4770      	bx	lr
 800a8c8:	20000900 	.word	0x20000900
 800a8cc:	2000086c 	.word	0x2000086c

0800a8d0 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800a8d0:	4b04      	ldr	r3, [pc, #16]	@ (800a8e4 <LoRaMacIsStopped+0x14>)
 800a8d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d001      	beq.n	800a8de <LoRaMacIsStopped+0xe>
    return false;
 800a8da:	2000      	movs	r0, #0
 800a8dc:	4770      	bx	lr
        return true;
 800a8de:	2001      	movs	r0, #1
}
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	20000900 	.word	0x20000900

0800a8e8 <LoRaMacProcess>:
{
 800a8e8:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800a8ea:	f7fe fffb 	bl	80098e4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800a8ee:	f001 f9e6 	bl	800bcbe <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800a8f2:	4b1f      	ldr	r3, [pc, #124]	@ (800a970 <LoRaMacProcess+0x88>)
 800a8f4:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800a8f8:	f013 0f10 	tst.w	r3, #16
 800a8fc:	d10d      	bne.n	800a91a <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800a8fe:	f7fd fe67 	bl	80085d0 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800a902:	4b1b      	ldr	r3, [pc, #108]	@ (800a970 <LoRaMacProcess+0x88>)
 800a904:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800a908:	2b02      	cmp	r3, #2
 800a90a:	d022      	beq.n	800a952 <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800a90c:	4b18      	ldr	r3, [pc, #96]	@ (800a970 <LoRaMacProcess+0x88>)
 800a90e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800a912:	f013 0f20 	tst.w	r3, #32
 800a916:	d11f      	bne.n	800a958 <LoRaMacProcess+0x70>
}
 800a918:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800a91a:	2000      	movs	r0, #0
 800a91c:	f7fd fe52 	bl	80085c4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800a920:	f7fd fe8e 	bl	8008640 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800a924:	f7fd ff7e 	bl	8008824 <IsRequestPending>
 800a928:	b110      	cbz	r0, 800a930 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800a92a:	f7fe f869 	bl	8008a00 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800a92e:	b918      	cbnz	r0, 800a938 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800a930:	f7ff f81a 	bl	8009968 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800a934:	f7ff fa3c 	bl	8009db0 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800a938:	f7ff fa78 	bl	8009e2c <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a93c:	2001      	movs	r0, #1
 800a93e:	f7fd fe41 	bl	80085c4 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800a942:	4a0b      	ldr	r2, [pc, #44]	@ (800a970 <LoRaMacProcess+0x88>)
 800a944:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800a948:	f043 0320 	orr.w	r3, r3, #32
 800a94c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800a950:	e7d5      	b.n	800a8fe <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800a952:	f7ff fab5 	bl	8009ec0 <OpenContinuousRxCWindow>
 800a956:	e7d9      	b.n	800a90c <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800a958:	4b05      	ldr	r3, [pc, #20]	@ (800a970 <LoRaMacProcess+0x88>)
 800a95a:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800a95e:	f36f 1245 	bfc	r2, #5, #1
 800a962:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 800a966:	4803      	ldr	r0, [pc, #12]	@ (800a974 <LoRaMacProcess+0x8c>)
 800a968:	f7ff fb58 	bl	800a01c <LoRaMacHandleNvm>
}
 800a96c:	e7d4      	b.n	800a918 <LoRaMacProcess+0x30>
 800a96e:	bf00      	nop
 800a970:	20000900 	.word	0x20000900
 800a974:	20008000 	.word	0x20008000

0800a978 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800a978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97c:	b08d      	sub	sp, #52	@ 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800a97e:	2800      	cmp	r0, #0
 800a980:	f000 81a3 	beq.w	800acca <LoRaMacInitialization+0x352>
 800a984:	4688      	mov	r8, r1
 800a986:	4691      	mov	r9, r2
 800a988:	4607      	mov	r7, r0
 800a98a:	2900      	cmp	r1, #0
 800a98c:	f000 819f 	beq.w	800acce <LoRaMacInitialization+0x356>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a990:	6803      	ldr	r3, [r0, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	f000 819d 	beq.w	800acd2 <LoRaMacInitialization+0x35a>
        ( primitives->MacMcpsIndication == NULL ) ||
 800a998:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 819b 	beq.w	800acd6 <LoRaMacInitialization+0x35e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a9a0:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	f000 8199 	beq.w	800acda <LoRaMacInitialization+0x362>
        ( primitives->MacMlmeIndication == NULL ) )
 800a9a8:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 8197 	beq.w	800acde <LoRaMacInitialization+0x366>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800a9b0:	4610      	mov	r0, r2
 800a9b2:	f002 f94f 	bl	800cc54 <RegionIsActive>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	f000 8193 	beq.w	800ace2 <LoRaMacInitialization+0x36a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800a9bc:	4638      	mov	r0, r7
 800a9be:	f001 fb3f 	bl	800c040 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800a9c2:	4ccb      	ldr	r4, [pc, #812]	@ (800acf0 <LoRaMacInitialization+0x378>)
 800a9c4:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f004 fad1 	bl	800ef72 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800a9d0:	4ec8      	ldr	r6, [pc, #800]	@ (800acf4 <LoRaMacInitialization+0x37c>)
 800a9d2:	f240 521c 	movw	r2, #1308	@ 0x51c
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f004 faca 	bl	800ef72 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800a9de:	f884 9048 	strb.w	r9, [r4, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800a9e2:	2500      	movs	r5, #0
 800a9e4:	f884 5118 	strb.w	r5, [r4, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800a9e8:	f884 508c 	strb.w	r5, [r4, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800a9ec:	4bc2      	ldr	r3, [pc, #776]	@ (800acf8 <LoRaMacInitialization+0x380>)
 800a9ee:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800a9f2:	f88d 5020 	strb.w	r5, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800a9f6:	f504 7309 	add.w	r3, r4, #548	@ 0x224
 800a9fa:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800a9fc:	f504 730a 	add.w	r3, r4, #552	@ 0x228
 800aa00:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800aa02:	4bbe      	ldr	r3, [pc, #760]	@ (800acfc <LoRaMacInitialization+0x384>)
 800aa04:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800aa06:	a905      	add	r1, sp, #20
 800aa08:	4648      	mov	r0, r9
 800aa0a:	f002 f942 	bl	800cc92 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800aa0e:	230f      	movs	r3, #15
 800aa10:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aa14:	a90a      	add	r1, sp, #40	@ 0x28
 800aa16:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800aa1a:	f002 f921 	bl	800cc60 <RegionGetPhyParam>
 800aa1e:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800aa20:	1b40      	subs	r0, r0, r5
 800aa22:	bf18      	it	ne
 800aa24:	2001      	movne	r0, #1
 800aa26:	f884 011c 	strb.w	r0, [r4, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800aa2a:	f04f 0a0a 	mov.w	sl, #10
 800aa2e:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aa32:	a90a      	add	r1, sp, #40	@ 0x28
 800aa34:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800aa38:	f002 f912 	bl	800cc60 <RegionGetPhyParam>
 800aa3c:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800aa3e:	f884 00dc 	strb.w	r0, [r4, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800aa42:	f04f 0906 	mov.w	r9, #6
 800aa46:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aa4a:	a90a      	add	r1, sp, #40	@ 0x28
 800aa4c:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800aa50:	f002 f906 	bl	800cc60 <RegionGetPhyParam>
 800aa54:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800aa56:	f884 00dd 	strb.w	r0, [r4, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800aa5a:	2310      	movs	r3, #16
 800aa5c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aa60:	a90a      	add	r1, sp, #40	@ 0x28
 800aa62:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800aa66:	f002 f8fb 	bl	800cc60 <RegionGetPhyParam>
 800aa6a:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800aa6c:	f8c4 009c 	str.w	r0, [r4, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800aa70:	2311      	movs	r3, #17
 800aa72:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aa76:	a90a      	add	r1, sp, #40	@ 0x28
 800aa78:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800aa7c:	f002 f8f0 	bl	800cc60 <RegionGetPhyParam>
 800aa80:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800aa82:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800aa86:	2312      	movs	r3, #18
 800aa88:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aa8c:	a90a      	add	r1, sp, #40	@ 0x28
 800aa8e:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800aa92:	f002 f8e5 	bl	800cc60 <RegionGetPhyParam>
 800aa96:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800aa98:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800aa9c:	2313      	movs	r3, #19
 800aa9e:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aaa2:	a90a      	add	r1, sp, #40	@ 0x28
 800aaa4:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800aaa8:	f002 f8da 	bl	800cc60 <RegionGetPhyParam>
 800aaac:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800aaae:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800aab2:	2314      	movs	r3, #20
 800aab4:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aab8:	a90a      	add	r1, sp, #40	@ 0x28
 800aaba:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800aabe:	f002 f8cf 	bl	800cc60 <RegionGetPhyParam>
 800aac2:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800aac4:	f8c4 00ac 	str.w	r0, [r4, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800aac8:	2316      	movs	r3, #22
 800aaca:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aace:	a90a      	add	r1, sp, #40	@ 0x28
 800aad0:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800aad4:	f002 f8c4 	bl	800cc60 <RegionGetPhyParam>
 800aad8:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800aada:	f884 00b1 	strb.w	r0, [r4, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800aade:	2317      	movs	r3, #23
 800aae0:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aae4:	a90a      	add	r1, sp, #40	@ 0x28
 800aae6:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800aaea:	f002 f8b9 	bl	800cc60 <RegionGetPhyParam>
 800aaee:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800aaf0:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800aaf4:	f8c4 00bc 	str.w	r0, [r4, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800aaf8:	2318      	movs	r3, #24
 800aafa:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800aafe:	a90a      	add	r1, sp, #40	@ 0x28
 800ab00:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800ab04:	f002 f8ac 	bl	800cc60 <RegionGetPhyParam>
 800ab08:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800ab0a:	b2c0      	uxtb	r0, r0
 800ab0c:	f884 00b8 	strb.w	r0, [r4, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800ab10:	f884 00c0 	strb.w	r0, [r4, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800ab14:	231d      	movs	r3, #29
 800ab16:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ab1a:	a90a      	add	r1, sp, #40	@ 0x28
 800ab1c:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800ab20:	f002 f89e 	bl	800cc60 <RegionGetPhyParam>
 800ab24:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800ab26:	f884 00c4 	strb.w	r0, [r4, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800ab2a:	231e      	movs	r3, #30
 800ab2c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ab30:	a90a      	add	r1, sp, #40	@ 0x28
 800ab32:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800ab36:	f002 f893 	bl	800cc60 <RegionGetPhyParam>
 800ab3a:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800ab3c:	f884 00c5 	strb.w	r0, [r4, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800ab40:	231f      	movs	r3, #31
 800ab42:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ab46:	a90a      	add	r1, sp, #40	@ 0x28
 800ab48:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800ab4c:	f002 f888 	bl	800cc60 <RegionGetPhyParam>
 800ab50:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800ab52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab54:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800ab58:	2320      	movs	r3, #32
 800ab5a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ab5e:	a90a      	add	r1, sp, #40	@ 0x28
 800ab60:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800ab64:	f002 f87c 	bl	800cc60 <RegionGetPhyParam>
 800ab68:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800ab6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab6c:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800ab70:	230b      	movs	r3, #11
 800ab72:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ab76:	a90a      	add	r1, sp, #40	@ 0x28
 800ab78:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800ab7c:	f002 f870 	bl	800cc60 <RegionGetPhyParam>
 800ab80:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800ab82:	f8a4 00d0 	strh.w	r0, [r4, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800ab86:	230c      	movs	r3, #12
 800ab88:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ab8c:	a90a      	add	r1, sp, #40	@ 0x28
 800ab8e:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800ab92:	f002 f865 	bl	800cc60 <RegionGetPhyParam>
 800ab96:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800ab98:	f8a4 00d2 	strh.w	r0, [r4, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800ab9c:	f04f 0b01 	mov.w	fp, #1
 800aba0:	f884 b0b0 	strb.w	fp, [r4, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800aba4:	f8c4 a094 	str.w	sl, [r4, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800aba8:	f884 9098 	strb.w	r9, [r4, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800abac:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800abb0:	f884 9050 	strb.w	r9, [r4, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800abb4:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800abb8:	6563      	str	r3, [r4, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800abba:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800abbe:	65a3      	str	r3, [r4, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800abc0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800abc4:	65e3      	str	r3, [r4, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800abc6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800abca:	6623      	str	r3, [r4, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800abcc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800abd0:	6663      	str	r3, [r4, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800abd2:	f884 b068 	strb.w	fp, [r4, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800abd6:	f884 b11f 	strb.w	fp, [r4, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800abda:	f8c6 8348 	str.w	r8, [r6, #840]	@ 0x348
    ResetMacParameters( false );
 800abde:	4628      	mov	r0, r5
 800abe0:	f7ff fb7e 	bl	800a2e0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800abe4:	f884 b119 	strb.w	fp, [r4, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 800abe8:	f8c6 7344 	str.w	r7, [r6, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 800abec:	f886 5491 	strb.w	r5, [r6, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800abf0:	f8c6 b340 	str.w	fp, [r6, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800abf4:	62e5      	str	r5, [r4, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800abf6:	6325      	str	r5, [r4, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800abf8:	9500      	str	r5, [sp, #0]
 800abfa:	4b41      	ldr	r3, [pc, #260]	@ (800ad00 <LoRaMacInitialization+0x388>)
 800abfc:	462a      	mov	r2, r5
 800abfe:	f04f 31ff 	mov.w	r1, #4294967295
 800ac02:	f506 705a 	add.w	r0, r6, #872	@ 0x368
 800ac06:	f006 fb6b 	bl	80112e0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800ac0a:	9500      	str	r5, [sp, #0]
 800ac0c:	4b3d      	ldr	r3, [pc, #244]	@ (800ad04 <LoRaMacInitialization+0x38c>)
 800ac0e:	462a      	mov	r2, r5
 800ac10:	f04f 31ff 	mov.w	r1, #4294967295
 800ac14:	f506 7060 	add.w	r0, r6, #896	@ 0x380
 800ac18:	f006 fb62 	bl	80112e0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800ac1c:	9500      	str	r5, [sp, #0]
 800ac1e:	4b3a      	ldr	r3, [pc, #232]	@ (800ad08 <LoRaMacInitialization+0x390>)
 800ac20:	462a      	mov	r2, r5
 800ac22:	f04f 31ff 	mov.w	r1, #4294967295
 800ac26:	f506 7066 	add.w	r0, r6, #920	@ 0x398
 800ac2a:	f006 fb59 	bl	80112e0 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800ac2e:	9500      	str	r5, [sp, #0]
 800ac30:	4b36      	ldr	r3, [pc, #216]	@ (800ad0c <LoRaMacInitialization+0x394>)
 800ac32:	462a      	mov	r2, r5
 800ac34:	f04f 31ff 	mov.w	r1, #4294967295
 800ac38:	f506 6080 	add.w	r0, r6, #1024	@ 0x400
 800ac3c:	f006 fb50 	bl	80112e0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800ac40:	af02      	add	r7, sp, #8
 800ac42:	4638      	mov	r0, r7
 800ac44:	f006 fade 	bl	8011204 <SysTimeGetMcuTime>
 800ac48:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 800ac4c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ac50:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800ac54:	4b2e      	ldr	r3, [pc, #184]	@ (800ad10 <LoRaMacInitialization+0x398>)
 800ac56:	601d      	str	r5, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800ac58:	4b2e      	ldr	r3, [pc, #184]	@ (800ad14 <LoRaMacInitialization+0x39c>)
 800ac5a:	f8c6 334c 	str.w	r3, [r6, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800ac5e:	4b2e      	ldr	r3, [pc, #184]	@ (800ad18 <LoRaMacInitialization+0x3a0>)
 800ac60:	f8c6 3354 	str.w	r3, [r6, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800ac64:	4b2d      	ldr	r3, [pc, #180]	@ (800ad1c <LoRaMacInitialization+0x3a4>)
 800ac66:	f8c6 335c 	str.w	r3, [r6, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800ac6a:	4b2d      	ldr	r3, [pc, #180]	@ (800ad20 <LoRaMacInitialization+0x3a8>)
 800ac6c:	f8c6 3350 	str.w	r3, [r6, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800ac70:	4b2c      	ldr	r3, [pc, #176]	@ (800ad24 <LoRaMacInitialization+0x3ac>)
 800ac72:	f8c6 3358 	str.w	r3, [r6, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800ac76:	4b2c      	ldr	r3, [pc, #176]	@ (800ad28 <LoRaMacInitialization+0x3b0>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f506 7053 	add.w	r0, r6, #844	@ 0x34c
 800ac7e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800ac80:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 800ac84:	f003 fe8c 	bl	800e9a0 <SecureElementInit>
 800ac88:	bb80      	cbnz	r0, 800acec <LoRaMacInitialization+0x374>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f001 fc70 	bl	800c570 <LoRaMacCryptoInit>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	d14b      	bne.n	800ad2c <LoRaMacInitialization+0x3b4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800ac94:	f001 f896 	bl	800bdc4 <LoRaMacCommandsInit>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	d149      	bne.n	800ad30 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800ac9c:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 800aca0:	f001 fcb8 	bl	800c614 <LoRaMacCryptoSetMulticastReference>
 800aca4:	4604      	mov	r4, r0
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d144      	bne.n	800ad34 <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800acaa:	4d1f      	ldr	r5, [pc, #124]	@ (800ad28 <LoRaMacInitialization+0x3b0>)
 800acac:	696b      	ldr	r3, [r5, #20]
 800acae:	4798      	blx	r3
 800acb0:	f004 f934 	bl	800ef1c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800acb4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800acb6:	4a0e      	ldr	r2, [pc, #56]	@ (800acf0 <LoRaMacInitialization+0x378>)
 800acb8:	f892 0119 	ldrb.w	r0, [r2, #281]	@ 0x119
 800acbc:	4798      	blx	r3
    Radio.Sleep( );
 800acbe:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800acc0:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800acc2:	4658      	mov	r0, fp
 800acc4:	f7fd fc7e 	bl	80085c4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800acc8:	e00c      	b.n	800ace4 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800acca:	2403      	movs	r4, #3
 800accc:	e00a      	b.n	800ace4 <LoRaMacInitialization+0x36c>
 800acce:	2403      	movs	r4, #3
 800acd0:	e008      	b.n	800ace4 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800acd2:	2403      	movs	r4, #3
 800acd4:	e006      	b.n	800ace4 <LoRaMacInitialization+0x36c>
 800acd6:	2403      	movs	r4, #3
 800acd8:	e004      	b.n	800ace4 <LoRaMacInitialization+0x36c>
 800acda:	2403      	movs	r4, #3
 800acdc:	e002      	b.n	800ace4 <LoRaMacInitialization+0x36c>
 800acde:	2403      	movs	r4, #3
 800ace0:	e000      	b.n	800ace4 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800ace2:	2409      	movs	r4, #9
}
 800ace4:	4620      	mov	r0, r4
 800ace6:	b00d      	add	sp, #52	@ 0x34
 800ace8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800acec:	2411      	movs	r4, #17
 800acee:	e7f9      	b.n	800ace4 <LoRaMacInitialization+0x36c>
 800acf0:	20008000 	.word	0x20008000
 800acf4:	20000900 	.word	0x20000900
 800acf8:	01000400 	.word	0x01000400
 800acfc:	20000870 	.word	0x20000870
 800ad00:	08009d4d 	.word	0x08009d4d
 800ad04:	08009fcd 	.word	0x08009fcd
 800ad08:	08009f75 	.word	0x08009f75
 800ad0c:	0800899d 	.word	0x0800899d
 800ad10:	2000086c 	.word	0x2000086c
 800ad14:	0800a295 	.word	0x0800a295
 800ad18:	0800a245 	.word	0x0800a245
 800ad1c:	080087f5 	.word	0x080087f5
 800ad20:	0800a21d 	.word	0x0800a21d
 800ad24:	0800a1f5 	.word	0x0800a1f5
 800ad28:	080126d4 	.word	0x080126d4
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ad2c:	2411      	movs	r4, #17
 800ad2e:	e7d9      	b.n	800ace4 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ad30:	2413      	movs	r4, #19
 800ad32:	e7d7      	b.n	800ace4 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ad34:	2411      	movs	r4, #17
 800ad36:	e7d5      	b.n	800ace4 <LoRaMacInitialization+0x36c>

0800ad38 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800ad38:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800ad3a:	2400      	movs	r4, #0
 800ad3c:	4b03      	ldr	r3, [pc, #12]	@ (800ad4c <LoRaMacStart+0x14>)
 800ad3e:	f8c3 4340 	str.w	r4, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 800ad42:	f7fd fc2b 	bl	800859c <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800ad46:	4620      	mov	r0, r4
 800ad48:	bd10      	pop	{r4, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20000900 	.word	0x20000900

0800ad50 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800ad50:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800ad52:	f7ff fd9f 	bl	800a894 <LoRaMacIsBusy>
 800ad56:	b130      	cbz	r0, 800ad66 <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800ad58:	4b0b      	ldr	r3, [pc, #44]	@ (800ad88 <LoRaMacStop+0x38>)
 800ad5a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d010      	beq.n	800ad84 <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800ad62:	2001      	movs	r0, #1
}
 800ad64:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ad66:	4b09      	ldr	r3, [pc, #36]	@ (800ad8c <LoRaMacStop+0x3c>)
 800ad68:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d005      	beq.n	800ad7c <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800ad70:	4b05      	ldr	r3, [pc, #20]	@ (800ad88 <LoRaMacStop+0x38>)
 800ad72:	2201      	movs	r2, #1
 800ad74:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 800ad78:	2000      	movs	r0, #0
 800ad7a:	e7f3      	b.n	800ad64 <LoRaMacStop+0x14>
            Radio.Sleep( );
 800ad7c:	4b04      	ldr	r3, [pc, #16]	@ (800ad90 <LoRaMacStop+0x40>)
 800ad7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad80:	4798      	blx	r3
 800ad82:	e7f5      	b.n	800ad70 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800ad84:	2000      	movs	r0, #0
 800ad86:	e7ed      	b.n	800ad64 <LoRaMacStop+0x14>
 800ad88:	20000900 	.word	0x20000900
 800ad8c:	20008000 	.word	0x20008000
 800ad90:	080126d4 	.word	0x080126d4

0800ad94 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800ad94:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800ad96:	4c13      	ldr	r4, [pc, #76]	@ (800ade4 <LoRaMacHalt+0x50>)
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f006 faff 	bl	801139c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800ad9e:	f104 0018 	add.w	r0, r4, #24
 800ada2:	f006 fafb 	bl	801139c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800ada6:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800adaa:	f006 faf7 	bl	801139c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800adae:	f104 0098 	add.w	r0, r4, #152	@ 0x98
 800adb2:	f006 faf3 	bl	801139c <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800adb6:	f000 ff6f 	bl	800bc98 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800adba:	4b0b      	ldr	r3, [pc, #44]	@ (800ade8 <LoRaMacHalt+0x54>)
 800adbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adbe:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800adc0:	2500      	movs	r5, #0
 800adc2:	f844 5c28 	str.w	r5, [r4, #-40]

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 800adc6:	4e09      	ldr	r6, [pc, #36]	@ (800adec <LoRaMacHalt+0x58>)
 800adc8:	4630      	mov	r0, r6
 800adca:	f7ff f927 	bl	800a01c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800adce:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 800add2:	4631      	mov	r1, r6
 800add4:	4806      	ldr	r0, [pc, #24]	@ (800adf0 <LoRaMacHalt+0x5c>)
 800add6:	f004 f8b4 	bl	800ef42 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800adda:	2301      	movs	r3, #1
 800addc:	f844 3c28 	str.w	r3, [r4, #-40]

    return LORAMAC_STATUS_OK;
}
 800ade0:	4628      	mov	r0, r5
 800ade2:	bd70      	pop	{r4, r5, r6, pc}
 800ade4:	20000c68 	.word	0x20000c68
 800ade8:	080126d4 	.word	0x080126d4
 800adec:	20008000 	.word	0x20008000
 800adf0:	200085bc 	.word	0x200085bc

0800adf4 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800adf4:	b530      	push	{r4, r5, lr}
 800adf6:	b08b      	sub	sp, #44	@ 0x2c
 800adf8:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800adfa:	4b31      	ldr	r3, [pc, #196]	@ (800aec0 <LoRaMacQueryTxPossible+0xcc>)
 800adfc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800adfe:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800ae00:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800ae04:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800ae08:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800ae0c:	f88d 300e 	strb.w	r3, [sp, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800ae10:	4b2c      	ldr	r3, [pc, #176]	@ (800aec4 <LoRaMacQueryTxPossible+0xd0>)
 800ae12:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ae16:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800ae1e:	2900      	cmp	r1, #0
 800ae20:	d048      	beq.n	800aeb4 <LoRaMacQueryTxPossible+0xc0>
 800ae22:	460d      	mov	r5, r1

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800ae24:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800ae28:	4b25      	ldr	r3, [pc, #148]	@ (800aec0 <LoRaMacQueryTxPossible+0xcc>)
 800ae2a:	f893 111a 	ldrb.w	r1, [r3, #282]	@ 0x11a
 800ae2e:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ae32:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800ae34:	f8b3 1088 	ldrh.w	r1, [r3, #136]	@ 0x88
 800ae38:	f8ad 101c 	strh.w	r1, [sp, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800ae3c:	f8b3 108a 	ldrh.w	r1, [r3, #138]	@ 0x8a
 800ae40:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ae44:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 800ae48:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ae4c:	f993 1038 	ldrsb.w	r1, [r3, #56]	@ 0x38
 800ae50:	f88d 1021 	strb.w	r1, [sp, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800ae54:	f88d 2022 	strb.w	r2, [sp, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ae58:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800ae5c:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800ae60:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ae64:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800ae68:	ab04      	add	r3, sp, #16
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	f10d 030d 	add.w	r3, sp, #13
 800ae70:	f10d 020e 	add.w	r2, sp, #14
 800ae74:	f10d 010f 	add.w	r1, sp, #15
 800ae78:	a805      	add	r0, sp, #20
 800ae7a:	f000 fe7f 	bl	800bb7c <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ae7e:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800ae82:	f7fd fcdb 	bl	800883c <GetMaxAppPayloadWithoutFOptsLength>
 800ae86:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ae88:	a802      	add	r0, sp, #8
 800ae8a:	f001 f839 	bl	800bf00 <LoRaMacCommandsGetSizeSerializedCmds>
 800ae8e:	b998      	cbnz	r0, 800aeb8 <LoRaMacQueryTxPossible+0xc4>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800ae90:	9b02      	ldr	r3, [sp, #8]
 800ae92:	2b0f      	cmp	r3, #15
 800ae94:	d80a      	bhi.n	800aeac <LoRaMacQueryTxPossible+0xb8>
 800ae96:	786a      	ldrb	r2, [r5, #1]
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d807      	bhi.n	800aeac <LoRaMacQueryTxPossible+0xb8>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800ae9c:	1ad3      	subs	r3, r2, r3
 800ae9e:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800aea0:	9b02      	ldr	r3, [sp, #8]
 800aea2:	441c      	add	r4, r3
 800aea4:	42a2      	cmp	r2, r4
 800aea6:	d309      	bcc.n	800aebc <LoRaMacQueryTxPossible+0xc8>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800aea8:	b00b      	add	sp, #44	@ 0x2c
 800aeaa:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800aeb0:	2008      	movs	r0, #8
 800aeb2:	e7f9      	b.n	800aea8 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aeb4:	2003      	movs	r0, #3
 800aeb6:	e7f7      	b.n	800aea8 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800aeb8:	2013      	movs	r0, #19
 800aeba:	e7f5      	b.n	800aea8 <LoRaMacQueryTxPossible+0xb4>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800aebc:	2008      	movs	r0, #8
 800aebe:	e7f3      	b.n	800aea8 <LoRaMacQueryTxPossible+0xb4>
 800aec0:	20008000 	.word	0x20008000
 800aec4:	20000900 	.word	0x20000900

0800aec8 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800aec8:	2800      	cmp	r0, #0
 800aeca:	f000 815f 	beq.w	800b18c <LoRaMacMibGetRequestConfirm+0x2c4>
{
 800aece:	b510      	push	{r4, lr}
 800aed0:	b084      	sub	sp, #16
 800aed2:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800aed4:	7800      	ldrb	r0, [r0, #0]
 800aed6:	2841      	cmp	r0, #65	@ 0x41
 800aed8:	f200 8154 	bhi.w	800b184 <LoRaMacMibGetRequestConfirm+0x2bc>
 800aedc:	e8df f010 	tbh	[pc, r0, lsl #1]
 800aee0:	00470042 	.word	0x00470042
 800aee4:	0052004d 	.word	0x0052004d
 800aee8:	005d0057 	.word	0x005d0057
 800aeec:	01520063 	.word	0x01520063
 800aef0:	01520152 	.word	0x01520152
 800aef4:	01520152 	.word	0x01520152
 800aef8:	01520152 	.word	0x01520152
 800aefc:	006b0152 	.word	0x006b0152
 800af00:	00770071 	.word	0x00770071
 800af04:	008c0084 	.word	0x008c0084
 800af08:	009c0094 	.word	0x009c0094
 800af0c:	00a400b1 	.word	0x00a400b1
 800af10:	00c400be 	.word	0x00c400be
 800af14:	00ce00c9 	.word	0x00ce00c9
 800af18:	00d800d3 	.word	0x00d800d3
 800af1c:	00ee00dd 	.word	0x00ee00dd
 800af20:	010000f4 	.word	0x010000f4
 800af24:	010600fa 	.word	0x010600fa
 800af28:	0111010b 	.word	0x0111010b
 800af2c:	0117011f 	.word	0x0117011f
 800af30:	0152011b 	.word	0x0152011b
 800af34:	01520125 	.word	0x01520125
 800af38:	01520152 	.word	0x01520152
 800af3c:	01520152 	.word	0x01520152
 800af40:	01520152 	.word	0x01520152
 800af44:	01520152 	.word	0x01520152
 800af48:	01520152 	.word	0x01520152
 800af4c:	01520152 	.word	0x01520152
 800af50:	01520152 	.word	0x01520152
 800af54:	0134012e 	.word	0x0134012e
 800af58:	0140013a 	.word	0x0140013a
 800af5c:	014c0146 	.word	0x014c0146
 800af60:	01580158 	.word	0x01580158
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800af64:	4b8c      	ldr	r3, [pc, #560]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800af66:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800af6a:	7123      	strb	r3, [r4, #4]
            break;
 800af6c:	e111      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800af6e:	4b8a      	ldr	r3, [pc, #552]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800af70:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800af74:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af76:	2000      	movs	r0, #0
            break;
 800af78:	e10b      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800af7a:	6860      	ldr	r0, [r4, #4]
 800af7c:	f003 fea6 	bl	800eccc <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af80:	2000      	movs	r0, #0
            break;
 800af82:	e106      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800af84:	6860      	ldr	r0, [r4, #4]
 800af86:	f003 febf 	bl	800ed08 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af8a:	2000      	movs	r0, #0
            break;
 800af8c:	e101      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800af8e:	4b82      	ldr	r3, [pc, #520]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800af90:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800af94:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af96:	2000      	movs	r0, #0
            break;
 800af98:	e0fb      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800af9a:	4b7f      	ldr	r3, [pc, #508]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800af9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afa0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800afa2:	2000      	movs	r0, #0
            break;
 800afa4:	e0f5      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800afa6:	1d21      	adds	r1, r4, #4
 800afa8:	4b7b      	ldr	r3, [pc, #492]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800afaa:	f893 0130 	ldrb.w	r0, [r3, #304]	@ 0x130
 800afae:	f003 fec7 	bl	800ed40 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800afb2:	2000      	movs	r0, #0
            break;
 800afb4:	e0ed      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800afb6:	4b78      	ldr	r3, [pc, #480]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800afb8:	f893 3119 	ldrb.w	r3, [r3, #281]	@ 0x119
 800afbc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800afbe:	2000      	movs	r0, #0
            break;
 800afc0:	e0e7      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800afc2:	4b75      	ldr	r3, [pc, #468]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800afc4:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800afc8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800afca:	2000      	movs	r0, #0
            break;
 800afcc:	e0e1      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800afce:	231c      	movs	r3, #28
 800afd0:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800afd4:	a902      	add	r1, sp, #8
 800afd6:	4b70      	ldr	r3, [pc, #448]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800afd8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800afdc:	f001 fe40 	bl	800cc60 <RegionGetPhyParam>
 800afe0:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelList = phyParam.Channels;
 800afe2:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800afe4:	2000      	movs	r0, #0
            break;
 800afe6:	e0d4      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800afe8:	3404      	adds	r4, #4
 800afea:	4b6c      	ldr	r3, [pc, #432]	@ (800b19c <LoRaMacMibGetRequestConfirm+0x2d4>)
 800afec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aff0:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aff4:	2000      	movs	r0, #0
            break;
 800aff6:	e0cc      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800aff8:	3404      	adds	r4, #4
 800affa:	4b69      	ldr	r3, [pc, #420]	@ (800b1a0 <LoRaMacMibGetRequestConfirm+0x2d8>)
 800affc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b000:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b004:	2000      	movs	r0, #0
            break;
 800b006:	e0c4      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800b008:	3404      	adds	r4, #4
 800b00a:	4b66      	ldr	r3, [pc, #408]	@ (800b1a4 <LoRaMacMibGetRequestConfirm+0x2dc>)
 800b00c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b010:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b014:	2000      	movs	r0, #0
            break;
 800b016:	e0bc      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800b018:	3404      	adds	r4, #4
 800b01a:	4b63      	ldr	r3, [pc, #396]	@ (800b1a8 <LoRaMacMibGetRequestConfirm+0x2e0>)
 800b01c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b020:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b024:	2000      	movs	r0, #0
            break;
 800b026:	e0b4      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800b028:	231a      	movs	r3, #26
 800b02a:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b02e:	a902      	add	r1, sp, #8
 800b030:	4b59      	ldr	r3, [pc, #356]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b032:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b036:	f001 fe13 	bl	800cc60 <RegionGetPhyParam>
 800b03a:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800b03c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b03e:	2000      	movs	r0, #0
            break;
 800b040:	e0a7      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800b042:	2319      	movs	r3, #25
 800b044:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b048:	a902      	add	r1, sp, #8
 800b04a:	4b53      	ldr	r3, [pc, #332]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b04c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b050:	f001 fe06 	bl	800cc60 <RegionGetPhyParam>
 800b054:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800b056:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b058:	2000      	movs	r0, #0
            break;
 800b05a:	e09a      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800b05c:	4b4e      	ldr	r3, [pc, #312]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b05e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800b062:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b064:	2000      	movs	r0, #0
            break;
 800b066:	e094      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800b068:	4b4b      	ldr	r3, [pc, #300]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b06a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b06c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b06e:	2000      	movs	r0, #0
            break;
 800b070:	e08f      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800b072:	4b49      	ldr	r3, [pc, #292]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b076:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b078:	2000      	movs	r0, #0
            break;
 800b07a:	e08a      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800b07c:	4b46      	ldr	r3, [pc, #280]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b07e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b080:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b082:	2000      	movs	r0, #0
            break;
 800b084:	e085      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800b086:	4b44      	ldr	r3, [pc, #272]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b08a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b08c:	2000      	movs	r0, #0
            break;
 800b08e:	e080      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800b090:	4b41      	ldr	r3, [pc, #260]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b092:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b094:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b096:	2000      	movs	r0, #0
            break;
 800b098:	e07b      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 800b09a:	2302      	movs	r3, #2
 800b09c:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b0a0:	4b3d      	ldr	r3, [pc, #244]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b0a2:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800b0a6:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b0aa:	a902      	add	r1, sp, #8
 800b0ac:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b0b0:	f001 fdd6 	bl	800cc60 <RegionGetPhyParam>
 800b0b4:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800b0b6:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b0b8:	2000      	movs	r0, #0
            break;
 800b0ba:	e06a      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b0bc:	4b36      	ldr	r3, [pc, #216]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b0be:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 800b0c2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b0c4:	2000      	movs	r0, #0
            break;
 800b0c6:	e064      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800b0c8:	4b33      	ldr	r3, [pc, #204]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b0ca:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800b0ce:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b0d0:	2000      	movs	r0, #0
            break;
 800b0d2:	e05e      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b0d4:	4b30      	ldr	r3, [pc, #192]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b0d6:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800b0da:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b0dc:	2000      	movs	r0, #0
            break;
 800b0de:	e058      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b0e0:	4b2d      	ldr	r3, [pc, #180]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b0e2:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800b0e6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b0e8:	2000      	movs	r0, #0
            break;
 800b0ea:	e052      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800b0ec:	4b2a      	ldr	r3, [pc, #168]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b0ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0f0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b0f2:	2000      	movs	r0, #0
            break;
 800b0f4:	e04d      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800b0f6:	4b28      	ldr	r3, [pc, #160]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b0f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b0fc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b0fe:	2000      	movs	r0, #0
            break;
 800b100:	e047      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800b102:	4b25      	ldr	r3, [pc, #148]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b108:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b10a:	2000      	movs	r0, #0
            break;
 800b10c:	e041      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800b10e:	4b22      	ldr	r3, [pc, #136]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b110:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b112:	2000      	movs	r0, #0
            break;
 800b114:	e03d      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800b116:	4b25      	ldr	r3, [pc, #148]	@ (800b1ac <LoRaMacMibGetRequestConfirm+0x2e4>)
 800b118:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b11a:	2000      	movs	r0, #0
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800b11c:	e039      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800b11e:	4b1e      	ldr	r3, [pc, #120]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b120:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b124:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b126:	2000      	movs	r0, #0
            break;
 800b128:	e033      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800b12a:	4b1b      	ldr	r3, [pc, #108]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b12c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800b130:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800b132:	f001 fe4f 	bl	800cdd4 <RegionGetVersion>
 800b136:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b138:	2000      	movs	r0, #0
            break;
 800b13a:	e02a      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800b13c:	4b16      	ldr	r3, [pc, #88]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b13e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b142:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b144:	2000      	movs	r0, #0
            break;
 800b146:	e024      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800b148:	4b13      	ldr	r3, [pc, #76]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b14a:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 800b14e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b150:	2000      	movs	r0, #0
            break;
 800b152:	e01e      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800b154:	4b10      	ldr	r3, [pc, #64]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b156:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800b15a:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b15c:	2000      	movs	r0, #0
            break;
 800b15e:	e018      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800b160:	4b0d      	ldr	r3, [pc, #52]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b162:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800b166:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b168:	2000      	movs	r0, #0
            break;
 800b16a:	e012      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800b16c:	4b0a      	ldr	r3, [pc, #40]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b16e:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 800b172:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b174:	2000      	movs	r0, #0
            break;
 800b176:	e00c      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800b178:	4b07      	ldr	r3, [pc, #28]	@ (800b198 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b17a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800b17e:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b180:	2000      	movs	r0, #0
            break;
 800b182:	e006      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
#endif
            break;
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800b184:	4620      	mov	r0, r4
 800b186:	f000 fd8b 	bl	800bca0 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800b18a:	e002      	b.n	800b192 <LoRaMacMibGetRequestConfirm+0x2ca>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b18c:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800b18e:	4770      	bx	lr
    switch( mibGet->Type )
 800b190:	2018      	movs	r0, #24
}
 800b192:	b004      	add	sp, #16
 800b194:	bd10      	pop	{r4, pc}
 800b196:	bf00      	nop
 800b198:	20008000 	.word	0x20008000
 800b19c:	2000806c 	.word	0x2000806c
 800b1a0:	200080b4 	.word	0x200080b4
 800b1a4:	20008074 	.word	0x20008074
 800b1a8:	200080bc 	.word	0x200080bc
 800b1ac:	200085bc 	.word	0x200085bc

0800b1b0 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	f000 827f 	beq.w	800b6b4 <LoRaMacMibSetRequestConfirm+0x504>
{
 800b1b6:	b530      	push	{r4, r5, lr}
 800b1b8:	b085      	sub	sp, #20
 800b1ba:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800b1bc:	4b9b      	ldr	r3, [pc, #620]	@ (800b42c <LoRaMacMibSetRequestConfirm+0x27c>)
 800b1be:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b1c2:	f013 0f02 	tst.w	r3, #2
 800b1c6:	f040 8277 	bne.w	800b6b8 <LoRaMacMibSetRequestConfirm+0x508>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800b1ca:	7805      	ldrb	r5, [r0, #0]
 800b1cc:	2d41      	cmp	r5, #65	@ 0x41
 800b1ce:	f200 826e 	bhi.w	800b6ae <LoRaMacMibSetRequestConfirm+0x4fe>
 800b1d2:	e8df f015 	tbh	[pc, r5, lsl #1]
 800b1d6:	0042      	.short	0x0042
 800b1d8:	0058004f 	.word	0x0058004f
 800b1dc:	0066005f 	.word	0x0066005f
 800b1e0:	0072006c 	.word	0x0072006c
 800b1e4:	008b0080 	.word	0x008b0080
 800b1e8:	00a10096 	.word	0x00a10096
 800b1ec:	00b700ac 	.word	0x00b700ac
 800b1f0:	00ce00c2 	.word	0x00ce00c2
 800b1f4:	00e500da 	.word	0x00e500da
 800b1f8:	00eb026c 	.word	0x00eb026c
 800b1fc:	01350111 	.word	0x01350111
 800b200:	018d0163 	.word	0x018d0163
 800b204:	019d017d 	.word	0x019d017d
 800b208:	01ad01a8 	.word	0x01ad01a8
 800b20c:	01b701b2 	.word	0x01b701b2
 800b210:	026c01bc 	.word	0x026c01bc
 800b214:	01d601c1 	.word	0x01d601c1
 800b218:	01ef0204 	.word	0x01ef0204
 800b21c:	02200219 	.word	0x02200219
 800b220:	022e0228 	.word	0x022e0228
 800b224:	026c0234 	.word	0x026c0234
 800b228:	026c0237 	.word	0x026c0237
 800b22c:	026c026c 	.word	0x026c026c
 800b230:	026c026c 	.word	0x026c026c
 800b234:	026c026c 	.word	0x026c026c
 800b238:	026c026c 	.word	0x026c026c
 800b23c:	026c026c 	.word	0x026c026c
 800b240:	026c026c 	.word	0x026c026c
 800b244:	026c026c 	.word	0x026c026c
 800b248:	0248026c 	.word	0x0248026c
 800b24c:	0254024e 	.word	0x0254024e
 800b250:	0260025a 	.word	0x0260025a
 800b254:	02730266 	.word	0x02730266
 800b258:	0273      	.short	0x0273
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800b25a:	7900      	ldrb	r0, [r0, #4]
 800b25c:	f7ff f90a 	bl	800a474 <SwitchClass>
            break;
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800b260:	b930      	cbnz	r0, 800b270 <LoRaMacMibSetRequestConfirm+0xc0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800b262:	4a72      	ldr	r2, [pc, #456]	@ (800b42c <LoRaMacMibSetRequestConfirm+0x27c>)
 800b264:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b268:	f043 0320 	orr.w	r3, r3, #32
 800b26c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800b270:	b005      	add	sp, #20
 800b272:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800b274:	7903      	ldrb	r3, [r0, #4]
 800b276:	2b02      	cmp	r3, #2
 800b278:	f000 8222 	beq.w	800b6c0 <LoRaMacMibSetRequestConfirm+0x510>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800b27c:	4a6c      	ldr	r2, [pc, #432]	@ (800b430 <LoRaMacMibSetRequestConfirm+0x280>)
 800b27e:	f882 3130 	strb.w	r3, [r2, #304]	@ 0x130
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b282:	2000      	movs	r0, #0
 800b284:	e7ed      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800b286:	6840      	ldr	r0, [r0, #4]
 800b288:	f003 fd12 	bl	800ecb0 <SecureElementSetDevEui>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d0e8      	beq.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b290:	2003      	movs	r0, #3
 800b292:	e7ed      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800b294:	6840      	ldr	r0, [r0, #4]
 800b296:	f003 fd27 	bl	800ece8 <SecureElementSetJoinEui>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d0e1      	beq.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b29e:	4628      	mov	r0, r5
 800b2a0:	e7e6      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800b2a2:	7902      	ldrb	r2, [r0, #4]
 800b2a4:	4b62      	ldr	r3, [pc, #392]	@ (800b430 <LoRaMacMibSetRequestConfirm+0x280>)
 800b2a6:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	e7d9      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800b2ae:	6842      	ldr	r2, [r0, #4]
 800b2b0:	4b5f      	ldr	r3, [pc, #380]	@ (800b430 <LoRaMacMibSetRequestConfirm+0x280>)
 800b2b2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	e7d3      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800b2ba:	6841      	ldr	r1, [r0, #4]
 800b2bc:	4b5c      	ldr	r3, [pc, #368]	@ (800b430 <LoRaMacMibSetRequestConfirm+0x280>)
 800b2be:	f893 0130 	ldrb.w	r0, [r3, #304]	@ 0x130
 800b2c2:	f003 fd2f 	bl	800ed24 <SecureElementSetDevAddr>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	f040 81fc 	bne.w	800b6c4 <LoRaMacMibSetRequestConfirm+0x514>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800b2cc:	6862      	ldr	r2, [r4, #4]
 800b2ce:	4b58      	ldr	r3, [pc, #352]	@ (800b430 <LoRaMacMibSetRequestConfirm+0x280>)
 800b2d0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    if( status == LORAMAC_STATUS_OK )
 800b2d4:	e7c5      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            if( mibSet->Param.AppKey != NULL )
 800b2d6:	6841      	ldr	r1, [r0, #4]
 800b2d8:	2900      	cmp	r1, #0
 800b2da:	f000 81f5 	beq.w	800b6c8 <LoRaMacMibSetRequestConfirm+0x518>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800b2de:	2000      	movs	r0, #0
 800b2e0:	f001 faa2 	bl	800c828 <LoRaMacCryptoSetKey>
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	d0bc      	beq.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b2e8:	2011      	movs	r0, #17
 800b2ea:	e7c1      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkKey != NULL )
 800b2ec:	6841      	ldr	r1, [r0, #4]
 800b2ee:	2900      	cmp	r1, #0
 800b2f0:	f000 81ec 	beq.w	800b6cc <LoRaMacMibSetRequestConfirm+0x51c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800b2f4:	2001      	movs	r0, #1
 800b2f6:	f001 fa97 	bl	800c828 <LoRaMacCryptoSetKey>
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	d0b1      	beq.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b2fe:	2011      	movs	r0, #17
 800b300:	e7b6      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkSKey != NULL )
 800b302:	6841      	ldr	r1, [r0, #4]
 800b304:	2900      	cmp	r1, #0
 800b306:	f000 81e3 	beq.w	800b6d0 <LoRaMacMibSetRequestConfirm+0x520>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800b30a:	2008      	movs	r0, #8
 800b30c:	f001 fa8c 	bl	800c828 <LoRaMacCryptoSetKey>
 800b310:	2800      	cmp	r0, #0
 800b312:	d0a6      	beq.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b314:	2011      	movs	r0, #17
 800b316:	e7ab      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.AppSKey != NULL )
 800b318:	6841      	ldr	r1, [r0, #4]
 800b31a:	2900      	cmp	r1, #0
 800b31c:	f000 81da 	beq.w	800b6d4 <LoRaMacMibSetRequestConfirm+0x524>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800b320:	2009      	movs	r0, #9
 800b322:	f001 fa81 	bl	800c828 <LoRaMacCryptoSetKey>
 800b326:	2800      	cmp	r0, #0
 800b328:	d09b      	beq.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b32a:	2011      	movs	r0, #17
 800b32c:	e7a0      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKEKey != NULL )
 800b32e:	6841      	ldr	r1, [r0, #4]
 800b330:	2900      	cmp	r1, #0
 800b332:	f000 81d1 	beq.w	800b6d8 <LoRaMacMibSetRequestConfirm+0x528>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800b336:	200c      	movs	r0, #12
 800b338:	f001 fa76 	bl	800c828 <LoRaMacCryptoSetKey>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	d090      	beq.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b340:	2011      	movs	r0, #17
 800b342:	e795      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKey0 != NULL )
 800b344:	6841      	ldr	r1, [r0, #4]
 800b346:	2900      	cmp	r1, #0
 800b348:	f000 81c8 	beq.w	800b6dc <LoRaMacMibSetRequestConfirm+0x52c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800b34c:	200d      	movs	r0, #13
 800b34e:	f001 fa6b 	bl	800c828 <LoRaMacCryptoSetKey>
 800b352:	2800      	cmp	r0, #0
 800b354:	d085      	beq.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b356:	2011      	movs	r0, #17
 800b358:	e78a      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800b35a:	6841      	ldr	r1, [r0, #4]
 800b35c:	2900      	cmp	r1, #0
 800b35e:	f000 81bf 	beq.w	800b6e0 <LoRaMacMibSetRequestConfirm+0x530>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800b362:	200e      	movs	r0, #14
 800b364:	f001 fa60 	bl	800c828 <LoRaMacCryptoSetKey>
 800b368:	2800      	cmp	r0, #0
 800b36a:	f43f af7a 	beq.w	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b36e:	2011      	movs	r0, #17
 800b370:	e77e      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800b372:	6841      	ldr	r1, [r0, #4]
 800b374:	2900      	cmp	r1, #0
 800b376:	f000 81b5 	beq.w	800b6e4 <LoRaMacMibSetRequestConfirm+0x534>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800b37a:	200f      	movs	r0, #15
 800b37c:	f001 fa54 	bl	800c828 <LoRaMacCryptoSetKey>
 800b380:	2800      	cmp	r0, #0
 800b382:	f43f af6e 	beq.w	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b386:	2011      	movs	r0, #17
 800b388:	e772      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800b38a:	7900      	ldrb	r0, [r0, #4]
 800b38c:	4b28      	ldr	r3, [pc, #160]	@ (800b430 <LoRaMacMibSetRequestConfirm+0x280>)
 800b38e:	f883 0119 	strb.w	r0, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800b392:	4c28      	ldr	r4, [pc, #160]	@ (800b434 <LoRaMacMibSetRequestConfirm+0x284>)
 800b394:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b396:	4798      	blx	r3
            Radio.Sleep( );
 800b398:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b39a:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b39c:	2000      	movs	r0, #0
 800b39e:	e760      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800b3a0:	7902      	ldrb	r2, [r0, #4]
 800b3a2:	4b23      	ldr	r3, [pc, #140]	@ (800b430 <LoRaMacMibSetRequestConfirm+0x280>)
 800b3a4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	e75a      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b3ac:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b3b0:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b3b4:	4b1e      	ldr	r3, [pc, #120]	@ (800b430 <LoRaMacMibSetRequestConfirm+0x280>)
 800b3b6:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800b3ba:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800b3be:	2207      	movs	r2, #7
 800b3c0:	a901      	add	r1, sp, #4
 800b3c2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b3c6:	f001 fc6c 	bl	800cca2 <RegionVerify>
 800b3ca:	b908      	cbnz	r0, 800b3d0 <LoRaMacMibSetRequestConfirm+0x220>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b3cc:	2003      	movs	r0, #3
 800b3ce:	e74f      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800b3d0:	6863      	ldr	r3, [r4, #4]
 800b3d2:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	a901      	add	r1, sp, #4
 800b3d8:	4b15      	ldr	r3, [pc, #84]	@ (800b430 <LoRaMacMibSetRequestConfirm+0x280>)
 800b3da:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b3de:	f001 fc60 	bl	800cca2 <RegionVerify>
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	f000 8180 	beq.w	800b6e8 <LoRaMacMibSetRequestConfirm+0x538>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800b3e8:	4b13      	ldr	r3, [pc, #76]	@ (800b438 <LoRaMacMibSetRequestConfirm+0x288>)
 800b3ea:	3404      	adds	r4, #4
 800b3ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b3f0:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	e734      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b3f8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b3fc:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b400:	4b0b      	ldr	r3, [pc, #44]	@ (800b430 <LoRaMacMibSetRequestConfirm+0x280>)
 800b402:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800b406:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800b40a:	2207      	movs	r2, #7
 800b40c:	a901      	add	r1, sp, #4
 800b40e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b412:	f001 fc46 	bl	800cca2 <RegionVerify>
 800b416:	2800      	cmp	r0, #0
 800b418:	f000 8168 	beq.w	800b6ec <LoRaMacMibSetRequestConfirm+0x53c>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800b41c:	4b07      	ldr	r3, [pc, #28]	@ (800b43c <LoRaMacMibSetRequestConfirm+0x28c>)
 800b41e:	3404      	adds	r4, #4
 800b420:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b424:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b428:	2000      	movs	r0, #0
 800b42a:	e71a      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
 800b42c:	20000900 	.word	0x20000900
 800b430:	20008000 	.word	0x20008000
 800b434:	080126d4 	.word	0x080126d4
 800b438:	2000806c 	.word	0x2000806c
 800b43c:	200080b4 	.word	0x200080b4
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b440:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b444:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b448:	4bb0      	ldr	r3, [pc, #704]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b44a:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800b44e:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800b452:	2207      	movs	r2, #7
 800b454:	a901      	add	r1, sp, #4
 800b456:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b45a:	f001 fc22 	bl	800cca2 <RegionVerify>
 800b45e:	2800      	cmp	r0, #0
 800b460:	f000 8146 	beq.w	800b6f0 <LoRaMacMibSetRequestConfirm+0x540>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800b464:	4ba9      	ldr	r3, [pc, #676]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b466:	f103 0274 	add.w	r2, r3, #116	@ 0x74
 800b46a:	3404      	adds	r4, #4
 800b46c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b470:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800b474:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d001      	beq.n	800b480 <LoRaMacMibSetRequestConfirm+0x2d0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b47c:	2000      	movs	r0, #0
 800b47e:	e6f0      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800b480:	f1a2 0374 	sub.w	r3, r2, #116	@ 0x74
 800b484:	f893 0130 	ldrb.w	r0, [r3, #304]	@ 0x130
 800b488:	2800      	cmp	r0, #0
 800b48a:	f43f aeea 	beq.w	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
                    Radio.Sleep( );
 800b48e:	4ba0      	ldr	r3, [pc, #640]	@ (800b710 <LoRaMacMibSetRequestConfirm+0x560>)
 800b490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b492:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800b494:	f7fe fd14 	bl	8009ec0 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b498:	2000      	movs	r0, #0
 800b49a:	e6e2      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b49c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b4a0:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b4a4:	4b99      	ldr	r3, [pc, #612]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b4a6:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800b4aa:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800b4ae:	2207      	movs	r2, #7
 800b4b0:	a901      	add	r1, sp, #4
 800b4b2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b4b6:	f001 fbf4 	bl	800cca2 <RegionVerify>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	f000 811a 	beq.w	800b6f4 <LoRaMacMibSetRequestConfirm+0x544>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800b4c0:	4b94      	ldr	r3, [pc, #592]	@ (800b714 <LoRaMacMibSetRequestConfirm+0x564>)
 800b4c2:	3404      	adds	r4, #4
 800b4c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b4c8:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	e6c8      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800b4d0:	6843      	ldr	r3, [r0, #4]
 800b4d2:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800b4da:	a902      	add	r1, sp, #8
 800b4dc:	4b8b      	ldr	r3, [pc, #556]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b4de:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b4e2:	f001 fbf1 	bl	800ccc8 <RegionChanMaskSet>
 800b4e6:	b108      	cbz	r0, 800b4ec <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	e6ba      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b4ec:	2003      	movs	r0, #3
 800b4ee:	e6bf      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800b4f0:	6843      	ldr	r3, [r0, #4]
 800b4f2:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800b4fa:	a902      	add	r1, sp, #8
 800b4fc:	4b83      	ldr	r3, [pc, #524]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b4fe:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b502:	f001 fbe1 	bl	800ccc8 <RegionChanMaskSet>
 800b506:	b108      	cbz	r0, 800b50c <LoRaMacMibSetRequestConfirm+0x35c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b508:	2000      	movs	r0, #0
 800b50a:	e6aa      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b50c:	2003      	movs	r0, #3
 800b50e:	e6af      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800b510:	7902      	ldrb	r2, [r0, #4]
 800b512:	1e53      	subs	r3, r2, #1
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b0e      	cmp	r3, #14
 800b518:	f200 80ee 	bhi.w	800b6f8 <LoRaMacMibSetRequestConfirm+0x548>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800b51c:	4b7b      	ldr	r3, [pc, #492]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b51e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b522:	2000      	movs	r0, #0
 800b524:	e69d      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800b526:	6842      	ldr	r2, [r0, #4]
 800b528:	4b78      	ldr	r3, [pc, #480]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b52a:	655a      	str	r2, [r3, #84]	@ 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b52c:	2000      	movs	r0, #0
 800b52e:	e698      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800b530:	6842      	ldr	r2, [r0, #4]
 800b532:	4b76      	ldr	r3, [pc, #472]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b534:	659a      	str	r2, [r3, #88]	@ 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b536:	2000      	movs	r0, #0
 800b538:	e693      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800b53a:	6842      	ldr	r2, [r0, #4]
 800b53c:	4b73      	ldr	r3, [pc, #460]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b53e:	65da      	str	r2, [r3, #92]	@ 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b540:	2000      	movs	r0, #0
 800b542:	e68e      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800b544:	6842      	ldr	r2, [r0, #4]
 800b546:	4b71      	ldr	r3, [pc, #452]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b548:	661a      	str	r2, [r3, #96]	@ 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b54a:	2000      	movs	r0, #0
 800b54c:	e689      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800b54e:	6842      	ldr	r2, [r0, #4]
 800b550:	4b6e      	ldr	r3, [pc, #440]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b552:	665a      	str	r2, [r3, #100]	@ 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b554:	2000      	movs	r0, #0
 800b556:	e684      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800b558:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b55c:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800b560:	2206      	movs	r2, #6
 800b562:	a901      	add	r1, sp, #4
 800b564:	4b69      	ldr	r3, [pc, #420]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b566:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b56a:	f001 fb9a 	bl	800cca2 <RegionVerify>
 800b56e:	2800      	cmp	r0, #0
 800b570:	f000 80c4 	beq.w	800b6fc <LoRaMacMibSetRequestConfirm+0x54c>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800b574:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800b578:	4b64      	ldr	r3, [pc, #400]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b57a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b57e:	2000      	movs	r0, #0
 800b580:	e66f      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800b582:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b586:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b58a:	4b60      	ldr	r3, [pc, #384]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b58c:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800b590:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800b594:	2205      	movs	r2, #5
 800b596:	a901      	add	r1, sp, #4
 800b598:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b59c:	f001 fb81 	bl	800cca2 <RegionVerify>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	f000 80ad 	beq.w	800b700 <LoRaMacMibSetRequestConfirm+0x550>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b5a6:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800b5aa:	4b58      	ldr	r3, [pc, #352]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b5ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	e656      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800b5b4:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b5b8:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800b5bc:	220a      	movs	r2, #10
 800b5be:	a901      	add	r1, sp, #4
 800b5c0:	4b52      	ldr	r3, [pc, #328]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b5c2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b5c6:	f001 fb6c 	bl	800cca2 <RegionVerify>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	f000 809a 	beq.w	800b704 <LoRaMacMibSetRequestConfirm+0x554>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800b5d0:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800b5d4:	4b4d      	ldr	r3, [pc, #308]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b5d6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5da:	2000      	movs	r0, #0
 800b5dc:	e641      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800b5de:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b5e2:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800b5e6:	2209      	movs	r2, #9
 800b5e8:	a901      	add	r1, sp, #4
 800b5ea:	4b48      	ldr	r3, [pc, #288]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b5ec:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b5f0:	f001 fb57 	bl	800cca2 <RegionVerify>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	f000 8087 	beq.w	800b708 <LoRaMacMibSetRequestConfirm+0x558>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800b5fa:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800b5fe:	4b43      	ldr	r3, [pc, #268]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b600:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b604:	2000      	movs	r0, #0
 800b606:	e62c      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800b608:	6842      	ldr	r2, [r0, #4]
 800b60a:	4b40      	ldr	r3, [pc, #256]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b60c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800b610:	64da      	str	r2, [r3, #76]	@ 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b612:	2000      	movs	r0, #0
 800b614:	e625      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800b616:	7902      	ldrb	r2, [r0, #4]
 800b618:	4b3c      	ldr	r3, [pc, #240]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b61a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 800b61e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b622:	2000      	movs	r0, #0
 800b624:	e61d      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800b626:	6842      	ldr	r2, [r0, #4]
 800b628:	4b38      	ldr	r3, [pc, #224]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b62a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b62e:	2000      	movs	r0, #0
 800b630:	e617      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800b632:	6842      	ldr	r2, [r0, #4]
 800b634:	4b35      	ldr	r3, [pc, #212]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b636:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b63a:	2000      	movs	r0, #0
 800b63c:	e611      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            status = RestoreNvmData( );
 800b63e:	f7fe fd53 	bl	800a0e8 <RestoreNvmData>
            break;
 800b642:	e60d      	b.n	800b260 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800b644:	7983      	ldrb	r3, [r0, #6]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d901      	bls.n	800b64e <LoRaMacMibSetRequestConfirm+0x49e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b64a:	2003      	movs	r0, #3
 800b64c:	e610      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800b64e:	6842      	ldr	r2, [r0, #4]
 800b650:	4b2e      	ldr	r3, [pc, #184]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b652:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800b656:	6840      	ldr	r0, [r0, #4]
 800b658:	f000 ffa2 	bl	800c5a0 <LoRaMacCryptoSetLrWanVersion>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	f43f ae00 	beq.w	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b662:	2011      	movs	r0, #17
 800b664:	e604      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800b666:	6842      	ldr	r2, [r0, #4]
 800b668:	4b28      	ldr	r3, [pc, #160]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b66a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b66e:	2000      	movs	r0, #0
 800b670:	e5f7      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800b672:	7902      	ldrb	r2, [r0, #4]
 800b674:	4b25      	ldr	r3, [pc, #148]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b676:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b67a:	2000      	movs	r0, #0
 800b67c:	e5f1      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800b67e:	8882      	ldrh	r2, [r0, #4]
 800b680:	4b22      	ldr	r3, [pc, #136]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b682:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b686:	2000      	movs	r0, #0
 800b688:	e5eb      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800b68a:	8882      	ldrh	r2, [r0, #4]
 800b68c:	4b1f      	ldr	r3, [pc, #124]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b68e:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b692:	2000      	movs	r0, #0
 800b694:	e5e5      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800b696:	8882      	ldrh	r2, [r0, #4]
 800b698:	4b1c      	ldr	r3, [pc, #112]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b69a:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b69e:	2000      	movs	r0, #0
 800b6a0:	e5df      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800b6a2:	8882      	ldrh	r2, [r0, #4]
 800b6a4:	4b19      	ldr	r3, [pc, #100]	@ (800b70c <LoRaMacMibSetRequestConfirm+0x55c>)
 800b6a6:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	e5d9      	b.n	800b262 <LoRaMacMibSetRequestConfirm+0xb2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800b6ae:	f000 faf9 	bl	800bca4 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800b6b2:	e5d5      	b.n	800b260 <LoRaMacMibSetRequestConfirm+0xb0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b6b4:	2003      	movs	r0, #3
}
 800b6b6:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800b6b8:	2001      	movs	r0, #1
 800b6ba:	e5d9      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
    switch( mibSet->Type )
 800b6bc:	2018      	movs	r0, #24
 800b6be:	e5d7      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6c0:	2003      	movs	r0, #3
 800b6c2:	e5d5      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6c4:	2003      	movs	r0, #3
 800b6c6:	e5d3      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6c8:	2003      	movs	r0, #3
 800b6ca:	e5d1      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6cc:	2003      	movs	r0, #3
 800b6ce:	e5cf      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6d0:	2003      	movs	r0, #3
 800b6d2:	e5cd      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6d4:	2003      	movs	r0, #3
 800b6d6:	e5cb      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6d8:	2003      	movs	r0, #3
 800b6da:	e5c9      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6dc:	2003      	movs	r0, #3
 800b6de:	e5c7      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6e0:	2003      	movs	r0, #3
 800b6e2:	e5c5      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6e4:	2003      	movs	r0, #3
 800b6e6:	e5c3      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6e8:	2003      	movs	r0, #3
 800b6ea:	e5c1      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6ec:	2003      	movs	r0, #3
 800b6ee:	e5bf      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6f0:	2003      	movs	r0, #3
 800b6f2:	e5bd      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6f4:	2003      	movs	r0, #3
 800b6f6:	e5bb      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6f8:	2003      	movs	r0, #3
 800b6fa:	e5b9      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6fc:	2003      	movs	r0, #3
 800b6fe:	e5b7      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b700:	2003      	movs	r0, #3
 800b702:	e5b5      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b704:	2003      	movs	r0, #3
 800b706:	e5b3      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b708:	2003      	movs	r0, #3
 800b70a:	e5b1      	b.n	800b270 <LoRaMacMibSetRequestConfirm+0xc0>
 800b70c:	20008000 	.word	0x20008000
 800b710:	080126d4 	.word	0x080126d4
 800b714:	200080bc 	.word	0x200080bc

0800b718 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800b718:	b570      	push	{r4, r5, r6, lr}
 800b71a:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b71c:	2300      	movs	r3, #0
 800b71e:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800b722:	2800      	cmp	r0, #0
 800b724:	f000 80f3 	beq.w	800b90e <LoRaMacMlmeRequest+0x1f6>
 800b728:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800b72a:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800b72c:	f7ff f8b2 	bl	800a894 <LoRaMacIsBusy>
 800b730:	b118      	cbz	r0, 800b73a <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800b732:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800b734:	4620      	mov	r0, r4
 800b736:	b006      	add	sp, #24
 800b738:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800b73a:	f000 fd65 	bl	800c208 <LoRaMacConfirmQueueIsFull>
 800b73e:	b108      	cbz	r0, 800b744 <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800b740:	2401      	movs	r4, #1
 800b742:	e7f7      	b.n	800b734 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b744:	f000 fd5a 	bl	800c1fc <LoRaMacConfirmQueueGetCnt>
 800b748:	b308      	cbz	r0, 800b78e <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b74a:	4b72      	ldr	r3, [pc, #456]	@ (800b914 <LoRaMacMlmeRequest+0x1fc>)
 800b74c:	2101      	movs	r1, #1
 800b74e:	f883 1455 	strb.w	r1, [r3, #1109]	@ 0x455
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b752:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800b756:	f042 0204 	orr.w	r2, r2, #4
 800b75a:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 800b75e:	782b      	ldrb	r3, [r5, #0]
 800b760:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b764:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800b768:	2200      	movs	r2, #0
 800b76a:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800b76e:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800b772:	461c      	mov	r4, r3
 800b774:	3b01      	subs	r3, #1
 800b776:	2b0c      	cmp	r3, #12
 800b778:	f200 80af 	bhi.w	800b8da <LoRaMacMlmeRequest+0x1c2>
 800b77c:	e8df f003 	tbb	[pc, r3]
 800b780:	adadad0d 	.word	0xadadad0d
 800b784:	adad675d 	.word	0xadad675d
 800b788:	7f9ead70 	.word	0x7f9ead70
 800b78c:	95          	.byte	0x95
 800b78d:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800b78e:	2214      	movs	r2, #20
 800b790:	2100      	movs	r1, #0
 800b792:	4861      	ldr	r0, [pc, #388]	@ (800b918 <LoRaMacMlmeRequest+0x200>)
 800b794:	f003 fbed 	bl	800ef72 <memset1>
 800b798:	e7d7      	b.n	800b74a <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800b79a:	4b5e      	ldr	r3, [pc, #376]	@ (800b914 <LoRaMacMlmeRequest+0x1fc>)
 800b79c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b7a0:	f013 0f20 	tst.w	r3, #32
 800b7a4:	d1c6      	bne.n	800b734 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800b7a6:	792b      	ldrb	r3, [r5, #4]
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d003      	beq.n	800b7b4 <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d026      	beq.n	800b7fe <LoRaMacMlmeRequest+0xe6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b7b0:	2402      	movs	r4, #2
 800b7b2:	e093      	b.n	800b8dc <LoRaMacMlmeRequest+0x1c4>
                ResetMacParameters( false );
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	f7fe fd93 	bl	800a2e0 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b7ba:	4c58      	ldr	r4, [pc, #352]	@ (800b91c <LoRaMacMlmeRequest+0x204>)
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800b7c2:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b7c6:	f001 fae1 	bl	800cd8c <RegionAlternateDr>
 800b7ca:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800b7ce:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800b7d2:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b7d6:	2307      	movs	r3, #7
 800b7d8:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800b7dc:	20ff      	movs	r0, #255	@ 0xff
 800b7de:	f7fe fedd 	bl	800a59c <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d079      	beq.n	800b8dc <LoRaMacMlmeRequest+0x1c4>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800b7e8:	4e4c      	ldr	r6, [pc, #304]	@ (800b91c <LoRaMacMlmeRequest+0x204>)
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800b7f0:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800b7f4:	f001 faca 	bl	800cd8c <RegionAlternateDr>
 800b7f8:	f886 0039 	strb.w	r0, [r6, #57]	@ 0x39
 800b7fc:	e06e      	b.n	800b8dc <LoRaMacMlmeRequest+0x1c4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800b7fe:	4e47      	ldr	r6, [pc, #284]	@ (800b91c <LoRaMacMlmeRequest+0x204>)
 800b800:	2400      	movs	r4, #0
 800b802:	f886 411d 	strb.w	r4, [r6, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b806:	2302      	movs	r3, #2
 800b808:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b80c:	4669      	mov	r1, sp
 800b80e:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800b812:	f001 fa3e 	bl	800cc92 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800b816:	792b      	ldrb	r3, [r5, #4]
 800b818:	f886 3130 	strb.w	r3, [r6, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b81c:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800b820:	2301      	movs	r3, #1
 800b822:	f88d 3016 	strb.w	r3, [sp, #22]
                OnMacProcessNotify( );
 800b826:	f7fc ffd9 	bl	80087dc <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800b82a:	4a3a      	ldr	r2, [pc, #232]	@ (800b914 <LoRaMacMlmeRequest+0x1fc>)
 800b82c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b830:	f043 0310 	orr.w	r3, r3, #16
 800b834:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                status = LORAMAC_STATUS_OK;
 800b838:	e050      	b.n	800b8dc <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b83a:	2200      	movs	r2, #0
 800b83c:	a904      	add	r1, sp, #16
 800b83e:	2002      	movs	r0, #2
 800b840:	f000 fad0 	bl	800bde4 <LoRaMacCommandsAddCmd>
 800b844:	4604      	mov	r4, r0
 800b846:	2800      	cmp	r0, #0
 800b848:	d048      	beq.n	800b8dc <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b84a:	2413      	movs	r4, #19
 800b84c:	e046      	b.n	800b8dc <LoRaMacMlmeRequest+0x1c4>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800b84e:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800b852:	b2d2      	uxtb	r2, r2
 800b854:	68a9      	ldr	r1, [r5, #8]
 800b856:	88a8      	ldrh	r0, [r5, #4]
 800b858:	f7fc ff16 	bl	8008688 <SetTxContinuousWave>
 800b85c:	4604      	mov	r4, r0
            break;
 800b85e:	e03d      	b.n	800b8dc <LoRaMacMlmeRequest+0x1c4>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800b860:	4669      	mov	r1, sp
 800b862:	200d      	movs	r0, #13
 800b864:	f000 fb0a 	bl	800be7c <LoRaMacCommandsGetCmd>
 800b868:	4604      	mov	r4, r0
 800b86a:	b3b8      	cbz	r0, 800b8dc <LoRaMacMlmeRequest+0x1c4>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b86c:	2200      	movs	r2, #0
 800b86e:	a904      	add	r1, sp, #16
 800b870:	200d      	movs	r0, #13
 800b872:	f000 fab7 	bl	800bde4 <LoRaMacCommandsAddCmd>
 800b876:	4604      	mov	r4, r0
 800b878:	b380      	cbz	r0, 800b8dc <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b87a:	2413      	movs	r4, #19
            break;
 800b87c:	e02e      	b.n	800b8dc <LoRaMacMlmeRequest+0x1c4>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800b87e:	4b27      	ldr	r3, [pc, #156]	@ (800b91c <LoRaMacMlmeRequest+0x204>)
 800b880:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b884:	b10b      	cbz	r3, 800b88a <LoRaMacMlmeRequest+0x172>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b886:	2402      	movs	r4, #2
 800b888:	e028      	b.n	800b8dc <LoRaMacMlmeRequest+0x1c4>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800b88a:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800b88c:	f004 0007 	and.w	r0, r4, #7
 800b890:	f000 fa01 	bl	800bc96 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800b894:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b898:	2201      	movs	r2, #1
 800b89a:	a904      	add	r1, sp, #16
 800b89c:	2010      	movs	r0, #16
 800b89e:	f000 faa1 	bl	800bde4 <LoRaMacCommandsAddCmd>
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	b1d0      	cbz	r0, 800b8dc <LoRaMacMlmeRequest+0x1c4>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b8a6:	2413      	movs	r4, #19
 800b8a8:	e018      	b.n	800b8dc <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	a904      	add	r1, sp, #16
 800b8ae:	2012      	movs	r0, #18
 800b8b0:	f000 fa98 	bl	800bde4 <LoRaMacCommandsAddCmd>
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	b188      	cbz	r0, 800b8dc <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b8b8:	2413      	movs	r4, #19
 800b8ba:	e00f      	b.n	800b8dc <LoRaMacMlmeRequest+0x1c4>
            queueElement.RestrictCommonReadyToHandle = true;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800b8c2:	f000 f9d9 	bl	800bc78 <LoRaMacClassBIsAcquisitionInProgress>
 800b8c6:	b108      	cbz	r0, 800b8cc <LoRaMacMlmeRequest+0x1b4>
                status = LORAMAC_STATUS_BUSY;
 800b8c8:	2401      	movs	r4, #1
 800b8ca:	e007      	b.n	800b8dc <LoRaMacMlmeRequest+0x1c4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800b8cc:	f000 f9d1 	bl	800bc72 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	f000 f9d3 	bl	800bc7c <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800b8d6:	2400      	movs	r4, #0
 800b8d8:	e000      	b.n	800b8dc <LoRaMacMlmeRequest+0x1c4>
    switch( mlmeRequest->Type )
 800b8da:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b8dc:	4b0d      	ldr	r3, [pc, #52]	@ (800b914 <LoRaMacMlmeRequest+0x1fc>)
 800b8de:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800b8e2:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800b8e4:	b17c      	cbz	r4, 800b906 <LoRaMacMlmeRequest+0x1ee>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b8e6:	f000 fc89 	bl	800c1fc <LoRaMacConfirmQueueGetCnt>
 800b8ea:	2800      	cmp	r0, #0
 800b8ec:	f47f af22 	bne.w	800b734 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800b8f0:	4b08      	ldr	r3, [pc, #32]	@ (800b914 <LoRaMacMlmeRequest+0x1fc>)
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	f883 141a 	strb.w	r1, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b8f8:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800b8fc:	f361 0282 	bfi	r2, r1, #2, #1
 800b900:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
 800b904:	e716      	b.n	800b734 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800b906:	a805      	add	r0, sp, #20
 800b908:	f000 fbae 	bl	800c068 <LoRaMacConfirmQueueAdd>
 800b90c:	e712      	b.n	800b734 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b90e:	2403      	movs	r4, #3
 800b910:	e710      	b.n	800b734 <LoRaMacMlmeRequest+0x1c>
 800b912:	bf00      	nop
 800b914:	20000900 	.word	0x20000900
 800b918:	20000d54 	.word	0x20000d54
 800b91c:	20008000 	.word	0x20008000

0800b920 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	b091      	sub	sp, #68	@ 0x44
 800b926:	9103      	str	r1, [sp, #12]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800b928:	2800      	cmp	r0, #0
 800b92a:	f000 80dc 	beq.w	800bae6 <LoRaMacMcpsRequest+0x1c6>
 800b92e:	f04f 0a00 	mov.w	sl, #0
 800b932:	4605      	mov	r5, r0
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800b934:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800b938:	f7fe ffac 	bl	800a894 <LoRaMacIsBusy>
 800b93c:	4680      	mov	r8, r0
 800b93e:	b118      	cbz	r0, 800b948 <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800b940:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800b942:	b011      	add	sp, #68	@ 0x44
 800b944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800b948:	ac06      	add	r4, sp, #24
 800b94a:	462e      	mov	r6, r5
 800b94c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b94e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b950:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800b954:	4651      	mov	r1, sl
 800b956:	f88d a030 	strb.w	sl, [sp, #48]	@ 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b95a:	4c65      	ldr	r4, [pc, #404]	@ (800baf0 <LoRaMacMcpsRequest+0x1d0>)
 800b95c:	2214      	movs	r2, #20
 800b95e:	4620      	mov	r0, r4
 800b960:	f003 fb07 	bl	800ef72 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	7063      	strb	r3, [r4, #1]
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800b968:	4b62      	ldr	r3, [pc, #392]	@ (800baf4 <LoRaMacMcpsRequest+0x1d4>)
 800b96a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b96e:	2b02      	cmp	r3, #2
 800b970:	d065      	beq.n	800ba3e <LoRaMacMcpsRequest+0x11e>
    switch( request.Type )
 800b972:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800b976:	2f01      	cmp	r7, #1
 800b978:	f000 8086 	beq.w	800ba88 <LoRaMacMcpsRequest+0x168>
 800b97c:	2f03      	cmp	r7, #3
 800b97e:	f000 8096 	beq.w	800baae <LoRaMacMcpsRequest+0x18e>
 800b982:	2f00      	cmp	r7, #0
 800b984:	d06d      	beq.n	800ba62 <LoRaMacMcpsRequest+0x142>
 800b986:	f04f 0b00 	mov.w	fp, #0
 800b98a:	f8cd b014 	str.w	fp, [sp, #20]
 800b98e:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b992:	2302      	movs	r3, #2
 800b994:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b998:	4e56      	ldr	r6, [pc, #344]	@ (800baf4 <LoRaMacMcpsRequest+0x1d4>)
 800b99a:	f896 307c 	ldrb.w	r3, [r6, #124]	@ 0x7c
 800b99e:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b9a2:	a90e      	add	r1, sp, #56	@ 0x38
 800b9a4:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800b9a8:	f001 f95a 	bl	800cc60 <RegionGetPhyParam>
 800b9ac:	900d      	str	r0, [sp, #52]	@ 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b9ae:	b244      	sxtb	r4, r0
 800b9b0:	45a3      	cmp	fp, r4
 800b9b2:	bfb8      	it	lt
 800b9b4:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800b9b6:	f896 911a 	ldrb.w	r9, [r6, #282]	@ 0x11a
 800b9ba:	f896 211d 	ldrb.w	r2, [r6, #285]	@ 0x11d
 800b9be:	f896 1130 	ldrb.w	r1, [r6, #304]	@ 0x130
 800b9c2:	4648      	mov	r0, r9
 800b9c4:	f7fc fe32 	bl	800862c <CheckForMinimumAbpDatarate>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	b900      	cbnz	r0, 800b9ce <LoRaMacMcpsRequest+0xae>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b9cc:	465c      	mov	r4, fp
    if( readyToSend == true )
 800b9ce:	f1b8 0f00 	cmp.w	r8, #0
 800b9d2:	f000 8082 	beq.w	800bada <LoRaMacMcpsRequest+0x1ba>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800b9d6:	f1b9 0f00 	cmp.w	r9, #0
 800b9da:	d000      	beq.n	800b9de <LoRaMacMcpsRequest+0xbe>
 800b9dc:	b19b      	cbz	r3, 800ba06 <LoRaMacMcpsRequest+0xe6>
            verify.DatarateParams.Datarate = datarate;
 800b9de:	f88d 402c 	strb.w	r4, [sp, #44]	@ 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b9e2:	4b44      	ldr	r3, [pc, #272]	@ (800baf4 <LoRaMacMcpsRequest+0x1d4>)
 800b9e4:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800b9e8:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800b9ec:	2205      	movs	r2, #5
 800b9ee:	a90b      	add	r1, sp, #44	@ 0x2c
 800b9f0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b9f4:	f001 f955 	bl	800cca2 <RegionVerify>
 800b9f8:	2800      	cmp	r0, #0
 800b9fa:	d076      	beq.n	800baea <LoRaMacMcpsRequest+0x1ca>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b9fc:	f99d 202c 	ldrsb.w	r2, [sp, #44]	@ 0x2c
 800ba00:	4b3c      	ldr	r3, [pc, #240]	@ (800baf4 <LoRaMacMcpsRequest+0x1d4>)
 800ba02:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800ba06:	4b3c      	ldr	r3, [pc, #240]	@ (800baf8 <LoRaMacMcpsRequest+0x1d8>)
 800ba08:	f8d3 1498 	ldr.w	r1, [r3, #1176]	@ 0x498
 800ba0c:	4b39      	ldr	r3, [pc, #228]	@ (800baf4 <LoRaMacMcpsRequest+0x1d4>)
 800ba0e:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 800ba12:	f7fd ff95 	bl	8009940 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800ba16:	9b03      	ldr	r3, [sp, #12]
 800ba18:	9300      	str	r3, [sp, #0]
 800ba1a:	4653      	mov	r3, sl
 800ba1c:	9a05      	ldr	r2, [sp, #20]
 800ba1e:	9904      	ldr	r1, [sp, #16]
 800ba20:	a80c      	add	r0, sp, #48	@ 0x30
 800ba22:	f7fe fea7 	bl	800a774 <Send>
        if( status == LORAMAC_STATUS_OK )
 800ba26:	2800      	cmp	r0, #0
 800ba28:	d152      	bne.n	800bad0 <LoRaMacMcpsRequest+0x1b0>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800ba2a:	4b33      	ldr	r3, [pc, #204]	@ (800baf8 <LoRaMacMcpsRequest+0x1d8>)
 800ba2c:	f883 7440 	strb.w	r7, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800ba30:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800ba34:	f042 0201 	orr.w	r2, r2, #1
 800ba38:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
 800ba3c:	e04e      	b.n	800badc <LoRaMacMcpsRequest+0x1bc>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800ba3e:	4b2d      	ldr	r3, [pc, #180]	@ (800baf4 <LoRaMacMcpsRequest+0x1d4>)
 800ba40:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800ba44:	2b02      	cmp	r3, #2
 800ba46:	d194      	bne.n	800b972 <LoRaMacMcpsRequest+0x52>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800ba48:	4b2a      	ldr	r3, [pc, #168]	@ (800baf4 <LoRaMacMcpsRequest+0x1d4>)
 800ba4a:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d18f      	bne.n	800b972 <LoRaMacMcpsRequest+0x52>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800ba52:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d18b      	bne.n	800b972 <LoRaMacMcpsRequest+0x52>
        request.Type = MCPS_CONFIRMED;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	f88d 3018 	strb.w	r3, [sp, #24]
 800ba60:	e787      	b.n	800b972 <LoRaMacMcpsRequest+0x52>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800ba62:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800ba66:	2202      	movs	r2, #2
 800ba68:	f362 1347 	bfi	r3, r2, #5, #3
 800ba6c:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800ba70:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800ba74:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800ba76:	9b08      	ldr	r3, [sp, #32]
 800ba78:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800ba7a:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800ba7e:	f99d b026 	ldrsb.w	fp, [sp, #38]	@ 0x26
            readyToSend = true;
 800ba82:	f04f 0801 	mov.w	r8, #1
            break;
 800ba86:	e784      	b.n	800b992 <LoRaMacMcpsRequest+0x72>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800ba88:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800ba8c:	2204      	movs	r2, #4
 800ba8e:	f362 1347 	bfi	r3, r2, #5, #3
 800ba92:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            fPort = request.Req.Confirmed.fPort;
 800ba96:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800ba9a:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800ba9c:	9b08      	ldr	r3, [sp, #32]
 800ba9e:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800baa0:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
            datarate = request.Req.Confirmed.Datarate;
 800baa4:	f99d b026 	ldrsb.w	fp, [sp, #38]	@ 0x26
            readyToSend = true;
 800baa8:	f04f 0801 	mov.w	r8, #1
            break;
 800baac:	e771      	b.n	800b992 <LoRaMacMcpsRequest+0x72>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800baae:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800bab2:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800bab6:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800baba:	9b07      	ldr	r3, [sp, #28]
 800babc:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800babe:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800bac2:	f99d b022 	ldrsb.w	fp, [sp, #34]	@ 0x22
            readyToSend = true;
 800bac6:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800baca:	2300      	movs	r3, #0
 800bacc:	9304      	str	r3, [sp, #16]
            break;
 800bace:	e760      	b.n	800b992 <LoRaMacMcpsRequest+0x72>
            MacCtx.NodeAckRequested = false;
 800bad0:	4b09      	ldr	r3, [pc, #36]	@ (800baf8 <LoRaMacMcpsRequest+0x1d8>)
 800bad2:	2200      	movs	r2, #0
 800bad4:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
 800bad8:	e000      	b.n	800badc <LoRaMacMcpsRequest+0x1bc>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800bada:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800badc:	4b06      	ldr	r3, [pc, #24]	@ (800baf8 <LoRaMacMcpsRequest+0x1d8>)
 800bade:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800bae2:	612b      	str	r3, [r5, #16]
    return status;
 800bae4:	e72d      	b.n	800b942 <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bae6:	2003      	movs	r0, #3
 800bae8:	e72b      	b.n	800b942 <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800baea:	2003      	movs	r0, #3
 800baec:	e729      	b.n	800b942 <LoRaMacMcpsRequest+0x22>
 800baee:	bf00      	nop
 800baf0:	20000d40 	.word	0x20000d40
 800baf4:	20008000 	.word	0x20008000
 800baf8:	20000900 	.word	0x20000900

0800bafc <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800bafc:	b510      	push	{r4, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800bb02:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800bb06:	220f      	movs	r2, #15
 800bb08:	a901      	add	r1, sp, #4
 800bb0a:	4b09      	ldr	r3, [pc, #36]	@ (800bb30 <LoRaMacTestSetDutyCycleOn+0x34>)
 800bb0c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800bb10:	f001 f8c7 	bl	800cca2 <RegionVerify>
 800bb14:	b148      	cbz	r0, 800bb2a <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800bb16:	4b06      	ldr	r3, [pc, #24]	@ (800bb30 <LoRaMacTestSetDutyCycleOn+0x34>)
 800bb18:	f883 411c 	strb.w	r4, [r3, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800bb1c:	4a05      	ldr	r2, [pc, #20]	@ (800bb34 <LoRaMacTestSetDutyCycleOn+0x38>)
 800bb1e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800bb22:	f043 0320 	orr.w	r3, r3, #32
 800bb26:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800bb2a:	b002      	add	sp, #8
 800bb2c:	bd10      	pop	{r4, pc}
 800bb2e:	bf00      	nop
 800bb30:	20008000 	.word	0x20008000
 800bb34:	20000900 	.word	0x20000900

0800bb38 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800bb38:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800bb3a:	f7ff f909 	bl	800ad50 <LoRaMacStop>
 800bb3e:	b110      	cbz	r0, 800bb46 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800bb40:	2401      	movs	r4, #1
    }
}
 800bb42:	4620      	mov	r0, r4
 800bb44:	bd38      	pop	{r3, r4, r5, pc}
 800bb46:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800bb48:	4d0a      	ldr	r5, [pc, #40]	@ (800bb74 <LoRaMacDeInitialization+0x3c>)
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	f005 fc26 	bl	801139c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800bb50:	f105 0018 	add.w	r0, r5, #24
 800bb54:	f005 fc22 	bl	801139c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800bb58:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 800bb5c:	f005 fc1e 	bl	801139c <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800bb60:	f000 f89a 	bl	800bc98 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800bb64:	2000      	movs	r0, #0
 800bb66:	f7fe fbbb 	bl	800a2e0 <ResetMacParameters>
        Radio.Sleep( );
 800bb6a:	4b03      	ldr	r3, [pc, #12]	@ (800bb78 <LoRaMacDeInitialization+0x40>)
 800bb6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb6e:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800bb70:	e7e7      	b.n	800bb42 <LoRaMacDeInitialization+0xa>
 800bb72:	bf00      	nop
 800bb74:	20000c68 	.word	0x20000c68
 800bb78:	080126d4 	.word	0x080126d4

0800bb7c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800bb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb80:	b08b      	sub	sp, #44	@ 0x2c
 800bb82:	460f      	mov	r7, r1
 800bb84:	4616      	mov	r6, r2
 800bb86:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800bb88:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800bb8c:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800bb90:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800bb94:	6842      	ldr	r2, [r0, #4]
 800bb96:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bb98:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800bb9a:	f890 8001 	ldrb.w	r8, [r0, #1]
 800bb9e:	f1b8 0f00 	cmp.w	r8, #0
 800bba2:	d109      	bne.n	800bbb8 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800bba4:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800bba8:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800bbac:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800bbb0:	4640      	mov	r0, r8
 800bbb2:	b00b      	add	sp, #44	@ 0x2c
 800bbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb8:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800bbba:	2302      	movs	r3, #2
 800bbbc:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800bbc0:	7bc3      	ldrb	r3, [r0, #15]
 800bbc2:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800bbc6:	a908      	add	r1, sp, #32
 800bbc8:	7c00      	ldrb	r0, [r0, #16]
 800bbca:	f001 f849 	bl	800cc60 <RegionGetPhyParam>
 800bbce:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800bbd0:	b243      	sxtb	r3, r0
 800bbd2:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800bbd4:	454b      	cmp	r3, r9
 800bbd6:	bfb8      	it	lt
 800bbd8:	464b      	movlt	r3, r9
 800bbda:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800bbdc:	6862      	ldr	r2, [r4, #4]
 800bbde:	8923      	ldrh	r3, [r4, #8]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d201      	bcs.n	800bbe8 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800bbe4:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800bbe8:	8961      	ldrh	r1, [r4, #10]
 800bbea:	440b      	add	r3, r1
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d224      	bcs.n	800bc3a <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800bbf0:	6863      	ldr	r3, [r4, #4]
 800bbf2:	8921      	ldrh	r1, [r4, #8]
 800bbf4:	8962      	ldrh	r2, [r4, #10]
 800bbf6:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800bbfa:	4283      	cmp	r3, r0
 800bbfc:	d332      	bcc.n	800bc64 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800bbfe:	1a5b      	subs	r3, r3, r1
 800bc00:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc04:	fb02 3311 	mls	r3, r2, r1, r3
 800bc08:	bb7b      	cbnz	r3, 800bc6a <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800bc0a:	9b01      	ldr	r3, [sp, #4]
 800bc0c:	4599      	cmp	r9, r3
 800bc0e:	dc03      	bgt.n	800bc18 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800bc10:	7823      	ldrb	r3, [r4, #0]
 800bc12:	b9eb      	cbnz	r3, 800bc50 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800bc14:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800bc18:	2321      	movs	r3, #33	@ 0x21
 800bc1a:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800bc1e:	9b00      	ldr	r3, [sp, #0]
 800bc20:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800bc24:	7be3      	ldrb	r3, [r4, #15]
 800bc26:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800bc2a:	a908      	add	r1, sp, #32
 800bc2c:	7c20      	ldrb	r0, [r4, #16]
 800bc2e:	f001 f817 	bl	800cc60 <RegionGetPhyParam>
 800bc32:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800bc34:	fa4f f980 	sxtb.w	r9, r0
 800bc38:	e7b4      	b.n	800bba4 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800bc3a:	230a      	movs	r3, #10
 800bc3c:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800bc40:	a908      	add	r1, sp, #32
 800bc42:	7c20      	ldrb	r0, [r4, #16]
 800bc44:	f001 f80c 	bl	800cc60 <RegionGetPhyParam>
 800bc48:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800bc4a:	fa4f fa80 	sxtb.w	sl, r0
 800bc4e:	e7cf      	b.n	800bbf0 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800bc50:	2302      	movs	r3, #2
 800bc52:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800bc56:	a903      	add	r1, sp, #12
 800bc58:	7c20      	ldrb	r0, [r4, #16]
 800bc5a:	f001 f81a 	bl	800cc92 <RegionInitDefaults>
                    nbTrans = 1;
 800bc5e:	f04f 0b01 	mov.w	fp, #1
 800bc62:	e7d9      	b.n	800bc18 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800bc64:	f8dd 9000 	ldr.w	r9, [sp]
 800bc68:	e79c      	b.n	800bba4 <LoRaMacAdrCalcNext+0x28>
 800bc6a:	f8dd 9000 	ldr.w	r9, [sp]
 800bc6e:	e799      	b.n	800bba4 <LoRaMacAdrCalcNext+0x28>

0800bc70 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc70:	4770      	bx	lr

0800bc72 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc72:	4770      	bx	lr

0800bc74 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc74:	4770      	bx	lr

0800bc76 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc76:	4770      	bx	lr

0800bc78 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc78:	2000      	movs	r0, #0
 800bc7a:	4770      	bx	lr

0800bc7c <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc7c:	4770      	bx	lr

0800bc7e <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc7e:	4770      	bx	lr

0800bc80 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc80:	4770      	bx	lr

0800bc82 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc82:	2000      	movs	r0, #0
 800bc84:	4770      	bx	lr

0800bc86 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc86:	2000      	movs	r0, #0
 800bc88:	4770      	bx	lr

0800bc8a <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	4770      	bx	lr

0800bc8e <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc8e:	2000      	movs	r0, #0
 800bc90:	4770      	bx	lr

0800bc92 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc92:	2000      	movs	r0, #0
 800bc94:	4770      	bx	lr

0800bc96 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc96:	4770      	bx	lr

0800bc98 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc98:	4770      	bx	lr

0800bc9a <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc9a:	4770      	bx	lr

0800bc9c <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bc9c:	2002      	movs	r0, #2
 800bc9e:	4770      	bx	lr

0800bca0 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bca0:	2002      	movs	r0, #2
 800bca2:	4770      	bx	lr

0800bca4 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bca4:	2002      	movs	r0, #2
 800bca6:	4770      	bx	lr

0800bca8 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bca8:	4770      	bx	lr

0800bcaa <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bcaa:	2000      	movs	r0, #0
 800bcac:	4770      	bx	lr

0800bcae <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bcae:	4770      	bx	lr

0800bcb0 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bcb0:	4770      	bx	lr

0800bcb2 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	4770      	bx	lr

0800bcb6 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	4770      	bx	lr

0800bcba <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bcba:	4770      	bx	lr

0800bcbc <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bcbc:	4770      	bx	lr

0800bcbe <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800bcbe:	4770      	bx	lr

0800bcc0 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	2b0f      	cmp	r3, #15
 800bcc4:	d804      	bhi.n	800bcd0 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800bcc6:	5cc2      	ldrb	r2, [r0, r3]
 800bcc8:	b922      	cbnz	r2, 800bcd4 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800bcca:	3301      	adds	r3, #1
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	e7f8      	b.n	800bcc2 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800bcd0:	2001      	movs	r0, #1
 800bcd2:	4770      	bx	lr
            return false;
 800bcd4:	2000      	movs	r0, #0
}
 800bcd6:	4770      	bx	lr

0800bcd8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800bcd8:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800bcda:	2500      	movs	r5, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800bcdc:	012c      	lsls	r4, r5, #4
 800bcde:	3408      	adds	r4, #8
 800bce0:	4b06      	ldr	r3, [pc, #24]	@ (800bcfc <MallocNewMacCommandSlot+0x24>)
 800bce2:	441c      	add	r4, r3
 800bce4:	4620      	mov	r0, r4
 800bce6:	f7ff ffeb 	bl	800bcc0 <IsSlotFree>
 800bcea:	b920      	cbnz	r0, 800bcf6 <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800bcec:	3501      	adds	r5, #1
 800bcee:	b2ed      	uxtb	r5, r5
        if( itr == NUM_OF_MAC_COMMANDS )
 800bcf0:	2d20      	cmp	r5, #32
 800bcf2:	d1f3      	bne.n	800bcdc <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800bcf4:	2400      	movs	r4, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	bd38      	pop	{r3, r4, r5, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20000e1c 	.word	0x20000e1c

0800bd00 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800bd00:	b120      	cbz	r0, 800bd0c <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800bd02:	2200      	movs	r2, #0
 800bd04:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800bd06:	6042      	str	r2, [r0, #4]

    return true;
 800bd08:	2001      	movs	r0, #1
 800bd0a:	4770      	bx	lr
        return false;
 800bd0c:	2000      	movs	r0, #0
}
 800bd0e:	4770      	bx	lr

0800bd10 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800bd10:	4603      	mov	r3, r0
 800bd12:	b160      	cbz	r0, 800bd2e <LinkedListAdd+0x1e>
 800bd14:	b169      	cbz	r1, 800bd32 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800bd16:	6802      	ldr	r2, [r0, #0]
 800bd18:	b13a      	cbz	r2, 800bd2a <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	b102      	cbz	r2, 800bd20 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800bd1e:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800bd20:	2200      	movs	r2, #0
 800bd22:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800bd24:	6059      	str	r1, [r3, #4]

    return true;
 800bd26:	2001      	movs	r0, #1
 800bd28:	4770      	bx	lr
        list->First = element;
 800bd2a:	6001      	str	r1, [r0, #0]
 800bd2c:	e7f5      	b.n	800bd1a <LinkedListAdd+0xa>
        return false;
 800bd2e:	2000      	movs	r0, #0
 800bd30:	4770      	bx	lr
 800bd32:	2000      	movs	r0, #0
}
 800bd34:	4770      	bx	lr

0800bd36 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800bd36:	b160      	cbz	r0, 800bd52 <LinkedListGetPrevious+0x1c>
 800bd38:	b161      	cbz	r1, 800bd54 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800bd3a:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800bd3c:	4281      	cmp	r1, r0
 800bd3e:	d102      	bne.n	800bd46 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800bd40:	2000      	movs	r0, #0
    }

    return curElement;
}
 800bd42:	4770      	bx	lr
            curElement = curElement->Next;
 800bd44:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800bd46:	2800      	cmp	r0, #0
 800bd48:	d0fb      	beq.n	800bd42 <LinkedListGetPrevious+0xc>
 800bd4a:	6803      	ldr	r3, [r0, #0]
 800bd4c:	428b      	cmp	r3, r1
 800bd4e:	d1f9      	bne.n	800bd44 <LinkedListGetPrevious+0xe>
 800bd50:	4770      	bx	lr
 800bd52:	4770      	bx	lr
        return NULL;
 800bd54:	4608      	mov	r0, r1
 800bd56:	4770      	bx	lr

0800bd58 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800bd58:	b1b8      	cbz	r0, 800bd8a <LinkedListRemove+0x32>
{
 800bd5a:	b538      	push	{r3, r4, r5, lr}
 800bd5c:	460c      	mov	r4, r1
 800bd5e:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800bd60:	b1a9      	cbz	r1, 800bd8e <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800bd62:	f7ff ffe8 	bl	800bd36 <LinkedListGetPrevious>

    if( list->First == element )
 800bd66:	682b      	ldr	r3, [r5, #0]
 800bd68:	42a3      	cmp	r3, r4
 800bd6a:	d009      	beq.n	800bd80 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800bd6c:	686b      	ldr	r3, [r5, #4]
 800bd6e:	42a3      	cmp	r3, r4
 800bd70:	d009      	beq.n	800bd86 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800bd72:	b108      	cbz	r0, 800bd78 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800bd74:	6823      	ldr	r3, [r4, #0]
 800bd76:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	6023      	str	r3, [r4, #0]

    return true;
 800bd7c:	2001      	movs	r0, #1
}
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	602b      	str	r3, [r5, #0]
 800bd84:	e7f2      	b.n	800bd6c <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800bd86:	6068      	str	r0, [r5, #4]
 800bd88:	e7f3      	b.n	800bd72 <LinkedListRemove+0x1a>
        return false;
 800bd8a:	2000      	movs	r0, #0
}
 800bd8c:	4770      	bx	lr
        return false;
 800bd8e:	2000      	movs	r0, #0
 800bd90:	e7f5      	b.n	800bd7e <LinkedListRemove+0x26>
	...

0800bd94 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800bd94:	2811      	cmp	r0, #17
 800bd96:	d805      	bhi.n	800bda4 <IsSticky+0x10>
 800bd98:	4b03      	ldr	r3, [pc, #12]	@ (800bda8 <IsSticky+0x14>)
 800bd9a:	fa23 f000 	lsr.w	r0, r3, r0
 800bd9e:	f000 0001 	and.w	r0, r0, #1
 800bda2:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800bda4:	2000      	movs	r0, #0
    }
}
 800bda6:	4770      	bx	lr
 800bda8:	00020720 	.word	0x00020720

0800bdac <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800bdac:	2000      	movs	r0, #0
 800bdae:	4770      	bx	lr

0800bdb0 <FreeMacCommandSlot>:
    if( slot == NULL )
 800bdb0:	b130      	cbz	r0, 800bdc0 <FreeMacCommandSlot+0x10>
{
 800bdb2:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800bdb4:	2210      	movs	r2, #16
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	f003 f8db 	bl	800ef72 <memset1>
    return true;
 800bdbc:	2001      	movs	r0, #1
}
 800bdbe:	bd08      	pop	{r3, pc}
        return false;
 800bdc0:	2000      	movs	r0, #0
}
 800bdc2:	4770      	bx	lr

0800bdc4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800bdc4:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800bdc6:	4c06      	ldr	r4, [pc, #24]	@ (800bde0 <LoRaMacCommandsInit+0x1c>)
 800bdc8:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 800bdcc:	2100      	movs	r1, #0
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f003 f8cf 	bl	800ef72 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	f7ff ff93 	bl	800bd00 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800bdda:	2000      	movs	r0, #0
 800bddc:	bd10      	pop	{r4, pc}
 800bdde:	bf00      	nop
 800bde0:	20000e1c 	.word	0x20000e1c

0800bde4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800bde4:	b321      	cbz	r1, 800be30 <LoRaMacCommandsAddCmd+0x4c>
{
 800bde6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde8:	4605      	mov	r5, r0
 800bdea:	4614      	mov	r4, r2
 800bdec:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800bdee:	f7ff ff73 	bl	800bcd8 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800bdf2:	4606      	mov	r6, r0
 800bdf4:	b1f0      	cbz	r0, 800be34 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800bdf6:	4601      	mov	r1, r0
 800bdf8:	4810      	ldr	r0, [pc, #64]	@ (800be3c <LoRaMacCommandsAddCmd+0x58>)
 800bdfa:	f7ff ff89 	bl	800bd10 <LinkedListAdd>
 800bdfe:	b1d8      	cbz	r0, 800be38 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800be00:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800be02:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800be04:	b2a2      	uxth	r2, r4
 800be06:	4639      	mov	r1, r7
 800be08:	1d70      	adds	r0, r6, #5
 800be0a:	f003 f89a 	bl	800ef42 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800be0e:	4628      	mov	r0, r5
 800be10:	f7ff ffc0 	bl	800bd94 <IsSticky>
 800be14:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800be16:	4628      	mov	r0, r5
 800be18:	f7ff ffc8 	bl	800bdac <IsConfirmationRequired>
 800be1c:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800be1e:	4a07      	ldr	r2, [pc, #28]	@ (800be3c <LoRaMacCommandsAddCmd+0x58>)
 800be20:	f8d2 3208 	ldr.w	r3, [r2, #520]	@ 0x208
 800be24:	4423      	add	r3, r4
 800be26:	3301      	adds	r3, #1
 800be28:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800be2c:	2000      	movs	r0, #0
}
 800be2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800be30:	2001      	movs	r0, #1
}
 800be32:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800be34:	2002      	movs	r0, #2
 800be36:	e7fa      	b.n	800be2e <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800be38:	2005      	movs	r0, #5
 800be3a:	e7f8      	b.n	800be2e <LoRaMacCommandsAddCmd+0x4a>
 800be3c:	20000e1c 	.word	0x20000e1c

0800be40 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800be40:	b1a0      	cbz	r0, 800be6c <LoRaMacCommandsRemoveCmd+0x2c>
{
 800be42:	b510      	push	{r4, lr}
 800be44:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800be46:	4601      	mov	r1, r0
 800be48:	480b      	ldr	r0, [pc, #44]	@ (800be78 <LoRaMacCommandsRemoveCmd+0x38>)
 800be4a:	f7ff ff85 	bl	800bd58 <LinkedListRemove>
 800be4e:	b178      	cbz	r0, 800be70 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800be50:	4a09      	ldr	r2, [pc, #36]	@ (800be78 <LoRaMacCommandsRemoveCmd+0x38>)
 800be52:	f8d2 3208 	ldr.w	r3, [r2, #520]	@ 0x208
 800be56:	68a1      	ldr	r1, [r4, #8]
 800be58:	1a5b      	subs	r3, r3, r1
 800be5a:	3b01      	subs	r3, #1
 800be5c:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800be60:	4620      	mov	r0, r4
 800be62:	f7ff ffa5 	bl	800bdb0 <FreeMacCommandSlot>
 800be66:	b128      	cbz	r0, 800be74 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800be68:	2000      	movs	r0, #0
}
 800be6a:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800be6c:	2001      	movs	r0, #1
}
 800be6e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800be70:	2003      	movs	r0, #3
 800be72:	e7fa      	b.n	800be6a <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800be74:	2005      	movs	r0, #5
 800be76:	e7f8      	b.n	800be6a <LoRaMacCommandsRemoveCmd+0x2a>
 800be78:	20000e1c 	.word	0x20000e1c

0800be7c <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800be7c:	4b06      	ldr	r3, [pc, #24]	@ (800be98 <LoRaMacCommandsGetCmd+0x1c>)
 800be7e:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800be80:	e000      	b.n	800be84 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800be82:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800be84:	b113      	cbz	r3, 800be8c <LoRaMacCommandsGetCmd+0x10>
 800be86:	791a      	ldrb	r2, [r3, #4]
 800be88:	4282      	cmp	r2, r0
 800be8a:	d1fa      	bne.n	800be82 <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800be8c:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800be8e:	b10b      	cbz	r3, 800be94 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800be90:	2000      	movs	r0, #0
 800be92:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800be94:	2003      	movs	r0, #3
}
 800be96:	4770      	bx	lr
 800be98:	20000e1c 	.word	0x20000e1c

0800be9c <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800be9c:	4b0a      	ldr	r3, [pc, #40]	@ (800bec8 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800be9e:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800bea0:	b120      	cbz	r0, 800beac <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800bea2:	7b03      	ldrb	r3, [r0, #12]
 800bea4:	b11b      	cbz	r3, 800beae <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800bea6:	6800      	ldr	r0, [r0, #0]
 800bea8:	e7fa      	b.n	800bea0 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800beaa:	bd10      	pop	{r4, pc}
 800beac:	4770      	bx	lr
{
 800beae:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800beb0:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800beb2:	f7ff ffc5 	bl	800be40 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800beb6:	4620      	mov	r0, r4
    while( curElement != NULL )
 800beb8:	2800      	cmp	r0, #0
 800beba:	d0f6      	beq.n	800beaa <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800bebc:	7b03      	ldrb	r3, [r0, #12]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d0f6      	beq.n	800beb0 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800bec2:	6800      	ldr	r0, [r0, #0]
 800bec4:	e7f8      	b.n	800beb8 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800bec6:	bf00      	nop
 800bec8:	20000e1c 	.word	0x20000e1c

0800becc <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800becc:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800bece:	4b0b      	ldr	r3, [pc, #44]	@ (800befc <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800bed0:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800bed2:	e000      	b.n	800bed6 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800bed4:	4634      	mov	r4, r6
    while( curElement != NULL )
 800bed6:	b17c      	cbz	r4, 800bef8 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800bed8:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800beda:	7925      	ldrb	r5, [r4, #4]
 800bedc:	4628      	mov	r0, r5
 800bede:	f7ff ff59 	bl	800bd94 <IsSticky>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	d0f6      	beq.n	800bed4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800bee6:	4628      	mov	r0, r5
 800bee8:	f7ff ff60 	bl	800bdac <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800beec:	2800      	cmp	r0, #0
 800beee:	d1f1      	bne.n	800bed4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800bef0:	4620      	mov	r0, r4
 800bef2:	f7ff ffa5 	bl	800be40 <LoRaMacCommandsRemoveCmd>
 800bef6:	e7ed      	b.n	800bed4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800bef8:	2000      	movs	r0, #0
 800befa:	bd70      	pop	{r4, r5, r6, pc}
 800befc:	20000e1c 	.word	0x20000e1c

0800bf00 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800bf00:	b128      	cbz	r0, 800bf0e <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800bf02:	4a04      	ldr	r2, [pc, #16]	@ (800bf14 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800bf04:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 800bf08:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bf0e:	2001      	movs	r0, #1
}
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	20000e1c 	.word	0x20000e1c

0800bf18 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800bf18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800bf1c:	4b16      	ldr	r3, [pc, #88]	@ (800bf78 <LoRaMacCommandsSerializeCmds+0x60>)
 800bf1e:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800bf20:	b32a      	cbz	r2, 800bf6e <LoRaMacCommandsSerializeCmds+0x56>
 800bf22:	4607      	mov	r7, r0
 800bf24:	4688      	mov	r8, r1
 800bf26:	4616      	mov	r6, r2
 800bf28:	b319      	cbz	r1, 800bf72 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800bf2a:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800bf2c:	b194      	cbz	r4, 800bf54 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800bf2e:	1a7a      	subs	r2, r7, r1
 800bf30:	68a3      	ldr	r3, [r4, #8]
 800bf32:	3301      	adds	r3, #1
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d30d      	bcc.n	800bf54 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800bf38:	1c4d      	adds	r5, r1, #1
 800bf3a:	b2ed      	uxtb	r5, r5
 800bf3c:	7923      	ldrb	r3, [r4, #4]
 800bf3e:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800bf40:	8922      	ldrh	r2, [r4, #8]
 800bf42:	1d61      	adds	r1, r4, #5
 800bf44:	1970      	adds	r0, r6, r5
 800bf46:	f002 fffc 	bl	800ef42 <memcpy1>
            itr += curElement->PayloadSize;
 800bf4a:	68a3      	ldr	r3, [r4, #8]
 800bf4c:	441d      	add	r5, r3
 800bf4e:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800bf50:	6824      	ldr	r4, [r4, #0]
 800bf52:	e7eb      	b.n	800bf2c <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800bf54:	b12c      	cbz	r4, 800bf62 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800bf56:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f7ff ff71 	bl	800be40 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800bf5e:	462c      	mov	r4, r5
 800bf60:	e7f8      	b.n	800bf54 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800bf62:	4640      	mov	r0, r8
 800bf64:	f7ff ffcc 	bl	800bf00 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800bf68:	2000      	movs	r0, #0
}
 800bf6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800bf6e:	2001      	movs	r0, #1
 800bf70:	e7fb      	b.n	800bf6a <LoRaMacCommandsSerializeCmds+0x52>
 800bf72:	2001      	movs	r0, #1
 800bf74:	e7f9      	b.n	800bf6a <LoRaMacCommandsSerializeCmds+0x52>
 800bf76:	bf00      	nop
 800bf78:	20000e1c 	.word	0x20000e1c

0800bf7c <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800bf7c:	1e83      	subs	r3, r0, #2
 800bf7e:	2b11      	cmp	r3, #17
 800bf80:	d80a      	bhi.n	800bf98 <LoRaMacCommandsGetCmdSize+0x1c>
 800bf82:	e8df f003 	tbb	[pc, r3]
 800bf86:	0b23      	.short	0x0b23
 800bf88:	110f240d 	.word	0x110f240d
 800bf8c:	09171513 	.word	0x09171513
 800bf90:	09091909 	.word	0x09091909
 800bf94:	211f1d1b 	.word	0x211f1d1b
 800bf98:	2000      	movs	r0, #0
 800bf9a:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800bf9c:	2005      	movs	r0, #5
            break;
 800bf9e:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800bfa0:	2002      	movs	r0, #2
            break;
 800bfa2:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800bfa4:	2001      	movs	r0, #1
            break;
 800bfa6:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800bfa8:	2006      	movs	r0, #6
            break;
 800bfaa:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800bfac:	2002      	movs	r0, #2
            break;
 800bfae:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800bfb0:	2002      	movs	r0, #2
            break;
 800bfb2:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800bfb4:	2005      	movs	r0, #5
            break;
 800bfb6:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800bfb8:	2006      	movs	r0, #6
            break;
 800bfba:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800bfbc:	2001      	movs	r0, #1
            break;
 800bfbe:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800bfc0:	2005      	movs	r0, #5
            break;
 800bfc2:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800bfc4:	2004      	movs	r0, #4
            break;
 800bfc6:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800bfc8:	2004      	movs	r0, #4
            break;
 800bfca:	4770      	bx	lr
            cidSize = 3;
 800bfcc:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800bfce:	4770      	bx	lr

0800bfd0 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bfd0:	4b03      	ldr	r3, [pc, #12]	@ (800bfe0 <IncreaseBufferPointer+0x10>)
 800bfd2:	4298      	cmp	r0, r3
 800bfd4:	d001      	beq.n	800bfda <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800bfd6:	3004      	adds	r0, #4
 800bfd8:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800bfda:	4802      	ldr	r0, [pc, #8]	@ (800bfe4 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	20001044 	.word	0x20001044
 800bfe4:	20001034 	.word	0x20001034

0800bfe8 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800bfe8:	b108      	cbz	r0, 800bfee <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800bfea:	2000      	movs	r0, #0
 800bfec:	4770      	bx	lr
        return true;
 800bfee:	2001      	movs	r0, #1
}
 800bff0:	4770      	bx	lr

0800bff2 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800bff2:	2804      	cmp	r0, #4
 800bff4:	d801      	bhi.n	800bffa <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800bff6:	2000      	movs	r0, #0
 800bff8:	4770      	bx	lr
        return true;
 800bffa:	2001      	movs	r0, #1
}
 800bffc:	4770      	bx	lr
	...

0800c000 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800c000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c002:	4606      	mov	r6, r0
 800c004:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c006:	4b0d      	ldr	r3, [pc, #52]	@ (800c03c <GetElement+0x3c>)
 800c008:	f893 7020 	ldrb.w	r7, [r3, #32]
 800c00c:	4638      	mov	r0, r7
 800c00e:	f7ff ffeb 	bl	800bfe8 <IsListEmpty>
 800c012:	b970      	cbnz	r0, 800c032 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800c014:	2500      	movs	r5, #0
 800c016:	42af      	cmp	r7, r5
 800c018:	d909      	bls.n	800c02e <GetElement+0x2e>
    {
        if( element->Request == request )
 800c01a:	7823      	ldrb	r3, [r4, #0]
 800c01c:	42b3      	cmp	r3, r6
 800c01e:	d00a      	beq.n	800c036 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800c020:	4620      	mov	r0, r4
 800c022:	f7ff ffd5 	bl	800bfd0 <IncreaseBufferPointer>
 800c026:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800c028:	3501      	adds	r5, #1
 800c02a:	b2ed      	uxtb	r5, r5
 800c02c:	e7f3      	b.n	800c016 <GetElement+0x16>
    }

    return NULL;
 800c02e:	2000      	movs	r0, #0
}
 800c030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800c032:	2000      	movs	r0, #0
 800c034:	e7fc      	b.n	800c030 <GetElement+0x30>
            return element;
 800c036:	4620      	mov	r0, r4
 800c038:	e7fa      	b.n	800c030 <GetElement+0x30>
 800c03a:	bf00      	nop
 800c03c:	20001028 	.word	0x20001028

0800c040 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800c040:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800c042:	4c08      	ldr	r4, [pc, #32]	@ (800c064 <LoRaMacConfirmQueueInit+0x24>)
 800c044:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800c046:	2300      	movs	r3, #0
 800c048:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800c04c:	f104 000c 	add.w	r0, r4, #12
 800c050:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800c052:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800c054:	2214      	movs	r2, #20
 800c056:	21ff      	movs	r1, #255	@ 0xff
 800c058:	f002 ff8b 	bl	800ef72 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c05c:	2301      	movs	r3, #1
 800c05e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 800c062:	bd10      	pop	{r4, pc}
 800c064:	20001028 	.word	0x20001028

0800c068 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800c068:	b538      	push	{r3, r4, r5, lr}
 800c06a:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c06c:	4b0f      	ldr	r3, [pc, #60]	@ (800c0ac <LoRaMacConfirmQueueAdd+0x44>)
 800c06e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c072:	f7ff ffbe 	bl	800bff2 <IsListFull>
 800c076:	b9b8      	cbnz	r0, 800c0a8 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800c078:	4c0c      	ldr	r4, [pc, #48]	@ (800c0ac <LoRaMacConfirmQueueAdd+0x44>)
 800c07a:	68a3      	ldr	r3, [r4, #8]
 800c07c:	782a      	ldrb	r2, [r5, #0]
 800c07e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800c080:	68a3      	ldr	r3, [r4, #8]
 800c082:	786a      	ldrb	r2, [r5, #1]
 800c084:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800c086:	68a3      	ldr	r3, [r4, #8]
 800c088:	78ea      	ldrb	r2, [r5, #3]
 800c08a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800c08c:	68a3      	ldr	r3, [r4, #8]
 800c08e:	78aa      	ldrb	r2, [r5, #2]
 800c090:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800c092:	f894 3020 	ldrb.w	r3, [r4, #32]
 800c096:	3301      	adds	r3, #1
 800c098:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800c09c:	68a0      	ldr	r0, [r4, #8]
 800c09e:	f7ff ff97 	bl	800bfd0 <IncreaseBufferPointer>
 800c0a2:	60a0      	str	r0, [r4, #8]

    return true;
 800c0a4:	2001      	movs	r0, #1
}
 800c0a6:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	e7fc      	b.n	800c0a6 <LoRaMacConfirmQueueAdd+0x3e>
 800c0ac:	20001028 	.word	0x20001028

0800c0b0 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800c0b0:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c0b2:	4b09      	ldr	r3, [pc, #36]	@ (800c0d8 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800c0b4:	f893 4020 	ldrb.w	r4, [r3, #32]
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	f7ff ff95 	bl	800bfe8 <IsListEmpty>
 800c0be:	b948      	cbnz	r0, 800c0d4 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800c0c0:	4d05      	ldr	r5, [pc, #20]	@ (800c0d8 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800c0c2:	3c01      	subs	r4, #1
 800c0c4:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800c0c8:	6868      	ldr	r0, [r5, #4]
 800c0ca:	f7ff ff81 	bl	800bfd0 <IncreaseBufferPointer>
 800c0ce:	6068      	str	r0, [r5, #4]

    return true;
 800c0d0:	2001      	movs	r0, #1
}
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800c0d4:	2000      	movs	r0, #0
 800c0d6:	e7fc      	b.n	800c0d2 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800c0d8:	20001028 	.word	0x20001028

0800c0dc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800c0dc:	b538      	push	{r3, r4, r5, lr}
 800c0de:	4605      	mov	r5, r0
 800c0e0:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800c0e2:	4b08      	ldr	r3, [pc, #32]	@ (800c104 <LoRaMacConfirmQueueSetStatus+0x28>)
 800c0e4:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c0e8:	f7ff ff7e 	bl	800bfe8 <IsListEmpty>
 800c0ec:	b948      	cbnz	r0, 800c102 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c0ee:	4b05      	ldr	r3, [pc, #20]	@ (800c104 <LoRaMacConfirmQueueSetStatus+0x28>)
 800c0f0:	689a      	ldr	r2, [r3, #8]
 800c0f2:	6859      	ldr	r1, [r3, #4]
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	f7ff ff83 	bl	800c000 <GetElement>
        if( element != NULL )
 800c0fa:	b110      	cbz	r0, 800c102 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800c0fc:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800c0fe:	2201      	movs	r2, #1
 800c100:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800c102:	bd38      	pop	{r3, r4, r5, pc}
 800c104:	20001028 	.word	0x20001028

0800c108 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800c108:	b510      	push	{r4, lr}
 800c10a:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800c10c:	4b09      	ldr	r3, [pc, #36]	@ (800c134 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800c10e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c112:	f7ff ff69 	bl	800bfe8 <IsListEmpty>
 800c116:	b940      	cbnz	r0, 800c12a <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c118:	4b06      	ldr	r3, [pc, #24]	@ (800c134 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800c11a:	689a      	ldr	r2, [r3, #8]
 800c11c:	6859      	ldr	r1, [r3, #4]
 800c11e:	4620      	mov	r0, r4
 800c120:	f7ff ff6e 	bl	800c000 <GetElement>
        if( element != NULL )
 800c124:	b118      	cbz	r0, 800c12e <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800c126:	7840      	ldrb	r0, [r0, #1]
 800c128:	e000      	b.n	800c12c <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c12a:	2001      	movs	r0, #1
}
 800c12c:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c12e:	2001      	movs	r0, #1
 800c130:	e7fc      	b.n	800c12c <LoRaMacConfirmQueueGetStatus+0x24>
 800c132:	bf00      	nop
 800c134:	20001028 	.word	0x20001028

0800c138 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800c13c:	4b0c      	ldr	r3, [pc, #48]	@ (800c170 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800c13e:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800c140:	f883 0021 	strb.w	r0, [r3, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800c144:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c148:	f7ff ff4e 	bl	800bfe8 <IsListEmpty>
 800c14c:	b150      	cbz	r0, 800c164 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800c14e:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800c150:	2301      	movs	r3, #1
 800c152:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800c154:	4620      	mov	r0, r4
 800c156:	f7ff ff3b 	bl	800bfd0 <IncreaseBufferPointer>
 800c15a:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800c15c:	4b04      	ldr	r3, [pc, #16]	@ (800c170 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	4283      	cmp	r3, r0
 800c162:	d0f4      	beq.n	800c14e <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800c164:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800c166:	78e3      	ldrb	r3, [r4, #3]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1f3      	bne.n	800c154 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800c16c:	e7f0      	b.n	800c150 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800c16e:	bf00      	nop
 800c170:	20001028 	.word	0x20001028

0800c174 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800c174:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800c176:	4b04      	ldr	r3, [pc, #16]	@ (800c188 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800c178:	689a      	ldr	r2, [r3, #8]
 800c17a:	6859      	ldr	r1, [r3, #4]
 800c17c:	f7ff ff40 	bl	800c000 <GetElement>
 800c180:	b100      	cbz	r0, 800c184 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800c182:	2001      	movs	r0, #1
    }
    return false;
}
 800c184:	bd08      	pop	{r3, pc}
 800c186:	bf00      	nop
 800c188:	20001028 	.word	0x20001028

0800c18c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800c18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c18e:	b083      	sub	sp, #12
 800c190:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800c192:	4b19      	ldr	r3, [pc, #100]	@ (800c1f8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800c194:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800c198:	2204      	movs	r2, #4
 800c19a:	2100      	movs	r1, #0
 800c19c:	eb0d 0002 	add.w	r0, sp, r2
 800c1a0:	f002 fee7 	bl	800ef72 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800c1a4:	2400      	movs	r4, #0
 800c1a6:	e00d      	b.n	800c1c4 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800c1a8:	781a      	ldrb	r2, [r3, #0]
 800c1aa:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800c1ae:	785a      	ldrb	r2, [r3, #1]
 800c1b0:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800c1b4:	78db      	ldrb	r3, [r3, #3]
 800c1b6:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800c1ba:	f7ff ff79 	bl	800c0b0 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800c1be:	b1a5      	cbz	r5, 800c1ea <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800c1c0:	3401      	adds	r4, #1
 800c1c2:	b2e4      	uxtb	r4, r4
 800c1c4:	42bc      	cmp	r4, r7
 800c1c6:	d214      	bcs.n	800c1f2 <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800c1c8:	4b0b      	ldr	r3, [pc, #44]	@ (800c1f8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800c1ca:	685a      	ldr	r2, [r3, #4]
 800c1cc:	7812      	ldrb	r2, [r2, #0]
 800c1ce:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	7852      	ldrb	r2, [r2, #1]
 800c1d4:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800c1da:	2d00      	cmp	r5, #0
 800c1dc:	d0e4      	beq.n	800c1a8 <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800c1de:	4b06      	ldr	r3, [pc, #24]	@ (800c1f8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	4798      	blx	r3
 800c1e8:	e7e7      	b.n	800c1ba <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800c1ea:	a801      	add	r0, sp, #4
 800c1ec:	f7ff ff3c 	bl	800c068 <LoRaMacConfirmQueueAdd>
 800c1f0:	e7e6      	b.n	800c1c0 <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800c1f2:	b003      	add	sp, #12
 800c1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	20001028 	.word	0x20001028

0800c1fc <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800c1fc:	4b01      	ldr	r3, [pc, #4]	@ (800c204 <LoRaMacConfirmQueueGetCnt+0x8>)
 800c1fe:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c202:	4770      	bx	lr
 800c204:	20001028 	.word	0x20001028

0800c208 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800c208:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c20a:	4b03      	ldr	r3, [pc, #12]	@ (800c218 <LoRaMacConfirmQueueIsFull+0x10>)
 800c20c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c210:	f7ff feef 	bl	800bff2 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800c214:	bd08      	pop	{r3, pc}
 800c216:	bf00      	nop
 800c218:	20001028 	.word	0x20001028

0800c21c <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800c21c:	b410      	push	{r4}
 800c21e:	9c01      	ldr	r4, [sp, #4]
 800c220:	9902      	ldr	r1, [sp, #8]
 800c222:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800c224:	b1da      	cbz	r2, 800c25e <PrepareB0+0x42>
 800c226:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800c228:	2049      	movs	r0, #73	@ 0x49
 800c22a:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800c22c:	2000      	movs	r0, #0
 800c22e:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800c230:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800c232:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800c234:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800c236:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800c238:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800c23a:	0a23      	lsrs	r3, r4, #8
 800c23c:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800c23e:	0c23      	lsrs	r3, r4, #16
 800c240:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800c242:	0e24      	lsrs	r4, r4, #24
 800c244:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800c246:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800c248:	0a0b      	lsrs	r3, r1, #8
 800c24a:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800c24c:	0c0b      	lsrs	r3, r1, #16
 800c24e:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800c250:	0e09      	lsrs	r1, r1, #24
 800c252:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800c254:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800c256:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c25a:	bc10      	pop	{r4}
 800c25c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c25e:	2009      	movs	r0, #9
 800c260:	e7fb      	b.n	800c25a <PrepareB0+0x3e>
	...

0800c264 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800c264:	2300      	movs	r3, #0
 800c266:	2b01      	cmp	r3, #1
 800c268:	d80d      	bhi.n	800c286 <GetKeyAddrItem+0x22>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800c26a:	4a08      	ldr	r2, [pc, #32]	@ (800c28c <GetKeyAddrItem+0x28>)
 800c26c:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800c270:	4282      	cmp	r2, r0
 800c272:	d002      	beq.n	800c27a <GetKeyAddrItem+0x16>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800c274:	3301      	adds	r3, #1
 800c276:	b2db      	uxtb	r3, r3
 800c278:	e7f5      	b.n	800c266 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800c27a:	4a04      	ldr	r2, [pc, #16]	@ (800c28c <GetKeyAddrItem+0x28>)
 800c27c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c280:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800c282:	2000      	movs	r0, #0
 800c284:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800c286:	200b      	movs	r0, #11
}
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	20000108 	.word	0x20000108

0800c290 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800c290:	b1f1      	cbz	r1, 800c2d0 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800c292:	3801      	subs	r0, #1
 800c294:	2803      	cmp	r0, #3
 800c296:	d81d      	bhi.n	800c2d4 <GetLastFcntDown+0x44>
 800c298:	e8df f000 	tbb	[pc, r0]
 800c29c:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800c2a0:	4a0d      	ldr	r2, [pc, #52]	@ (800c2d8 <GetLastFcntDown+0x48>)
 800c2a2:	6812      	ldr	r2, [r2, #0]
 800c2a4:	6912      	ldr	r2, [r2, #16]
 800c2a6:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800c2a8:	2000      	movs	r0, #0
            break;
 800c2aa:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800c2ac:	4a0a      	ldr	r2, [pc, #40]	@ (800c2d8 <GetLastFcntDown+0x48>)
 800c2ae:	6812      	ldr	r2, [r2, #0]
 800c2b0:	6952      	ldr	r2, [r2, #20]
 800c2b2:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800c2b4:	2000      	movs	r0, #0
            break;
 800c2b6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800c2b8:	4a07      	ldr	r2, [pc, #28]	@ (800c2d8 <GetLastFcntDown+0x48>)
 800c2ba:	6812      	ldr	r2, [r2, #0]
 800c2bc:	6992      	ldr	r2, [r2, #24]
 800c2be:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800c2c0:	2000      	movs	r0, #0
            break;
 800c2c2:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800c2c4:	4a04      	ldr	r2, [pc, #16]	@ (800c2d8 <GetLastFcntDown+0x48>)
 800c2c6:	6812      	ldr	r2, [r2, #0]
 800c2c8:	69d2      	ldr	r2, [r2, #28]
 800c2ca:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800c2cc:	2000      	movs	r0, #0
            break;
 800c2ce:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c2d0:	2009      	movs	r0, #9
 800c2d2:	4770      	bx	lr
    switch( fCntID )
 800c2d4:	2005      	movs	r0, #5
}
 800c2d6:	4770      	bx	lr
 800c2d8:	2000104c 	.word	0x2000104c

0800c2dc <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800c2dc:	b510      	push	{r4, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800c2e6:	a901      	add	r1, sp, #4
 800c2e8:	f7ff ffd2 	bl	800c290 <GetLastFcntDown>
 800c2ec:	b948      	cbnz	r0, 800c302 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800c2ee:	9b01      	ldr	r3, [sp, #4]
 800c2f0:	42a3      	cmp	r3, r4
 800c2f2:	d309      	bcc.n	800c308 <CheckFCntDown+0x2c>
 800c2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f8:	d001      	beq.n	800c2fe <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800c2fa:	2000      	movs	r0, #0
 800c2fc:	e002      	b.n	800c304 <CheckFCntDown+0x28>
        return true;
 800c2fe:	2001      	movs	r0, #1
 800c300:	e000      	b.n	800c304 <CheckFCntDown+0x28>
        return false;
 800c302:	2000      	movs	r0, #0
    }
}
 800c304:	b002      	add	sp, #8
 800c306:	bd10      	pop	{r4, pc}
        return true;
 800c308:	2001      	movs	r0, #1
 800c30a:	e7fb      	b.n	800c304 <CheckFCntDown+0x28>

0800c30c <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800c30c:	3801      	subs	r0, #1
 800c30e:	2803      	cmp	r0, #3
 800c310:	d815      	bhi.n	800c33e <UpdateFCntDown+0x32>
 800c312:	e8df f000 	tbb	[pc, r0]
 800c316:	0702      	.short	0x0702
 800c318:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800c31a:	4b09      	ldr	r3, [pc, #36]	@ (800c340 <UpdateFCntDown+0x34>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800c320:	6219      	str	r1, [r3, #32]
            break;
 800c322:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800c324:	4b06      	ldr	r3, [pc, #24]	@ (800c340 <UpdateFCntDown+0x34>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800c32a:	6219      	str	r1, [r3, #32]
            break;
 800c32c:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800c32e:	4b04      	ldr	r3, [pc, #16]	@ (800c340 <UpdateFCntDown+0x34>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800c334:	6219      	str	r1, [r3, #32]
            break;
 800c336:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800c338:	4b01      	ldr	r3, [pc, #4]	@ (800c340 <UpdateFCntDown+0x34>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800c33e:	4770      	bx	lr
 800c340:	2000104c 	.word	0x2000104c

0800c344 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800c344:	4b0a      	ldr	r3, [pc, #40]	@ (800c370 <ResetFCnts+0x2c>)
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	2300      	movs	r3, #0
 800c34a:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c34c:	f04f 31ff 	mov.w	r1, #4294967295
 800c350:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c352:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c354:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800c356:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c358:	2b00      	cmp	r3, #0
 800c35a:	dd00      	ble.n	800c35e <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800c35c:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800c35e:	1d99      	adds	r1, r3, #6
 800c360:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800c364:	f04f 30ff 	mov.w	r0, #4294967295
 800c368:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c36a:	3301      	adds	r3, #1
 800c36c:	e7f4      	b.n	800c358 <ResetFCnts+0x14>
 800c36e:	bf00      	nop
 800c370:	2000104c 	.word	0x2000104c

0800c374 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800c374:	4b03      	ldr	r3, [pc, #12]	@ (800c384 <IsJoinNonce10xOk+0x10>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800c37a:	4283      	cmp	r3, r0
 800c37c:	bf2c      	ite	cs
 800c37e:	2000      	movcs	r0, #0
 800c380:	2001      	movcc	r0, #1
 800c382:	4770      	bx	lr
 800c384:	2000104c 	.word	0x2000104c

0800c388 <ComputeCmacB0>:
{
 800c388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c38c:	b088      	sub	sp, #32
 800c38e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800c390:	b1f0      	cbz	r0, 800c3d0 <ComputeCmacB0+0x48>
 800c392:	460c      	mov	r4, r1
 800c394:	4615      	mov	r5, r2
 800c396:	461a      	mov	r2, r3
 800c398:	4680      	mov	r8, r0
 800c39a:	b1de      	cbz	r6, 800c3d4 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c39c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800c3a0:	d81a      	bhi.n	800c3d8 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800c3a2:	af04      	add	r7, sp, #16
 800c3a4:	9702      	str	r7, [sp, #8]
 800c3a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c3a8:	9301      	str	r3, [sp, #4]
 800c3aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3ac:	9300      	str	r3, [sp, #0]
 800c3ae:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 800c3b2:	4629      	mov	r1, r5
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	f7ff ff31 	bl	800c21c <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800c3ba:	9600      	str	r6, [sp, #0]
 800c3bc:	462b      	mov	r3, r5
 800c3be:	4622      	mov	r2, r4
 800c3c0:	4641      	mov	r1, r8
 800c3c2:	4638      	mov	r0, r7
 800c3c4:	f002 fb78 	bl	800eab8 <SecureElementComputeAesCmac>
 800c3c8:	b940      	cbnz	r0, 800c3dc <ComputeCmacB0+0x54>
}
 800c3ca:	b008      	add	sp, #32
 800c3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c3d0:	2009      	movs	r0, #9
 800c3d2:	e7fa      	b.n	800c3ca <ComputeCmacB0+0x42>
 800c3d4:	2009      	movs	r0, #9
 800c3d6:	e7f8      	b.n	800c3ca <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c3d8:	200d      	movs	r0, #13
 800c3da:	e7f6      	b.n	800c3ca <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c3dc:	200e      	movs	r0, #14
 800c3de:	e7f4      	b.n	800c3ca <ComputeCmacB0+0x42>

0800c3e0 <DeriveSessionKey10x>:
{
 800c3e0:	b510      	push	{r4, lr}
 800c3e2:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800c3e4:	2400      	movs	r4, #0
 800c3e6:	9400      	str	r4, [sp, #0]
 800c3e8:	9401      	str	r4, [sp, #4]
 800c3ea:	9402      	str	r4, [sp, #8]
 800c3ec:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800c3ee:	2808      	cmp	r0, #8
 800c3f0:	d003      	beq.n	800c3fa <DeriveSessionKey10x+0x1a>
 800c3f2:	2809      	cmp	r0, #9
 800c3f4:	d025      	beq.n	800c442 <DeriveSessionKey10x+0x62>
 800c3f6:	200a      	movs	r0, #10
 800c3f8:	e021      	b.n	800c43e <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800c3fa:	2401      	movs	r4, #1
 800c3fc:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800c400:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800c404:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800c408:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800c40c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800c410:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800c414:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800c418:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c41c:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800c420:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800c424:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800c428:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800c42c:	0a1b      	lsrs	r3, r3, #8
 800c42e:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800c432:	4602      	mov	r2, r0
 800c434:	2101      	movs	r1, #1
 800c436:	4668      	mov	r0, sp
 800c438:	f002 fbdc 	bl	800ebf4 <SecureElementDeriveAndStoreKey>
 800c43c:	b928      	cbnz	r0, 800c44a <DeriveSessionKey10x+0x6a>
}
 800c43e:	b004      	add	sp, #16
 800c440:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800c442:	2402      	movs	r4, #2
 800c444:	f88d 4000 	strb.w	r4, [sp]
            break;
 800c448:	e7da      	b.n	800c400 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c44a:	200e      	movs	r0, #14
 800c44c:	e7f7      	b.n	800c43e <DeriveSessionKey10x+0x5e>

0800c44e <PayloadEncrypt>:
{
 800c44e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c452:	b088      	sub	sp, #32
 800c454:	4690      	mov	r8, r2
 800c456:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    if( buffer == 0 )
 800c458:	2800      	cmp	r0, #0
 800c45a:	d052      	beq.n	800c502 <PayloadEncrypt+0xb4>
 800c45c:	460d      	mov	r5, r1
 800c45e:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800c460:	2600      	movs	r6, #0
 800c462:	9604      	str	r6, [sp, #16]
 800c464:	9605      	str	r6, [sp, #20]
 800c466:	9606      	str	r6, [sp, #24]
 800c468:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800c46a:	9600      	str	r6, [sp, #0]
 800c46c:	9601      	str	r6, [sp, #4]
 800c46e:	9602      	str	r6, [sp, #8]
 800c470:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800c472:	2701      	movs	r7, #1
 800c474:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800c478:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800c47c:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800c480:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800c484:	0a19      	lsrs	r1, r3, #8
 800c486:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800c48a:	0c19      	lsrs	r1, r3, #16
 800c48c:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800c490:	0e1b      	lsrs	r3, r3, #24
 800c492:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800c496:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800c49a:	0a13      	lsrs	r3, r2, #8
 800c49c:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800c4a0:	0c13      	lsrs	r3, r2, #16
 800c4a2:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c4a6:	0e12      	lsrs	r2, r2, #24
 800c4a8:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800c4ac:	e014      	b.n	800c4d8 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c4ae:	18f2      	adds	r2, r6, r3
 800c4b0:	5ca0      	ldrb	r0, [r4, r2]
 800c4b2:	f103 0120 	add.w	r1, r3, #32
 800c4b6:	4469      	add	r1, sp
 800c4b8:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800c4bc:	4048      	eors	r0, r1
 800c4be:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	462a      	mov	r2, r5
 800c4c6:	2d10      	cmp	r5, #16
 800c4c8:	bfa8      	it	ge
 800c4ca:	2210      	movge	r2, #16
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	dbee      	blt.n	800c4ae <PayloadEncrypt+0x60>
        size -= 16;
 800c4d0:	3d10      	subs	r5, #16
 800c4d2:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800c4d4:	3610      	adds	r6, #16
 800c4d6:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800c4d8:	2d00      	cmp	r5, #0
 800c4da:	dd0e      	ble.n	800c4fa <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800c4dc:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800c4e0:	3701      	adds	r7, #1
 800c4e2:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c4e4:	ab04      	add	r3, sp, #16
 800c4e6:	4642      	mov	r2, r8
 800c4e8:	2110      	movs	r1, #16
 800c4ea:	4668      	mov	r0, sp
 800c4ec:	f002 fb09 	bl	800eb02 <SecureElementAesEncrypt>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	d0e6      	beq.n	800c4c4 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c4f6:	200e      	movs	r0, #14
 800c4f8:	e000      	b.n	800c4fc <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800c4fa:	2000      	movs	r0, #0
}
 800c4fc:	b008      	add	sp, #32
 800c4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c502:	2009      	movs	r0, #9
 800c504:	e7fa      	b.n	800c4fc <PayloadEncrypt+0xae>

0800c506 <VerifyCmacB0>:
    if( msg == 0 )
 800c506:	b368      	cbz	r0, 800c564 <VerifyCmacB0+0x5e>
{
 800c508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c50c:	b0c8      	sub	sp, #288	@ 0x120
 800c50e:	460c      	mov	r4, r1
 800c510:	4615      	mov	r5, r2
 800c512:	461e      	mov	r6, r3
 800c514:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c516:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800c51a:	d825      	bhi.n	800c568 <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800c51c:	af04      	add	r7, sp, #16
 800c51e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800c522:	2100      	movs	r1, #0
 800c524:	4638      	mov	r0, r7
 800c526:	f002 fd24 	bl	800ef72 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800c52a:	9702      	str	r7, [sp, #8]
 800c52c:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 800c52e:	9301      	str	r3, [sp, #4]
 800c530:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	f89d 3138 	ldrb.w	r3, [sp, #312]	@ 0x138
 800c538:	4632      	mov	r2, r6
 800c53a:	4629      	mov	r1, r5
 800c53c:	4620      	mov	r0, r4
 800c53e:	f7ff fe6d 	bl	800c21c <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800c542:	4622      	mov	r2, r4
 800c544:	4641      	mov	r1, r8
 800c546:	a808      	add	r0, sp, #32
 800c548:	f002 fcfb 	bl	800ef42 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800c54c:	462b      	mov	r3, r5
 800c54e:	9a51      	ldr	r2, [sp, #324]	@ 0x144
 800c550:	f104 0110 	add.w	r1, r4, #16
 800c554:	4638      	mov	r0, r7
 800c556:	f002 fabe 	bl	800ead6 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800c55a:	b130      	cbz	r0, 800c56a <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800c55c:	2801      	cmp	r0, #1
 800c55e:	d004      	beq.n	800c56a <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c560:	200e      	movs	r0, #14
 800c562:	e002      	b.n	800c56a <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c564:	2009      	movs	r0, #9
}
 800c566:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c568:	200d      	movs	r0, #13
}
 800c56a:	b048      	add	sp, #288	@ 0x120
 800c56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c570 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800c570:	b188      	cbz	r0, 800c596 <LoRaMacCryptoInit+0x26>
{
 800c572:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800c574:	4c09      	ldr	r4, [pc, #36]	@ (800c59c <LoRaMacCryptoInit+0x2c>)
 800c576:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800c578:	2228      	movs	r2, #40	@ 0x28
 800c57a:	2100      	movs	r1, #0
 800c57c:	f002 fcf9 	bl	800ef72 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800c580:	6823      	ldr	r3, [r4, #0]
 800c582:	2201      	movs	r2, #1
 800c584:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800c586:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800c588:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800c58a:	2400      	movs	r4, #0
 800c58c:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800c58e:	f7ff fed9 	bl	800c344 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800c592:	4620      	mov	r0, r4
}
 800c594:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800c596:	2008      	movs	r0, #8
}
 800c598:	4770      	bx	lr
 800c59a:	bf00      	nop
 800c59c:	2000104c 	.word	0x2000104c

0800c5a0 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800c5a0:	4b02      	ldr	r3, [pc, #8]	@ (800c5ac <LoRaMacCryptoSetLrWanVersion+0xc>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	4770      	bx	lr
 800c5aa:	bf00      	nop
 800c5ac:	2000104c 	.word	0x2000104c

0800c5b0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800c5b0:	b130      	cbz	r0, 800c5c0 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800c5b2:	4b04      	ldr	r3, [pc, #16]	@ (800c5c4 <LoRaMacCryptoGetFCntUp+0x14>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800c5bc:	2000      	movs	r0, #0
 800c5be:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c5c0:	2009      	movs	r0, #9
}
 800c5c2:	4770      	bx	lr
 800c5c4:	2000104c 	.word	0x2000104c

0800c5c8 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800c5c8:	b530      	push	{r4, r5, lr}
 800c5ca:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800c5d0:	b1f2      	cbz	r2, 800c610 <LoRaMacCryptoGetFCntDown+0x48>
 800c5d2:	460c      	mov	r4, r1
 800c5d4:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800c5d6:	a901      	add	r1, sp, #4
 800c5d8:	f7ff fe5a 	bl	800c290 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c5dc:	b948      	cbnz	r0, 800c5f2 <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800c5de:	9b01      	ldr	r3, [sp, #4]
 800c5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5e4:	d007      	beq.n	800c5f6 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800c5e6:	b29a      	uxth	r2, r3
 800c5e8:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800c5ea:	2a00      	cmp	r2, #0
 800c5ec:	dd05      	ble.n	800c5fa <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800c5ee:	4413      	add	r3, r2
 800c5f0:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c5f2:	b003      	add	sp, #12
 800c5f4:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800c5f6:	602c      	str	r4, [r5, #0]
 800c5f8:	e7fb      	b.n	800c5f2 <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800c5fa:	b132      	cbz	r2, 800c60a <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800c5fc:	0c1b      	lsrs	r3, r3, #16
 800c5fe:	041b      	lsls	r3, r3, #16
 800c600:	4423      	add	r3, r4
 800c602:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800c606:	602b      	str	r3, [r5, #0]
 800c608:	e7f3      	b.n	800c5f2 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800c60a:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800c60c:	2007      	movs	r0, #7
 800c60e:	e7f0      	b.n	800c5f2 <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c610:	2009      	movs	r0, #9
 800c612:	e7ee      	b.n	800c5f2 <LoRaMacCryptoGetFCntDown+0x2a>

0800c614 <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800c614:	4601      	mov	r1, r0
 800c616:	b908      	cbnz	r0, 800c61c <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c618:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c61a:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c61c:	2300      	movs	r3, #0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	dd01      	ble.n	800c626 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800c622:	2000      	movs	r0, #0
 800c624:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800c626:	4a07      	ldr	r2, [pc, #28]	@ (800c644 <LoRaMacCryptoSetMulticastReference+0x30>)
 800c628:	6812      	ldr	r2, [r2, #0]
 800c62a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800c62e:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800c632:	f103 0c06 	add.w	ip, r3, #6
 800c636:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800c63a:	3204      	adds	r2, #4
 800c63c:	6242      	str	r2, [r0, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c63e:	3301      	adds	r3, #1
 800c640:	e7ed      	b.n	800c61e <LoRaMacCryptoSetMulticastReference+0xa>
 800c642:	bf00      	nop
 800c644:	2000104c 	.word	0x2000104c

0800c648 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800c648:	b1d8      	cbz	r0, 800c682 <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800c64a:	b510      	push	{r4, lr}
 800c64c:	b082      	sub	sp, #8
 800c64e:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800c650:	4b0f      	ldr	r3, [pc, #60]	@ (800c690 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	8893      	ldrh	r3, [r2, #4]
 800c656:	3301      	adds	r3, #1
 800c658:	b29b      	uxth	r3, r3
 800c65a:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800c65c:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c65e:	f000 fa32 	bl	800cac6 <LoRaMacSerializerJoinRequest>
 800c662:	b980      	cbnz	r0, 800c686 <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800c664:	4623      	mov	r3, r4
 800c666:	f853 1b18 	ldr.w	r1, [r3], #24
 800c66a:	9300      	str	r3, [sp, #0]
 800c66c:	2301      	movs	r3, #1
 800c66e:	2213      	movs	r2, #19
 800c670:	f002 fa22 	bl	800eab8 <SecureElementComputeAesCmac>
 800c674:	b950      	cbnz	r0, 800c68c <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c676:	4620      	mov	r0, r4
 800c678:	f000 fa25 	bl	800cac6 <LoRaMacSerializerJoinRequest>
 800c67c:	b120      	cbz	r0, 800c688 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c67e:	2010      	movs	r0, #16
 800c680:	e002      	b.n	800c688 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c682:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c684:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c686:	2010      	movs	r0, #16
}
 800c688:	b002      	add	sp, #8
 800c68a:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c68c:	200e      	movs	r0, #14
 800c68e:	e7fb      	b.n	800c688 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800c690:	2000104c 	.word	0x2000104c

0800c694 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800c694:	2b00      	cmp	r3, #0
 800c696:	d036      	beq.n	800c706 <LoRaMacCryptoSecureMessage+0x72>
{
 800c698:	b530      	push	{r4, r5, lr}
 800c69a:	b085      	sub	sp, #20
 800c69c:	4604      	mov	r4, r0
 800c69e:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800c6a0:	4b1d      	ldr	r3, [pc, #116]	@ (800c718 <LoRaMacCryptoSecureMessage+0x84>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	4283      	cmp	r3, r0
 800c6a8:	d82f      	bhi.n	800c70a <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800c6aa:	f895 2020 	ldrb.w	r2, [r5, #32]
 800c6ae:	b342      	cbz	r2, 800c702 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800c6b0:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800c6b2:	42a3      	cmp	r3, r4
 800c6b4:	d209      	bcs.n	800c6ca <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800c6b6:	9401      	str	r4, [sp, #4]
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	68ab      	ldr	r3, [r5, #8]
 800c6be:	f895 1028 	ldrb.w	r1, [r5, #40]	@ 0x28
 800c6c2:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800c6c4:	f7ff fec3 	bl	800c44e <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c6c8:	bb10      	cbnz	r0, 800c710 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	f000 fa31 	bl	800cb32 <LoRaMacSerializerData>
 800c6d0:	b9e8      	cbnz	r0, 800c70e <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800c6d2:	7929      	ldrb	r1, [r5, #4]
 800c6d4:	3904      	subs	r1, #4
 800c6d6:	462b      	mov	r3, r5
 800c6d8:	f853 0b2c 	ldr.w	r0, [r3], #44
 800c6dc:	9303      	str	r3, [sp, #12]
 800c6de:	9402      	str	r4, [sp, #8]
 800c6e0:	68ab      	ldr	r3, [r5, #8]
 800c6e2:	9301      	str	r3, [sp, #4]
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	2208      	movs	r2, #8
 800c6ea:	b289      	uxth	r1, r1
 800c6ec:	f7ff fe4c 	bl	800c388 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c6f0:	b970      	cbnz	r0, 800c710 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	f000 fa1d 	bl	800cb32 <LoRaMacSerializerData>
 800c6f8:	b960      	cbnz	r0, 800c714 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800c6fa:	4b07      	ldr	r3, [pc, #28]	@ (800c718 <LoRaMacCryptoSecureMessage+0x84>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800c700:	e006      	b.n	800c710 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800c702:	2208      	movs	r2, #8
 800c704:	e7d5      	b.n	800c6b2 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c706:	2009      	movs	r0, #9
}
 800c708:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800c70a:	2006      	movs	r0, #6
 800c70c:	e000      	b.n	800c710 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c70e:	2010      	movs	r0, #16
}
 800c710:	b005      	add	sp, #20
 800c712:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c714:	2010      	movs	r0, #16
 800c716:	e7fb      	b.n	800c710 <LoRaMacCryptoSecureMessage+0x7c>
 800c718:	2000104c 	.word	0x2000104c

0800c71c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800c71c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c720:	b087      	sub	sp, #28
 800c722:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
    if( macMsg == 0 )
 800c724:	2e00      	cmp	r6, #0
 800c726:	d049      	beq.n	800c7bc <LoRaMacCryptoUnsecureMessage+0xa0>
 800c728:	4605      	mov	r5, r0
 800c72a:	4688      	mov	r8, r1
 800c72c:	4617      	mov	r7, r2
 800c72e:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800c730:	4619      	mov	r1, r3
 800c732:	4610      	mov	r0, r2
 800c734:	f7ff fdd2 	bl	800c2dc <CheckFCntDown>
 800c738:	2800      	cmp	r0, #0
 800c73a:	d041      	beq.n	800c7c0 <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c73c:	4630      	mov	r0, r6
 800c73e:	f000 f963 	bl	800ca08 <LoRaMacParserData>
 800c742:	2800      	cmp	r0, #0
 800c744:	d141      	bne.n	800c7ca <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800c746:	a905      	add	r1, sp, #20
 800c748:	4628      	mov	r0, r5
 800c74a:	f7ff fd8b 	bl	800c264 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c74e:	4605      	mov	r5, r0
 800c750:	2800      	cmp	r0, #0
 800c752:	d136      	bne.n	800c7c2 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800c754:	9b05      	ldr	r3, [sp, #20]
 800c756:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800c75a:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800c75c:	68b3      	ldr	r3, [r6, #8]
 800c75e:	4543      	cmp	r3, r8
 800c760:	d135      	bne.n	800c7ce <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800c762:	7b33      	ldrb	r3, [r6, #12]
 800c764:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800c768:	491a      	ldr	r1, [pc, #104]	@ (800c7d4 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800c76a:	6809      	ldr	r1, [r1, #0]
 800c76c:	7889      	ldrb	r1, [r1, #2]
 800c76e:	b901      	cbnz	r1, 800c772 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800c770:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800c772:	7931      	ldrb	r1, [r6, #4]
 800c774:	3904      	subs	r1, #4
 800c776:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 800c778:	9003      	str	r0, [sp, #12]
 800c77a:	9402      	str	r4, [sp, #8]
 800c77c:	f8cd 8004 	str.w	r8, [sp, #4]
 800c780:	2001      	movs	r0, #1
 800c782:	9000      	str	r0, [sp, #0]
 800c784:	b289      	uxth	r1, r1
 800c786:	6830      	ldr	r0, [r6, #0]
 800c788:	f7ff febd 	bl	800c506 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c78c:	4605      	mov	r5, r0
 800c78e:	b9c0      	cbnz	r0, 800c7c2 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800c790:	f896 3020 	ldrb.w	r3, [r6, #32]
 800c794:	b90b      	cbnz	r3, 800c79a <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800c796:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800c79a:	9401      	str	r4, [sp, #4]
 800c79c:	2301      	movs	r3, #1
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	4643      	mov	r3, r8
 800c7a2:	464a      	mov	r2, r9
 800c7a4:	f896 1028 	ldrb.w	r1, [r6, #40]	@ 0x28
 800c7a8:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800c7aa:	f7ff fe50 	bl	800c44e <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c7ae:	4605      	mov	r5, r0
 800c7b0:	b938      	cbnz	r0, 800c7c2 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	f7ff fda9 	bl	800c30c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800c7ba:	e002      	b.n	800c7c2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c7bc:	2509      	movs	r5, #9
 800c7be:	e000      	b.n	800c7c2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800c7c0:	2506      	movs	r5, #6
}
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	b007      	add	sp, #28
 800c7c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800c7ca:	250f      	movs	r5, #15
 800c7cc:	e7f9      	b.n	800c7c2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800c7ce:	2502      	movs	r5, #2
 800c7d0:	e7f7      	b.n	800c7c2 <LoRaMacCryptoUnsecureMessage+0xa6>
 800c7d2:	bf00      	nop
 800c7d4:	2000104c 	.word	0x2000104c

0800c7d8 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800c7d8:	b500      	push	{lr}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800c7de:	2300      	movs	r3, #0
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	9301      	str	r3, [sp, #4]
 800c7e4:	9302      	str	r3, [sp, #8]
 800c7e6:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800c7e8:	290b      	cmp	r1, #11
 800c7ea:	d007      	beq.n	800c7fc <LoRaMacCryptoDeriveLifeTimeKey+0x24>
 800c7ec:	290c      	cmp	r1, #12
 800c7ee:	d013      	beq.n	800c818 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 800c7f0:	290a      	cmp	r1, #10
 800c7f2:	d00c      	beq.n	800c80e <LoRaMacCryptoDeriveLifeTimeKey+0x36>
 800c7f4:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c7f6:	b005      	add	sp, #20
 800c7f8:	f85d fb04 	ldr.w	pc, [sp], #4
            if( versionMinor == 1 )
 800c7fc:	2801      	cmp	r0, #1
 800c7fe:	d001      	beq.n	800c804 <LoRaMacCryptoDeriveLifeTimeKey+0x2c>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800c800:	2100      	movs	r1, #0
 800c802:	e00a      	b.n	800c81a <LoRaMacCryptoDeriveLifeTimeKey+0x42>
                compBase[0] = 0x20;
 800c804:	2320      	movs	r3, #32
 800c806:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800c80a:	2100      	movs	r1, #0
 800c80c:	e005      	b.n	800c81a <LoRaMacCryptoDeriveLifeTimeKey+0x42>
            compBase[0] = 0x30;
 800c80e:	2330      	movs	r3, #48	@ 0x30
 800c810:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800c814:	2100      	movs	r1, #0
            break;
 800c816:	e000      	b.n	800c81a <LoRaMacCryptoDeriveLifeTimeKey+0x42>
    switch( keyID )
 800c818:	210b      	movs	r1, #11
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800c81a:	4668      	mov	r0, sp
 800c81c:	f002 f9ea 	bl	800ebf4 <SecureElementDeriveAndStoreKey>
 800c820:	2800      	cmp	r0, #0
 800c822:	d0e8      	beq.n	800c7f6 <LoRaMacCryptoDeriveLifeTimeKey+0x1e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c824:	200e      	movs	r0, #14
 800c826:	e7e6      	b.n	800c7f6 <LoRaMacCryptoDeriveLifeTimeKey+0x1e>

0800c828 <LoRaMacCryptoSetKey>:
{
 800c828:	b510      	push	{r4, lr}
 800c82a:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800c82c:	f002 f9a0 	bl	800eb70 <SecureElementSetKey>
 800c830:	b998      	cbnz	r0, 800c85a <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 800c832:	b104      	cbz	r4, 800c836 <LoRaMacCryptoSetKey+0xe>
}
 800c834:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c836:	4b0c      	ldr	r3, [pc, #48]	@ (800c868 <LoRaMacCryptoSetKey+0x40>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	210b      	movs	r1, #11
 800c83c:	7898      	ldrb	r0, [r3, #2]
 800c83e:	f7ff ffcb 	bl	800c7d8 <LoRaMacCryptoDeriveLifeTimeKey>
 800c842:	b960      	cbnz	r0, 800c85e <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c844:	210c      	movs	r1, #12
 800c846:	f7ff ffc7 	bl	800c7d8 <LoRaMacCryptoDeriveLifeTimeKey>
 800c84a:	b950      	cbnz	r0, 800c862 <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c84c:	210a      	movs	r1, #10
 800c84e:	f7ff ffc3 	bl	800c7d8 <LoRaMacCryptoDeriveLifeTimeKey>
 800c852:	2800      	cmp	r0, #0
 800c854:	d0ee      	beq.n	800c834 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c856:	200e      	movs	r0, #14
 800c858:	e7ec      	b.n	800c834 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c85a:	200e      	movs	r0, #14
 800c85c:	e7ea      	b.n	800c834 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c85e:	200e      	movs	r0, #14
 800c860:	e7e8      	b.n	800c834 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c862:	200e      	movs	r0, #14
 800c864:	e7e6      	b.n	800c834 <LoRaMacCryptoSetKey+0xc>
 800c866:	bf00      	nop
 800c868:	2000104c 	.word	0x2000104c

0800c86c <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800c86c:	2a00      	cmp	r2, #0
 800c86e:	d06c      	beq.n	800c94a <LoRaMacCryptoHandleJoinAccept+0xde>
{
 800c870:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c872:	b08f      	sub	sp, #60	@ 0x3c
 800c874:	4607      	mov	r7, r0
 800c876:	460d      	mov	r5, r1
 800c878:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800c87a:	2900      	cmp	r1, #0
 800c87c:	d067      	beq.n	800c94e <LoRaMacCryptoHandleJoinAccept+0xe2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800c87e:	2600      	movs	r6, #0
 800c880:	9605      	str	r6, [sp, #20]
 800c882:	221d      	movs	r2, #29
 800c884:	4631      	mov	r1, r6
 800c886:	a806      	add	r0, sp, #24
 800c888:	f004 ffea 	bl	8011860 <memset>
    uint8_t versionMinor         = 0;
 800c88c:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800c890:	4b33      	ldr	r3, [pc, #204]	@ (800c960 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800c896:	f10d 0313 	add.w	r3, sp, #19
 800c89a:	9302      	str	r3, [sp, #8]
 800c89c:	ab05      	add	r3, sp, #20
 800c89e:	9301      	str	r3, [sp, #4]
 800c8a0:	7923      	ldrb	r3, [r4, #4]
 800c8a2:	9300      	str	r3, [sp, #0]
 800c8a4:	6823      	ldr	r3, [r4, #0]
 800c8a6:	4632      	mov	r2, r6
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	4638      	mov	r0, r7
 800c8ac:	f002 f9c2 	bl	800ec34 <SecureElementProcessJoinAccept>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d14e      	bne.n	800c952 <LoRaMacCryptoHandleJoinAccept+0xe6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800c8b4:	7922      	ldrb	r2, [r4, #4]
 800c8b6:	a905      	add	r1, sp, #20
 800c8b8:	6820      	ldr	r0, [r4, #0]
 800c8ba:	f002 fb42 	bl	800ef42 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f000 f850 	bl	800c964 <LoRaMacParserJoinAccept>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	d147      	bne.n	800c958 <LoRaMacCryptoHandleJoinAccept+0xec>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800c8c8:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800c8ca:	79e3      	ldrb	r3, [r4, #7]
 800c8cc:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800c8d0:	7a23      	ldrb	r3, [r4, #8]
 800c8d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 800c8d6:	4628      	mov	r0, r5
 800c8d8:	f7ff fd4c 	bl	800c374 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	d03d      	beq.n	800c95c <LoRaMacCryptoHandleJoinAccept+0xf0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800c8e0:	4b1f      	ldr	r3, [pc, #124]	@ (800c960 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800c8e6:	210b      	movs	r1, #11
 800c8e8:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800c8ec:	f7ff ff74 	bl	800c7d8 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c8f0:	bb80      	cbnz	r0, 800c954 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800c8f2:	210c      	movs	r1, #12
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	f7ff ff6f 	bl	800c7d8 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c8fa:	bb58      	cbnz	r0, 800c954 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800c8fc:	210a      	movs	r1, #10
 800c8fe:	2000      	movs	r0, #0
 800c900:	f7ff ff6a 	bl	800c7d8 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c904:	bb30      	cbnz	r0, 800c954 <LoRaMacCryptoHandleJoinAccept+0xe8>
        netID = ( uint32_t )macMsg->NetID[0];
 800c906:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800c908:	7aa2      	ldrb	r2, [r4, #10]
 800c90a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800c90e:	7ae2      	ldrb	r2, [r4, #11]
 800c910:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800c914:	4633      	mov	r3, r6
 800c916:	4622      	mov	r2, r4
 800c918:	4629      	mov	r1, r5
 800c91a:	2009      	movs	r0, #9
 800c91c:	f7ff fd60 	bl	800c3e0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c920:	b9c0      	cbnz	r0, 800c954 <LoRaMacCryptoHandleJoinAccept+0xe8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800c922:	4633      	mov	r3, r6
 800c924:	4622      	mov	r2, r4
 800c926:	4629      	mov	r1, r5
 800c928:	2008      	movs	r0, #8
 800c92a:	f7ff fd59 	bl	800c3e0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c92e:	b988      	cbnz	r0, 800c954 <LoRaMacCryptoHandleJoinAccept+0xe8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800c930:	4b0b      	ldr	r3, [pc, #44]	@ (800c960 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800c938:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800c93a:	2200      	movs	r2, #0
 800c93c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c93e:	f04f 32ff 	mov.w	r2, #4294967295
 800c942:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c944:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c946:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800c948:	e004      	b.n	800c954 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c94a:	2009      	movs	r0, #9
}
 800c94c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c94e:	2009      	movs	r0, #9
 800c950:	e000      	b.n	800c954 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c952:	200e      	movs	r0, #14
}
 800c954:	b00f      	add	sp, #60	@ 0x3c
 800c956:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800c958:	200f      	movs	r0, #15
 800c95a:	e7fb      	b.n	800c954 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800c95c:	2003      	movs	r0, #3
 800c95e:	e7f9      	b.n	800c954 <LoRaMacCryptoHandleJoinAccept+0xe8>
 800c960:	2000104c 	.word	0x2000104c

0800c964 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c964:	2800      	cmp	r0, #0
 800c966:	d049      	beq.n	800c9fc <LoRaMacParserJoinAccept+0x98>
{
 800c968:	b510      	push	{r4, lr}
 800c96a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c96c:	6801      	ldr	r1, [r0, #0]
 800c96e:	2900      	cmp	r1, #0
 800c970:	d046      	beq.n	800ca00 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c972:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c976:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800c978:	2203      	movs	r2, #3
 800c97a:	3006      	adds	r0, #6
 800c97c:	f002 fae1 	bl	800ef42 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800c980:	4620      	mov	r0, r4
 800c982:	f850 1b09 	ldr.w	r1, [r0], #9
 800c986:	2203      	movs	r2, #3
 800c988:	3104      	adds	r1, #4
 800c98a:	f002 fada 	bl	800ef42 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c98e:	6821      	ldr	r1, [r4, #0]
 800c990:	79cb      	ldrb	r3, [r1, #7]
 800c992:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c994:	7a0a      	ldrb	r2, [r1, #8]
 800c996:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c99a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c99c:	7a4a      	ldrb	r2, [r1, #9]
 800c99e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9a2:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c9a4:	7a8a      	ldrb	r2, [r1, #10]
 800c9a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c9aa:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800c9ac:	7acb      	ldrb	r3, [r1, #11]
 800c9ae:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c9b0:	7b0b      	ldrb	r3, [r1, #12]
 800c9b2:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800c9b4:	7923      	ldrb	r3, [r4, #4]
 800c9b6:	2b21      	cmp	r3, #33	@ 0x21
 800c9b8:	d018      	beq.n	800c9ec <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800c9ba:	2b11      	cmp	r3, #17
 800c9bc:	dc22      	bgt.n	800ca04 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c9be:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c9c0:	6821      	ldr	r1, [r4, #0]
 800c9c2:	f102 0c01 	add.w	ip, r2, #1
 800c9c6:	5c8b      	ldrb	r3, [r1, r2]
 800c9c8:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c9ca:	1c90      	adds	r0, r2, #2
 800c9cc:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800c9d0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800c9d4:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c9d6:	3203      	adds	r2, #3
 800c9d8:	5c08      	ldrb	r0, [r1, r0]
 800c9da:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c9de:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c9e0:	5c8a      	ldrb	r2, [r1, r2]
 800c9e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c9e6:	6263      	str	r3, [r4, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 800c9e8:	2000      	movs	r0, #0
}
 800c9ea:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800c9ec:	2210      	movs	r2, #16
 800c9ee:	310d      	adds	r1, #13
 800c9f0:	f104 0012 	add.w	r0, r4, #18
 800c9f4:	f002 faa5 	bl	800ef42 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800c9f8:	221d      	movs	r2, #29
 800c9fa:	e7e1      	b.n	800c9c0 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800c9fc:	2002      	movs	r0, #2
}
 800c9fe:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800ca00:	2002      	movs	r0, #2
 800ca02:	e7f2      	b.n	800c9ea <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800ca04:	2001      	movs	r0, #1
 800ca06:	e7f0      	b.n	800c9ea <LoRaMacParserJoinAccept+0x86>

0800ca08 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	d058      	beq.n	800cabe <LoRaMacParserData+0xb6>
{
 800ca0c:	b510      	push	{r4, lr}
 800ca0e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ca10:	6801      	ldr	r1, [r0, #0]
 800ca12:	2900      	cmp	r1, #0
 800ca14:	d055      	beq.n	800cac2 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ca16:	780b      	ldrb	r3, [r1, #0]
 800ca18:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800ca1a:	784b      	ldrb	r3, [r1, #1]
 800ca1c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ca1e:	788a      	ldrb	r2, [r1, #2]
 800ca20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ca24:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ca26:	78ca      	ldrb	r2, [r1, #3]
 800ca28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca2c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ca2e:	790a      	ldrb	r2, [r1, #4]
 800ca30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ca34:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800ca36:	794b      	ldrb	r3, [r1, #5]
 800ca38:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800ca3a:	798b      	ldrb	r3, [r1, #6]
 800ca3c:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800ca3e:	79ca      	ldrb	r2, [r1, #7]
 800ca40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ca44:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ca46:	7b02      	ldrb	r2, [r0, #12]
 800ca48:	f002 020f 	and.w	r2, r2, #15
 800ca4c:	3108      	adds	r1, #8
 800ca4e:	3010      	adds	r0, #16
 800ca50:	f002 fa77 	bl	800ef42 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ca54:	7b23      	ldrb	r3, [r4, #12]
 800ca56:	f003 030f 	and.w	r3, r3, #15
 800ca5a:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800ca5e:	2200      	movs	r2, #0
 800ca60:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800ca64:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800ca68:	7922      	ldrb	r2, [r4, #4]
 800ca6a:	1a11      	subs	r1, r2, r0
 800ca6c:	2904      	cmp	r1, #4
 800ca6e:	dc16      	bgt.n	800ca9e <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800ca70:	6822      	ldr	r2, [r4, #0]
 800ca72:	7923      	ldrb	r3, [r4, #4]
 800ca74:	441a      	add	r2, r3
 800ca76:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800ca7a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800ca7c:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800ca80:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ca84:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800ca86:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800ca8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ca8e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800ca90:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800ca94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ca98:	62e3      	str	r3, [r4, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800ca9a:	2000      	movs	r0, #0
}
 800ca9c:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800ca9e:	6821      	ldr	r1, [r4, #0]
 800caa0:	3309      	adds	r3, #9
 800caa2:	5c08      	ldrb	r0, [r1, r0]
 800caa4:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800caa8:	1ad2      	subs	r2, r2, r3
 800caaa:	b2d2      	uxtb	r2, r2
 800caac:	3a04      	subs	r2, #4
 800caae:	b2d2      	uxtb	r2, r2
 800cab0:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800cab4:	4419      	add	r1, r3
 800cab6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800cab8:	f002 fa43 	bl	800ef42 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800cabc:	e7d8      	b.n	800ca70 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800cabe:	2002      	movs	r0, #2
}
 800cac0:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800cac2:	2002      	movs	r0, #2
 800cac4:	e7ea      	b.n	800ca9c <LoRaMacParserData+0x94>

0800cac6 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800cac6:	b370      	cbz	r0, 800cb26 <LoRaMacSerializerJoinRequest+0x60>
{
 800cac8:	b510      	push	{r4, lr}
 800caca:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800cacc:	6803      	ldr	r3, [r0, #0]
 800cace:	b363      	cbz	r3, 800cb2a <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800cad0:	7902      	ldrb	r2, [r0, #4]
 800cad2:	2a16      	cmp	r2, #22
 800cad4:	d92b      	bls.n	800cb2e <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800cad6:	7942      	ldrb	r2, [r0, #5]
 800cad8:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800cada:	4601      	mov	r1, r0
 800cadc:	f851 0b06 	ldr.w	r0, [r1], #6
 800cae0:	2208      	movs	r2, #8
 800cae2:	3001      	adds	r0, #1
 800cae4:	f002 fa38 	bl	800ef58 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800cae8:	4621      	mov	r1, r4
 800caea:	f851 0b0e 	ldr.w	r0, [r1], #14
 800caee:	2208      	movs	r2, #8
 800caf0:	3009      	adds	r0, #9
 800caf2:	f002 fa31 	bl	800ef58 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800caf6:	8ae2      	ldrh	r2, [r4, #22]
 800caf8:	6823      	ldr	r3, [r4, #0]
 800cafa:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800cafc:	8ae3      	ldrh	r3, [r4, #22]
 800cafe:	6822      	ldr	r2, [r4, #0]
 800cb00:	0a1b      	lsrs	r3, r3, #8
 800cb02:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800cb04:	69a2      	ldr	r2, [r4, #24]
 800cb06:	6823      	ldr	r3, [r4, #0]
 800cb08:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800cb0a:	69a3      	ldr	r3, [r4, #24]
 800cb0c:	0a1b      	lsrs	r3, r3, #8
 800cb0e:	6822      	ldr	r2, [r4, #0]
 800cb10:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800cb12:	8b62      	ldrh	r2, [r4, #26]
 800cb14:	6823      	ldr	r3, [r4, #0]
 800cb16:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800cb18:	7ee2      	ldrb	r2, [r4, #27]
 800cb1a:	6823      	ldr	r3, [r4, #0]
 800cb1c:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800cb1e:	2317      	movs	r3, #23
 800cb20:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800cb22:	2000      	movs	r0, #0
}
 800cb24:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800cb26:	2001      	movs	r0, #1
}
 800cb28:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800cb2a:	2001      	movs	r0, #1
 800cb2c:	e7fa      	b.n	800cb24 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800cb2e:	2002      	movs	r0, #2
 800cb30:	e7f8      	b.n	800cb24 <LoRaMacSerializerJoinRequest+0x5e>

0800cb32 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800cb32:	2800      	cmp	r0, #0
 800cb34:	d066      	beq.n	800cc04 <LoRaMacSerializerData+0xd2>
{
 800cb36:	b538      	push	{r3, r4, r5, lr}
 800cb38:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800cb3a:	6801      	ldr	r1, [r0, #0]
 800cb3c:	2900      	cmp	r1, #0
 800cb3e:	d063      	beq.n	800cc08 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800cb40:	7b02      	ldrb	r2, [r0, #12]
 800cb42:	f002 020f 	and.w	r2, r2, #15
 800cb46:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800cb4a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800cb4e:	b10b      	cbz	r3, 800cb54 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800cb50:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800cb54:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800cb56:	3304      	adds	r3, #4
 800cb58:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800cb5a:	7922      	ldrb	r2, [r4, #4]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d355      	bcc.n	800cc0c <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800cb60:	7963      	ldrb	r3, [r4, #5]
 800cb62:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800cb64:	68a2      	ldr	r2, [r4, #8]
 800cb66:	6823      	ldr	r3, [r4, #0]
 800cb68:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800cb6a:	68a3      	ldr	r3, [r4, #8]
 800cb6c:	0a1b      	lsrs	r3, r3, #8
 800cb6e:	6822      	ldr	r2, [r4, #0]
 800cb70:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800cb72:	8962      	ldrh	r2, [r4, #10]
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800cb78:	7ae2      	ldrb	r2, [r4, #11]
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800cb7e:	6823      	ldr	r3, [r4, #0]
 800cb80:	7b22      	ldrb	r2, [r4, #12]
 800cb82:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800cb84:	89e2      	ldrh	r2, [r4, #14]
 800cb86:	6823      	ldr	r3, [r4, #0]
 800cb88:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800cb8a:	89e3      	ldrh	r3, [r4, #14]
 800cb8c:	6822      	ldr	r2, [r4, #0]
 800cb8e:	0a1b      	lsrs	r3, r3, #8
 800cb90:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800cb92:	4621      	mov	r1, r4
 800cb94:	f851 0b10 	ldr.w	r0, [r1], #16
 800cb98:	7b22      	ldrb	r2, [r4, #12]
 800cb9a:	f002 020f 	and.w	r2, r2, #15
 800cb9e:	3008      	adds	r0, #8
 800cba0:	f002 f9cf 	bl	800ef42 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800cba4:	7b23      	ldrb	r3, [r4, #12]
 800cba6:	f003 030f 	and.w	r3, r3, #15
 800cbaa:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800cbae:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800cbb2:	b12a      	cbz	r2, 800cbc0 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800cbb4:	6822      	ldr	r2, [r4, #0]
 800cbb6:	f894 1020 	ldrb.w	r1, [r4, #32]
 800cbba:	5551      	strb	r1, [r2, r5]
 800cbbc:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800cbc0:	6820      	ldr	r0, [r4, #0]
 800cbc2:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800cbc6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800cbc8:	4428      	add	r0, r5
 800cbca:	f002 f9ba 	bl	800ef42 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800cbce:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800cbd2:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800cbd4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800cbd6:	6821      	ldr	r1, [r4, #0]
 800cbd8:	1c5a      	adds	r2, r3, #1
 800cbda:	b292      	uxth	r2, r2
 800cbdc:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800cbde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cbe0:	0a08      	lsrs	r0, r1, #8
 800cbe2:	6825      	ldr	r5, [r4, #0]
 800cbe4:	1c99      	adds	r1, r3, #2
 800cbe6:	b289      	uxth	r1, r1
 800cbe8:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800cbea:	8de5      	ldrh	r5, [r4, #46]	@ 0x2e
 800cbec:	6820      	ldr	r0, [r4, #0]
 800cbee:	1cda      	adds	r2, r3, #3
 800cbf0:	b292      	uxth	r2, r2
 800cbf2:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800cbf4:	f894 002f 	ldrb.w	r0, [r4, #47]	@ 0x2f
 800cbf8:	6821      	ldr	r1, [r4, #0]
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800cbfe:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800cc00:	2000      	movs	r0, #0
}
 800cc02:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800cc04:	2001      	movs	r0, #1
}
 800cc06:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800cc08:	2001      	movs	r0, #1
 800cc0a:	e7fa      	b.n	800cc02 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800cc0c:	2002      	movs	r0, #2
 800cc0e:	e7f8      	b.n	800cc02 <LoRaMacSerializerData+0xd0>

0800cc10 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800cc10:	4b02      	ldr	r3, [pc, #8]	@ (800cc1c <NvmDataMgmtEvent+0xc>)
 800cc12:	881a      	ldrh	r2, [r3, #0]
 800cc14:	4310      	orrs	r0, r2
 800cc16:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800cc18:	4770      	bx	lr
 800cc1a:	bf00      	nop
 800cc1c:	20001050 	.word	0x20001050

0800cc20 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800cc20:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800cc22:	4b06      	ldr	r3, [pc, #24]	@ (800cc3c <NvmDataMgmtStoreBegin+0x1c>)
 800cc24:	881b      	ldrh	r3, [r3, #0]
 800cc26:	b11b      	cbz	r3, 800cc30 <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800cc28:	f7fe f892 	bl	800ad50 <LoRaMacStop>
 800cc2c:	b918      	cbnz	r0, 800cc36 <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800cc2e:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800cc30:	f06f 0001 	mvn.w	r0, #1
 800cc34:	e7fb      	b.n	800cc2e <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800cc36:	f06f 0002 	mvn.w	r0, #2
 800cc3a:	e7f8      	b.n	800cc2e <NvmDataMgmtStoreBegin+0xe>
 800cc3c:	20001050 	.word	0x20001050

0800cc40 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800cc40:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800cc42:	2400      	movs	r4, #0
 800cc44:	4b02      	ldr	r3, [pc, #8]	@ (800cc50 <NvmDataMgmtStoreEnd+0x10>)
 800cc46:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800cc48:	f7fe f876 	bl	800ad38 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	bd10      	pop	{r4, pc}
 800cc50:	20001050 	.word	0x20001050

0800cc54 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800cc54:	2804      	cmp	r0, #4
 800cc56:	d001      	beq.n	800cc5c <RegionIsActive+0x8>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800cc58:	2000      	movs	r0, #0
        }
    }
}
 800cc5a:	4770      	bx	lr
        EU433_IS_ACTIVE( );
 800cc5c:	2001      	movs	r0, #1
 800cc5e:	4770      	bx	lr

0800cc60 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800cc60:	b500      	push	{lr}
 800cc62:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 800cc64:	2300      	movs	r3, #0
 800cc66:	9300      	str	r3, [sp, #0]
    switch( region )
 800cc68:	2804      	cmp	r0, #4
 800cc6a:	d005      	beq.n	800cc78 <RegionGetPhyParam+0x18>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800cc6c:	9b00      	ldr	r3, [sp, #0]
 800cc6e:	9301      	str	r3, [sp, #4]
        }
    }
}
 800cc70:	9801      	ldr	r0, [sp, #4]
 800cc72:	b003      	add	sp, #12
 800cc74:	f85d fb04 	ldr.w	pc, [sp], #4
        EU433_GET_PHY_PARAM( );
 800cc78:	4608      	mov	r0, r1
 800cc7a:	f000 fcd1 	bl	800d620 <RegionEU433GetPhyParam>
 800cc7e:	9001      	str	r0, [sp, #4]
 800cc80:	e7f6      	b.n	800cc70 <RegionGetPhyParam+0x10>

0800cc82 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 800cc82:	2804      	cmp	r0, #4
 800cc84:	d000      	beq.n	800cc88 <RegionSetBandTxDone+0x6>
 800cc86:	4770      	bx	lr
{
 800cc88:	b508      	push	{r3, lr}
    {
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
 800cc8a:	4608      	mov	r0, r1
 800cc8c:	f000 fd86 	bl	800d79c <RegionEU433SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800cc90:	bd08      	pop	{r3, pc}

0800cc92 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 800cc92:	2804      	cmp	r0, #4
 800cc94:	d000      	beq.n	800cc98 <RegionInitDefaults+0x6>
 800cc96:	4770      	bx	lr
{
 800cc98:	b508      	push	{r3, lr}
    {
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
 800cc9a:	4608      	mov	r0, r1
 800cc9c:	f000 fd9c 	bl	800d7d8 <RegionEU433InitDefaults>
        default:
        {
            break;
        }
    }
}
 800cca0:	bd08      	pop	{r3, pc}

0800cca2 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 800cca2:	2804      	cmp	r0, #4
 800cca4:	d001      	beq.n	800ccaa <RegionVerify+0x8>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800cca6:	2000      	movs	r0, #0
        }
    }
}
 800cca8:	4770      	bx	lr
{
 800ccaa:	b508      	push	{r3, lr}
 800ccac:	460b      	mov	r3, r1
        EU433_VERIFY( );
 800ccae:	4611      	mov	r1, r2
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f000 fdf3 	bl	800d89c <RegionEU433Verify>
}
 800ccb6:	bd08      	pop	{r3, pc}

0800ccb8 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 800ccb8:	2804      	cmp	r0, #4
 800ccba:	d000      	beq.n	800ccbe <RegionApplyCFList+0x6>
 800ccbc:	4770      	bx	lr
{
 800ccbe:	b508      	push	{r3, lr}
    {
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
 800ccc0:	4608      	mov	r0, r1
 800ccc2:	f001 f99d 	bl	800e000 <RegionEU433ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800ccc6:	bd08      	pop	{r3, pc}

0800ccc8 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 800ccc8:	2804      	cmp	r0, #4
 800ccca:	d001      	beq.n	800ccd0 <RegionChanMaskSet+0x8>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800cccc:	2000      	movs	r0, #0
        }
    }
}
 800ccce:	4770      	bx	lr
{
 800ccd0:	b508      	push	{r3, lr}
        EU433_CHAN_MASK_SET( );
 800ccd2:	4608      	mov	r0, r1
 800ccd4:	f000 fe20 	bl	800d918 <RegionEU433ChanMaskSet>
}
 800ccd8:	bd08      	pop	{r3, pc}

0800ccda <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    switch( region )
 800ccda:	2804      	cmp	r0, #4
 800ccdc:	d000      	beq.n	800cce0 <RegionComputeRxWindowParameters+0x6>
 800ccde:	4770      	bx	lr
{
 800cce0:	b508      	push	{r3, lr}
 800cce2:	468c      	mov	ip, r1
 800cce4:	4611      	mov	r1, r2
 800cce6:	461a      	mov	r2, r3
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
 800cce8:	9b02      	ldr	r3, [sp, #8]
 800ccea:	4660      	mov	r0, ip
 800ccec:	f000 fe32 	bl	800d954 <RegionEU433ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800ccf0:	bd08      	pop	{r3, pc}

0800ccf2 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 800ccf2:	2804      	cmp	r0, #4
 800ccf4:	d001      	beq.n	800ccfa <RegionRxConfig+0x8>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800ccf6:	2000      	movs	r0, #0
        }
    }
}
 800ccf8:	4770      	bx	lr
{
 800ccfa:	b508      	push	{r3, lr}
 800ccfc:	460b      	mov	r3, r1
        EU433_RX_CONFIG( );
 800ccfe:	4611      	mov	r1, r2
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 fe5d 	bl	800d9c0 <RegionEU433RxConfig>
}
 800cd06:	bd08      	pop	{r3, pc}

0800cd08 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 800cd08:	2804      	cmp	r0, #4
 800cd0a:	d001      	beq.n	800cd10 <RegionTxConfig+0x8>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800cd0c:	2000      	movs	r0, #0
        }
    }
}
 800cd0e:	4770      	bx	lr
{
 800cd10:	b508      	push	{r3, lr}
 800cd12:	468c      	mov	ip, r1
 800cd14:	4611      	mov	r1, r2
        EU433_TX_CONFIG( );
 800cd16:	461a      	mov	r2, r3
 800cd18:	4660      	mov	r0, ip
 800cd1a:	f000 fed5 	bl	800dac8 <RegionEU433TxConfig>
}
 800cd1e:	bd08      	pop	{r3, pc}

0800cd20 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    switch( region )
 800cd20:	2804      	cmp	r0, #4
 800cd22:	d001      	beq.n	800cd28 <RegionLinkAdrReq+0x8>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800cd24:	2000      	movs	r0, #0
        }
    }
}
 800cd26:	4770      	bx	lr
{
 800cd28:	b500      	push	{lr}
 800cd2a:	b083      	sub	sp, #12
 800cd2c:	468c      	mov	ip, r1
 800cd2e:	4611      	mov	r1, r2
 800cd30:	461a      	mov	r2, r3
        EU433_LINK_ADR_REQ( );
 800cd32:	9b05      	ldr	r3, [sp, #20]
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	9b04      	ldr	r3, [sp, #16]
 800cd38:	4660      	mov	r0, ip
 800cd3a:	f000 ff5d 	bl	800dbf8 <RegionEU433LinkAdrReq>
}
 800cd3e:	b003      	add	sp, #12
 800cd40:	f85d fb04 	ldr.w	pc, [sp], #4

0800cd44 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 800cd44:	2804      	cmp	r0, #4
 800cd46:	d001      	beq.n	800cd4c <RegionRxParamSetupReq+0x8>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800cd48:	2000      	movs	r0, #0
        }
    }
}
 800cd4a:	4770      	bx	lr
{
 800cd4c:	b508      	push	{r3, lr}
        EU433_RX_PARAM_SETUP_REQ( );
 800cd4e:	4608      	mov	r0, r1
 800cd50:	f001 f818 	bl	800dd84 <RegionEU433RxParamSetupReq>
}
 800cd54:	bd08      	pop	{r3, pc}

0800cd56 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 800cd56:	2804      	cmp	r0, #4
 800cd58:	d001      	beq.n	800cd5e <RegionNewChannelReq+0x8>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800cd5a:	2000      	movs	r0, #0
        }
    }
}
 800cd5c:	4770      	bx	lr
{
 800cd5e:	b508      	push	{r3, lr}
        EU433_NEW_CHANNEL_REQ( );
 800cd60:	4608      	mov	r0, r1
 800cd62:	f001 f98e 	bl	800e082 <RegionEU433NewChannelReq>
}
 800cd66:	bd08      	pop	{r3, pc}

0800cd68 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 800cd68:	2804      	cmp	r0, #4
 800cd6a:	d001      	beq.n	800cd70 <RegionTxParamSetupReq+0x8>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800cd6c:	2000      	movs	r0, #0
        }
    }
}
 800cd6e:	4770      	bx	lr
{
 800cd70:	b508      	push	{r3, lr}
        EU433_TX_PARAM_SETUP_REQ( );
 800cd72:	4608      	mov	r0, r1
 800cd74:	f001 f823 	bl	800ddbe <RegionEU433TxParamSetupReq>
}
 800cd78:	bd08      	pop	{r3, pc}

0800cd7a <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 800cd7a:	2804      	cmp	r0, #4
 800cd7c:	d001      	beq.n	800cd82 <RegionDlChannelReq+0x8>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800cd7e:	2000      	movs	r0, #0
        }
    }
}
 800cd80:	4770      	bx	lr
{
 800cd82:	b508      	push	{r3, lr}
        EU433_DL_CHANNEL_REQ( );
 800cd84:	4608      	mov	r0, r1
 800cd86:	f001 f81d 	bl	800ddc4 <RegionEU433DlChannelReq>
}
 800cd8a:	bd08      	pop	{r3, pc}

0800cd8c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 800cd8c:	2804      	cmp	r0, #4
 800cd8e:	d001      	beq.n	800cd94 <RegionAlternateDr+0x8>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800cd90:	2000      	movs	r0, #0
        }
    }
}
 800cd92:	4770      	bx	lr
{
 800cd94:	b508      	push	{r3, lr}
 800cd96:	460b      	mov	r3, r1
        EU433_ALTERNATE_DR( );
 800cd98:	4611      	mov	r1, r2
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f001 f838 	bl	800de10 <RegionEU433AlternateDr>
}
 800cda0:	bd08      	pop	{r3, pc}

0800cda2 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    switch( region )
 800cda2:	2804      	cmp	r0, #4
 800cda4:	d001      	beq.n	800cdaa <RegionNextChannel+0x8>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800cda6:	2009      	movs	r0, #9
        }
    }
}
 800cda8:	4770      	bx	lr
{
 800cdaa:	b508      	push	{r3, lr}
 800cdac:	468c      	mov	ip, r1
 800cdae:	4611      	mov	r1, r2
 800cdb0:	461a      	mov	r2, r3
        EU433_NEXT_CHANNEL( );
 800cdb2:	9b02      	ldr	r3, [sp, #8]
 800cdb4:	4660      	mov	r0, ip
 800cdb6:	f001 f82d 	bl	800de14 <RegionEU433NextChannel>
}
 800cdba:	bd08      	pop	{r3, pc}

0800cdbc <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800cdbc:	468c      	mov	ip, r1
 800cdbe:	4611      	mov	r1, r2
    switch( region )
 800cdc0:	2804      	cmp	r0, #4
 800cdc2:	d001      	beq.n	800cdc8 <RegionApplyDrOffset+0xc>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800cdc4:	b2d0      	uxtb	r0, r2
        }
    }
}
 800cdc6:	4770      	bx	lr
{
 800cdc8:	b508      	push	{r3, lr}
        EU433_APPLY_DR_OFFSET( );
 800cdca:	461a      	mov	r2, r3
 800cdcc:	4660      	mov	r0, ip
 800cdce:	f001 f983 	bl	800e0d8 <RegionEU433ApplyDrOffset>
}
 800cdd2:	bd08      	pop	{r3, pc}

0800cdd4 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800cdd4:	4800      	ldr	r0, [pc, #0]	@ (800cdd8 <RegionGetVersion+0x4>)
 800cdd6:	4770      	bx	lr
 800cdd8:	02010001 	.word	0x02010001

0800cddc <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800cddc:	b082      	sub	sp, #8
 800cdde:	f10d 0c08 	add.w	ip, sp, #8
 800cde2:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800cde6:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800cde8:	b999      	cbnz	r1, 800ce12 <GetDutyCycle+0x36>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800cdea:	4613      	mov	r3, r2
 800cdec:	f5b2 6f61 	cmp.w	r2, #3600	@ 0xe10
 800cdf0:	d306      	bcc.n	800ce00 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800cdf2:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d808      	bhi.n	800ce0c <GetDutyCycle+0x30>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800cdfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cdfe:	e000      	b.n	800ce02 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800ce00:	2364      	movs	r3, #100	@ 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800ce02:	4298      	cmp	r0, r3
 800ce04:	bf38      	it	cc
 800ce06:	4618      	movcc	r0, r3
    {
        dutyCycle = 1;
    }

    return dutyCycle;
}
 800ce08:	b002      	add	sp, #8
 800ce0a:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800ce0c:	f242 7310 	movw	r3, #10000	@ 0x2710
 800ce10:	e7f7      	b.n	800ce02 <GetDutyCycle+0x26>
    if( dutyCycle == 0 )
 800ce12:	2800      	cmp	r0, #0
 800ce14:	d1f8      	bne.n	800ce08 <GetDutyCycle+0x2c>
        dutyCycle = 1;
 800ce16:	2001      	movs	r0, #1
 800ce18:	e7f6      	b.n	800ce08 <GetDutyCycle+0x2c>

0800ce1a <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800ce1a:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800ce1c:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800ce1e:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800ce20:	e001      	b.n	800ce26 <CountChannels+0xc>
 800ce22:	3301      	adds	r3, #1
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	428b      	cmp	r3, r1
 800ce28:	d207      	bcs.n	800ce3a <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	409a      	lsls	r2, r3
 800ce2e:	ea32 020c 	bics.w	r2, r2, ip
 800ce32:	d1f6      	bne.n	800ce22 <CountChannels+0x8>
        {
            nbActiveBits++;
 800ce34:	3001      	adds	r0, #1
 800ce36:	b2c0      	uxtb	r0, r0
 800ce38:	e7f3      	b.n	800ce22 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800ce3a:	4770      	bx	lr

0800ce3c <SetMaxTimeCredits>:
{
 800ce3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce40:	b089      	sub	sp, #36	@ 0x24
 800ce42:	4604      	mov	r4, r0
 800ce44:	460e      	mov	r6, r1
 800ce46:	ad02      	add	r5, sp, #8
 800ce48:	e885 000c 	stmia.w	r5, {r2, r3}
 800ce4c:	f89d 8040 	ldrb.w	r8, [sp, #64]	@ 0x40
 800ce50:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800ce54:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ce58:	f004 f9ea 	bl	8011230 <SysTimeToMs>
 800ce5c:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800ce5e:	2300      	movs	r3, #0
 800ce60:	9304      	str	r3, [sp, #16]
 800ce62:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800ce64:	e895 000c 	ldmia.w	r5, {r2, r3}
 800ce68:	4631      	mov	r1, r6
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	f7ff ffb6 	bl	800cddc <GetDutyCycle>
 800ce70:	4605      	mov	r5, r0
    if( joined == false )
 800ce72:	2e00      	cmp	r6, #0
 800ce74:	d14c      	bne.n	800cf10 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800ce76:	2864      	cmp	r0, #100	@ 0x64
 800ce78:	d025      	beq.n	800cec6 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800ce7a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800ce7e:	d025      	beq.n	800cecc <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800ce80:	4e27      	ldr	r6, [pc, #156]	@ (800cf20 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800ce82:	68a1      	ldr	r1, [r4, #8]
 800ce84:	a806      	add	r0, sp, #24
 800ce86:	f004 f9f3 	bl	8011270 <SysTimeFromMs>
 800ce8a:	9b07      	ldr	r3, [sp, #28]
 800ce8c:	9300      	str	r3, [sp, #0]
 800ce8e:	9b06      	ldr	r3, [sp, #24]
 800ce90:	aa02      	add	r2, sp, #8
 800ce92:	ca06      	ldmia	r2, {r1, r2}
 800ce94:	a804      	add	r0, sp, #16
 800ce96:	f004 f952 	bl	801113e <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800ce9a:	f1b8 0f00 	cmp.w	r8, #0
 800ce9e:	d102      	bne.n	800cea6 <SetMaxTimeCredits+0x6a>
 800cea0:	f1b9 0f00 	cmp.w	r9, #0
 800cea4:	d002      	beq.n	800ceac <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800cea6:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800cea8:	42b3      	cmp	r3, r6
 800ceaa:	d012      	beq.n	800ced2 <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800ceac:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800ceae:	9b02      	ldr	r3, [sp, #8]
 800ceb0:	4a1c      	ldr	r2, [pc, #112]	@ (800cf24 <SetMaxTimeCredits+0xe8>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d812      	bhi.n	800cedc <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800ceb6:	6863      	ldr	r3, [r4, #4]
 800ceb8:	b903      	cbnz	r3, 800cebc <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800ceba:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800cebc:	6126      	str	r6, [r4, #16]
}
 800cebe:	4628      	mov	r0, r5
 800cec0:	b009      	add	sp, #36	@ 0x24
 800cec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800cec6:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800cec8:	4e17      	ldr	r6, [pc, #92]	@ (800cf28 <SetMaxTimeCredits+0xec>)
 800ceca:	e7da      	b.n	800ce82 <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800cecc:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800cece:	4e17      	ldr	r6, [pc, #92]	@ (800cf2c <SetMaxTimeCredits+0xf0>)
 800ced0:	e7d7      	b.n	800ce82 <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800ced2:	9a04      	ldr	r2, [sp, #16]
 800ced4:	4b16      	ldr	r3, [pc, #88]	@ (800cf30 <SetMaxTimeCredits+0xf4>)
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d9ed      	bls.n	800ceb6 <SetMaxTimeCredits+0x7a>
 800ceda:	e7e7      	b.n	800ceac <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800cedc:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 800cee0:	3b30      	subs	r3, #48	@ 0x30
 800cee2:	4a14      	ldr	r2, [pc, #80]	@ (800cf34 <SetMaxTimeCredits+0xf8>)
 800cee4:	fba2 2303 	umull	r2, r3, r2, r3
 800cee8:	0c1b      	lsrs	r3, r3, #16
 800ceea:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800ceec:	4a12      	ldr	r2, [pc, #72]	@ (800cf38 <SetMaxTimeCredits+0xfc>)
 800ceee:	fb02 f303 	mul.w	r3, r2, r3
 800cef2:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800cef4:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 800cef8:	3330      	adds	r3, #48	@ 0x30
 800cefa:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800cefc:	2300      	movs	r3, #0
 800cefe:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800cf02:	ab04      	add	r3, sp, #16
 800cf04:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cf08:	f004 f992 	bl	8011230 <SysTimeToMs>
 800cf0c:	60a0      	str	r0, [r4, #8]
 800cf0e:	e7d2      	b.n	800ceb6 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800cf10:	f1b8 0f00 	cmp.w	r8, #0
 800cf14:	d102      	bne.n	800cf1c <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800cf16:	4e04      	ldr	r6, [pc, #16]	@ (800cf28 <SetMaxTimeCredits+0xec>)
 800cf18:	60e6      	str	r6, [r4, #12]
 800cf1a:	e7cc      	b.n	800ceb6 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800cf1c:	4e02      	ldr	r6, [pc, #8]	@ (800cf28 <SetMaxTimeCredits+0xec>)
 800cf1e:	e7ca      	b.n	800ceb6 <SetMaxTimeCredits+0x7a>
 800cf20:	02932e00 	.word	0x02932e00
 800cf24:	0001ec2f 	.word	0x0001ec2f
 800cf28:	001b7740 	.word	0x001b7740
 800cf2c:	0112a880 	.word	0x0112a880
 800cf30:	0001517f 	.word	0x0001517f
 800cf34:	c22e4507 	.word	0xc22e4507
 800cf38:	00015180 	.word	0x00015180

0800cf3c <UpdateTimeCredits>:
{
 800cf3c:	b570      	push	{r4, r5, r6, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	4604      	mov	r4, r0
 800cf42:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800cf44:	9301      	str	r3, [sp, #4]
 800cf46:	9200      	str	r2, [sp, #0]
 800cf48:	ab06      	add	r3, sp, #24
 800cf4a:	cb0c      	ldmia	r3, {r2, r3}
 800cf4c:	f7ff ff76 	bl	800ce3c <SetMaxTimeCredits>
 800cf50:	4605      	mov	r5, r0
    if( joined == true )
 800cf52:	b94e      	cbnz	r6, 800cf68 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800cf54:	68e2      	ldr	r2, [r4, #12]
 800cf56:	6923      	ldr	r3, [r4, #16]
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d900      	bls.n	800cf5e <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800cf5c:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800cf5e:	9b08      	ldr	r3, [sp, #32]
 800cf60:	6063      	str	r3, [r4, #4]
}
 800cf62:	4628      	mov	r0, r5
 800cf64:	b002      	add	sp, #8
 800cf66:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800cf68:	6860      	ldr	r0, [r4, #4]
 800cf6a:	f004 f9e1 	bl	8011330 <UTIL_TIMER_GetElapsedTime>
 800cf6e:	68e3      	ldr	r3, [r4, #12]
 800cf70:	4403      	add	r3, r0
 800cf72:	60e3      	str	r3, [r4, #12]
 800cf74:	e7ee      	b.n	800cf54 <UpdateTimeCredits+0x18>

0800cf76 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800cf76:	4288      	cmp	r0, r1
 800cf78:	db03      	blt.n	800cf82 <RegionCommonValueInRange+0xc>
 800cf7a:	4290      	cmp	r0, r2
 800cf7c:	dd03      	ble.n	800cf86 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800cf7e:	2000      	movs	r0, #0
 800cf80:	4770      	bx	lr
 800cf82:	2000      	movs	r0, #0
 800cf84:	4770      	bx	lr
        return 1;
 800cf86:	2001      	movs	r0, #1
}
 800cf88:	4770      	bx	lr

0800cf8a <RegionCommonChanVerifyDr>:
{
 800cf8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf8e:	4682      	mov	sl, r0
 800cf90:	460e      	mov	r6, r1
 800cf92:	4690      	mov	r8, r2
 800cf94:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800cf98:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	4640      	mov	r0, r8
 800cfa0:	f7ff ffe9 	bl	800cf76 <RegionCommonValueInRange>
 800cfa4:	b338      	cbz	r0, 800cff6 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800cfa6:	2500      	movs	r5, #0
 800cfa8:	462f      	mov	r7, r5
 800cfaa:	e01e      	b.n	800cfea <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800cfac:	3401      	adds	r4, #1
 800cfae:	b2e4      	uxtb	r4, r4
 800cfb0:	2c0f      	cmp	r4, #15
 800cfb2:	d816      	bhi.n	800cfe2 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800cfb4:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800cfb8:	4123      	asrs	r3, r4
 800cfba:	f013 0f01 	tst.w	r3, #1
 800cfbe:	d0f5      	beq.n	800cfac <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800cfc0:	193b      	adds	r3, r7, r4
 800cfc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cfc6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800cfca:	7a19      	ldrb	r1, [r3, #8]
 800cfcc:	090a      	lsrs	r2, r1, #4
 800cfce:	f001 010f 	and.w	r1, r1, #15
 800cfd2:	4640      	mov	r0, r8
 800cfd4:	f7ff ffcf 	bl	800cf76 <RegionCommonValueInRange>
 800cfd8:	2801      	cmp	r0, #1
 800cfda:	d1e7      	bne.n	800cfac <RegionCommonChanVerifyDr+0x22>
                    return true;
 800cfdc:	2001      	movs	r0, #1
}
 800cfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800cfe2:	3710      	adds	r7, #16
 800cfe4:	b2ff      	uxtb	r7, r7
 800cfe6:	3501      	adds	r5, #1
 800cfe8:	b2ed      	uxtb	r5, r5
 800cfea:	4557      	cmp	r7, sl
 800cfec:	d201      	bcs.n	800cff2 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800cfee:	2400      	movs	r4, #0
 800cff0:	e7de      	b.n	800cfb0 <RegionCommonChanVerifyDr+0x26>
    return false;
 800cff2:	2000      	movs	r0, #0
 800cff4:	e7f3      	b.n	800cfde <RegionCommonChanVerifyDr+0x54>
        return false;
 800cff6:	2000      	movs	r0, #0
 800cff8:	e7f1      	b.n	800cfde <RegionCommonChanVerifyDr+0x54>

0800cffa <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800cffa:	0913      	lsrs	r3, r2, #4
 800cffc:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800d000:	d313      	bcc.n	800d02a <RegionCommonChanDisable+0x30>
{
 800d002:	b500      	push	{lr}
 800d004:	4684      	mov	ip, r0
 800d006:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800d00a:	4291      	cmp	r1, r2
 800d00c:	d20f      	bcs.n	800d02e <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800d00e:	f830 301e 	ldrh.w	r3, [r0, lr, lsl #1]
 800d012:	f001 010f 	and.w	r1, r1, #15
 800d016:	2001      	movs	r0, #1
 800d018:	fa00 f101 	lsl.w	r1, r0, r1
 800d01c:	43c9      	mvns	r1, r1
 800d01e:	b209      	sxth	r1, r1
 800d020:	400b      	ands	r3, r1
 800d022:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 800d026:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 800d02a:	2000      	movs	r0, #0
}
 800d02c:	4770      	bx	lr
        return false;
 800d02e:	2000      	movs	r0, #0
 800d030:	e7f9      	b.n	800d026 <RegionCommonChanDisable+0x2c>

0800d032 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800d032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800d034:	b188      	cbz	r0, 800d05a <RegionCommonCountChannels+0x28>
 800d036:	460c      	mov	r4, r1
 800d038:	4616      	mov	r6, r2
 800d03a:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800d03c:	2500      	movs	r5, #0
 800d03e:	e008      	b.n	800d052 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800d040:	2110      	movs	r1, #16
 800d042:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800d046:	f7ff fee8 	bl	800ce1a <CountChannels>
 800d04a:	4405      	add	r5, r0
 800d04c:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800d04e:	3401      	adds	r4, #1
 800d050:	b2e4      	uxtb	r4, r4
 800d052:	42b4      	cmp	r4, r6
 800d054:	d3f4      	bcc.n	800d040 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800d056:	4628      	mov	r0, r5
 800d058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800d05a:	2500      	movs	r5, #0
 800d05c:	e7fb      	b.n	800d056 <RegionCommonCountChannels+0x24>

0800d05e <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800d05e:	4684      	mov	ip, r0
 800d060:	b158      	cbz	r0, 800d07a <RegionCommonChanMaskCopy+0x1c>
 800d062:	b109      	cbz	r1, 800d068 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800d064:	2300      	movs	r3, #0
 800d066:	e006      	b.n	800d076 <RegionCommonChanMaskCopy+0x18>
 800d068:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800d06a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800d06e:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800d072:	3301      	adds	r3, #1
 800d074:	b2db      	uxtb	r3, r3
 800d076:	4293      	cmp	r3, r2
 800d078:	d3f7      	bcc.n	800d06a <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800d07a:	4770      	bx	lr

0800d07c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800d07c:	b082      	sub	sp, #8
 800d07e:	b538      	push	{r3, r4, r5, lr}
 800d080:	4604      	mov	r4, r0
 800d082:	460d      	mov	r5, r1
 800d084:	4611      	mov	r1, r2
 800d086:	aa04      	add	r2, sp, #16
 800d088:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800d08c:	ca0c      	ldmia	r2, {r2, r3}
 800d08e:	f7ff fea5 	bl	800cddc <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800d092:	68e3      	ldr	r3, [r4, #12]
 800d094:	fb05 f100 	mul.w	r1, r5, r0
 800d098:	428b      	cmp	r3, r1
 800d09a:	d905      	bls.n	800d0a8 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800d09c:	1a5b      	subs	r3, r3, r1
 800d09e:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800d0a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0a4:	b002      	add	sp, #8
 800d0a6:	4770      	bx	lr
        band->TimeCredits = 0;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	60e3      	str	r3, [r4, #12]
}
 800d0ac:	e7f8      	b.n	800d0a0 <RegionCommonSetBandTxDone+0x24>
	...

0800d0b0 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800d0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b4:	b089      	sub	sp, #36	@ 0x24
 800d0b6:	4607      	mov	r7, r0
 800d0b8:	468b      	mov	fp, r1
 800d0ba:	4691      	mov	r9, r2
 800d0bc:	4698      	mov	r8, r3
 800d0be:	f89d a048 	ldrb.w	sl, [sp, #72]	@ 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800d0c2:	f004 f92b 	bl	801131c <UTIL_TIMER_GetCurrentTime>
 800d0c6:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800d0c8:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800d0ca:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800d0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d0d0:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800d0d2:	e005      	b.n	800d0e0 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800d0d8:	441e      	add	r6, r3
 800d0da:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800d0dc:	3401      	adds	r4, #1
 800d0de:	b2e4      	uxtb	r4, r4
 800d0e0:	454c      	cmp	r4, r9
 800d0e2:	d25d      	bcs.n	800d1a0 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800d0e4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800d0e8:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800d0ec:	9b04      	ldr	r3, [sp, #16]
 800d0ee:	9302      	str	r3, [sp, #8]
 800d0f0:	ab13      	add	r3, sp, #76	@ 0x4c
 800d0f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d0f6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d0fa:	4653      	mov	r3, sl
 800d0fc:	4642      	mov	r2, r8
 800d0fe:	4639      	mov	r1, r7
 800d100:	4628      	mov	r0, r5
 800d102:	f7ff ff1b 	bl	800cf3c <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800d106:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d108:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 800d10c:	68ea      	ldr	r2, [r5, #12]
 800d10e:	429a      	cmp	r2, r3
 800d110:	d2e0      	bcs.n	800d0d4 <RegionCommonUpdateBandTimeOff+0x24>
 800d112:	f1b8 0f00 	cmp.w	r8, #0
 800d116:	d101      	bne.n	800d11c <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800d118:	2f00      	cmp	r7, #0
 800d11a:	d1db      	bne.n	800d0d4 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800d11c:	2100      	movs	r1, #0
 800d11e:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 800d120:	6929      	ldr	r1, [r5, #16]
 800d122:	4299      	cmp	r1, r3
 800d124:	d307      	bcc.n	800d136 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800d126:	1a9b      	subs	r3, r3, r2
 800d128:	9a05      	ldr	r2, [sp, #20]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	bf28      	it	cs
 800d12e:	461a      	movcs	r2, r3
 800d130:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800d132:	3601      	adds	r6, #1
 800d134:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800d136:	2f00      	cmp	r7, #0
 800d138:	d1d0      	bne.n	800d0dc <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800d13a:	2300      	movs	r3, #0
 800d13c:	9306      	str	r3, [sp, #24]
 800d13e:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800d142:	2864      	cmp	r0, #100	@ 0x64
 800d144:	d024      	beq.n	800d190 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800d146:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800d14a:	d025      	beq.n	800d198 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800d14c:	4b19      	ldr	r3, [pc, #100]	@ (800d1b4 <RegionCommonUpdateBandTimeOff+0x104>)
 800d14e:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800d150:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d152:	4a18      	ldr	r2, [pc, #96]	@ (800d1b4 <RegionCommonUpdateBandTimeOff+0x104>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d90c      	bls.n	800d172 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800d158:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 800d15c:	3b30      	subs	r3, #48	@ 0x30
 800d15e:	4a16      	ldr	r2, [pc, #88]	@ (800d1b8 <RegionCommonUpdateBandTimeOff+0x108>)
 800d160:	fba2 2303 	umull	r2, r3, r2, r3
 800d164:	0c1b      	lsrs	r3, r3, #16
 800d166:	4a15      	ldr	r2, [pc, #84]	@ (800d1bc <RegionCommonUpdateBandTimeOff+0x10c>)
 800d168:	fb03 2202 	mla	r2, r3, r2, r2
 800d16c:	9b06      	ldr	r3, [sp, #24]
 800d16e:	4413      	add	r3, r2
 800d170:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800d172:	ad06      	add	r5, sp, #24
 800d174:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d176:	9300      	str	r3, [sp, #0]
 800d178:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d17a:	e895 0006 	ldmia.w	r5, {r1, r2}
 800d17e:	4628      	mov	r0, r5
 800d180:	f003 ffdd 	bl	801113e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800d184:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d188:	f004 f852 	bl	8011230 <SysTimeToMs>
 800d18c:	9005      	str	r0, [sp, #20]
 800d18e:	e7a5      	b.n	800d0dc <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800d190:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800d194:	9306      	str	r3, [sp, #24]
 800d196:	e7db      	b.n	800d150 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800d198:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 800d19c:	9306      	str	r3, [sp, #24]
 800d19e:	e7d7      	b.n	800d150 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800d1a0:	b11e      	cbz	r6, 800d1aa <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800d1a2:	9805      	ldr	r0, [sp, #20]
 800d1a4:	b009      	add	sp, #36	@ 0x24
 800d1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800d1aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ae:	9305      	str	r3, [sp, #20]
 800d1b0:	e7f7      	b.n	800d1a2 <RegionCommonUpdateBandTimeOff+0xf2>
 800d1b2:	bf00      	nop
 800d1b4:	0001ec30 	.word	0x0001ec30
 800d1b8:	c22e4507 	.word	0xc22e4507
 800d1bc:	00015180 	.word	0x00015180

0800d1c0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800d1c0:	7803      	ldrb	r3, [r0, #0]
 800d1c2:	2b03      	cmp	r3, #3
 800d1c4:	d001      	beq.n	800d1ca <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800d1c6:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800d1c8:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800d1ca:	7843      	ldrb	r3, [r0, #1]
 800d1cc:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800d1d0:	704a      	strb	r2, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800d1d2:	f003 020f 	and.w	r2, r3, #15
 800d1d6:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800d1d8:	091b      	lsrs	r3, r3, #4
 800d1da:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800d1dc:	7883      	ldrb	r3, [r0, #2]
 800d1de:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800d1e0:	78c2      	ldrb	r2, [r0, #3]
 800d1e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d1e6:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800d1e8:	7903      	ldrb	r3, [r0, #4]
 800d1ea:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800d1ec:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800d1f0:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800d1f2:	f003 030f 	and.w	r3, r3, #15
 800d1f6:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800d1f8:	2005      	movs	r0, #5
 800d1fa:	4770      	bx	lr

0800d1fc <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800d1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d200:	b085      	sub	sp, #20
 800d202:	4604      	mov	r4, r0
 800d204:	4688      	mov	r8, r1
 800d206:	4617      	mov	r7, r2
 800d208:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800d20a:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800d20c:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800d210:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800d214:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800d218:	7943      	ldrb	r3, [r0, #5]
 800d21a:	b92b      	cbnz	r3, 800d228 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800d21c:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800d220:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800d224:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800d228:	b355      	cbz	r5, 800d280 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800d22a:	f1ba 0f0f 	cmp.w	sl, #15
 800d22e:	d114      	bne.n	800d25a <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800d230:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800d234:	f1b9 0f0f 	cmp.w	r9, #15
 800d238:	d020      	beq.n	800d27c <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800d23a:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800d23e:	9303      	str	r3, [sp, #12]
 800d240:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800d244:	461c      	mov	r4, r3
 800d246:	4619      	mov	r1, r3
 800d248:	4648      	mov	r0, r9
 800d24a:	f7ff fe94 	bl	800cf76 <RegionCommonValueInRange>
 800d24e:	b9b8      	cbnz	r0, 800d280 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800d250:	454c      	cmp	r4, r9
 800d252:	dc21      	bgt.n	800d298 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800d254:	f005 05fb 	and.w	r5, r5, #251	@ 0xfb
 800d258:	e012      	b.n	800d280 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800d25a:	69a3      	ldr	r3, [r4, #24]
 800d25c:	9301      	str	r3, [sp, #4]
 800d25e:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800d262:	9300      	str	r3, [sp, #0]
 800d264:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d268:	4652      	mov	r2, sl
 800d26a:	6921      	ldr	r1, [r4, #16]
 800d26c:	7b20      	ldrb	r0, [r4, #12]
 800d26e:	f7ff fe8c 	bl	800cf8a <RegionCommonChanVerifyDr>
 800d272:	2800      	cmp	r0, #0
 800d274:	d1de      	bne.n	800d234 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800d276:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
 800d27a:	e7db      	b.n	800d234 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800d27c:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800d280:	2d07      	cmp	r5, #7
 800d282:	d00c      	beq.n	800d29e <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800d284:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800d288:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800d28c:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800d290:	4628      	mov	r0, r5
 800d292:	b005      	add	sp, #20
 800d294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800d298:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d29c:	e7f0      	b.n	800d280 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800d29e:	f1bb 0f00 	cmp.w	fp, #0
 800d2a2:	d1ef      	bne.n	800d284 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800d2a4:	f04f 0b01 	mov.w	fp, #1
 800d2a8:	e7ec      	b.n	800d284 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800d2ac <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800d2ac:	4b02      	ldr	r3, [pc, #8]	@ (800d2b8 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800d2ae:	fa03 f000 	lsl.w	r0, r3, r0
}
 800d2b2:	fbb0 f0f1 	udiv	r0, r0, r1
 800d2b6:	4770      	bx	lr
 800d2b8:	000f4240 	.word	0x000f4240

0800d2bc <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800d2bc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800d2c0:	fbb3 f0f0 	udiv	r0, r3, r0
 800d2c4:	4770      	bx	lr
	...

0800d2c8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800d2c8:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800d2ca:	f1a1 0c04 	sub.w	ip, r1, #4
 800d2ce:	f44f 7e7a 	mov.w	lr, #1000	@ 0x3e8
 800d2d2:	fb0e f202 	mul.w	r2, lr, r2
 800d2d6:	fb00 220c 	mla	r2, r0, ip, r2
 800d2da:	0052      	lsls	r2, r2, #1
 800d2dc:	d021      	beq.n	800d322 <RegionCommonComputeRxWindowParameters+0x5a>
 800d2de:	4402      	add	r2, r0
 800d2e0:	3a01      	subs	r2, #1
 800d2e2:	fbb2 f2f0 	udiv	r2, r2, r0
 800d2e6:	4291      	cmp	r1, r2
 800d2e8:	bf38      	it	cc
 800d2ea:	4611      	movcc	r1, r2
 800d2ec:	9a01      	ldr	r2, [sp, #4]
 800d2ee:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800d2f0:	0082      	lsls	r2, r0, #2
 800d2f2:	fb01 f000 	mul.w	r0, r1, r0
 800d2f6:	b1b8      	cbz	r0, 800d328 <RegionCommonComputeRxWindowParameters+0x60>
 800d2f8:	3001      	adds	r0, #1
 800d2fa:	0840      	lsrs	r0, r0, #1
 800d2fc:	1a12      	subs	r2, r2, r0
 800d2fe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d302:	fb01 2313 	mls	r3, r1, r3, r2
 800d306:	2b00      	cmp	r3, #0
 800d308:	dd10      	ble.n	800d32c <RegionCommonComputeRxWindowParameters+0x64>
 800d30a:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 800d30e:	4a0b      	ldr	r2, [pc, #44]	@ (800d33c <RegionCommonComputeRxWindowParameters+0x74>)
 800d310:	fb82 1203 	smull	r1, r2, r2, r3
 800d314:	17db      	asrs	r3, r3, #31
 800d316:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800d31a:	9a02      	ldr	r2, [sp, #8]
 800d31c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800d31e:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800d322:	fbb2 f2f0 	udiv	r2, r2, r0
 800d326:	e7de      	b.n	800d2e6 <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800d328:	0840      	lsrs	r0, r0, #1
 800d32a:	e7e7      	b.n	800d2fc <RegionCommonComputeRxWindowParameters+0x34>
 800d32c:	4a03      	ldr	r2, [pc, #12]	@ (800d33c <RegionCommonComputeRxWindowParameters+0x74>)
 800d32e:	fb82 1203 	smull	r1, r2, r2, r3
 800d332:	17db      	asrs	r3, r3, #31
 800d334:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800d338:	e7ef      	b.n	800d31a <RegionCommonComputeRxWindowParameters+0x52>
 800d33a:	bf00      	nop
 800d33c:	10624dd3 	.word	0x10624dd3

0800d340 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800d340:	b538      	push	{r3, r4, r5, lr}
 800d342:	460d      	mov	r5, r1
 800d344:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800d346:	0040      	lsls	r0, r0, #1
 800d348:	f7f3 fa40 	bl	80007cc <__aeabi_ui2f>
 800d34c:	4601      	mov	r1, r0
 800d34e:	4628      	mov	r0, r5
 800d350:	f7f3 f98a 	bl	8000668 <__aeabi_fsub>
 800d354:	4621      	mov	r1, r4
 800d356:	f7f3 f987 	bl	8000668 <__aeabi_fsub>
 800d35a:	f7f3 f879 	bl	8000450 <__aeabi_f2d>
 800d35e:	f004 faab 	bl	80118b8 <floor>
 800d362:	f7f3 f955 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800d366:	b240      	sxtb	r0, r0
 800d368:	bd38      	pop	{r3, r4, r5, pc}

0800d36a <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800d36a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d36e:	b083      	sub	sp, #12
 800d370:	4605      	mov	r5, r0
 800d372:	468b      	mov	fp, r1
 800d374:	9300      	str	r3, [sp, #0]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d376:	2600      	movs	r6, #0
 800d378:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800d37a:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800d37c:	46b1      	mov	r9, r6
 800d37e:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d380:	e049      	b.n	800d416 <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800d382:	7a3a      	ldrb	r2, [r7, #8]
 800d384:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800d388:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800d38c:	b252      	sxtb	r2, r2
 800d38e:	b249      	sxtb	r1, r1
 800d390:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800d394:	f7ff fdef 	bl	800cf76 <RegionCommonValueInRange>
 800d398:	b178      	cbz	r0, 800d3ba <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800d39a:	68ea      	ldr	r2, [r5, #12]
 800d39c:	7a7b      	ldrb	r3, [r7, #9]
 800d39e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d3a2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d3a6:	7d13      	ldrb	r3, [r2, #20]
 800d3a8:	b353      	cbz	r3, 800d400 <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800d3aa:	f109 0301 	add.w	r3, r9, #1
 800d3ae:	eb08 0204 	add.w	r2, r8, r4
 800d3b2:	f80b 2009 	strb.w	r2, [fp, r9]
 800d3b6:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800d3ba:	3401      	adds	r4, #1
 800d3bc:	b2e4      	uxtb	r4, r4
 800d3be:	2c0f      	cmp	r4, #15
 800d3c0:	d823      	bhi.n	800d40a <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800d3c2:	686b      	ldr	r3, [r5, #4]
 800d3c4:	0072      	lsls	r2, r6, #1
 800d3c6:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800d3ca:	4123      	asrs	r3, r4
 800d3cc:	f013 0f01 	tst.w	r3, #1
 800d3d0:	d0f3      	beq.n	800d3ba <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800d3d2:	68a8      	ldr	r0, [r5, #8]
 800d3d4:	eb08 0304 	add.w	r3, r8, r4
 800d3d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d3dc:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800d3e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d0e8      	beq.n	800d3ba <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d3e8:	782b      	ldrb	r3, [r5, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1c9      	bne.n	800d382 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800d3ee:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d0c6      	beq.n	800d382 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800d3f4:	5a9b      	ldrh	r3, [r3, r2]
 800d3f6:	4123      	asrs	r3, r4
 800d3f8:	f013 0f01 	tst.w	r3, #1
 800d3fc:	d1c1      	bne.n	800d382 <RegionCommonCountNbOfEnabledChannels+0x18>
 800d3fe:	e7dc      	b.n	800d3ba <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800d400:	f10a 0a01 	add.w	sl, sl, #1
 800d404:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800d408:	e7d7      	b.n	800d3ba <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d40a:	f108 0810 	add.w	r8, r8, #16
 800d40e:	fa5f f888 	uxtb.w	r8, r8
 800d412:	3601      	adds	r6, #1
 800d414:	b2f6      	uxtb	r6, r6
 800d416:	8a2b      	ldrh	r3, [r5, #16]
 800d418:	4598      	cmp	r8, r3
 800d41a:	d201      	bcs.n	800d420 <RegionCommonCountNbOfEnabledChannels+0xb6>
        for( uint8_t j = 0; j < 16; j++ )
 800d41c:	2400      	movs	r4, #0
 800d41e:	e7ce      	b.n	800d3be <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800d420:	9f01      	ldr	r7, [sp, #4]
 800d422:	f887 9000 	strb.w	r9, [r7]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800d426:	9b00      	ldr	r3, [sp, #0]
 800d428:	f883 a000 	strb.w	sl, [r3]
}
 800d42c:	b003      	add	sp, #12
 800d42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d432 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800d432:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d436:	b085      	sub	sp, #20
 800d438:	4604      	mov	r4, r0
 800d43a:	460f      	mov	r7, r1
 800d43c:	4616      	mov	r6, r2
 800d43e:	461d      	mov	r5, r3
 800d440:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800d444:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800d448:	6840      	ldr	r0, [r0, #4]
 800d44a:	f003 ff71 	bl	8011330 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800d44e:	6823      	ldr	r3, [r4, #0]
 800d450:	1a1b      	subs	r3, r3, r0
 800d452:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800d456:	2301      	movs	r3, #1
 800d458:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800d45c:	2300      	movs	r3, #0
 800d45e:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800d460:	6863      	ldr	r3, [r4, #4]
 800d462:	b113      	cbz	r3, 800d46a <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800d464:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800d466:	4283      	cmp	r3, r0
 800d468:	d81e      	bhi.n	800d4a8 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800d46a:	2300      	movs	r3, #0
 800d46c:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d46e:	69e3      	ldr	r3, [r4, #28]
 800d470:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800d474:	781f      	ldrb	r7, [r3, #0]
 800d476:	69a3      	ldr	r3, [r4, #24]
 800d478:	9303      	str	r3, [sp, #12]
 800d47a:	ab01      	add	r3, sp, #4
 800d47c:	f104 020c 	add.w	r2, r4, #12
 800d480:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d484:	e883 0003 	stmia.w	r3, {r0, r1}
 800d488:	7d23      	ldrb	r3, [r4, #20]
 800d48a:	9300      	str	r3, [sp, #0]
 800d48c:	7a23      	ldrb	r3, [r4, #8]
 800d48e:	7a62      	ldrb	r2, [r4, #9]
 800d490:	4661      	mov	r1, ip
 800d492:	4638      	mov	r0, r7
 800d494:	f7ff fe0c 	bl	800d0b0 <RegionCommonUpdateBandTimeOff>
 800d498:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800d49c:	4643      	mov	r3, r8
 800d49e:	462a      	mov	r2, r5
 800d4a0:	4631      	mov	r1, r6
 800d4a2:	69e0      	ldr	r0, [r4, #28]
 800d4a4:	f7ff ff61 	bl	800d36a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800d4a8:	782b      	ldrb	r3, [r5, #0]
 800d4aa:	b923      	cbnz	r3, 800d4b6 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800d4ac:	f898 3000 	ldrb.w	r3, [r8]
 800d4b0:	b13b      	cbz	r3, 800d4c2 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800d4b2:	200b      	movs	r0, #11
 800d4b4:	e002      	b.n	800d4bc <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800d4b6:	2000      	movs	r0, #0
 800d4b8:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800d4bc:	b005      	add	sp, #20
 800d4be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800d4c2:	200c      	movs	r0, #12
 800d4c4:	e7fa      	b.n	800d4bc <RegionCommonIdentifyChannels+0x8a>

0800d4c6 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800d4c6:	b570      	push	{r4, r5, r6, lr}
 800d4c8:	b082      	sub	sp, #8
 800d4ca:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800d4cc:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800d4d0:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800d4d4:	42a6      	cmp	r6, r4
 800d4d6:	d011      	beq.n	800d4fc <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800d4d8:	3c01      	subs	r4, #1
 800d4da:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 800d4dc:	42a6      	cmp	r6, r4
 800d4de:	d00e      	beq.n	800d4fe <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800d4e0:	68ab      	ldr	r3, [r5, #8]
 800d4e2:	9301      	str	r3, [sp, #4]
 800d4e4:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800d4e8:	9300      	str	r3, [sp, #0]
 800d4ea:	4633      	mov	r3, r6
 800d4ec:	4622      	mov	r2, r4
 800d4ee:	6869      	ldr	r1, [r5, #4]
 800d4f0:	78e8      	ldrb	r0, [r5, #3]
 800d4f2:	f7ff fd4a 	bl	800cf8a <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d0ee      	beq.n	800d4d8 <RegionCommonGetNextLowerTxDr+0x12>
 800d4fa:	e000      	b.n	800d4fe <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800d4fc:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800d4fe:	4620      	mov	r0, r4
 800d500:	b002      	add	sp, #8
 800d502:	bd70      	pop	{r4, r5, r6, pc}

0800d504 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800d504:	4288      	cmp	r0, r1
 800d506:	bfb8      	it	lt
 800d508:	4608      	movlt	r0, r1
 800d50a:	4770      	bx	lr

0800d50c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800d50c:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800d510:	4a05      	ldr	r2, [pc, #20]	@ (800d528 <RegionCommonGetBandwidth+0x1c>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d004      	beq.n	800d520 <RegionCommonGetBandwidth+0x14>
 800d516:	4a05      	ldr	r2, [pc, #20]	@ (800d52c <RegionCommonGetBandwidth+0x20>)
 800d518:	4293      	cmp	r3, r2
 800d51a:	d103      	bne.n	800d524 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800d51c:	2002      	movs	r0, #2
 800d51e:	4770      	bx	lr
            return 1;
 800d520:	2001      	movs	r0, #1
 800d522:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800d524:	2000      	movs	r0, #0
    }
}
 800d526:	4770      	bx	lr
 800d528:	0003d090 	.word	0x0003d090
 800d52c:	0007a120 	.word	0x0007a120

0800d530 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800d530:	b500      	push	{lr}
 800d532:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800d534:	2805      	cmp	r0, #5
 800d536:	d80e      	bhi.n	800d556 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800d538:	9202      	str	r2, [sp, #8]
 800d53a:	9101      	str	r1, [sp, #4]
 800d53c:	4b0a      	ldr	r3, [pc, #40]	@ (800d568 <RegionCommonRxConfigPrint+0x38>)
 800d53e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d542:	9300      	str	r3, [sp, #0]
 800d544:	4b09      	ldr	r3, [pc, #36]	@ (800d56c <RegionCommonRxConfigPrint+0x3c>)
 800d546:	2201      	movs	r2, #1
 800d548:	2100      	movs	r1, #0
 800d54a:	2002      	movs	r0, #2
 800d54c:	f003 fbd4 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800d550:	b005      	add	sp, #20
 800d552:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800d556:	9201      	str	r2, [sp, #4]
 800d558:	9100      	str	r1, [sp, #0]
 800d55a:	4b05      	ldr	r3, [pc, #20]	@ (800d570 <RegionCommonRxConfigPrint+0x40>)
 800d55c:	2201      	movs	r2, #1
 800d55e:	2100      	movs	r1, #0
 800d560:	2002      	movs	r0, #2
 800d562:	f003 fbc9 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
}
 800d566:	e7f3      	b.n	800d550 <RegionCommonRxConfigPrint+0x20>
 800d568:	080120f8 	.word	0x080120f8
 800d56c:	08012090 	.word	0x08012090
 800d570:	080120b0 	.word	0x080120b0

0800d574 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800d574:	b500      	push	{lr}
 800d576:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800d578:	9101      	str	r1, [sp, #4]
 800d57a:	9000      	str	r0, [sp, #0]
 800d57c:	4b04      	ldr	r3, [pc, #16]	@ (800d590 <RegionCommonTxConfigPrint+0x1c>)
 800d57e:	2201      	movs	r2, #1
 800d580:	2100      	movs	r1, #0
 800d582:	2002      	movs	r0, #2
 800d584:	f003 fbb8 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
}
 800d588:	b003      	add	sp, #12
 800d58a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d58e:	bf00      	nop
 800d590:	080120cc 	.word	0x080120cc

0800d594 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 800d594:	b510      	push	{r4, lr}
 800d596:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800d598:	4b05      	ldr	r3, [pc, #20]	@ (800d5b0 <VerifyRfFreq+0x1c>)
 800d59a:	6a1b      	ldr	r3, [r3, #32]
 800d59c:	4798      	blx	r3
 800d59e:	b120      	cbz	r0, 800d5aa <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < 433175000 ) || ( freq > 434665000 ) )
 800d5a0:	4b04      	ldr	r3, [pc, #16]	@ (800d5b4 <VerifyRfFreq+0x20>)
 800d5a2:	4423      	add	r3, r4
 800d5a4:	4a04      	ldr	r2, [pc, #16]	@ (800d5b8 <VerifyRfFreq+0x24>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d800      	bhi.n	800d5ac <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 800d5aa:	bd10      	pop	{r4, pc}
        return false;
 800d5ac:	2000      	movs	r0, #0
 800d5ae:	e7fc      	b.n	800d5aa <VerifyRfFreq+0x16>
 800d5b0:	080126d4 	.word	0x080126d4
 800d5b4:	e62e4628 	.word	0xe62e4628
 800d5b8:	0016bc50 	.word	0x0016bc50

0800d5bc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800d5bc:	b570      	push	{r4, r5, r6, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	4605      	mov	r5, r0
 800d5c2:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU433[datarate];
 800d5c4:	4b13      	ldr	r3, [pc, #76]	@ (800d614 <GetTimeOnAir+0x58>)
 800d5c6:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU433 );
 800d5c8:	4913      	ldr	r1, [pc, #76]	@ (800d618 <GetTimeOnAir+0x5c>)
 800d5ca:	f7ff ff9f 	bl	800d50c <RegionCommonGetBandwidth>
 800d5ce:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800d5d0:	2d07      	cmp	r5, #7
 800d5d2:	d00e      	beq.n	800d5f2 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800d5d4:	4b11      	ldr	r3, [pc, #68]	@ (800d61c <GetTimeOnAir+0x60>)
 800d5d6:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800d5d8:	2001      	movs	r0, #1
 800d5da:	9003      	str	r0, [sp, #12]
 800d5dc:	b2e4      	uxtb	r4, r4
 800d5de:	9402      	str	r4, [sp, #8]
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	9301      	str	r3, [sp, #4]
 800d5e4:	2308      	movs	r3, #8
 800d5e6:	9300      	str	r3, [sp, #0]
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	4632      	mov	r2, r6
 800d5ec:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800d5ee:	b004      	add	sp, #16
 800d5f0:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800d5f2:	4b0a      	ldr	r3, [pc, #40]	@ (800d61c <GetTimeOnAir+0x60>)
 800d5f4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	9303      	str	r3, [sp, #12]
 800d5fa:	b2e4      	uxtb	r4, r4
 800d5fc:	9402      	str	r4, [sp, #8]
 800d5fe:	2000      	movs	r0, #0
 800d600:	9001      	str	r0, [sp, #4]
 800d602:	2305      	movs	r3, #5
 800d604:	9300      	str	r3, [sp, #0]
 800d606:	4603      	mov	r3, r0
 800d608:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d60c:	fb06 f202 	mul.w	r2, r6, r2
 800d610:	47a8      	blx	r5
 800d612:	e7ec      	b.n	800d5ee <GetTimeOnAir+0x32>
 800d614:	08012140 	.word	0x08012140
 800d618:	08012120 	.word	0x08012120
 800d61c:	080126d4 	.word	0x080126d4

0800d620 <RegionEU433GetPhyParam>:
#endif /* REGION_EU433 */

PhyParam_t RegionEU433GetPhyParam( GetPhyParams_t* getPhy )
{
 800d620:	b500      	push	{lr}
 800d622:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800d624:	2300      	movs	r3, #0
 800d626:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU433 )
    switch( getPhy->Attribute )
 800d628:	7803      	ldrb	r3, [r0, #0]
 800d62a:	3b0b      	subs	r3, #11
 800d62c:	2b2d      	cmp	r3, #45	@ 0x2d
 800d62e:	d82f      	bhi.n	800d690 <RegionEU433GetPhyParam+0x70>
 800d630:	e8df f003 	tbb	[pc, r3]
 800d634:	3f393633 	.word	0x3f393633
 800d638:	504c4845 	.word	0x504c4845
 800d63c:	2e5c5854 	.word	0x2e5c5854
 800d640:	6e682e65 	.word	0x6e682e65
 800d644:	2e2e7774 	.word	0x2e2e7774
 800d648:	2e177e7b 	.word	0x2e177e7b
 800d64c:	2e2e2e2e 	.word	0x2e2e2e2e
 800d650:	2e2e2e2e 	.word	0x2e2e2e2e
 800d654:	2e2e2e2e 	.word	0x2e2e2e2e
 800d658:	2e8b8481 	.word	0x2e8b8481
 800d65c:	2e918e2e 	.word	0x2e918e2e
 800d660:	9a94      	.short	0x9a94
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800d662:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d666:	f88d 3004 	strb.w	r3, [sp, #4]
 800d66a:	2307      	movs	r3, #7
 800d66c:	f88d 3005 	strb.w	r3, [sp, #5]
 800d670:	2300      	movs	r3, #0
 800d672:	f88d 3006 	strb.w	r3, [sp, #6]
 800d676:	2310      	movs	r3, #16
 800d678:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU433_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU433_TX_MIN_DATARATE,
                .NbChannels = EU433_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800d67c:	4b3e      	ldr	r3, [pc, #248]	@ (800d778 <RegionEU433GetPhyParam+0x158>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f503 7258 	add.w	r2, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800d684:	9202      	str	r2, [sp, #8]
 800d686:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800d688:	a801      	add	r0, sp, #4
 800d68a:	f7ff ff1c 	bl	800d4c6 <RegionCommonGetNextLowerTxDr>
 800d68e:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU433 */
    return phyParam;
 800d690:	9804      	ldr	r0, [sp, #16]
 800d692:	9005      	str	r0, [sp, #20]
}
 800d694:	b007      	add	sp, #28
 800d696:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800d69a:	2340      	movs	r3, #64	@ 0x40
 800d69c:	9304      	str	r3, [sp, #16]
            break;
 800d69e:	e7f7      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800d6a0:	2320      	movs	r3, #32
 800d6a2:	9304      	str	r3, [sp, #16]
            break;
 800d6a4:	e7f4      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU433[getPhy->Datarate];
 800d6a6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d6aa:	4a34      	ldr	r2, [pc, #208]	@ (800d77c <RegionEU433GetPhyParam+0x15c>)
 800d6ac:	5cd3      	ldrb	r3, [r2, r3]
 800d6ae:	9304      	str	r3, [sp, #16]
            break;
 800d6b0:	e7ee      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU433[getPhy->Datarate];
 800d6b2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d6b6:	4a32      	ldr	r2, [pc, #200]	@ (800d780 <RegionEU433GetPhyParam+0x160>)
 800d6b8:	5cd3      	ldrb	r3, [r2, r3]
 800d6ba:	9304      	str	r3, [sp, #16]
            break;
 800d6bc:	e7e8      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_DUTY_CYCLE_ENABLED;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	9304      	str	r3, [sp, #16]
            break;
 800d6c2:	e7e5      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_MAX_RX_WINDOW;
 800d6c4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800d6c8:	9304      	str	r3, [sp, #16]
            break;
 800d6ca:	e7e1      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800d6cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d6d0:	9304      	str	r3, [sp, #16]
            break;
 800d6d2:	e7dd      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800d6d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800d6d8:	9304      	str	r3, [sp, #16]
            break;
 800d6da:	e7d9      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800d6dc:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d6e0:	9304      	str	r3, [sp, #16]
            break;
 800d6e2:	e7d5      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800d6e4:	f241 7370 	movw	r3, #6000	@ 0x1770
 800d6e8:	9304      	str	r3, [sp, #16]
            break;
 800d6ea:	e7d1      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800d6ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d6f0:	4824      	ldr	r0, [pc, #144]	@ (800d784 <RegionEU433GetPhyParam+0x164>)
 800d6f2:	f001 fc19 	bl	800ef28 <randr>
 800d6f6:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 800d6fa:	9004      	str	r0, [sp, #16]
            break;
 800d6fc:	e7c8      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_RX_WND_2_FREQ;
 800d6fe:	4b22      	ldr	r3, [pc, #136]	@ (800d788 <RegionEU433GetPhyParam+0x168>)
 800d700:	9304      	str	r3, [sp, #16]
            break;
 800d702:	e7c5      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d704:	4b1c      	ldr	r3, [pc, #112]	@ (800d778 <RegionEU433GetPhyParam+0x158>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800d70c:	9304      	str	r3, [sp, #16]
            break;
 800d70e:	e7bf      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800d710:	4b19      	ldr	r3, [pc, #100]	@ (800d778 <RegionEU433GetPhyParam+0x158>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 800d718:	9304      	str	r3, [sp, #16]
            break;
 800d71a:	e7b9      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_MAX_NB_CHANNELS;
 800d71c:	2310      	movs	r3, #16
 800d71e:	9304      	str	r3, [sp, #16]
            break;
 800d720:	e7b6      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800d722:	4b15      	ldr	r3, [pc, #84]	@ (800d778 <RegionEU433GetPhyParam+0x158>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	9304      	str	r3, [sp, #16]
            break;
 800d728:	e7b2      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.fValue = EU433_DEFAULT_MAX_EIRP;
 800d72a:	4b18      	ldr	r3, [pc, #96]	@ (800d78c <RegionEU433GetPhyParam+0x16c>)
 800d72c:	9304      	str	r3, [sp, #16]
            break;
 800d72e:	e7af      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.fValue = EU433_DEFAULT_ANTENNA_GAIN;
 800d730:	4b17      	ldr	r3, [pc, #92]	@ (800d790 <RegionEU433GetPhyParam+0x170>)
 800d732:	9304      	str	r3, [sp, #16]
            break;
 800d734:	e7ac      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_BEACON_CHANNEL_FREQ;
 800d736:	4b14      	ldr	r3, [pc, #80]	@ (800d788 <RegionEU433GetPhyParam+0x168>)
 800d738:	9304      	str	r3, [sp, #16]
            break;
 800d73a:	e7a9      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU433_BEACON_SIZE;
 800d73c:	2311      	movs	r3, #17
 800d73e:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU433_RFU1_SIZE;
 800d742:	2301      	movs	r3, #1
 800d744:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800d748:	e7a2      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_BEACON_CHANNEL_DR;
 800d74a:	2303      	movs	r3, #3
 800d74c:	9304      	str	r3, [sp, #16]
            break;
 800d74e:	e79f      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_PING_SLOT_CHANNEL_FREQ;
 800d750:	4b0d      	ldr	r3, [pc, #52]	@ (800d788 <RegionEU433GetPhyParam+0x168>)
 800d752:	9304      	str	r3, [sp, #16]
            break;
 800d754:	e79c      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_PING_SLOT_CHANNEL_DR;
 800d756:	2303      	movs	r3, #3
 800d758:	9304      	str	r3, [sp, #16]
            break;
 800d75a:	e799      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = DataratesEU433[getPhy->Datarate];
 800d75c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d760:	4a0c      	ldr	r2, [pc, #48]	@ (800d794 <RegionEU433GetPhyParam+0x174>)
 800d762:	5cd3      	ldrb	r3, [r2, r3]
 800d764:	9304      	str	r3, [sp, #16]
            break;
 800d766:	e793      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU433 );
 800d768:	490b      	ldr	r1, [pc, #44]	@ (800d798 <RegionEU433GetPhyParam+0x178>)
 800d76a:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800d76e:	f7ff fecd 	bl	800d50c <RegionCommonGetBandwidth>
 800d772:	9004      	str	r0, [sp, #16]
            break;
 800d774:	e78c      	b.n	800d690 <RegionEU433GetPhyParam+0x70>
 800d776:	bf00      	nop
 800d778:	20001058 	.word	0x20001058
 800d77c:	08012118 	.word	0x08012118
 800d780:	08012110 	.word	0x08012110
 800d784:	fffffc18 	.word	0xfffffc18
 800d788:	19e87628 	.word	0x19e87628
 800d78c:	41426666 	.word	0x41426666
 800d790:	4009999a 	.word	0x4009999a
 800d794:	08012140 	.word	0x08012140
 800d798:	08012120 	.word	0x08012120

0800d79c <RegionEU433SetBandTxDone>:

void RegionEU433SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800d79c:	b510      	push	{r4, lr}
 800d79e:	b082      	sub	sp, #8
#if defined( REGION_EU433 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800d7a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d7d0 <RegionEU433SetBandTxDone+0x34>)
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	7803      	ldrb	r3, [r0, #0]
 800d7a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d7aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d7ae:	7a5b      	ldrb	r3, [r3, #9]
 800d7b0:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800d7b4:	4b07      	ldr	r3, [pc, #28]	@ (800d7d4 <RegionEU433SetBandTxDone+0x38>)
 800d7b6:	681c      	ldr	r4, [r3, #0]
 800d7b8:	6903      	ldr	r3, [r0, #16]
 800d7ba:	9300      	str	r3, [sp, #0]
 800d7bc:	68c3      	ldr	r3, [r0, #12]
 800d7be:	7842      	ldrb	r2, [r0, #1]
 800d7c0:	6881      	ldr	r1, [r0, #8]
 800d7c2:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800d7c6:	f7ff fc59 	bl	800d07c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU433 */
}
 800d7ca:	b002      	add	sp, #8
 800d7cc:	bd10      	pop	{r4, pc}
 800d7ce:	bf00      	nop
 800d7d0:	20001058 	.word	0x20001058
 800d7d4:	20001054 	.word	0x20001054

0800d7d8 <RegionEU433InitDefaults>:

void RegionEU433InitDefaults( InitDefaultsParams_t* params )
{
 800d7d8:	b510      	push	{r4, lr}
 800d7da:	b086      	sub	sp, #24
#if defined( REGION_EU433 )
    Band_t bands[EU433_MAX_NB_BANDS] =
 800d7dc:	2364      	movs	r3, #100	@ 0x64
 800d7de:	f8ad 3000 	strh.w	r3, [sp]
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	f88d 3002 	strb.w	r3, [sp, #2]
 800d7e8:	9301      	str	r3, [sp, #4]
 800d7ea:	9302      	str	r3, [sp, #8]
 800d7ec:	9303      	str	r3, [sp, #12]
 800d7ee:	9304      	str	r3, [sp, #16]
 800d7f0:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        EU433_BAND0
    };

    switch( params->Type )
 800d7f4:	7b03      	ldrb	r3, [r0, #12]
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d032      	beq.n	800d860 <RegionEU433InitDefaults+0x88>
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d03e      	beq.n	800d87c <RegionEU433InitDefaults+0xa4>
 800d7fe:	b10b      	cbz	r3, 800d804 <RegionEU433InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_EU433 */
}
 800d800:	b006      	add	sp, #24
 800d802:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800d804:	6803      	ldr	r3, [r0, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d0fa      	beq.n	800d800 <RegionEU433InitDefaults+0x28>
 800d80a:	6843      	ldr	r3, [r0, #4]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d0f7      	beq.n	800d800 <RegionEU433InitDefaults+0x28>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800d810:	4c1f      	ldr	r4, [pc, #124]	@ (800d890 <RegionEU433InitDefaults+0xb8>)
 800d812:	6023      	str	r3, [r4, #0]
            RegionBands = (Band_t*) params->Bands;
 800d814:	6880      	ldr	r0, [r0, #8]
 800d816:	4b1f      	ldr	r3, [pc, #124]	@ (800d894 <RegionEU433InitDefaults+0xbc>)
 800d818:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU433_MAX_NB_BANDS );
 800d81a:	2218      	movs	r2, #24
 800d81c:	4669      	mov	r1, sp
 800d81e:	f001 fb90 	bl	800ef42 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU433_LC1;
 800d822:	6824      	ldr	r4, [r4, #0]
 800d824:	4b1c      	ldr	r3, [pc, #112]	@ (800d898 <RegionEU433InitDefaults+0xc0>)
 800d826:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d82a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU433_LC2;
 800d82e:	f104 0c0c 	add.w	ip, r4, #12
 800d832:	f103 020c 	add.w	r2, r3, #12
 800d836:	ca07      	ldmia	r2, {r0, r1, r2}
 800d838:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU433_LC3;
 800d83c:	f104 0c18 	add.w	ip, r4, #24
 800d840:	3318      	adds	r3, #24
 800d842:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d846:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800d84a:	2307      	movs	r3, #7
 800d84c:	f8a4 336c 	strh.w	r3, [r4, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d850:	2201      	movs	r2, #1
 800d852:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
 800d856:	f504 7058 	add.w	r0, r4, #864	@ 0x360
 800d85a:	f7ff fc00 	bl	800d05e <RegionCommonChanMaskCopy>
            break;
 800d85e:	e7cf      	b.n	800d800 <RegionEU433InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800d860:	4b0b      	ldr	r3, [pc, #44]	@ (800d890 <RegionEU433InitDefaults+0xb8>)
 800d862:	6818      	ldr	r0, [r3, #0]
 800d864:	2300      	movs	r3, #0
 800d866:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800d868:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800d86a:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d86c:	2201      	movs	r2, #1
 800d86e:	f500 715b 	add.w	r1, r0, #876	@ 0x36c
 800d872:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800d876:	f7ff fbf2 	bl	800d05e <RegionCommonChanMaskCopy>
            break;
 800d87a:	e7c1      	b.n	800d800 <RegionEU433InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800d87c:	4b04      	ldr	r3, [pc, #16]	@ (800d890 <RegionEU433InitDefaults+0xb8>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 800d884:	f8b3 136c 	ldrh.w	r1, [r3, #876]	@ 0x36c
 800d888:	430a      	orrs	r2, r1
 800d88a:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 800d88e:	e7b7      	b.n	800d800 <RegionEU433InitDefaults+0x28>
 800d890:	20001058 	.word	0x20001058
 800d894:	20001054 	.word	0x20001054
 800d898:	08011a18 	.word	0x08011a18

0800d89c <RegionEU433Verify>:

bool RegionEU433Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d89c:	b508      	push	{r3, lr}
#if defined( REGION_EU433 )
    switch( phyAttribute )
 800d89e:	290f      	cmp	r1, #15
 800d8a0:	d837      	bhi.n	800d912 <RegionEU433Verify+0x76>
 800d8a2:	e8df f001 	tbb	[pc, r1]
 800d8a6:	360a      	.short	0x360a
 800d8a8:	0e363636 	.word	0x0e363636
 800d8ac:	2c362218 	.word	0x2c362218
 800d8b0:	3636362c 	.word	0x3636362c
 800d8b4:	0836      	.short	0x0836
 800d8b6:	2001      	movs	r0, #1
 800d8b8:	e02c      	b.n	800d914 <RegionEU433Verify+0x78>
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800d8ba:	6800      	ldr	r0, [r0, #0]
 800d8bc:	f7ff fe6a 	bl	800d594 <VerifyRfFreq>
 800d8c0:	e028      	b.n	800d914 <RegionEU433Verify+0x78>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE );
 800d8c2:	2207      	movs	r2, #7
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	f990 0000 	ldrsb.w	r0, [r0]
 800d8ca:	f7ff fb54 	bl	800cf76 <RegionCommonValueInRange>
 800d8ce:	3800      	subs	r0, #0
 800d8d0:	bf18      	it	ne
 800d8d2:	2001      	movne	r0, #1
 800d8d4:	e01e      	b.n	800d914 <RegionEU433Verify+0x78>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800d8d6:	2205      	movs	r2, #5
 800d8d8:	2100      	movs	r1, #0
 800d8da:	f990 0000 	ldrsb.w	r0, [r0]
 800d8de:	f7ff fb4a 	bl	800cf76 <RegionCommonValueInRange>
 800d8e2:	3800      	subs	r0, #0
 800d8e4:	bf18      	it	ne
 800d8e6:	2001      	movne	r0, #1
 800d8e8:	e014      	b.n	800d914 <RegionEU433Verify+0x78>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU433_RX_MIN_DATARATE, EU433_RX_MAX_DATARATE );
 800d8ea:	2207      	movs	r2, #7
 800d8ec:	2100      	movs	r1, #0
 800d8ee:	f990 0000 	ldrsb.w	r0, [r0]
 800d8f2:	f7ff fb40 	bl	800cf76 <RegionCommonValueInRange>
 800d8f6:	3800      	subs	r0, #0
 800d8f8:	bf18      	it	ne
 800d8fa:	2001      	movne	r0, #1
 800d8fc:	e00a      	b.n	800d914 <RegionEU433Verify+0x78>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU433_MAX_TX_POWER, EU433_MIN_TX_POWER );
 800d8fe:	2205      	movs	r2, #5
 800d900:	2100      	movs	r1, #0
 800d902:	f990 0000 	ldrsb.w	r0, [r0]
 800d906:	f7ff fb36 	bl	800cf76 <RegionCommonValueInRange>
 800d90a:	3800      	subs	r0, #0
 800d90c:	bf18      	it	ne
 800d90e:	2001      	movne	r0, #1
 800d910:	e000      	b.n	800d914 <RegionEU433Verify+0x78>
        case PHY_DUTY_CYCLE:
        {
            return EU433_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800d912:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU433 */
}
 800d914:	bd08      	pop	{r3, pc}
	...

0800d918 <RegionEU433ChanMaskSet>:
    }
#endif /* REGION_EU433 */
}

bool RegionEU433ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800d918:	b508      	push	{r3, lr}
#if defined( REGION_EU433 )
    switch( chanMaskSet->ChannelsMaskType )
 800d91a:	7903      	ldrb	r3, [r0, #4]
 800d91c:	b11b      	cbz	r3, 800d926 <RegionEU433ChanMaskSet+0xe>
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d00b      	beq.n	800d93a <RegionEU433ChanMaskSet+0x22>
 800d922:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU433 */
}
 800d924:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800d926:	4b0a      	ldr	r3, [pc, #40]	@ (800d950 <RegionEU433ChanMaskSet+0x38>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2201      	movs	r2, #1
 800d92c:	6801      	ldr	r1, [r0, #0]
 800d92e:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 800d932:	f7ff fb94 	bl	800d05e <RegionCommonChanMaskCopy>
    return true;
 800d936:	2001      	movs	r0, #1
            break;
 800d938:	e7f4      	b.n	800d924 <RegionEU433ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800d93a:	4b05      	ldr	r3, [pc, #20]	@ (800d950 <RegionEU433ChanMaskSet+0x38>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2201      	movs	r2, #1
 800d940:	6801      	ldr	r1, [r0, #0]
 800d942:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 800d946:	f7ff fb8a 	bl	800d05e <RegionCommonChanMaskCopy>
    return true;
 800d94a:	2001      	movs	r0, #1
            break;
 800d94c:	e7ea      	b.n	800d924 <RegionEU433ChanMaskSet+0xc>
 800d94e:	bf00      	nop
 800d950:	20001058 	.word	0x20001058

0800d954 <RegionEU433ComputeRxWindowParameters>:

void RegionEU433ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d954:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d956:	b083      	sub	sp, #12
 800d958:	460e      	mov	r6, r1
 800d95a:	4617      	mov	r7, r2
 800d95c:	461c      	mov	r4, r3
#if defined( REGION_EU433 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU433_RX_MAX_DATARATE );
 800d95e:	2807      	cmp	r0, #7
 800d960:	bfa8      	it	ge
 800d962:	2007      	movge	r0, #7
 800d964:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU433 );
 800d966:	4913      	ldr	r1, [pc, #76]	@ (800d9b4 <RegionEU433ComputeRxWindowParameters+0x60>)
 800d968:	f7ff fdd0 	bl	800d50c <RegionCommonGetBandwidth>
 800d96c:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800d96e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d972:	2b07      	cmp	r3, #7
 800d974:	d017      	beq.n	800d9a6 <RegionEU433ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU433[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU433[rxConfigParams->Datarate], BandwidthsEU433[rxConfigParams->Datarate] );
 800d976:	4a0f      	ldr	r2, [pc, #60]	@ (800d9b4 <RegionEU433ComputeRxWindowParameters+0x60>)
 800d978:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d97c:	4a0e      	ldr	r2, [pc, #56]	@ (800d9b8 <RegionEU433ComputeRxWindowParameters+0x64>)
 800d97e:	5cd0      	ldrb	r0, [r2, r3]
 800d980:	f7ff fc94 	bl	800d2ac <RegionCommonComputeSymbolTimeLoRa>
 800d984:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d986:	4b0d      	ldr	r3, [pc, #52]	@ (800d9bc <RegionEU433ComputeRxWindowParameters+0x68>)
 800d988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d98a:	4798      	blx	r3
 800d98c:	4603      	mov	r3, r0
 800d98e:	f104 020c 	add.w	r2, r4, #12
 800d992:	9201      	str	r2, [sp, #4]
 800d994:	3408      	adds	r4, #8
 800d996:	9400      	str	r4, [sp, #0]
 800d998:	463a      	mov	r2, r7
 800d99a:	4631      	mov	r1, r6
 800d99c:	4628      	mov	r0, r5
 800d99e:	f7ff fc93 	bl	800d2c8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU433 */
}
 800d9a2:	b003      	add	sp, #12
 800d9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU433[rxConfigParams->Datarate] );
 800d9a6:	4a04      	ldr	r2, [pc, #16]	@ (800d9b8 <RegionEU433ComputeRxWindowParameters+0x64>)
 800d9a8:	5cd0      	ldrb	r0, [r2, r3]
 800d9aa:	f7ff fc87 	bl	800d2bc <RegionCommonComputeSymbolTimeFsk>
 800d9ae:	4605      	mov	r5, r0
 800d9b0:	e7e9      	b.n	800d986 <RegionEU433ComputeRxWindowParameters+0x32>
 800d9b2:	bf00      	nop
 800d9b4:	08012120 	.word	0x08012120
 800d9b8:	08012140 	.word	0x08012140
 800d9bc:	080126d4 	.word	0x080126d4

0800d9c0 <RegionEU433RxConfig>:

bool RegionEU433RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9c4:	b08a      	sub	sp, #40	@ 0x28
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	460f      	mov	r7, r1
#if defined( REGION_EU433 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800d9ca:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800d9ce:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800d9d2:	4b37      	ldr	r3, [pc, #220]	@ (800dab0 <RegionEU433RxConfig+0xf0>)
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	4798      	blx	r3
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	d167      	bne.n	800daac <RegionEU433RxConfig+0xec>
 800d9dc:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800d9de:	7ce3      	ldrb	r3, [r4, #19]
 800d9e0:	b983      	cbnz	r3, 800da04 <RegionEU433RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800d9e2:	4b34      	ldr	r3, [pc, #208]	@ (800dab4 <RegionEU433RxConfig+0xf4>)
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	7823      	ldrb	r3, [r4, #0]
 800d9e8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d9ec:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800d9f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d9f4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d9f8:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800d9fc:	f1b8 0f00 	cmp.w	r8, #0
 800da00:	d100      	bne.n	800da04 <RegionEU433RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800da02:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU433[dr];
 800da04:	4b2c      	ldr	r3, [pc, #176]	@ (800dab8 <RegionEU433RxConfig+0xf8>)
 800da06:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800da0a:	4b29      	ldr	r3, [pc, #164]	@ (800dab0 <RegionEU433RxConfig+0xf0>)
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	4640      	mov	r0, r8
 800da10:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800da12:	2d07      	cmp	r5, #7
 800da14:	d02b      	beq.n	800da6e <RegionEU433RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800da16:	4b26      	ldr	r3, [pc, #152]	@ (800dab0 <RegionEU433RxConfig+0xf0>)
 800da18:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800da1c:	7ca3      	ldrb	r3, [r4, #18]
 800da1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800da20:	2601      	movs	r6, #1
 800da22:	9608      	str	r6, [sp, #32]
 800da24:	2300      	movs	r3, #0
 800da26:	9307      	str	r3, [sp, #28]
 800da28:	9306      	str	r3, [sp, #24]
 800da2a:	9305      	str	r3, [sp, #20]
 800da2c:	9304      	str	r3, [sp, #16]
 800da2e:	9303      	str	r3, [sp, #12]
 800da30:	8922      	ldrh	r2, [r4, #8]
 800da32:	9202      	str	r2, [sp, #8]
 800da34:	2208      	movs	r2, #8
 800da36:	9201      	str	r2, [sp, #4]
 800da38:	9300      	str	r3, [sp, #0]
 800da3a:	4633      	mov	r3, r6
 800da3c:	464a      	mov	r2, r9
 800da3e:	78a1      	ldrb	r1, [r4, #2]
 800da40:	4630      	mov	r0, r6
 800da42:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 800da44:	7c63      	ldrb	r3, [r4, #17]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d02d      	beq.n	800daa6 <RegionEU433RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU433[dr];
 800da4a:	4b1c      	ldr	r3, [pc, #112]	@ (800dabc <RegionEU433RxConfig+0xfc>)
 800da4c:	5d59      	ldrb	r1, [r3, r5]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU433[dr];
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800da4e:	4b18      	ldr	r3, [pc, #96]	@ (800dab0 <RegionEU433RxConfig+0xf0>)
 800da50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da52:	310d      	adds	r1, #13
 800da54:	b2c9      	uxtb	r1, r1
 800da56:	4630      	mov	r0, r6
 800da58:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800da5a:	462a      	mov	r2, r5
 800da5c:	4641      	mov	r1, r8
 800da5e:	7ce0      	ldrb	r0, [r4, #19]
 800da60:	f7ff fd66 	bl	800d530 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800da64:	703d      	strb	r5, [r7, #0]
    return true;
 800da66:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU433 */
}
 800da68:	b00a      	add	sp, #40	@ 0x28
 800da6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800da6e:	4b10      	ldr	r3, [pc, #64]	@ (800dab0 <RegionEU433RxConfig+0xf0>)
 800da70:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800da74:	7ca3      	ldrb	r3, [r4, #18]
 800da76:	9309      	str	r3, [sp, #36]	@ 0x24
 800da78:	2000      	movs	r0, #0
 800da7a:	9008      	str	r0, [sp, #32]
 800da7c:	9007      	str	r0, [sp, #28]
 800da7e:	9006      	str	r0, [sp, #24]
 800da80:	2301      	movs	r3, #1
 800da82:	9305      	str	r3, [sp, #20]
 800da84:	9004      	str	r0, [sp, #16]
 800da86:	9003      	str	r0, [sp, #12]
 800da88:	8923      	ldrh	r3, [r4, #8]
 800da8a:	9302      	str	r3, [sp, #8]
 800da8c:	2305      	movs	r3, #5
 800da8e:	9301      	str	r3, [sp, #4]
 800da90:	4b0b      	ldr	r3, [pc, #44]	@ (800dac0 <RegionEU433RxConfig+0x100>)
 800da92:	9300      	str	r3, [sp, #0]
 800da94:	4603      	mov	r3, r0
 800da96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800da9a:	fb02 f209 	mul.w	r2, r2, r9
 800da9e:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800daa2:	47d0      	blx	sl
 800daa4:	e7ce      	b.n	800da44 <RegionEU433RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU433[dr];
 800daa6:	4b07      	ldr	r3, [pc, #28]	@ (800dac4 <RegionEU433RxConfig+0x104>)
 800daa8:	5d59      	ldrb	r1, [r3, r5]
 800daaa:	e7d0      	b.n	800da4e <RegionEU433RxConfig+0x8e>
        return false;
 800daac:	2000      	movs	r0, #0
 800daae:	e7db      	b.n	800da68 <RegionEU433RxConfig+0xa8>
 800dab0:	080126d4 	.word	0x080126d4
 800dab4:	20001058 	.word	0x20001058
 800dab8:	08012140 	.word	0x08012140
 800dabc:	08012110 	.word	0x08012110
 800dac0:	00014585 	.word	0x00014585
 800dac4:	08012118 	.word	0x08012118

0800dac8 <RegionEU433TxConfig>:

bool RegionEU433TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800dac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dacc:	b08d      	sub	sp, #52	@ 0x34
 800dace:	4604      	mov	r4, r0
 800dad0:	460f      	mov	r7, r1
 800dad2:	4690      	mov	r8, r2
#if defined( REGION_EU433 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU433[txConfig->Datarate];
 800dad4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800dad8:	4a42      	ldr	r2, [pc, #264]	@ (800dbe4 <RegionEU433TxConfig+0x11c>)
 800dada:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800dade:	4d42      	ldr	r5, [pc, #264]	@ (800dbe8 <RegionEU433TxConfig+0x120>)
 800dae0:	682a      	ldr	r2, [r5, #0]
 800dae2:	7803      	ldrb	r3, [r0, #0]
 800dae4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dae8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800daec:	7a53      	ldrb	r3, [r2, #9]
 800daee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800daf2:	4a3e      	ldr	r2, [pc, #248]	@ (800dbec <RegionEU433TxConfig+0x124>)
 800daf4:	6812      	ldr	r2, [r2, #0]
 800daf6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dafa:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800dafe:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800db02:	f7ff fcff 	bl	800d504 <RegionCommonLimitTxPower>
 800db06:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU433 );
 800db08:	4939      	ldr	r1, [pc, #228]	@ (800dbf0 <RegionEU433TxConfig+0x128>)
 800db0a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800db0e:	f7ff fcfd 	bl	800d50c <RegionCommonGetBandwidth>
 800db12:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800db14:	68a2      	ldr	r2, [r4, #8]
 800db16:	6861      	ldr	r1, [r4, #4]
 800db18:	4630      	mov	r0, r6
 800db1a:	f7ff fc11 	bl	800d340 <RegionCommonComputeTxPower>
 800db1e:	900b      	str	r0, [sp, #44]	@ 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800db20:	4b34      	ldr	r3, [pc, #208]	@ (800dbf4 <RegionEU433TxConfig+0x12c>)
 800db22:	68da      	ldr	r2, [r3, #12]
 800db24:	6829      	ldr	r1, [r5, #0]
 800db26:	7823      	ldrb	r3, [r4, #0]
 800db28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800db2c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800db30:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800db32:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800db36:	2b07      	cmp	r3, #7
 800db38:	d031      	beq.n	800db9e <RegionEU433TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800db3a:	4b2e      	ldr	r3, [pc, #184]	@ (800dbf4 <RegionEU433TxConfig+0x12c>)
 800db3c:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800db40:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800db44:	9308      	str	r3, [sp, #32]
 800db46:	2200      	movs	r2, #0
 800db48:	9207      	str	r2, [sp, #28]
 800db4a:	9206      	str	r2, [sp, #24]
 800db4c:	9205      	str	r2, [sp, #20]
 800db4e:	2501      	movs	r5, #1
 800db50:	9504      	str	r5, [sp, #16]
 800db52:	9203      	str	r2, [sp, #12]
 800db54:	2308      	movs	r3, #8
 800db56:	9302      	str	r3, [sp, #8]
 800db58:	9501      	str	r5, [sp, #4]
 800db5a:	f8cd a000 	str.w	sl, [sp]
 800db5e:	464b      	mov	r3, r9
 800db60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800db62:	4628      	mov	r0, r5
 800db64:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800db66:	4b20      	ldr	r3, [pc, #128]	@ (800dbe8 <RegionEU433TxConfig+0x120>)
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	7823      	ldrb	r3, [r4, #0]
 800db6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800db70:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800db74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800db78:	f7ff fcfc 	bl	800d574 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800db7c:	89a1      	ldrh	r1, [r4, #12]
 800db7e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800db82:	f7ff fd1b 	bl	800d5bc <GetTimeOnAir>
 800db86:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800db8a:	4b1a      	ldr	r3, [pc, #104]	@ (800dbf4 <RegionEU433TxConfig+0x12c>)
 800db8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db8e:	7b21      	ldrb	r1, [r4, #12]
 800db90:	4628      	mov	r0, r5
 800db92:	4798      	blx	r3

    *txPower = txPowerLimited;
 800db94:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU433 */
}
 800db96:	2001      	movs	r0, #1
 800db98:	b00d      	add	sp, #52	@ 0x34
 800db9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800db9e:	4b15      	ldr	r3, [pc, #84]	@ (800dbf4 <RegionEU433TxConfig+0x12c>)
 800dba0:	69dd      	ldr	r5, [r3, #28]
 800dba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dba6:	fb03 f30a 	mul.w	r3, r3, sl
 800dbaa:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800dbae:	9208      	str	r2, [sp, #32]
 800dbb0:	f04f 0a00 	mov.w	sl, #0
 800dbb4:	f8cd a01c 	str.w	sl, [sp, #28]
 800dbb8:	f8cd a018 	str.w	sl, [sp, #24]
 800dbbc:	f8cd a014 	str.w	sl, [sp, #20]
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	9204      	str	r2, [sp, #16]
 800dbc4:	f8cd a00c 	str.w	sl, [sp, #12]
 800dbc8:	2205      	movs	r2, #5
 800dbca:	9202      	str	r2, [sp, #8]
 800dbcc:	f8cd a004 	str.w	sl, [sp, #4]
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	464b      	mov	r3, r9
 800dbd4:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800dbd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dbda:	4650      	mov	r0, sl
 800dbdc:	47a8      	blx	r5
        modem = MODEM_FSK;
 800dbde:	4655      	mov	r5, sl
 800dbe0:	e7c1      	b.n	800db66 <RegionEU433TxConfig+0x9e>
 800dbe2:	bf00      	nop
 800dbe4:	08012140 	.word	0x08012140
 800dbe8:	20001058 	.word	0x20001058
 800dbec:	20001054 	.word	0x20001054
 800dbf0:	08012120 	.word	0x08012120
 800dbf4:	080126d4 	.word	0x080126d4

0800dbf8 <RegionEU433LinkAdrReq>:

uint8_t RegionEU433LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800dbf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbfc:	b08f      	sub	sp, #60	@ 0x3c
 800dbfe:	4605      	mov	r5, r0
 800dc00:	4689      	mov	r9, r1
 800dc02:	4690      	mov	r8, r2
 800dc04:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU433 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800dc06:	2400      	movs	r4, #0
 800dc08:	940c      	str	r4, [sp, #48]	@ 0x30
 800dc0a:	f8ad 4034 	strh.w	r4, [sp, #52]	@ 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800dc0e:	f8ad 402e 	strh.w	r4, [sp, #46]	@ 0x2e
    uint8_t status = 0x07;
 800dc12:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800dc14:	e030      	b.n	800dc78 <RegionEU433LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU433_MAX_NB_CHANNELS; i++ )
 800dc16:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800dc1a:	2607      	movs	r6, #7
 800dc1c:	e012      	b.n	800dc44 <RegionEU433LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800dc1e:	4a58      	ldr	r2, [pc, #352]	@ (800dd80 <RegionEU433LinkAdrReq+0x188>)
 800dc20:	6812      	ldr	r2, [r2, #0]
 800dc22:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800dc26:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800dc2a:	b13a      	cbz	r2, 800dc3c <RegionEU433LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	fa02 f20c 	lsl.w	r2, r2, ip
 800dc32:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800dc36:	430a      	orrs	r2, r1
 800dc38:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
            for( uint8_t i = 0; i < EU433_MAX_NB_CHANNELS; i++ )
 800dc3c:	f10c 0c01 	add.w	ip, ip, #1
 800dc40:	fa5f fc8c 	uxtb.w	ip, ip
 800dc44:	f1bc 0f0f 	cmp.w	ip, #15
 800dc48:	d816      	bhi.n	800dc78 <RegionEU433LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800dc4a:	2b06      	cmp	r3, #6
 800dc4c:	d0e7      	beq.n	800dc1e <RegionEU433LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800dc4e:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 800dc52:	fa4e fe0c 	asr.w	lr, lr, ip
 800dc56:	f01e 0f01 	tst.w	lr, #1
 800dc5a:	d0ef      	beq.n	800dc3c <RegionEU433LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800dc5c:	4a48      	ldr	r2, [pc, #288]	@ (800dd80 <RegionEU433LinkAdrReq+0x188>)
 800dc5e:	6812      	ldr	r2, [r2, #0]
 800dc60:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800dc64:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800dc68:	2a00      	cmp	r2, #0
 800dc6a:	d1e7      	bne.n	800dc3c <RegionEU433LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800dc6c:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800dc70:	e7e4      	b.n	800dc3c <RegionEU433LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800dc72:	2606      	movs	r6, #6
 800dc74:	e000      	b.n	800dc78 <RegionEU433LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800dc76:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800dc78:	7a2b      	ldrb	r3, [r5, #8]
 800dc7a:	42a3      	cmp	r3, r4
 800dc7c:	d919      	bls.n	800dcb2 <RegionEU433LinkAdrReq+0xba>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800dc7e:	6868      	ldr	r0, [r5, #4]
 800dc80:	a90c      	add	r1, sp, #48	@ 0x30
 800dc82:	4420      	add	r0, r4
 800dc84:	f7ff fa9c 	bl	800d1c0 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800dc88:	4603      	mov	r3, r0
 800dc8a:	b190      	cbz	r0, 800dcb2 <RegionEU433LinkAdrReq+0xba>
        bytesProcessed += nextIndex;
 800dc8c:	4423      	add	r3, r4
 800dc8e:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 800dc90:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800dc94:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800dc98:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800dc9c:	b90b      	cbnz	r3, 800dca2 <RegionEU433LinkAdrReq+0xaa>
 800dc9e:	2a00      	cmp	r2, #0
 800dca0:	d0e7      	beq.n	800dc72 <RegionEU433LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800dca2:	1e5a      	subs	r2, r3, #1
 800dca4:	b2d2      	uxtb	r2, r2
 800dca6:	2a04      	cmp	r2, #4
 800dca8:	d9e5      	bls.n	800dc76 <RegionEU433LinkAdrReq+0x7e>
 800dcaa:	2b06      	cmp	r3, #6
 800dcac:	d9b3      	bls.n	800dc16 <RegionEU433LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800dcae:	2606      	movs	r6, #6
 800dcb0:	e7e2      	b.n	800dc78 <RegionEU433LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800dcb2:	2302      	movs	r3, #2
 800dcb4:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800dcb8:	7a6b      	ldrb	r3, [r5, #9]
 800dcba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
    phyParam = RegionEU433GetPhyParam( &getPhy );
 800dcbe:	a80a      	add	r0, sp, #40	@ 0x28
 800dcc0:	f7ff fcae 	bl	800d620 <RegionEU433GetPhyParam>
 800dcc4:	9009      	str	r0, [sp, #36]	@ 0x24

    linkAdrVerifyParams.Status = status;
 800dcc6:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800dcca:	7aab      	ldrb	r3, [r5, #10]
 800dccc:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800dcd0:	f99d 3031 	ldrsb.w	r3, [sp, #49]	@ 0x31
 800dcd4:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800dcd8:	f99d 3032 	ldrsb.w	r3, [sp, #50]	@ 0x32
 800dcdc:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800dce0:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800dce4:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800dce8:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800dcec:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800dcf0:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800dcf4:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800dcf8:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800dcfc:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU433_MAX_NB_CHANNELS;
 800dd00:	2310      	movs	r3, #16
 800dd02:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800dd06:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 800dd0a:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800dd0c:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU433_TX_MAX_DATARATE;
 800dd10:	2307      	movs	r3, #7
 800dd12:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800dd16:	4b1a      	ldr	r3, [pc, #104]	@ (800dd80 <RegionEU433LinkAdrReq+0x188>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	9307      	str	r3, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU433_MIN_TX_POWER;
 800dd1c:	2305      	movs	r3, #5
 800dd1e:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU433_MAX_TX_POWER;
 800dd22:	2300      	movs	r3, #0
 800dd24:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800dd28:	682b      	ldr	r3, [r5, #0]
 800dd2a:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800dd2c:	ab0c      	add	r3, sp, #48	@ 0x30
 800dd2e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800dd32:	f10d 0131 	add.w	r1, sp, #49	@ 0x31
 800dd36:	a801      	add	r0, sp, #4
 800dd38:	f7ff fa60 	bl	800d1fc <RegionCommonLinkAdrReqVerifyParams>
 800dd3c:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800dd3e:	2807      	cmp	r0, #7
 800dd40:	d010      	beq.n	800dd64 <RegionEU433LinkAdrReq+0x16c>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800dd42:	f99d 3031 	ldrsb.w	r3, [sp, #49]	@ 0x31
 800dd46:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800dd4a:	f99d 3032 	ldrsb.w	r3, [sp, #50]	@ 0x32
 800dd4e:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800dd52:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800dd56:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800dd58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dd5a:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU433 */
    return status;
}
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	b00f      	add	sp, #60	@ 0x3c
 800dd60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800dd64:	4e06      	ldr	r6, [pc, #24]	@ (800dd80 <RegionEU433LinkAdrReq+0x188>)
 800dd66:	6830      	ldr	r0, [r6, #0]
 800dd68:	220c      	movs	r2, #12
 800dd6a:	2100      	movs	r1, #0
 800dd6c:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800dd70:	f001 f8ff 	bl	800ef72 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800dd74:	6833      	ldr	r3, [r6, #0]
 800dd76:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 800dd7a:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
 800dd7e:	e7e0      	b.n	800dd42 <RegionEU433LinkAdrReq+0x14a>
 800dd80:	20001058 	.word	0x20001058

0800dd84 <RegionEU433RxParamSetupReq>:

uint8_t RegionEU433RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800dd84:	b538      	push	{r3, r4, r5, lr}
 800dd86:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU433 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800dd88:	6840      	ldr	r0, [r0, #4]
 800dd8a:	f7ff fc03 	bl	800d594 <VerifyRfFreq>
 800dd8e:	b1a0      	cbz	r0, 800ddba <RegionEU433RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 800dd90:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU433_RX_MIN_DATARATE, EU433_RX_MAX_DATARATE ) == false )
 800dd92:	2207      	movs	r2, #7
 800dd94:	2100      	movs	r1, #0
 800dd96:	f994 0000 	ldrsb.w	r0, [r4]
 800dd9a:	f7ff f8ec 	bl	800cf76 <RegionCommonValueInRange>
 800dd9e:	b908      	cbnz	r0, 800dda4 <RegionEU433RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800dda0:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU433_MIN_RX1_DR_OFFSET, EU433_MAX_RX1_DR_OFFSET ) == false )
 800dda4:	2205      	movs	r2, #5
 800dda6:	2100      	movs	r1, #0
 800dda8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ddac:	f7ff f8e3 	bl	800cf76 <RegionCommonValueInRange>
 800ddb0:	b908      	cbnz	r0, 800ddb6 <RegionEU433RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800ddb2:	f005 05fb 	and.w	r5, r5, #251	@ 0xfb
    }

#endif /* REGION_EU433 */
    return status;
}
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800ddba:	2506      	movs	r5, #6
 800ddbc:	e7e9      	b.n	800dd92 <RegionEU433RxParamSetupReq+0xe>

0800ddbe <RegionEU433TxParamSetupReq>:

int8_t RegionEU433TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800ddbe:	f04f 30ff 	mov.w	r0, #4294967295
 800ddc2:	4770      	bx	lr

0800ddc4 <RegionEU433DlChannelReq>:
int8_t RegionEU433DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    uint8_t status = 0x03;

#if defined( REGION_EU433 )
    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 800ddc4:	7803      	ldrb	r3, [r0, #0]
 800ddc6:	2b0f      	cmp	r3, #15
 800ddc8:	d901      	bls.n	800ddce <RegionEU433DlChannelReq+0xa>
    {
        return 0;
 800ddca:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU433 */
    return status;
}
 800ddcc:	4770      	bx	lr
{
 800ddce:	b510      	push	{r4, lr}
 800ddd0:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 800ddd2:	6840      	ldr	r0, [r0, #4]
 800ddd4:	f7ff fbde 	bl	800d594 <VerifyRfFreq>
 800ddd8:	b160      	cbz	r0, 800ddf4 <RegionEU433DlChannelReq+0x30>
    uint8_t status = 0x03;
 800ddda:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800dddc:	4b0b      	ldr	r3, [pc, #44]	@ (800de0c <RegionEU433DlChannelReq+0x48>)
 800ddde:	681a      	ldr	r2, [r3, #0]
 800dde0:	7823      	ldrb	r3, [r4, #0]
 800dde2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800dde6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800ddea:	b929      	cbnz	r1, 800ddf8 <RegionEU433DlChannelReq+0x34>
        status &= 0xFD;
 800ddec:	f000 00fd 	and.w	r0, r0, #253	@ 0xfd
    return status;
 800ddf0:	b240      	sxtb	r0, r0
}
 800ddf2:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800ddf4:	2002      	movs	r0, #2
 800ddf6:	e7f1      	b.n	800dddc <RegionEU433DlChannelReq+0x18>
    if( status == 0x03 )
 800ddf8:	2803      	cmp	r0, #3
 800ddfa:	d1f9      	bne.n	800ddf0 <RegionEU433DlChannelReq+0x2c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800ddfc:	6861      	ldr	r1, [r4, #4]
 800ddfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800de02:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800de06:	6051      	str	r1, [r2, #4]
 800de08:	e7f2      	b.n	800ddf0 <RegionEU433DlChannelReq+0x2c>
 800de0a:	bf00      	nop
 800de0c:	20001058 	.word	0x20001058

0800de10 <RegionEU433AlternateDr>:
#if defined( REGION_EU433 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU433 */
}
 800de10:	4770      	bx	lr
	...

0800de14 <RegionEU433NextChannel>:

LoRaMacStatus_t RegionEU433NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800de14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de16:	b097      	sub	sp, #92	@ 0x5c
 800de18:	4604      	mov	r4, r0
 800de1a:	460f      	mov	r7, r1
 800de1c:	4616      	mov	r6, r2
 800de1e:	461d      	mov	r5, r3
#if defined( REGION_EU433 )
    uint8_t nbEnabledChannels = 0;
 800de20:	2100      	movs	r1, #0
 800de22:	f88d 1057 	strb.w	r1, [sp, #87]	@ 0x57
    uint8_t nbRestrictedChannels = 0;
 800de26:	f88d 1056 	strb.w	r1, [sp, #86]	@ 0x56
    uint8_t enabledChannels[EU433_MAX_NB_CHANNELS] = { 0 };
 800de2a:	9111      	str	r1, [sp, #68]	@ 0x44
 800de2c:	9112      	str	r1, [sp, #72]	@ 0x48
 800de2e:	9113      	str	r1, [sp, #76]	@ 0x4c
 800de30:	9114      	str	r1, [sp, #80]	@ 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU433_JOIN_CHANNELS;
 800de32:	2307      	movs	r3, #7
 800de34:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800de38:	4b34      	ldr	r3, [pc, #208]	@ (800df0c <RegionEU433NextChannel+0xf8>)
 800de3a:	6818      	ldr	r0, [r3, #0]
 800de3c:	2201      	movs	r2, #1
 800de3e:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800de42:	f7ff f8f6 	bl	800d032 <RegionCommonCountChannels>
 800de46:	b938      	cbnz	r0, 800de58 <RegionEU433NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800de48:	4b30      	ldr	r3, [pc, #192]	@ (800df0c <RegionEU433NextChannel+0xf8>)
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	f8b2 3360 	ldrh.w	r3, [r2, #864]	@ 0x360
 800de50:	f043 0307 	orr.w	r3, r3, #7
 800de54:	f8a2 3360 	strh.w	r3, [r2, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800de58:	7a63      	ldrb	r3, [r4, #9]
 800de5a:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800de5e:	7a23      	ldrb	r3, [r4, #8]
 800de60:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800de64:	4b29      	ldr	r3, [pc, #164]	@ (800df0c <RegionEU433NextChannel+0xf8>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f503 7258 	add.w	r2, r3, #864	@ 0x360
 800de6c:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800de6e:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800de70:	4b27      	ldr	r3, [pc, #156]	@ (800df10 <RegionEU433NextChannel+0xfc>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU433_MAX_NB_CHANNELS;
 800de76:	2310      	movs	r3, #16
 800de78:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800de7c:	f10d 030a 	add.w	r3, sp, #10
 800de80:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800de82:	6823      	ldr	r3, [r4, #0]
 800de84:	9309      	str	r3, [sp, #36]	@ 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800de86:	6863      	ldr	r3, [r4, #4]
 800de88:	930a      	str	r3, [sp, #40]	@ 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800de8a:	7aa3      	ldrb	r3, [r4, #10]
 800de8c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    identifyChannelsParam.MaxBands = EU433_MAX_NB_BANDS;
 800de90:	2301      	movs	r3, #1
 800de92:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800de96:	ab0c      	add	r3, sp, #48	@ 0x30
 800de98:	f104 020c 	add.w	r2, r4, #12
 800de9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dea0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800dea4:	7d23      	ldrb	r3, [r4, #20]
 800dea6:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800deaa:	8ae1      	ldrh	r1, [r4, #22]
 800deac:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800deb0:	f7ff fb84 	bl	800d5bc <GetTimeOnAir>
 800deb4:	900f      	str	r0, [sp, #60]	@ 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800deb6:	ab03      	add	r3, sp, #12
 800deb8:	9310      	str	r3, [sp, #64]	@ 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800deba:	9601      	str	r6, [sp, #4]
 800debc:	f10d 0356 	add.w	r3, sp, #86	@ 0x56
 800dec0:	9300      	str	r3, [sp, #0]
 800dec2:	f10d 0357 	add.w	r3, sp, #87	@ 0x57
 800dec6:	aa11      	add	r2, sp, #68	@ 0x44
 800dec8:	4629      	mov	r1, r5
 800deca:	a809      	add	r0, sp, #36	@ 0x24
 800decc:	f7ff fab1 	bl	800d432 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800ded0:	4604      	mov	r4, r0
 800ded2:	b120      	cbz	r0, 800dede <RegionEU433NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800ded4:	280c      	cmp	r0, #12
 800ded6:	d00f      	beq.n	800def8 <RegionEU433NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU433 */
}
 800ded8:	4620      	mov	r0, r4
 800deda:	b017      	add	sp, #92	@ 0x5c
 800dedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800dede:	f89d 1057 	ldrb.w	r1, [sp, #87]	@ 0x57
 800dee2:	3901      	subs	r1, #1
 800dee4:	f001 f820 	bl	800ef28 <randr>
 800dee8:	f100 0358 	add.w	r3, r0, #88	@ 0x58
 800deec:	eb0d 0003 	add.w	r0, sp, r3
 800def0:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800def4:	703b      	strb	r3, [r7, #0]
 800def6:	e7ef      	b.n	800ded8 <RegionEU433NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800def8:	4b04      	ldr	r3, [pc, #16]	@ (800df0c <RegionEU433NextChannel+0xf8>)
 800defa:	681a      	ldr	r2, [r3, #0]
 800defc:	f8b2 3360 	ldrh.w	r3, [r2, #864]	@ 0x360
 800df00:	f043 0307 	orr.w	r3, r3, #7
 800df04:	f8a2 3360 	strh.w	r3, [r2, #864]	@ 0x360
 800df08:	e7e6      	b.n	800ded8 <RegionEU433NextChannel+0xc4>
 800df0a:	bf00      	nop
 800df0c:	20001058 	.word	0x20001058
 800df10:	20001054 	.word	0x20001054

0800df14 <RegionEU433ChannelAdd>:

LoRaMacStatus_t RegionEU433ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800df14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_EU433 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800df16:	7905      	ldrb	r5, [r0, #4]

    if( id < EU433_NUMB_DEFAULT_CHANNELS )
 800df18:	2d02      	cmp	r5, #2
 800df1a:	d94a      	bls.n	800dfb2 <RegionEU433ChannelAdd+0x9e>
 800df1c:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU433_MAX_NB_CHANNELS )
 800df1e:	2d0f      	cmp	r5, #15
 800df20:	d849      	bhi.n	800dfb6 <RegionEU433ChannelAdd+0xa2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE ) == false )
 800df22:	6803      	ldr	r3, [r0, #0]
 800df24:	7a18      	ldrb	r0, [r3, #8]
 800df26:	f340 0003 	sbfx	r0, r0, #0, #4
 800df2a:	2207      	movs	r2, #7
 800df2c:	2100      	movs	r1, #0
 800df2e:	b240      	sxtb	r0, r0
 800df30:	f7ff f821 	bl	800cf76 <RegionCommonValueInRange>
 800df34:	b1f8      	cbz	r0, 800df76 <RegionEU433ChannelAdd+0x62>
    bool drInvalid = false;
 800df36:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE ) == false )
 800df38:	6823      	ldr	r3, [r4, #0]
 800df3a:	7a18      	ldrb	r0, [r3, #8]
 800df3c:	f340 1003 	sbfx	r0, r0, #4, #4
 800df40:	2207      	movs	r2, #7
 800df42:	2100      	movs	r1, #0
 800df44:	b240      	sxtb	r0, r0
 800df46:	f7ff f816 	bl	800cf76 <RegionCommonValueInRange>
 800df4a:	b900      	cbnz	r0, 800df4e <RegionEU433ChannelAdd+0x3a>
    {
        drInvalid = true;
 800df4c:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800df4e:	6821      	ldr	r1, [r4, #0]
 800df50:	7a0b      	ldrb	r3, [r1, #8]
 800df52:	f343 0203 	sbfx	r2, r3, #0, #4
 800df56:	b252      	sxtb	r2, r2
 800df58:	f343 1303 	sbfx	r3, r3, #4, #4
 800df5c:	b25b      	sxtb	r3, r3
 800df5e:	429a      	cmp	r2, r3
 800df60:	dd00      	ble.n	800df64 <RegionEU433ChannelAdd+0x50>
    {
        drInvalid = true;
 800df62:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 800df64:	6808      	ldr	r0, [r1, #0]
 800df66:	f7ff fb15 	bl	800d594 <VerifyRfFreq>
 800df6a:	b130      	cbz	r0, 800df7a <RegionEU433ChannelAdd+0x66>
    bool freqInvalid = false;
 800df6c:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800df6e:	b136      	cbz	r6, 800df7e <RegionEU433ChannelAdd+0x6a>
 800df70:	b31b      	cbz	r3, 800dfba <RegionEU433ChannelAdd+0xa6>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800df72:	2006      	movs	r0, #6
 800df74:	e020      	b.n	800dfb8 <RegionEU433ChannelAdd+0xa4>
        drInvalid = true;
 800df76:	2601      	movs	r6, #1
 800df78:	e7de      	b.n	800df38 <RegionEU433ChannelAdd+0x24>
            freqInvalid = true;
 800df7a:	2301      	movs	r3, #1
 800df7c:	e7f7      	b.n	800df6e <RegionEU433ChannelAdd+0x5a>
    }
    if( drInvalid == true )
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800df7e:	b9f3      	cbnz	r3, 800dfbe <RegionEU433ChannelAdd+0xaa>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800df80:	4f10      	ldr	r7, [pc, #64]	@ (800dfc4 <RegionEU433ChannelAdd+0xb0>)
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	006e      	lsls	r6, r5, #1
 800df86:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800df8a:	220c      	movs	r2, #12
 800df8c:	6821      	ldr	r1, [r4, #0]
 800df8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800df92:	f000 ffd6 	bl	800ef42 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	442e      	add	r6, r5
 800df9a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800df9e:	2000      	movs	r0, #0
 800dfa0:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800dfa2:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 800dfa6:	2101      	movs	r1, #1
 800dfa8:	40a9      	lsls	r1, r5
 800dfaa:	430a      	orrs	r2, r1
 800dfac:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 800dfb0:	e002      	b.n	800dfb8 <RegionEU433ChannelAdd+0xa4>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800dfb2:	2006      	movs	r0, #6
 800dfb4:	e000      	b.n	800dfb8 <RegionEU433ChannelAdd+0xa4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dfb6:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU433 */
}
 800dfb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_DATARATE_INVALID;
 800dfba:	2005      	movs	r0, #5
 800dfbc:	e7fc      	b.n	800dfb8 <RegionEU433ChannelAdd+0xa4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800dfbe:	2004      	movs	r0, #4
 800dfc0:	e7fa      	b.n	800dfb8 <RegionEU433ChannelAdd+0xa4>
 800dfc2:	bf00      	nop
 800dfc4:	20001058 	.word	0x20001058

0800dfc8 <RegionEU433ChannelsRemove>:

bool RegionEU433ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU433 )
    uint8_t id = channelRemove->ChannelId;
 800dfc8:	7801      	ldrb	r1, [r0, #0]

    if( id < EU433_NUMB_DEFAULT_CHANNELS )
 800dfca:	2902      	cmp	r1, #2
 800dfcc:	d801      	bhi.n	800dfd2 <RegionEU433ChannelsRemove+0xa>
    {
        return false;
 800dfce:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU433_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU433 */
}
 800dfd0:	4770      	bx	lr
{
 800dfd2:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800dfd4:	4b09      	ldr	r3, [pc, #36]	@ (800dffc <RegionEU433ChannelsRemove+0x34>)
 800dfd6:	6818      	ldr	r0, [r3, #0]
 800dfd8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800dfdc:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800dfe0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	f840 200c 	str.w	r2, [r0, ip]
 800dfea:	605a      	str	r2, [r3, #4]
 800dfec:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU433_MAX_NB_CHANNELS );
 800dfee:	2210      	movs	r2, #16
 800dff0:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800dff4:	f7ff f801 	bl	800cffa <RegionCommonChanDisable>
}
 800dff8:	bd08      	pop	{r3, pc}
 800dffa:	bf00      	nop
 800dffc:	20001058 	.word	0x20001058

0800e000 <RegionEU433ApplyCFList>:
{
 800e000:	b570      	push	{r4, r5, r6, lr}
 800e002:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800e004:	2350      	movs	r3, #80	@ 0x50
 800e006:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800e00a:	7a03      	ldrb	r3, [r0, #8]
 800e00c:	2b10      	cmp	r3, #16
 800e00e:	d136      	bne.n	800e07e <RegionEU433ApplyCFList+0x7e>
 800e010:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800e012:	6843      	ldr	r3, [r0, #4]
 800e014:	7bdd      	ldrb	r5, [r3, #15]
 800e016:	2d00      	cmp	r5, #0
 800e018:	d131      	bne.n	800e07e <RegionEU433ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU433_NUMB_DEFAULT_CHANNELS; chanIdx < EU433_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800e01a:	2403      	movs	r4, #3
 800e01c:	e01b      	b.n	800e056 <RegionEU433ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800e01e:	6872      	ldr	r2, [r6, #4]
 800e020:	5d53      	ldrb	r3, [r2, r5]
 800e022:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800e024:	442a      	add	r2, r5
 800e026:	7851      	ldrb	r1, [r2, #1]
 800e028:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e02c:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800e02e:	7892      	ldrb	r2, [r2, #2]
 800e030:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e034:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800e036:	2264      	movs	r2, #100	@ 0x64
 800e038:	fb02 f303 	mul.w	r3, r2, r3
 800e03c:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800e03e:	2300      	movs	r3, #0
 800e040:	9304      	str	r3, [sp, #16]
 800e042:	e011      	b.n	800e068 <RegionEU433ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800e044:	f88d 4000 	strb.w	r4, [sp]
            RegionEU433ChannelsRemove( &channelRemove );
 800e048:	4668      	mov	r0, sp
 800e04a:	f7ff ffbd 	bl	800dfc8 <RegionEU433ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU433_NUMB_DEFAULT_CHANNELS; chanIdx < EU433_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800e04e:	3503      	adds	r5, #3
 800e050:	b2ed      	uxtb	r5, r5
 800e052:	3401      	adds	r4, #1
 800e054:	b2e4      	uxtb	r4, r4
 800e056:	2c0f      	cmp	r4, #15
 800e058:	d811      	bhi.n	800e07e <RegionEU433ApplyCFList+0x7e>
        if( chanIdx < ( EU433_NUMB_CHANNELS_CF_LIST + EU433_NUMB_DEFAULT_CHANNELS ) )
 800e05a:	2c07      	cmp	r4, #7
 800e05c:	d9df      	bls.n	800e01e <RegionEU433ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800e05e:	2300      	movs	r3, #0
 800e060:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800e062:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800e066:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800e068:	9b03      	ldr	r3, [sp, #12]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d0ea      	beq.n	800e044 <RegionEU433ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800e06e:	ab03      	add	r3, sp, #12
 800e070:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800e072:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU433ChannelAdd( &channelAdd );
 800e076:	a801      	add	r0, sp, #4
 800e078:	f7ff ff4c 	bl	800df14 <RegionEU433ChannelAdd>
 800e07c:	e7e7      	b.n	800e04e <RegionEU433ApplyCFList+0x4e>
}
 800e07e:	b006      	add	sp, #24
 800e080:	bd70      	pop	{r4, r5, r6, pc}

0800e082 <RegionEU433NewChannelReq>:
{
 800e082:	b500      	push	{lr}
 800e084:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800e086:	6803      	ldr	r3, [r0, #0]
 800e088:	681a      	ldr	r2, [r3, #0]
 800e08a:	b952      	cbnz	r2, 800e0a2 <RegionEU433NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800e08c:	7903      	ldrb	r3, [r0, #4]
 800e08e:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU433ChannelsRemove( &channelRemove ) == false )
 800e092:	a801      	add	r0, sp, #4
 800e094:	f7ff ff98 	bl	800dfc8 <RegionEU433ChannelsRemove>
 800e098:	b1d0      	cbz	r0, 800e0d0 <RegionEU433NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800e09a:	2003      	movs	r0, #3
}
 800e09c:	b005      	add	sp, #20
 800e09e:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800e0a2:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800e0a4:	7903      	ldrb	r3, [r0, #4]
 800e0a6:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU433ChannelAdd( &channelAdd ) )
 800e0aa:	a802      	add	r0, sp, #8
 800e0ac:	f7ff ff32 	bl	800df14 <RegionEU433ChannelAdd>
 800e0b0:	2806      	cmp	r0, #6
 800e0b2:	d80b      	bhi.n	800e0cc <RegionEU433NewChannelReq+0x4a>
 800e0b4:	e8df f000 	tbb	[pc, r0]
 800e0b8:	0a0a0a04 	.word	0x0a0a0a04
 800e0bc:	060e      	.short	0x060e
 800e0be:	08          	.byte	0x08
 800e0bf:	00          	.byte	0x00
 800e0c0:	2003      	movs	r0, #3
 800e0c2:	e7eb      	b.n	800e09c <RegionEU433NewChannelReq+0x1a>
                status &= 0xFD;
 800e0c4:	2001      	movs	r0, #1
                break;
 800e0c6:	e7e9      	b.n	800e09c <RegionEU433NewChannelReq+0x1a>
                status &= 0xFC;
 800e0c8:	2000      	movs	r0, #0
                break;
 800e0ca:	e7e7      	b.n	800e09c <RegionEU433NewChannelReq+0x1a>
                status &= 0xFC;
 800e0cc:	2000      	movs	r0, #0
                break;
 800e0ce:	e7e5      	b.n	800e09c <RegionEU433NewChannelReq+0x1a>
            status &= 0xFC;
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	e7e3      	b.n	800e09c <RegionEU433NewChannelReq+0x1a>
                status &= 0xFE;
 800e0d4:	2002      	movs	r0, #2
 800e0d6:	e7e1      	b.n	800e09c <RegionEU433NewChannelReq+0x1a>

0800e0d8 <RegionEU433ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU433ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU433 )
    int8_t datarate = dr - drOffset;
 800e0d8:	1a88      	subs	r0, r1, r2
 800e0da:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	db01      	blt.n	800e0e4 <RegionEU433ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU433 */
}
 800e0e0:	b2c0      	uxtb	r0, r0
 800e0e2:	4770      	bx	lr
        datarate = DR_0;
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	e7fb      	b.n	800e0e0 <RegionEU433ApplyDrOffset+0x8>

0800e0e8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800e0e8:	b510      	push	{r4, lr}
 800e0ea:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800e0ec:	2210      	movs	r2, #16
 800e0ee:	2100      	movs	r1, #0
 800e0f0:	30f1      	adds	r0, #241	@ 0xf1
 800e0f2:	f000 ff3e 	bl	800ef72 <memset1>
    ctx->M_n = 0;
 800e0f6:	2100      	movs	r1, #0
 800e0f8:	f8c4 1114 	str.w	r1, [r4, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800e0fc:	22f0      	movs	r2, #240	@ 0xf0
 800e0fe:	4620      	mov	r0, r4
 800e100:	f000 ff37 	bl	800ef72 <memset1>
}
 800e104:	bd10      	pop	{r4, pc}

0800e106 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800e106:	b508      	push	{r3, lr}
 800e108:	4602      	mov	r2, r0
 800e10a:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800e10c:	2110      	movs	r1, #16
 800e10e:	f000 fb3b 	bl	800e788 <lorawan_aes_set_key>
}
 800e112:	bd08      	pop	{r3, pc}

0800e114 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800e114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e118:	b084      	sub	sp, #16
 800e11a:	4604      	mov	r4, r0
 800e11c:	460d      	mov	r5, r1
 800e11e:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800e120:	f8d0 3114 	ldr.w	r3, [r0, #276]	@ 0x114
 800e124:	2b00      	cmp	r3, #0
 800e126:	d054      	beq.n	800e1d2 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800e128:	f1c3 0810 	rsb	r8, r3, #16
 800e12c:	4647      	mov	r7, r8
 800e12e:	4590      	cmp	r8, r2
 800e130:	bf28      	it	cs
 800e132:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800e134:	f200 1001 	addw	r0, r0, #257	@ 0x101
 800e138:	b2ba      	uxth	r2, r7
 800e13a:	4418      	add	r0, r3
 800e13c:	f000 ff01 	bl	800ef42 <memcpy1>
        ctx->M_n += mlen;
 800e140:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 800e144:	443b      	add	r3, r7
 800e146:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800e14a:	2b0f      	cmp	r3, #15
 800e14c:	d94d      	bls.n	800e1ea <AES_CMAC_Update+0xd6>
 800e14e:	45b0      	cmp	r8, r6
 800e150:	d24b      	bcs.n	800e1ea <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800e152:	2300      	movs	r3, #0
 800e154:	e008      	b.n	800e168 <AES_CMAC_Update+0x54>
 800e156:	18e2      	adds	r2, r4, r3
 800e158:	f892 10f1 	ldrb.w	r1, [r2, #241]	@ 0xf1
 800e15c:	f892 0101 	ldrb.w	r0, [r2, #257]	@ 0x101
 800e160:	4041      	eors	r1, r0
 800e162:	f882 10f1 	strb.w	r1, [r2, #241]	@ 0xf1
 800e166:	3301      	adds	r3, #1
 800e168:	2b0f      	cmp	r3, #15
 800e16a:	ddf4      	ble.n	800e156 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e16c:	f104 08f1 	add.w	r8, r4, #241	@ 0xf1
 800e170:	2210      	movs	r2, #16
 800e172:	4641      	mov	r1, r8
 800e174:	4668      	mov	r0, sp
 800e176:	f000 fee4 	bl	800ef42 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e17a:	4622      	mov	r2, r4
 800e17c:	4669      	mov	r1, sp
 800e17e:	4668      	mov	r0, sp
 800e180:	f000 fb86 	bl	800e890 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e184:	2210      	movs	r2, #16
 800e186:	4669      	mov	r1, sp
 800e188:	4640      	mov	r0, r8
 800e18a:	f000 feda 	bl	800ef42 <memcpy1>

        data += mlen;
 800e18e:	443d      	add	r5, r7
        len -= mlen;
 800e190:	1bf6      	subs	r6, r6, r7
 800e192:	e01e      	b.n	800e1d2 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800e194:	eb04 0e03 	add.w	lr, r4, r3
 800e198:	f89e c0f1 	ldrb.w	ip, [lr, #241]	@ 0xf1
 800e19c:	5cea      	ldrb	r2, [r5, r3]
 800e19e:	ea8c 0c02 	eor.w	ip, ip, r2
 800e1a2:	f88e c0f1 	strb.w	ip, [lr, #241]	@ 0xf1
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	2b0f      	cmp	r3, #15
 800e1aa:	ddf3      	ble.n	800e194 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e1ac:	f104 07f1 	add.w	r7, r4, #241	@ 0xf1
 800e1b0:	2210      	movs	r2, #16
 800e1b2:	4639      	mov	r1, r7
 800e1b4:	4668      	mov	r0, sp
 800e1b6:	f000 fec4 	bl	800ef42 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800e1ba:	4622      	mov	r2, r4
 800e1bc:	4669      	mov	r1, sp
 800e1be:	4668      	mov	r0, sp
 800e1c0:	f000 fb66 	bl	800e890 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800e1c4:	2210      	movs	r2, #16
 800e1c6:	4669      	mov	r1, sp
 800e1c8:	4638      	mov	r0, r7
 800e1ca:	f000 feba 	bl	800ef42 <memcpy1>

        data += 16;
 800e1ce:	3510      	adds	r5, #16
        len -= 16;
 800e1d0:	3e10      	subs	r6, #16
    while( len > 16 )
 800e1d2:	2e10      	cmp	r6, #16
 800e1d4:	d901      	bls.n	800e1da <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	e7e6      	b.n	800e1a8 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800e1da:	b2b2      	uxth	r2, r6
 800e1dc:	4629      	mov	r1, r5
 800e1de:	f204 1001 	addw	r0, r4, #257	@ 0x101
 800e1e2:	f000 feae 	bl	800ef42 <memcpy1>
    ctx->M_n = len;
 800e1e6:	f8c4 6114 	str.w	r6, [r4, #276]	@ 0x114
}
 800e1ea:	b004      	add	sp, #16
 800e1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e1f0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800e1f0:	b530      	push	{r4, r5, lr}
 800e1f2:	b089      	sub	sp, #36	@ 0x24
 800e1f4:	4605      	mov	r5, r0
 800e1f6:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800e1f8:	2210      	movs	r2, #16
 800e1fa:	2100      	movs	r1, #0
 800e1fc:	eb0d 0002 	add.w	r0, sp, r2
 800e200:	f000 feb7 	bl	800ef72 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800e204:	4622      	mov	r2, r4
 800e206:	a904      	add	r1, sp, #16
 800e208:	4608      	mov	r0, r1
 800e20a:	f000 fb41 	bl	800e890 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800e20e:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800e212:	2b00      	cmp	r3, #0
 800e214:	db01      	blt.n	800e21a <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800e216:	2300      	movs	r3, #0
 800e218:	e030      	b.n	800e27c <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800e21a:	2300      	movs	r3, #0
 800e21c:	2b0e      	cmp	r3, #14
 800e21e:	dc11      	bgt.n	800e244 <AES_CMAC_Final+0x54>
 800e220:	f103 0220 	add.w	r2, r3, #32
 800e224:	eb0d 0102 	add.w	r1, sp, r2
 800e228:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800e22c:	3301      	adds	r3, #1
 800e22e:	f103 0220 	add.w	r2, r3, #32
 800e232:	446a      	add	r2, sp
 800e234:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e238:	09d2      	lsrs	r2, r2, #7
 800e23a:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800e23e:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e242:	e7eb      	b.n	800e21c <AES_CMAC_Final+0x2c>
 800e244:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e248:	005b      	lsls	r3, r3, #1
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800e250:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 800e254:	f88d 301f 	strb.w	r3, [sp, #31]
 800e258:	e017      	b.n	800e28a <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800e25a:	f103 0220 	add.w	r2, r3, #32
 800e25e:	eb0d 0102 	add.w	r1, sp, r2
 800e262:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800e266:	3301      	adds	r3, #1
 800e268:	f103 0220 	add.w	r2, r3, #32
 800e26c:	446a      	add	r2, sp
 800e26e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e272:	09d2      	lsrs	r2, r2, #7
 800e274:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800e278:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e27c:	2b0e      	cmp	r3, #14
 800e27e:	ddec      	ble.n	800e25a <AES_CMAC_Final+0x6a>
 800e280:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e284:	005b      	lsls	r3, r3, #1
 800e286:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800e28a:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 800e28e:	2810      	cmp	r0, #16
 800e290:	d014      	beq.n	800e2bc <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800e292:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800e296:	2b00      	cmp	r3, #0
 800e298:	db30      	blt.n	800e2fc <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800e29a:	2300      	movs	r3, #0
 800e29c:	e041      	b.n	800e322 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800e29e:	18e1      	adds	r1, r4, r3
 800e2a0:	f891 2101 	ldrb.w	r2, [r1, #257]	@ 0x101
 800e2a4:	f103 0020 	add.w	r0, r3, #32
 800e2a8:	4468      	add	r0, sp
 800e2aa:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800e2ae:	4042      	eors	r2, r0
 800e2b0:	f881 2101 	strb.w	r2, [r1, #257]	@ 0x101
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	2b0f      	cmp	r3, #15
 800e2b8:	ddf1      	ble.n	800e29e <AES_CMAC_Final+0xae>
 800e2ba:	e059      	b.n	800e370 <AES_CMAC_Final+0x180>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	e7fa      	b.n	800e2b6 <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800e2c0:	f103 0220 	add.w	r2, r3, #32
 800e2c4:	eb0d 0102 	add.w	r1, sp, r2
 800e2c8:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	f103 0220 	add.w	r2, r3, #32
 800e2d2:	446a      	add	r2, sp
 800e2d4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e2d8:	09d2      	lsrs	r2, r2, #7
 800e2da:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800e2de:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e2e2:	2b0e      	cmp	r3, #14
 800e2e4:	ddec      	ble.n	800e2c0 <AES_CMAC_Final+0xd0>
 800e2e6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e2ea:	005b      	lsls	r3, r3, #1
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800e2f2:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 800e2f6:	f88d 301f 	strb.w	r3, [sp, #31]
 800e2fa:	e019      	b.n	800e330 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	e7f0      	b.n	800e2e2 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800e300:	f103 0220 	add.w	r2, r3, #32
 800e304:	eb0d 0102 	add.w	r1, sp, r2
 800e308:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800e30c:	3301      	adds	r3, #1
 800e30e:	f103 0220 	add.w	r2, r3, #32
 800e312:	446a      	add	r2, sp
 800e314:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800e318:	09d2      	lsrs	r2, r2, #7
 800e31a:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800e31e:	f801 2c10 	strb.w	r2, [r1, #-16]
 800e322:	2b0e      	cmp	r3, #14
 800e324:	ddec      	ble.n	800e300 <AES_CMAC_Final+0x110>
 800e326:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800e32a:	005b      	lsls	r3, r3, #1
 800e32c:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800e330:	4420      	add	r0, r4
 800e332:	2380      	movs	r3, #128	@ 0x80
 800e334:	f880 3101 	strb.w	r3, [r0, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800e338:	e003      	b.n	800e342 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800e33a:	4423      	add	r3, r4
 800e33c:	2200      	movs	r2, #0
 800e33e:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800e342:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 800e346:	3301      	adds	r3, #1
 800e348:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
 800e34c:	2b0f      	cmp	r3, #15
 800e34e:	d9f4      	bls.n	800e33a <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800e350:	2300      	movs	r3, #0
 800e352:	e00b      	b.n	800e36c <AES_CMAC_Final+0x17c>
 800e354:	18e1      	adds	r1, r4, r3
 800e356:	f891 2101 	ldrb.w	r2, [r1, #257]	@ 0x101
 800e35a:	f103 0020 	add.w	r0, r3, #32
 800e35e:	4468      	add	r0, sp
 800e360:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800e364:	4042      	eors	r2, r0
 800e366:	f881 2101 	strb.w	r2, [r1, #257]	@ 0x101
 800e36a:	3301      	adds	r3, #1
 800e36c:	2b0f      	cmp	r3, #15
 800e36e:	ddf1      	ble.n	800e354 <AES_CMAC_Final+0x164>
 800e370:	2300      	movs	r3, #0
 800e372:	e009      	b.n	800e388 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800e374:	18e2      	adds	r2, r4, r3
 800e376:	f892 c0f1 	ldrb.w	ip, [r2, #241]	@ 0xf1
 800e37a:	f892 1101 	ldrb.w	r1, [r2, #257]	@ 0x101
 800e37e:	ea8c 0c01 	eor.w	ip, ip, r1
 800e382:	f882 c0f1 	strb.w	ip, [r2, #241]	@ 0xf1
 800e386:	3301      	adds	r3, #1
 800e388:	2b0f      	cmp	r3, #15
 800e38a:	ddf3      	ble.n	800e374 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e38c:	2210      	movs	r2, #16
 800e38e:	f104 01f1 	add.w	r1, r4, #241	@ 0xf1
 800e392:	4668      	mov	r0, sp
 800e394:	f000 fdd5 	bl	800ef42 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e398:	4622      	mov	r2, r4
 800e39a:	4629      	mov	r1, r5
 800e39c:	4668      	mov	r0, sp
 800e39e:	f000 fa77 	bl	800e890 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e3a2:	2210      	movs	r2, #16
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	eb0d 0002 	add.w	r0, sp, r2
 800e3aa:	f000 fde2 	bl	800ef72 <memset1>
}
 800e3ae:	b009      	add	sp, #36	@ 0x24
 800e3b0:	bd30      	pop	{r4, r5, pc}

0800e3b2 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e3b2:	780b      	ldrb	r3, [r1, #0]
 800e3b4:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e3b6:	784b      	ldrb	r3, [r1, #1]
 800e3b8:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e3ba:	788b      	ldrb	r3, [r1, #2]
 800e3bc:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e3be:	78cb      	ldrb	r3, [r1, #3]
 800e3c0:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e3c2:	790b      	ldrb	r3, [r1, #4]
 800e3c4:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800e3c6:	794b      	ldrb	r3, [r1, #5]
 800e3c8:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800e3ca:	798b      	ldrb	r3, [r1, #6]
 800e3cc:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800e3ce:	79cb      	ldrb	r3, [r1, #7]
 800e3d0:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800e3d2:	7a0b      	ldrb	r3, [r1, #8]
 800e3d4:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800e3d6:	7a4b      	ldrb	r3, [r1, #9]
 800e3d8:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800e3da:	7a8b      	ldrb	r3, [r1, #10]
 800e3dc:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800e3de:	7acb      	ldrb	r3, [r1, #11]
 800e3e0:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800e3e2:	7b0b      	ldrb	r3, [r1, #12]
 800e3e4:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800e3e6:	7b4b      	ldrb	r3, [r1, #13]
 800e3e8:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800e3ea:	7b8b      	ldrb	r3, [r1, #14]
 800e3ec:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800e3ee:	7bcb      	ldrb	r3, [r1, #15]
 800e3f0:	73c3      	strb	r3, [r0, #15]
#endif
}
 800e3f2:	4770      	bx	lr

0800e3f4 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800e3f4:	e004      	b.n	800e400 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800e3f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3fa:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800e3fe:	461a      	mov	r2, r3
 800e400:	1e53      	subs	r3, r2, #1
 800e402:	b2db      	uxtb	r3, r3
 800e404:	2a00      	cmp	r2, #0
 800e406:	d1f6      	bne.n	800e3f6 <copy_block_nn+0x2>
}
 800e408:	4770      	bx	lr

0800e40a <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e40a:	7803      	ldrb	r3, [r0, #0]
 800e40c:	780a      	ldrb	r2, [r1, #0]
 800e40e:	4053      	eors	r3, r2
 800e410:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e412:	7843      	ldrb	r3, [r0, #1]
 800e414:	784a      	ldrb	r2, [r1, #1]
 800e416:	4053      	eors	r3, r2
 800e418:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e41a:	7883      	ldrb	r3, [r0, #2]
 800e41c:	788a      	ldrb	r2, [r1, #2]
 800e41e:	4053      	eors	r3, r2
 800e420:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e422:	78c3      	ldrb	r3, [r0, #3]
 800e424:	78ca      	ldrb	r2, [r1, #3]
 800e426:	4053      	eors	r3, r2
 800e428:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e42a:	7903      	ldrb	r3, [r0, #4]
 800e42c:	790a      	ldrb	r2, [r1, #4]
 800e42e:	4053      	eors	r3, r2
 800e430:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e432:	7943      	ldrb	r3, [r0, #5]
 800e434:	794a      	ldrb	r2, [r1, #5]
 800e436:	4053      	eors	r3, r2
 800e438:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800e43a:	7983      	ldrb	r3, [r0, #6]
 800e43c:	798a      	ldrb	r2, [r1, #6]
 800e43e:	4053      	eors	r3, r2
 800e440:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800e442:	79c3      	ldrb	r3, [r0, #7]
 800e444:	79ca      	ldrb	r2, [r1, #7]
 800e446:	4053      	eors	r3, r2
 800e448:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800e44a:	7a03      	ldrb	r3, [r0, #8]
 800e44c:	7a0a      	ldrb	r2, [r1, #8]
 800e44e:	4053      	eors	r3, r2
 800e450:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800e452:	7a43      	ldrb	r3, [r0, #9]
 800e454:	7a4a      	ldrb	r2, [r1, #9]
 800e456:	4053      	eors	r3, r2
 800e458:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800e45a:	7a83      	ldrb	r3, [r0, #10]
 800e45c:	7a8a      	ldrb	r2, [r1, #10]
 800e45e:	4053      	eors	r3, r2
 800e460:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800e462:	7ac3      	ldrb	r3, [r0, #11]
 800e464:	7aca      	ldrb	r2, [r1, #11]
 800e466:	4053      	eors	r3, r2
 800e468:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e46a:	7b03      	ldrb	r3, [r0, #12]
 800e46c:	7b0a      	ldrb	r2, [r1, #12]
 800e46e:	4053      	eors	r3, r2
 800e470:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e472:	7b43      	ldrb	r3, [r0, #13]
 800e474:	7b4a      	ldrb	r2, [r1, #13]
 800e476:	4053      	eors	r3, r2
 800e478:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e47a:	7b83      	ldrb	r3, [r0, #14]
 800e47c:	7b8a      	ldrb	r2, [r1, #14]
 800e47e:	4053      	eors	r3, r2
 800e480:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e482:	7bc3      	ldrb	r3, [r0, #15]
 800e484:	7bca      	ldrb	r2, [r1, #15]
 800e486:	4053      	eors	r3, r2
 800e488:	73c3      	strb	r3, [r0, #15]
#endif
}
 800e48a:	4770      	bx	lr

0800e48c <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e48c:	780b      	ldrb	r3, [r1, #0]
 800e48e:	f892 c000 	ldrb.w	ip, [r2]
 800e492:	ea83 030c 	eor.w	r3, r3, ip
 800e496:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e498:	784b      	ldrb	r3, [r1, #1]
 800e49a:	f892 c001 	ldrb.w	ip, [r2, #1]
 800e49e:	ea83 030c 	eor.w	r3, r3, ip
 800e4a2:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e4a4:	788b      	ldrb	r3, [r1, #2]
 800e4a6:	f892 c002 	ldrb.w	ip, [r2, #2]
 800e4aa:	ea83 030c 	eor.w	r3, r3, ip
 800e4ae:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e4b0:	78cb      	ldrb	r3, [r1, #3]
 800e4b2:	f892 c003 	ldrb.w	ip, [r2, #3]
 800e4b6:	ea83 030c 	eor.w	r3, r3, ip
 800e4ba:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e4bc:	790b      	ldrb	r3, [r1, #4]
 800e4be:	f892 c004 	ldrb.w	ip, [r2, #4]
 800e4c2:	ea83 030c 	eor.w	r3, r3, ip
 800e4c6:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e4c8:	794b      	ldrb	r3, [r1, #5]
 800e4ca:	f892 c005 	ldrb.w	ip, [r2, #5]
 800e4ce:	ea83 030c 	eor.w	r3, r3, ip
 800e4d2:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e4d4:	798b      	ldrb	r3, [r1, #6]
 800e4d6:	f892 c006 	ldrb.w	ip, [r2, #6]
 800e4da:	ea83 030c 	eor.w	r3, r3, ip
 800e4de:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e4e0:	79cb      	ldrb	r3, [r1, #7]
 800e4e2:	f892 c007 	ldrb.w	ip, [r2, #7]
 800e4e6:	ea83 030c 	eor.w	r3, r3, ip
 800e4ea:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e4ec:	7a0b      	ldrb	r3, [r1, #8]
 800e4ee:	f892 c008 	ldrb.w	ip, [r2, #8]
 800e4f2:	ea83 030c 	eor.w	r3, r3, ip
 800e4f6:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e4f8:	7a4b      	ldrb	r3, [r1, #9]
 800e4fa:	f892 c009 	ldrb.w	ip, [r2, #9]
 800e4fe:	ea83 030c 	eor.w	r3, r3, ip
 800e502:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e504:	7a8b      	ldrb	r3, [r1, #10]
 800e506:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800e50a:	ea83 030c 	eor.w	r3, r3, ip
 800e50e:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e510:	7acb      	ldrb	r3, [r1, #11]
 800e512:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800e516:	ea83 030c 	eor.w	r3, r3, ip
 800e51a:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e51c:	7b0b      	ldrb	r3, [r1, #12]
 800e51e:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800e522:	ea83 030c 	eor.w	r3, r3, ip
 800e526:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e528:	7b4b      	ldrb	r3, [r1, #13]
 800e52a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800e52e:	ea83 030c 	eor.w	r3, r3, ip
 800e532:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e534:	7b8b      	ldrb	r3, [r1, #14]
 800e536:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800e53a:	ea83 030c 	eor.w	r3, r3, ip
 800e53e:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e540:	7bcb      	ldrb	r3, [r1, #15]
 800e542:	7bd2      	ldrb	r2, [r2, #15]
 800e544:	4053      	eors	r3, r2
 800e546:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e548:	4770      	bx	lr

0800e54a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e54a:	b508      	push	{r3, lr}
    xor_block(d, k);
 800e54c:	f7ff ff5d 	bl	800e40a <xor_block>
}
 800e550:	bd08      	pop	{r3, pc}
	...

0800e554 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e554:	7802      	ldrb	r2, [r0, #0]
 800e556:	4b18      	ldr	r3, [pc, #96]	@ (800e5b8 <shift_sub_rows+0x64>)
 800e558:	5c9a      	ldrb	r2, [r3, r2]
 800e55a:	7002      	strb	r2, [r0, #0]
 800e55c:	7902      	ldrb	r2, [r0, #4]
 800e55e:	5c9a      	ldrb	r2, [r3, r2]
 800e560:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e562:	7a02      	ldrb	r2, [r0, #8]
 800e564:	5c9a      	ldrb	r2, [r3, r2]
 800e566:	7202      	strb	r2, [r0, #8]
 800e568:	7b02      	ldrb	r2, [r0, #12]
 800e56a:	5c9a      	ldrb	r2, [r3, r2]
 800e56c:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e56e:	7842      	ldrb	r2, [r0, #1]
 800e570:	7941      	ldrb	r1, [r0, #5]
 800e572:	5c59      	ldrb	r1, [r3, r1]
 800e574:	7041      	strb	r1, [r0, #1]
 800e576:	7a41      	ldrb	r1, [r0, #9]
 800e578:	5c59      	ldrb	r1, [r3, r1]
 800e57a:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e57c:	7b41      	ldrb	r1, [r0, #13]
 800e57e:	5c59      	ldrb	r1, [r3, r1]
 800e580:	7241      	strb	r1, [r0, #9]
 800e582:	5c9a      	ldrb	r2, [r3, r2]
 800e584:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e586:	7882      	ldrb	r2, [r0, #2]
 800e588:	7a81      	ldrb	r1, [r0, #10]
 800e58a:	5c59      	ldrb	r1, [r3, r1]
 800e58c:	7081      	strb	r1, [r0, #2]
 800e58e:	5c9a      	ldrb	r2, [r3, r2]
 800e590:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e592:	7982      	ldrb	r2, [r0, #6]
 800e594:	7b81      	ldrb	r1, [r0, #14]
 800e596:	5c59      	ldrb	r1, [r3, r1]
 800e598:	7181      	strb	r1, [r0, #6]
 800e59a:	5c9a      	ldrb	r2, [r3, r2]
 800e59c:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e59e:	7bc2      	ldrb	r2, [r0, #15]
 800e5a0:	7ac1      	ldrb	r1, [r0, #11]
 800e5a2:	5c59      	ldrb	r1, [r3, r1]
 800e5a4:	73c1      	strb	r1, [r0, #15]
 800e5a6:	79c1      	ldrb	r1, [r0, #7]
 800e5a8:	5c59      	ldrb	r1, [r3, r1]
 800e5aa:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e5ac:	78c1      	ldrb	r1, [r0, #3]
 800e5ae:	5c59      	ldrb	r1, [r3, r1]
 800e5b0:	71c1      	strb	r1, [r0, #7]
 800e5b2:	5c9b      	ldrb	r3, [r3, r2]
 800e5b4:	70c3      	strb	r3, [r0, #3]
}
 800e5b6:	4770      	bx	lr
 800e5b8:	08012348 	.word	0x08012348

0800e5bc <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5c0:	b084      	sub	sp, #16
 800e5c2:	4604      	mov	r4, r0
    block_copy(st, dt);
 800e5c4:	4601      	mov	r1, r0
 800e5c6:	4668      	mov	r0, sp
 800e5c8:	f7ff fef3 	bl	800e3b2 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e5cc:	f89d c000 	ldrb.w	ip, [sp]
 800e5d0:	4b6a      	ldr	r3, [pc, #424]	@ (800e77c <mix_sub_columns+0x1c0>)
 800e5d2:	f813 000c 	ldrb.w	r0, [r3, ip]
 800e5d6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800e5da:	4a69      	ldr	r2, [pc, #420]	@ (800e780 <mix_sub_columns+0x1c4>)
 800e5dc:	f812 9008 	ldrb.w	r9, [r2, r8]
 800e5e0:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800e5e4:	4967      	ldr	r1, [pc, #412]	@ (800e784 <mix_sub_columns+0x1c8>)
 800e5e6:	f811 500e 	ldrb.w	r5, [r1, lr]
 800e5ea:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800e5ee:	5dce      	ldrb	r6, [r1, r7]
 800e5f0:	ea80 0009 	eor.w	r0, r0, r9
 800e5f4:	4068      	eors	r0, r5
 800e5f6:	4070      	eors	r0, r6
 800e5f8:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e5fa:	f811 000c 	ldrb.w	r0, [r1, ip]
 800e5fe:	f813 a008 	ldrb.w	sl, [r3, r8]
 800e602:	f812 900e 	ldrb.w	r9, [r2, lr]
 800e606:	ea80 0a0a 	eor.w	sl, r0, sl
 800e60a:	ea89 090a 	eor.w	r9, r9, sl
 800e60e:	ea86 0609 	eor.w	r6, r6, r9
 800e612:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e614:	f811 8008 	ldrb.w	r8, [r1, r8]
 800e618:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800e61c:	5dd6      	ldrb	r6, [r2, r7]
 800e61e:	ea80 0008 	eor.w	r0, r0, r8
 800e622:	ea8e 0000 	eor.w	r0, lr, r0
 800e626:	4070      	eors	r0, r6
 800e628:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e62a:	f812 600c 	ldrb.w	r6, [r2, ip]
 800e62e:	5dd8      	ldrb	r0, [r3, r7]
 800e630:	ea86 0608 	eor.w	r6, r6, r8
 800e634:	4075      	eors	r5, r6
 800e636:	4068      	eors	r0, r5
 800e638:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e63a:	f89d c004 	ldrb.w	ip, [sp, #4]
 800e63e:	f813 000c 	ldrb.w	r0, [r3, ip]
 800e642:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800e646:	f812 9008 	ldrb.w	r9, [r2, r8]
 800e64a:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800e64e:	f811 500e 	ldrb.w	r5, [r1, lr]
 800e652:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800e656:	5dce      	ldrb	r6, [r1, r7]
 800e658:	ea80 0009 	eor.w	r0, r0, r9
 800e65c:	4068      	eors	r0, r5
 800e65e:	4070      	eors	r0, r6
 800e660:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e662:	f811 000c 	ldrb.w	r0, [r1, ip]
 800e666:	f813 a008 	ldrb.w	sl, [r3, r8]
 800e66a:	f812 900e 	ldrb.w	r9, [r2, lr]
 800e66e:	ea80 0a0a 	eor.w	sl, r0, sl
 800e672:	ea89 090a 	eor.w	r9, r9, sl
 800e676:	ea86 0609 	eor.w	r6, r6, r9
 800e67a:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e67c:	f811 8008 	ldrb.w	r8, [r1, r8]
 800e680:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800e684:	5dd6      	ldrb	r6, [r2, r7]
 800e686:	ea80 0008 	eor.w	r0, r0, r8
 800e68a:	ea8e 0000 	eor.w	r0, lr, r0
 800e68e:	4070      	eors	r0, r6
 800e690:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e692:	f812 600c 	ldrb.w	r6, [r2, ip]
 800e696:	5dd8      	ldrb	r0, [r3, r7]
 800e698:	ea86 0608 	eor.w	r6, r6, r8
 800e69c:	4075      	eors	r5, r6
 800e69e:	4068      	eors	r0, r5
 800e6a0:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e6a2:	f89d c008 	ldrb.w	ip, [sp, #8]
 800e6a6:	f813 000c 	ldrb.w	r0, [r3, ip]
 800e6aa:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800e6ae:	f812 9008 	ldrb.w	r9, [r2, r8]
 800e6b2:	f89d e002 	ldrb.w	lr, [sp, #2]
 800e6b6:	f811 500e 	ldrb.w	r5, [r1, lr]
 800e6ba:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800e6be:	5dce      	ldrb	r6, [r1, r7]
 800e6c0:	ea80 0009 	eor.w	r0, r0, r9
 800e6c4:	4068      	eors	r0, r5
 800e6c6:	4070      	eors	r0, r6
 800e6c8:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e6ca:	f811 000c 	ldrb.w	r0, [r1, ip]
 800e6ce:	f813 a008 	ldrb.w	sl, [r3, r8]
 800e6d2:	f812 900e 	ldrb.w	r9, [r2, lr]
 800e6d6:	ea80 0a0a 	eor.w	sl, r0, sl
 800e6da:	ea89 090a 	eor.w	r9, r9, sl
 800e6de:	ea86 0609 	eor.w	r6, r6, r9
 800e6e2:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e6e4:	f811 8008 	ldrb.w	r8, [r1, r8]
 800e6e8:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800e6ec:	5dd6      	ldrb	r6, [r2, r7]
 800e6ee:	ea80 0008 	eor.w	r0, r0, r8
 800e6f2:	ea8e 0000 	eor.w	r0, lr, r0
 800e6f6:	4070      	eors	r0, r6
 800e6f8:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e6fa:	f812 600c 	ldrb.w	r6, [r2, ip]
 800e6fe:	5dd8      	ldrb	r0, [r3, r7]
 800e700:	ea86 0608 	eor.w	r6, r6, r8
 800e704:	4075      	eors	r5, r6
 800e706:	4068      	eors	r0, r5
 800e708:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e70a:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800e70e:	5d98      	ldrb	r0, [r3, r6]
 800e710:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800e714:	f812 9008 	ldrb.w	r9, [r2, r8]
 800e718:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800e71c:	f811 c007 	ldrb.w	ip, [r1, r7]
 800e720:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800e724:	f811 e005 	ldrb.w	lr, [r1, r5]
 800e728:	ea80 0009 	eor.w	r0, r0, r9
 800e72c:	ea8c 0000 	eor.w	r0, ip, r0
 800e730:	ea8e 0000 	eor.w	r0, lr, r0
 800e734:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e736:	5d88      	ldrb	r0, [r1, r6]
 800e738:	f813 a008 	ldrb.w	sl, [r3, r8]
 800e73c:	f812 9007 	ldrb.w	r9, [r2, r7]
 800e740:	ea80 0a0a 	eor.w	sl, r0, sl
 800e744:	ea89 090a 	eor.w	r9, r9, sl
 800e748:	ea8e 0e09 	eor.w	lr, lr, r9
 800e74c:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e750:	f811 1008 	ldrb.w	r1, [r1, r8]
 800e754:	f813 e007 	ldrb.w	lr, [r3, r7]
 800e758:	5d57      	ldrb	r7, [r2, r5]
 800e75a:	4048      	eors	r0, r1
 800e75c:	ea8e 0000 	eor.w	r0, lr, r0
 800e760:	4078      	eors	r0, r7
 800e762:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e764:	5d92      	ldrb	r2, [r2, r6]
 800e766:	5d5b      	ldrb	r3, [r3, r5]
 800e768:	4051      	eors	r1, r2
 800e76a:	ea8c 0c01 	eor.w	ip, ip, r1
 800e76e:	ea83 030c 	eor.w	r3, r3, ip
 800e772:	73e3      	strb	r3, [r4, #15]
  }
 800e774:	b004      	add	sp, #16
 800e776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e77a:	bf00      	nop
 800e77c:	08012248 	.word	0x08012248
 800e780:	08012148 	.word	0x08012148
 800e784:	08012348 	.word	0x08012348

0800e788 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800e788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e78c:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800e78e:	f1a1 0310 	sub.w	r3, r1, #16
 800e792:	b2db      	uxtb	r3, r3
 800e794:	2b10      	cmp	r3, #16
 800e796:	d806      	bhi.n	800e7a6 <lorawan_aes_set_key+0x1e>
 800e798:	460d      	mov	r5, r1
 800e79a:	4a3b      	ldr	r2, [pc, #236]	@ (800e888 <lorawan_aes_set_key+0x100>)
 800e79c:	fa22 f303 	lsr.w	r3, r2, r3
 800e7a0:	f013 0f01 	tst.w	r3, #1
 800e7a4:	d105      	bne.n	800e7b2 <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
        return ( uint8_t )-1;
 800e7ac:	20ff      	movs	r0, #255	@ 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800e7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 800e7b2:	460a      	mov	r2, r1
 800e7b4:	4601      	mov	r1, r0
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	f7ff fe1c 	bl	800e3f4 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e7bc:	f105 031c 	add.w	r3, r5, #28
 800e7c0:	b2db      	uxtb	r3, r3
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800e7c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800e7cc:	3b01      	subs	r3, #1
 800e7ce:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e7d2:	462b      	mov	r3, r5
 800e7d4:	f04f 0c01 	mov.w	ip, #1
 800e7d8:	e023      	b.n	800e822 <lorawan_aes_set_key+0x9a>
        else if( keylen > 24 && cc % keylen == 16 )
 800e7da:	2d18      	cmp	r5, #24
 800e7dc:	d901      	bls.n	800e7e2 <lorawan_aes_set_key+0x5a>
 800e7de:	2a10      	cmp	r2, #16
 800e7e0:	d048      	beq.n	800e874 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 800e7e2:	1b5a      	subs	r2, r3, r5
 800e7e4:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800e7e6:	f814 9002 	ldrb.w	r9, [r4, r2]
 800e7ea:	ea89 0808 	eor.w	r8, r9, r8
 800e7ee:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800e7f2:	f102 0801 	add.w	r8, r2, #1
 800e7f6:	f814 8008 	ldrb.w	r8, [r4, r8]
 800e7fa:	f100 0901 	add.w	r9, r0, #1
 800e7fe:	ea88 0707 	eor.w	r7, r8, r7
 800e802:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800e806:	1c97      	adds	r7, r2, #2
 800e808:	5de7      	ldrb	r7, [r4, r7]
 800e80a:	f100 0802 	add.w	r8, r0, #2
 800e80e:	407e      	eors	r6, r7
 800e810:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800e814:	3203      	adds	r2, #3
 800e816:	5ca6      	ldrb	r6, [r4, r2]
 800e818:	1cc2      	adds	r2, r0, #3
 800e81a:	4071      	eors	r1, r6
 800e81c:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e81e:	3304      	adds	r3, #4
 800e820:	b2db      	uxtb	r3, r3
 800e822:	4573      	cmp	r3, lr
 800e824:	d22d      	bcs.n	800e882 <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 800e826:	4618      	mov	r0, r3
 800e828:	1f1a      	subs	r2, r3, #4
 800e82a:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800e82e:	1eda      	subs	r2, r3, #3
 800e830:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800e832:	1e9a      	subs	r2, r3, #2
 800e834:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800e836:	1e5a      	subs	r2, r3, #1
 800e838:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800e83a:	fbb3 f2f5 	udiv	r2, r3, r5
 800e83e:	fb05 3212 	mls	r2, r5, r2, r3
 800e842:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 800e846:	d1c8      	bne.n	800e7da <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 800e848:	4a10      	ldr	r2, [pc, #64]	@ (800e88c <lorawan_aes_set_key+0x104>)
 800e84a:	f812 9007 	ldrb.w	r9, [r2, r7]
 800e84e:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800e852:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800e854:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800e856:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800e85a:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800e85e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e862:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800e866:	b2d2      	uxtb	r2, r2
 800e868:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 800e86c:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 800e870:	46c8      	mov	r8, r9
 800e872:	e7b6      	b.n	800e7e2 <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 800e874:	4a05      	ldr	r2, [pc, #20]	@ (800e88c <lorawan_aes_set_key+0x104>)
 800e876:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800e87a:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800e87c:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800e87e:	5c51      	ldrb	r1, [r2, r1]
 800e880:	e7af      	b.n	800e7e2 <lorawan_aes_set_key+0x5a>
    return 0;
 800e882:	2000      	movs	r0, #0
 800e884:	e793      	b.n	800e7ae <lorawan_aes_set_key+0x26>
 800e886:	bf00      	nop
 800e888:	00010101 	.word	0x00010101
 800e88c:	08012348 	.word	0x08012348

0800e890 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800e890:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800e894:	b31b      	cbz	r3, 800e8de <lorawan_aes_encrypt+0x4e>
{
 800e896:	b570      	push	{r4, r5, r6, lr}
 800e898:	b084      	sub	sp, #16
 800e89a:	460e      	mov	r6, r1
 800e89c:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800e89e:	4601      	mov	r1, r0
 800e8a0:	4668      	mov	r0, sp
 800e8a2:	f7ff fdf3 	bl	800e48c <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800e8a6:	2401      	movs	r4, #1
 800e8a8:	e009      	b.n	800e8be <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800e8aa:	4668      	mov	r0, sp
 800e8ac:	f7ff fe86 	bl	800e5bc <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e8b0:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800e8b4:	4668      	mov	r0, sp
 800e8b6:	f7ff fe48 	bl	800e54a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e8ba:	3401      	adds	r4, #1
 800e8bc:	b2e4      	uxtb	r4, r4
 800e8be:	f895 30f0 	ldrb.w	r3, [r5, #240]	@ 0xf0
 800e8c2:	42a3      	cmp	r3, r4
 800e8c4:	d8f1      	bhi.n	800e8aa <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e8c6:	4668      	mov	r0, sp
 800e8c8:	f7ff fe44 	bl	800e554 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e8cc:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800e8d0:	4669      	mov	r1, sp
 800e8d2:	4630      	mov	r0, r6
 800e8d4:	f7ff fdda 	bl	800e48c <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e8d8:	2000      	movs	r0, #0
}
 800e8da:	b004      	add	sp, #16
 800e8dc:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800e8de:	20ff      	movs	r0, #255	@ 0xff
}
 800e8e0:	4770      	bx	lr
	...

0800e8e4 <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	2b0a      	cmp	r3, #10
 800e8e8:	d816      	bhi.n	800e918 <GetKeyByID+0x34>
{
 800e8ea:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e8ec:	4a0b      	ldr	r2, [pc, #44]	@ (800e91c <GetKeyByID+0x38>)
 800e8ee:	6814      	ldr	r4, [r2, #0]
 800e8f0:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800e8f4:	4422      	add	r2, r4
 800e8f6:	7e12      	ldrb	r2, [r2, #24]
 800e8f8:	4282      	cmp	r2, r0
 800e8fa:	d006      	beq.n	800e90a <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e8fc:	3301      	adds	r3, #1
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	2b0a      	cmp	r3, #10
 800e902:	d9f3      	bls.n	800e8ec <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e904:	2003      	movs	r0, #3
}
 800e906:	bc10      	pop	{r4}
 800e908:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800e90a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800e90e:	3318      	adds	r3, #24
 800e910:	441c      	add	r4, r3
 800e912:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e914:	2000      	movs	r0, #0
 800e916:	e7f6      	b.n	800e906 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e918:	2003      	movs	r0, #3
}
 800e91a:	4770      	bx	lr
 800e91c:	2000105c 	.word	0x2000105c

0800e920 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800e920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e924:	b0cc      	sub	sp, #304	@ 0x130
 800e926:	9d52      	ldr	r5, [sp, #328]	@ 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800e928:	b3a9      	cbz	r1, 800e996 <ComputeCmac+0x76>
 800e92a:	4607      	mov	r7, r0
 800e92c:	4616      	mov	r6, r2
 800e92e:	461c      	mov	r4, r3
 800e930:	4688      	mov	r8, r1
 800e932:	b395      	cbz	r5, 800e99a <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800e934:	a802      	add	r0, sp, #8
 800e936:	f7ff fbd7 	bl	800e0e8 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800e93a:	a901      	add	r1, sp, #4
 800e93c:	4620      	mov	r0, r4
 800e93e:	f7ff ffd1 	bl	800e8e4 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e942:	4604      	mov	r4, r0
 800e944:	b118      	cbz	r0, 800e94e <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800e946:	4620      	mov	r0, r4
 800e948:	b04c      	add	sp, #304	@ 0x130
 800e94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800e94e:	9901      	ldr	r1, [sp, #4]
 800e950:	3101      	adds	r1, #1
 800e952:	a802      	add	r0, sp, #8
 800e954:	f7ff fbd7 	bl	800e106 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800e958:	b127      	cbz	r7, 800e964 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800e95a:	2210      	movs	r2, #16
 800e95c:	4639      	mov	r1, r7
 800e95e:	a802      	add	r0, sp, #8
 800e960:	f7ff fbd8 	bl	800e114 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800e964:	4632      	mov	r2, r6
 800e966:	4641      	mov	r1, r8
 800e968:	a802      	add	r0, sp, #8
 800e96a:	f7ff fbd3 	bl	800e114 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800e96e:	a902      	add	r1, sp, #8
 800e970:	a848      	add	r0, sp, #288	@ 0x120
 800e972:	f7ff fc3d 	bl	800e1f0 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800e976:	f89d 3120 	ldrb.w	r3, [sp, #288]	@ 0x120
 800e97a:	f89d 2121 	ldrb.w	r2, [sp, #289]	@ 0x121
 800e97e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e982:	f89d 2122 	ldrb.w	r2, [sp, #290]	@ 0x122
 800e986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e98a:	f89d 2123 	ldrb.w	r2, [sp, #291]	@ 0x123
 800e98e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e992:	602b      	str	r3, [r5, #0]
 800e994:	e7d7      	b.n	800e946 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800e996:	2402      	movs	r4, #2
 800e998:	e7d5      	b.n	800e946 <ComputeCmac+0x26>
 800e99a:	2402      	movs	r4, #2
 800e99c:	e7d3      	b.n	800e946 <ComputeCmac+0x26>
	...

0800e9a0 <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 800e9a0:	b140      	cbz	r0, 800e9b4 <SecureElementInit+0x14>
{
 800e9a2:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800e9a4:	4a04      	ldr	r2, [pc, #16]	@ (800e9b8 <SecureElementInit+0x18>)
 800e9a6:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800e9a8:	22d8      	movs	r2, #216	@ 0xd8
 800e9aa:	4904      	ldr	r1, [pc, #16]	@ (800e9bc <SecureElementInit+0x1c>)
 800e9ac:	f000 fac9 	bl	800ef42 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800e9b0:	2000      	movs	r0, #0
}
 800e9b2:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e9b4:	2002      	movs	r0, #2
}
 800e9b6:	4770      	bx	lr
 800e9b8:	2000105c 	.word	0x2000105c
 800e9bc:	0803e500 	.word	0x0803e500

0800e9c0 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	2b0a      	cmp	r3, #10
 800e9c4:	d816      	bhi.n	800e9f4 <SecureElementGetKeyByID+0x34>
{
 800e9c6:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e9c8:	4a0b      	ldr	r2, [pc, #44]	@ (800e9f8 <SecureElementGetKeyByID+0x38>)
 800e9ca:	6814      	ldr	r4, [r2, #0]
 800e9cc:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800e9d0:	4422      	add	r2, r4
 800e9d2:	7e12      	ldrb	r2, [r2, #24]
 800e9d4:	4282      	cmp	r2, r0
 800e9d6:	d006      	beq.n	800e9e6 <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e9d8:	3301      	adds	r3, #1
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	2b0a      	cmp	r3, #10
 800e9de:	d9f3      	bls.n	800e9c8 <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e9e0:	2003      	movs	r0, #3
}
 800e9e2:	bc10      	pop	{r4}
 800e9e4:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800e9e6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800e9ea:	3318      	adds	r3, #24
 800e9ec:	441c      	add	r4, r3
 800e9ee:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e9f0:	2000      	movs	r0, #0
 800e9f2:	e7f6      	b.n	800e9e2 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e9f4:	2003      	movs	r0, #3
}
 800e9f6:	4770      	bx	lr
 800e9f8:	2000105c 	.word	0x2000105c

0800e9fc <PrintKey>:
{
 800e9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea00:	b099      	sub	sp, #100	@ 0x64
 800ea02:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800ea04:	a917      	add	r1, sp, #92	@ 0x5c
 800ea06:	f7ff ffdb 	bl	800e9c0 <SecureElementGetKeyByID>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	d042      	beq.n	800ea96 <PrintKey+0x9a>
}
 800ea10:	b019      	add	sp, #100	@ 0x64
 800ea12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 800ea16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ea1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ea1e:	689b      	ldr	r3, [r3, #8]
 800ea20:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ea22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ea24:	785a      	ldrb	r2, [r3, #1]
 800ea26:	9214      	str	r2, [sp, #80]	@ 0x50
 800ea28:	7899      	ldrb	r1, [r3, #2]
 800ea2a:	9115      	str	r1, [sp, #84]	@ 0x54
 800ea2c:	78da      	ldrb	r2, [r3, #3]
 800ea2e:	7919      	ldrb	r1, [r3, #4]
 800ea30:	7958      	ldrb	r0, [r3, #5]
 800ea32:	799c      	ldrb	r4, [r3, #6]
 800ea34:	79dd      	ldrb	r5, [r3, #7]
 800ea36:	7a1e      	ldrb	r6, [r3, #8]
 800ea38:	7a5f      	ldrb	r7, [r3, #9]
 800ea3a:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800ea3e:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800ea42:	f893 800c 	ldrb.w	r8, [r3, #12]
 800ea46:	f893 900d 	ldrb.w	r9, [r3, #13]
 800ea4a:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800ea4e:	f893 b00f 	ldrb.w	fp, [r3, #15]
 800ea52:	7c1b      	ldrb	r3, [r3, #16]
 800ea54:	9310      	str	r3, [sp, #64]	@ 0x40
 800ea56:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 800ea5a:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 800ea5e:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800ea62:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 800ea66:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 800ea6a:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800ea6e:	9709      	str	r7, [sp, #36]	@ 0x24
 800ea70:	9608      	str	r6, [sp, #32]
 800ea72:	9507      	str	r5, [sp, #28]
 800ea74:	9406      	str	r4, [sp, #24]
 800ea76:	9005      	str	r0, [sp, #20]
 800ea78:	9104      	str	r1, [sp, #16]
 800ea7a:	9203      	str	r2, [sp, #12]
 800ea7c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800ea7e:	9102      	str	r1, [sp, #8]
 800ea80:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ea82:	9201      	str	r2, [sp, #4]
 800ea84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ea86:	9300      	str	r3, [sp, #0]
 800ea88:	4b09      	ldr	r3, [pc, #36]	@ (800eab0 <PrintKey+0xb4>)
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	4611      	mov	r1, r2
 800ea8e:	2002      	movs	r0, #2
 800ea90:	f002 f932 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800ea94:	e7bc      	b.n	800ea10 <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ea96:	2b0a      	cmp	r3, #10
 800ea98:	d8ba      	bhi.n	800ea10 <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 800ea9a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ea9e:	4905      	ldr	r1, [pc, #20]	@ (800eab4 <PrintKey+0xb8>)
 800eaa0:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 800eaa4:	42a2      	cmp	r2, r4
 800eaa6:	d0b6      	beq.n	800ea16 <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	e7f3      	b.n	800ea96 <PrintKey+0x9a>
 800eaae:	bf00      	nop
 800eab0:	08012448 	.word	0x08012448
 800eab4:	080125e0 	.word	0x080125e0

0800eab8 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 800eab8:	2b0b      	cmp	r3, #11
 800eaba:	d80a      	bhi.n	800ead2 <SecureElementComputeAesCmac+0x1a>
{
 800eabc:	b500      	push	{lr}
 800eabe:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800eac0:	f8dd c010 	ldr.w	ip, [sp, #16]
 800eac4:	f8cd c000 	str.w	ip, [sp]
 800eac8:	f7ff ff2a 	bl	800e920 <ComputeCmac>
}
 800eacc:	b003      	add	sp, #12
 800eace:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ead2:	2003      	movs	r0, #3
}
 800ead4:	4770      	bx	lr

0800ead6 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800ead6:	b190      	cbz	r0, 800eafe <SecureElementVerifyAesCmac+0x28>
{
 800ead8:	b510      	push	{r4, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	468c      	mov	ip, r1
 800eade:	4614      	mov	r4, r2
 800eae0:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800eae2:	2000      	movs	r0, #0
 800eae4:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800eae6:	aa03      	add	r2, sp, #12
 800eae8:	9200      	str	r2, [sp, #0]
 800eaea:	4662      	mov	r2, ip
 800eaec:	f7ff ff18 	bl	800e920 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800eaf0:	b918      	cbnz	r0, 800eafa <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800eaf2:	9b03      	ldr	r3, [sp, #12]
 800eaf4:	42a3      	cmp	r3, r4
 800eaf6:	d000      	beq.n	800eafa <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800eaf8:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800eafa:	b004      	add	sp, #16
 800eafc:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800eafe:	2002      	movs	r0, #2
}
 800eb00:	4770      	bx	lr

0800eb02 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800eb02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb06:	b0be      	sub	sp, #248	@ 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800eb08:	b348      	cbz	r0, 800eb5e <SecureElementAesEncrypt+0x5c>
 800eb0a:	460d      	mov	r5, r1
 800eb0c:	4614      	mov	r4, r2
 800eb0e:	461e      	mov	r6, r3
 800eb10:	4607      	mov	r7, r0
 800eb12:	b33b      	cbz	r3, 800eb64 <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800eb14:	f011 0f0f 	tst.w	r1, #15
 800eb18:	d127      	bne.n	800eb6a <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800eb1a:	22f0      	movs	r2, #240	@ 0xf0
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	a801      	add	r0, sp, #4
 800eb20:	f000 fa27 	bl	800ef72 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800eb24:	4669      	mov	r1, sp
 800eb26:	4620      	mov	r0, r4
 800eb28:	f7ff fedc 	bl	800e8e4 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800eb2c:	4680      	mov	r8, r0
 800eb2e:	b118      	cbz	r0, 800eb38 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800eb30:	4640      	mov	r0, r8
 800eb32:	b03e      	add	sp, #248	@ 0xf8
 800eb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800eb38:	aa01      	add	r2, sp, #4
 800eb3a:	2110      	movs	r1, #16
 800eb3c:	9800      	ldr	r0, [sp, #0]
 800eb3e:	3001      	adds	r0, #1
 800eb40:	f7ff fe22 	bl	800e788 <lorawan_aes_set_key>
        uint8_t block = 0;
 800eb44:	4644      	mov	r4, r8
        while( size != 0 )
 800eb46:	e007      	b.n	800eb58 <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800eb48:	aa01      	add	r2, sp, #4
 800eb4a:	1931      	adds	r1, r6, r4
 800eb4c:	1938      	adds	r0, r7, r4
 800eb4e:	f7ff fe9f 	bl	800e890 <lorawan_aes_encrypt>
            block = block + 16;
 800eb52:	3410      	adds	r4, #16
 800eb54:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 800eb56:	3d10      	subs	r5, #16
        while( size != 0 )
 800eb58:	2d00      	cmp	r5, #0
 800eb5a:	d1f5      	bne.n	800eb48 <SecureElementAesEncrypt+0x46>
 800eb5c:	e7e8      	b.n	800eb30 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800eb5e:	f04f 0802 	mov.w	r8, #2
 800eb62:	e7e5      	b.n	800eb30 <SecureElementAesEncrypt+0x2e>
 800eb64:	f04f 0802 	mov.w	r8, #2
 800eb68:	e7e2      	b.n	800eb30 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800eb6a:	f04f 0805 	mov.w	r8, #5
 800eb6e:	e7df      	b.n	800eb30 <SecureElementAesEncrypt+0x2e>

0800eb70 <SecureElementSetKey>:
{
 800eb70:	b530      	push	{r4, r5, lr}
 800eb72:	b085      	sub	sp, #20
    if( key == NULL )
 800eb74:	2900      	cmp	r1, #0
 800eb76:	d038      	beq.n	800ebea <SecureElementSetKey+0x7a>
 800eb78:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	2b0a      	cmp	r3, #10
 800eb7e:	d830      	bhi.n	800ebe2 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800eb80:	4a1b      	ldr	r2, [pc, #108]	@ (800ebf0 <SecureElementSetKey+0x80>)
 800eb82:	6811      	ldr	r1, [r2, #0]
 800eb84:	461c      	mov	r4, r3
 800eb86:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800eb8a:	440a      	add	r2, r1
 800eb8c:	7e12      	ldrb	r2, [r2, #24]
 800eb8e:	4282      	cmp	r2, r0
 800eb90:	d002      	beq.n	800eb98 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eb92:	3301      	adds	r3, #1
 800eb94:	b2db      	uxtb	r3, r3
 800eb96:	e7f1      	b.n	800eb7c <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 800eb98:	280d      	cmp	r0, #13
 800eb9a:	d00a      	beq.n	800ebb2 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800eb9c:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 800eba0:	3418      	adds	r4, #24
 800eba2:	1908      	adds	r0, r1, r4
 800eba4:	2210      	movs	r2, #16
 800eba6:	4661      	mov	r1, ip
 800eba8:	3001      	adds	r0, #1
 800ebaa:	f000 f9ca 	bl	800ef42 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800ebae:	2500      	movs	r5, #0
 800ebb0:	e018      	b.n	800ebe4 <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	9300      	str	r3, [sp, #0]
 800ebb6:	9301      	str	r3, [sp, #4]
 800ebb8:	9302      	str	r3, [sp, #8]
 800ebba:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800ebbc:	466b      	mov	r3, sp
 800ebbe:	220c      	movs	r2, #12
 800ebc0:	2110      	movs	r1, #16
 800ebc2:	4660      	mov	r0, ip
 800ebc4:	f7ff ff9d 	bl	800eb02 <SecureElementAesEncrypt>
 800ebc8:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800ebca:	4b09      	ldr	r3, [pc, #36]	@ (800ebf0 <SecureElementSetKey+0x80>)
 800ebcc:	6818      	ldr	r0, [r3, #0]
 800ebce:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800ebd2:	3418      	adds	r4, #24
 800ebd4:	4420      	add	r0, r4
 800ebd6:	2210      	movs	r2, #16
 800ebd8:	4669      	mov	r1, sp
 800ebda:	3001      	adds	r0, #1
 800ebdc:	f000 f9b1 	bl	800ef42 <memcpy1>
                return retval;
 800ebe0:	e000      	b.n	800ebe4 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ebe2:	2503      	movs	r5, #3
}
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	b005      	add	sp, #20
 800ebe8:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ebea:	2502      	movs	r5, #2
 800ebec:	e7fa      	b.n	800ebe4 <SecureElementSetKey+0x74>
 800ebee:	bf00      	nop
 800ebf0:	2000105c 	.word	0x2000105c

0800ebf4 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800ebf4:	b1d0      	cbz	r0, 800ec2c <SecureElementDeriveAndStoreKey+0x38>
{
 800ebf6:	b510      	push	{r4, lr}
 800ebf8:	b084      	sub	sp, #16
 800ebfa:	4614      	mov	r4, r2
 800ebfc:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800ebfe:	2a0c      	cmp	r2, #12
 800ec00:	d101      	bne.n	800ec06 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800ec02:	290b      	cmp	r1, #11
 800ec04:	d114      	bne.n	800ec30 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800ec06:	2300      	movs	r3, #0
 800ec08:	9300      	str	r3, [sp, #0]
 800ec0a:	9301      	str	r3, [sp, #4]
 800ec0c:	9302      	str	r3, [sp, #8]
 800ec0e:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800ec10:	466b      	mov	r3, sp
 800ec12:	460a      	mov	r2, r1
 800ec14:	2110      	movs	r1, #16
 800ec16:	4660      	mov	r0, ip
 800ec18:	f7ff ff73 	bl	800eb02 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ec1c:	b108      	cbz	r0, 800ec22 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ec1e:	b004      	add	sp, #16
 800ec20:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800ec22:	4669      	mov	r1, sp
 800ec24:	4620      	mov	r0, r4
 800ec26:	f7ff ffa3 	bl	800eb70 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ec2a:	e7f8      	b.n	800ec1e <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800ec2c:	2002      	movs	r0, #2
}
 800ec2e:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ec30:	2003      	movs	r0, #3
 800ec32:	e7f4      	b.n	800ec1e <SecureElementDeriveAndStoreKey+0x2a>

0800ec34 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800ec34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec36:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800ec3a:	9c07      	ldr	r4, [sp, #28]
 800ec3c:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800ec3e:	b35b      	cbz	r3, 800ec98 <SecureElementProcessJoinAccept+0x64>
 800ec40:	461f      	mov	r7, r3
 800ec42:	b35c      	cbz	r4, 800ec9c <SecureElementProcessJoinAccept+0x68>
 800ec44:	b366      	cbz	r6, 800eca0 <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800ec46:	2d21      	cmp	r5, #33	@ 0x21
 800ec48:	d82c      	bhi.n	800eca4 <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800ec4a:	462a      	mov	r2, r5
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	4620      	mov	r0, r4
 800ec50:	f000 f977 	bl	800ef42 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800ec54:	1c63      	adds	r3, r4, #1
 800ec56:	2201      	movs	r2, #1
 800ec58:	1e69      	subs	r1, r5, #1
 800ec5a:	18b8      	adds	r0, r7, r2
 800ec5c:	f7ff ff51 	bl	800eb02 <SecureElementAesEncrypt>
 800ec60:	bb10      	cbnz	r0, 800eca8 <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800ec62:	7ae3      	ldrb	r3, [r4, #11]
 800ec64:	09db      	lsrs	r3, r3, #7
 800ec66:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800ec68:	1961      	adds	r1, r4, r5
 800ec6a:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 800ec6e:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800ec72:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800ec76:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 800ec7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800ec7e:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 800ec82:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800ec86:	b98b      	cbnz	r3, 800ecac <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800ec88:	2301      	movs	r3, #1
 800ec8a:	1f29      	subs	r1, r5, #4
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f7ff ff22 	bl	800ead6 <SecureElementVerifyAesCmac>
 800ec92:	b140      	cbz	r0, 800eca6 <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800ec94:	2001      	movs	r0, #1
 800ec96:	e006      	b.n	800eca6 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 800ec98:	2002      	movs	r0, #2
 800ec9a:	e004      	b.n	800eca6 <SecureElementProcessJoinAccept+0x72>
 800ec9c:	2002      	movs	r0, #2
 800ec9e:	e002      	b.n	800eca6 <SecureElementProcessJoinAccept+0x72>
 800eca0:	2002      	movs	r0, #2
 800eca2:	e000      	b.n	800eca6 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800eca4:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800eca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800eca8:	2007      	movs	r0, #7
 800ecaa:	e7fc      	b.n	800eca6 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800ecac:	2004      	movs	r0, #4
 800ecae:	e7fa      	b.n	800eca6 <SecureElementProcessJoinAccept+0x72>

0800ecb0 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 800ecb0:	b140      	cbz	r0, 800ecc4 <SecureElementSetDevEui+0x14>
{
 800ecb2:	b508      	push	{r3, lr}
 800ecb4:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800ecb6:	2208      	movs	r2, #8
 800ecb8:	4b03      	ldr	r3, [pc, #12]	@ (800ecc8 <SecureElementSetDevEui+0x18>)
 800ecba:	6818      	ldr	r0, [r3, #0]
 800ecbc:	f000 f941 	bl	800ef42 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ecc0:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ecc2:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ecc4:	2002      	movs	r0, #2
}
 800ecc6:	4770      	bx	lr
 800ecc8:	2000105c 	.word	0x2000105c

0800eccc <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 800eccc:	b138      	cbz	r0, 800ecde <SecureElementGetDevEui+0x12>
{
 800ecce:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800ecd0:	2208      	movs	r2, #8
 800ecd2:	4904      	ldr	r1, [pc, #16]	@ (800ece4 <SecureElementGetDevEui+0x18>)
 800ecd4:	6809      	ldr	r1, [r1, #0]
 800ecd6:	f000 f934 	bl	800ef42 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ecda:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ecdc:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ecde:	2002      	movs	r0, #2
}
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop
 800ece4:	2000105c 	.word	0x2000105c

0800ece8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 800ece8:	b148      	cbz	r0, 800ecfe <SecureElementSetJoinEui+0x16>
{
 800ecea:	b508      	push	{r3, lr}
 800ecec:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800ecee:	4b05      	ldr	r3, [pc, #20]	@ (800ed04 <SecureElementSetJoinEui+0x1c>)
 800ecf0:	6818      	ldr	r0, [r3, #0]
 800ecf2:	2208      	movs	r2, #8
 800ecf4:	4410      	add	r0, r2
 800ecf6:	f000 f924 	bl	800ef42 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ecfa:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ecfc:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ecfe:	2002      	movs	r0, #2
}
 800ed00:	4770      	bx	lr
 800ed02:	bf00      	nop
 800ed04:	2000105c 	.word	0x2000105c

0800ed08 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 800ed08:	b140      	cbz	r0, 800ed1c <SecureElementGetJoinEui+0x14>
{
 800ed0a:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800ed0c:	4a04      	ldr	r2, [pc, #16]	@ (800ed20 <SecureElementGetJoinEui+0x18>)
 800ed0e:	6811      	ldr	r1, [r2, #0]
 800ed10:	2208      	movs	r2, #8
 800ed12:	4411      	add	r1, r2
 800ed14:	f000 f915 	bl	800ef42 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ed18:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ed1a:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ed1c:	2002      	movs	r0, #2
}
 800ed1e:	4770      	bx	lr
 800ed20:	2000105c 	.word	0x2000105c

0800ed24 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800ed24:	2802      	cmp	r0, #2
 800ed26:	d004      	beq.n	800ed32 <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800ed28:	4b04      	ldr	r3, [pc, #16]	@ (800ed3c <SecureElementSetDevAddr+0x18>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800ed2e:	2000      	movs	r0, #0
 800ed30:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800ed32:	4b02      	ldr	r3, [pc, #8]	@ (800ed3c <SecureElementSetDevAddr+0x18>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	6119      	str	r1, [r3, #16]
 800ed38:	e7f9      	b.n	800ed2e <SecureElementSetDevAddr+0xa>
 800ed3a:	bf00      	nop
 800ed3c:	2000105c 	.word	0x2000105c

0800ed40 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 800ed40:	b169      	cbz	r1, 800ed5e <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800ed42:	2802      	cmp	r0, #2
 800ed44:	d005      	beq.n	800ed52 <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800ed46:	4a07      	ldr	r2, [pc, #28]	@ (800ed64 <SecureElementGetDevAddr+0x24>)
 800ed48:	6812      	ldr	r2, [r2, #0]
 800ed4a:	6952      	ldr	r2, [r2, #20]
 800ed4c:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800ed4e:	2000      	movs	r0, #0
 800ed50:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800ed52:	4a04      	ldr	r2, [pc, #16]	@ (800ed64 <SecureElementGetDevAddr+0x24>)
 800ed54:	6812      	ldr	r2, [r2, #0]
 800ed56:	6912      	ldr	r2, [r2, #16]
 800ed58:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 800ed5a:	2000      	movs	r0, #0
 800ed5c:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 800ed5e:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800ed60:	4770      	bx	lr
 800ed62:	bf00      	nop
 800ed64:	2000105c 	.word	0x2000105c

0800ed68 <SecureElementInitMcuID>:
{
 800ed68:	b530      	push	{r4, r5, lr}
 800ed6a:	b085      	sub	sp, #20
 800ed6c:	4605      	mov	r5, r0
 800ed6e:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 800ed70:	2300      	movs	r3, #0
 800ed72:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 800ed74:	a802      	add	r0, sp, #8
 800ed76:	f7ff ffa9 	bl	800eccc <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800ed7a:	a901      	add	r1, sp, #4
 800ed7c:	2001      	movs	r0, #1
 800ed7e:	f7ff ffdf 	bl	800ed40 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 800ed82:	b195      	cbz	r5, 800edaa <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800ed84:	2300      	movs	r3, #0
 800ed86:	2b07      	cmp	r3, #7
 800ed88:	d808      	bhi.n	800ed9c <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 800ed8a:	f103 0210 	add.w	r2, r3, #16
 800ed8e:	446a      	add	r2, sp
 800ed90:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800ed94:	b9aa      	cbnz	r2, 800edc2 <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800ed96:	3301      	adds	r3, #1
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	e7f4      	b.n	800ed86 <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 800ed9c:	2300      	movs	r3, #0
        if( id_init == false )
 800ed9e:	b923      	cbnz	r3, 800edaa <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 800eda0:	a802      	add	r0, sp, #8
 800eda2:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 800eda4:	a802      	add	r0, sp, #8
 800eda6:	f7ff ff83 	bl	800ecb0 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800edaa:	b13c      	cbz	r4, 800edbc <SecureElementInitMcuID+0x54>
 800edac:	9b01      	ldr	r3, [sp, #4]
 800edae:	b92b      	cbnz	r3, 800edbc <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 800edb0:	a801      	add	r0, sp, #4
 800edb2:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800edb4:	9901      	ldr	r1, [sp, #4]
 800edb6:	2001      	movs	r0, #1
 800edb8:	f7ff ffb4 	bl	800ed24 <SecureElementSetDevAddr>
}
 800edbc:	2000      	movs	r0, #0
 800edbe:	b005      	add	sp, #20
 800edc0:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 800edc2:	2301      	movs	r3, #1
 800edc4:	e7eb      	b.n	800ed9e <SecureElementInitMcuID+0x36>
	...

0800edc8 <PrintIds>:
{
 800edc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edca:	b08f      	sub	sp, #60	@ 0x3c
 800edcc:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 800edce:	2400      	movs	r4, #0
 800edd0:	9409      	str	r4, [sp, #36]	@ 0x24
    SecureElementGetDevEui( devEui );
 800edd2:	a80a      	add	r0, sp, #40	@ 0x28
 800edd4:	f7ff ff7a 	bl	800eccc <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800edd8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800eddc:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 800ede0:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
 800ede4:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 800ede8:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 800edec:	f89d 702d 	ldrb.w	r7, [sp, #45]	@ 0x2d
 800edf0:	f89d c02e 	ldrb.w	ip, [sp, #46]	@ 0x2e
 800edf4:	f89d e02f 	ldrb.w	lr, [sp, #47]	@ 0x2f
 800edf8:	f8cd e01c 	str.w	lr, [sp, #28]
 800edfc:	f8cd c018 	str.w	ip, [sp, #24]
 800ee00:	9705      	str	r7, [sp, #20]
 800ee02:	9604      	str	r6, [sp, #16]
 800ee04:	9003      	str	r0, [sp, #12]
 800ee06:	9102      	str	r1, [sp, #8]
 800ee08:	9201      	str	r2, [sp, #4]
 800ee0a:	9300      	str	r3, [sp, #0]
 800ee0c:	4b20      	ldr	r3, [pc, #128]	@ (800ee90 <PrintIds+0xc8>)
 800ee0e:	4622      	mov	r2, r4
 800ee10:	4621      	mov	r1, r4
 800ee12:	2002      	movs	r0, #2
 800ee14:	f001 ff70 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 800ee18:	a80c      	add	r0, sp, #48	@ 0x30
 800ee1a:	f7ff ff75 	bl	800ed08 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800ee1e:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800ee22:	f89d 2031 	ldrb.w	r2, [sp, #49]	@ 0x31
 800ee26:	f89d 1032 	ldrb.w	r1, [sp, #50]	@ 0x32
 800ee2a:	f89d 0033 	ldrb.w	r0, [sp, #51]	@ 0x33
 800ee2e:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 800ee32:	f89d 7035 	ldrb.w	r7, [sp, #53]	@ 0x35
 800ee36:	f89d c036 	ldrb.w	ip, [sp, #54]	@ 0x36
 800ee3a:	f89d e037 	ldrb.w	lr, [sp, #55]	@ 0x37
 800ee3e:	f8cd e01c 	str.w	lr, [sp, #28]
 800ee42:	f8cd c018 	str.w	ip, [sp, #24]
 800ee46:	9705      	str	r7, [sp, #20]
 800ee48:	9604      	str	r6, [sp, #16]
 800ee4a:	9003      	str	r0, [sp, #12]
 800ee4c:	9102      	str	r1, [sp, #8]
 800ee4e:	9201      	str	r2, [sp, #4]
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	4b10      	ldr	r3, [pc, #64]	@ (800ee94 <PrintIds+0xcc>)
 800ee54:	4622      	mov	r2, r4
 800ee56:	4621      	mov	r1, r4
 800ee58:	2002      	movs	r0, #2
 800ee5a:	f001 ff4d 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 800ee5e:	a909      	add	r1, sp, #36	@ 0x24
 800ee60:	4628      	mov	r0, r5
 800ee62:	f7ff ff6d 	bl	800ed40 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800ee66:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800ee6a:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800ee6e:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
 800ee72:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800ee76:	9003      	str	r0, [sp, #12]
 800ee78:	9102      	str	r1, [sp, #8]
 800ee7a:	9201      	str	r2, [sp, #4]
 800ee7c:	9300      	str	r3, [sp, #0]
 800ee7e:	4b06      	ldr	r3, [pc, #24]	@ (800ee98 <PrintIds+0xd0>)
 800ee80:	4622      	mov	r2, r4
 800ee82:	4621      	mov	r1, r4
 800ee84:	2002      	movs	r0, #2
 800ee86:	f001 ff37 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
}
 800ee8a:	b00f      	add	sp, #60	@ 0x3c
 800ee8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	080124a4 	.word	0x080124a4
 800ee94:	080124e4 	.word	0x080124e4
 800ee98:	08012524 	.word	0x08012524

0800ee9c <SecureElementPrintKeys>:
{
 800ee9c:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 800ee9e:	2000      	movs	r0, #0
 800eea0:	f7ff fdac 	bl	800e9fc <PrintKey>
    PrintKey( NWK_KEY );
 800eea4:	2001      	movs	r0, #1
 800eea6:	f7ff fda9 	bl	800e9fc <PrintKey>
    PrintKey( APP_S_KEY );
 800eeaa:	2009      	movs	r0, #9
 800eeac:	f7ff fda6 	bl	800e9fc <PrintKey>
    PrintKey( NWK_S_KEY );
 800eeb0:	2008      	movs	r0, #8
 800eeb2:	f7ff fda3 	bl	800e9fc <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 800eeb6:	2000      	movs	r0, #0
 800eeb8:	f7ff ff86 	bl	800edc8 <PrintIds>
}
 800eebc:	2000      	movs	r0, #0
 800eebe:	bd08      	pop	{r3, pc}

0800eec0 <SecureElementPrintSessionKeys>:
{
 800eec0:	b510      	push	{r4, lr}
 800eec2:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 800eec4:	200b      	movs	r0, #11
 800eec6:	f7ff fd99 	bl	800e9fc <PrintKey>
    PrintKey( MC_KE_KEY );
 800eeca:	200c      	movs	r0, #12
 800eecc:	f7ff fd96 	bl	800e9fc <PrintKey>
    PrintKey( APP_S_KEY );
 800eed0:	2009      	movs	r0, #9
 800eed2:	f7ff fd93 	bl	800e9fc <PrintKey>
    PrintKey( NWK_S_KEY );
 800eed6:	2008      	movs	r0, #8
 800eed8:	f7ff fd90 	bl	800e9fc <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 800eedc:	200a      	movs	r0, #10
 800eede:	f7ff fd8d 	bl	800e9fc <PrintKey>
    PrintIds( mode );
 800eee2:	4620      	mov	r0, r4
 800eee4:	f7ff ff70 	bl	800edc8 <PrintIds>
}
 800eee8:	2000      	movs	r0, #0
 800eeea:	bd10      	pop	{r4, pc}

0800eeec <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800eeec:	4b09      	ldr	r3, [pc, #36]	@ (800ef14 <rand1+0x28>)
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	4909      	ldr	r1, [pc, #36]	@ (800ef18 <rand1+0x2c>)
 800eef2:	f243 0039 	movw	r0, #12345	@ 0x3039
 800eef6:	fb01 0002 	mla	r0, r1, r2, r0
 800eefa:	6018      	str	r0, [r3, #0]
 800eefc:	2303      	movs	r3, #3
 800eefe:	fba3 2300 	umull	r2, r3, r3, r0
 800ef02:	1ac2      	subs	r2, r0, r3
 800ef04:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800ef08:	0f9b      	lsrs	r3, r3, #30
 800ef0a:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 800ef0e:	1ac0      	subs	r0, r0, r3
 800ef10:	4770      	bx	lr
 800ef12:	bf00      	nop
 800ef14:	20000110 	.word	0x20000110
 800ef18:	41c64e6d 	.word	0x41c64e6d

0800ef1c <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800ef1c:	4b01      	ldr	r3, [pc, #4]	@ (800ef24 <srand1+0x8>)
 800ef1e:	6018      	str	r0, [r3, #0]
}
 800ef20:	4770      	bx	lr
 800ef22:	bf00      	nop
 800ef24:	20000110 	.word	0x20000110

0800ef28 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800ef28:	b538      	push	{r3, r4, r5, lr}
 800ef2a:	4605      	mov	r5, r0
 800ef2c:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800ef2e:	f7ff ffdd 	bl	800eeec <rand1>
 800ef32:	1b61      	subs	r1, r4, r5
 800ef34:	3101      	adds	r1, #1
 800ef36:	fb90 f3f1 	sdiv	r3, r0, r1
 800ef3a:	fb01 0013 	mls	r0, r1, r3, r0
}
 800ef3e:	4428      	add	r0, r5
 800ef40:	bd38      	pop	{r3, r4, r5, pc}

0800ef42 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800ef42:	e004      	b.n	800ef4e <memcpy1+0xc>
    {
        *dst++ = *src++;
 800ef44:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef48:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	1e53      	subs	r3, r2, #1
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	2a00      	cmp	r2, #0
 800ef54:	d1f6      	bne.n	800ef44 <memcpy1+0x2>
    }
}
 800ef56:	4770      	bx	lr

0800ef58 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800ef58:	1e53      	subs	r3, r2, #1
 800ef5a:	4418      	add	r0, r3
    while( size-- )
 800ef5c:	e004      	b.n	800ef68 <memcpyr+0x10>
    {
        *dst-- = *src++;
 800ef5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef62:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 800ef66:	461a      	mov	r2, r3
 800ef68:	1e53      	subs	r3, r2, #1
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	2a00      	cmp	r2, #0
 800ef6e:	d1f6      	bne.n	800ef5e <memcpyr+0x6>
    }
}
 800ef70:	4770      	bx	lr

0800ef72 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800ef72:	e002      	b.n	800ef7a <memset1+0x8>
    {
        *dst++ = value;
 800ef74:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800ef78:	461a      	mov	r2, r3
 800ef7a:	1e53      	subs	r3, r2, #1
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	2a00      	cmp	r2, #0
 800ef80:	d1f8      	bne.n	800ef74 <memset1+0x2>
    }
}
 800ef82:	4770      	bx	lr

0800ef84 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800ef84:	b1f0      	cbz	r0, 800efc4 <Crc32+0x40>
{
 800ef86:	b510      	push	{r4, lr}
 800ef88:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800ef8a:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 800ef8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef92:	e00e      	b.n	800efb2 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800ef94:	f340 0c00 	sbfx	ip, r0, #0, #1
 800ef98:	4a0b      	ldr	r2, [pc, #44]	@ (800efc8 <Crc32+0x44>)
 800ef9a:	ea0c 0202 	and.w	r2, ip, r2
 800ef9e:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800efa2:	3301      	adds	r3, #1
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	2b07      	cmp	r3, #7
 800efa8:	d9f4      	bls.n	800ef94 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 800efaa:	f10e 0e01 	add.w	lr, lr, #1
 800efae:	fa1f fe8e 	uxth.w	lr, lr
 800efb2:	458e      	cmp	lr, r1
 800efb4:	d204      	bcs.n	800efc0 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 800efb6:	f814 300e 	ldrb.w	r3, [r4, lr]
 800efba:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 800efbc:	2300      	movs	r3, #0
 800efbe:	e7f2      	b.n	800efa6 <Crc32+0x22>
        }
    }

    return ~crc;
 800efc0:	43c0      	mvns	r0, r0
}
 800efc2:	bd10      	pop	{r4, pc}
        return 0;
 800efc4:	2000      	movs	r0, #0
}
 800efc6:	4770      	bx	lr
 800efc8:	edb88320 	.word	0xedb88320

0800efcc <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800efcc:	2001      	movs	r0, #1
 800efce:	4770      	bx	lr

0800efd0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800efd0:	280a      	cmp	r0, #10
 800efd2:	d807      	bhi.n	800efe4 <RadioGetLoRaBandwidthInHz+0x14>
 800efd4:	e8df f000 	tbb	[pc, r0]
 800efd8:	17110b20 	.word	0x17110b20
 800efdc:	061e1c1a 	.word	0x061e1c1a
 800efe0:	0e08      	.short	0x0e08
 800efe2:	14          	.byte	0x14
 800efe3:	00          	.byte	0x00
 800efe4:	2000      	movs	r0, #0
 800efe6:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800efe8:	f642 00b1 	movw	r0, #10417	@ 0x28b1
        break;
 800efec:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800efee:	f643 5009 	movw	r0, #15625	@ 0x3d09
        break;
 800eff2:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800eff4:	f245 1061 	movw	r0, #20833	@ 0x5161
        break;
 800eff8:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800effa:	f647 2012 	movw	r0, #31250	@ 0x7a12
        break;
 800effe:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800f000:	f24a 20c3 	movw	r0, #41667	@ 0xa2c3
        break;
 800f004:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800f006:	f24f 4024 	movw	r0, #62500	@ 0xf424
        break;
 800f00a:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800f00c:	4804      	ldr	r0, [pc, #16]	@ (800f020 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800f00e:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800f010:	4804      	ldr	r0, [pc, #16]	@ (800f024 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800f012:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800f014:	4804      	ldr	r0, [pc, #16]	@ (800f028 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800f016:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800f018:	f641 6084 	movw	r0, #7812	@ 0x1e84
    }

    return bandwidthInHz;
}
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop
 800f020:	0001e848 	.word	0x0001e848
 800f024:	0003d090 	.word	0x0003d090
 800f028:	0007a120 	.word	0x0007a120

0800f02c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f02c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 800f030:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f032:	b953      	cbnz	r3, 800f04a <RadioGetGfskTimeOnAirNumerator+0x1e>
 800f034:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 800f036:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f038:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f03a:	b141      	cbz	r1, 800f04e <RadioGetGfskTimeOnAirNumerator+0x22>
 800f03c:	2302      	movs	r3, #2
 800f03e:	f89d 0000 	ldrb.w	r0, [sp]
 800f042:	4418      	add	r0, r3
}
 800f044:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800f048:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f04a:	2300      	movs	r3, #0
 800f04c:	e7f3      	b.n	800f036 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f04e:	2300      	movs	r3, #0
 800f050:	e7f5      	b.n	800f03e <RadioGetGfskTimeOnAirNumerator+0x12>

0800f052 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f052:	b570      	push	{r4, r5, r6, lr}
 800f054:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800f058:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800f05c:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800f05e:	f1a1 0c05 	sub.w	ip, r1, #5
 800f062:	f1bc 0f01 	cmp.w	ip, #1
 800f066:	d931      	bls.n	800f0cc <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f068:	b918      	cbnz	r0, 800f072 <RadioGetLoRaTimeOnAirNumerator+0x20>
 800f06a:	f1a1 060b 	sub.w	r6, r1, #11
 800f06e:	2e01      	cmp	r6, #1
 800f070:	d934      	bls.n	800f0dc <RadioGetLoRaTimeOnAirNumerator+0x8a>
 800f072:	2801      	cmp	r0, #1
 800f074:	d02e      	beq.n	800f0d4 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 800f076:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f078:	f89d c014 	ldrb.w	ip, [sp, #20]
 800f07c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800f080:	b385      	cbz	r5, 800f0e4 <RadioGetLoRaTimeOnAirNumerator+0x92>
 800f082:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f084:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 800f086:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800f088:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800f08c:	b364      	cbz	r4, 800f0e8 <RadioGetLoRaTimeOnAirNumerator+0x96>
 800f08e:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 800f092:	44f4      	add	ip, lr

    if( datarate <= 6 )
 800f094:	2906      	cmp	r1, #6
 800f096:	d904      	bls.n	800f0a2 <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800f098:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800f09c:	b10e      	cbz	r6, 800f0a2 <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800f09e:	1e88      	subs	r0, r1, #2
 800f0a0:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800f0a2:	f1bc 0f00 	cmp.w	ip, #0
 800f0a6:	db22      	blt.n	800f0ee <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800f0a8:	4484      	add	ip, r0
 800f0aa:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f0ae:	fb9c fcf0 	sdiv	ip, ip, r0
 800f0b2:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800f0b6:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800f0ba:	2906      	cmp	r1, #6
 800f0bc:	d801      	bhi.n	800f0c2 <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 800f0be:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800f0c2:	0080      	lsls	r0, r0, #2
 800f0c4:	3001      	adds	r0, #1
 800f0c6:	3902      	subs	r1, #2
}
 800f0c8:	4088      	lsls	r0, r1
 800f0ca:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800f0cc:	2b0b      	cmp	r3, #11
 800f0ce:	d8cb      	bhi.n	800f068 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800f0d0:	230c      	movs	r3, #12
 800f0d2:	e7c9      	b.n	800f068 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f0d4:	290c      	cmp	r1, #12
 800f0d6:	d003      	beq.n	800f0e0 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 800f0d8:	2600      	movs	r6, #0
 800f0da:	e7cd      	b.n	800f078 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800f0dc:	2601      	movs	r6, #1
 800f0de:	e7cb      	b.n	800f078 <RadioGetLoRaTimeOnAirNumerator+0x26>
 800f0e0:	2601      	movs	r6, #1
 800f0e2:	e7c9      	b.n	800f078 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800f0e4:	2000      	movs	r0, #0
 800f0e6:	e7cd      	b.n	800f084 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 800f0e8:	f04f 0e14 	mov.w	lr, #20
 800f0ec:	e7d1      	b.n	800f092 <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 800f0ee:	f04f 0c00 	mov.w	ip, #0
 800f0f2:	e7d9      	b.n	800f0a8 <RadioGetLoRaTimeOnAirNumerator+0x56>

0800f0f4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800f0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0f6:	b085      	sub	sp, #20
 800f0f8:	460e      	mov	r6, r1
 800f0fa:	4615      	mov	r5, r2
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 800f102:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800f106:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 800f10a:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800f10e:	b148      	cbz	r0, 800f124 <RadioTimeOnAir+0x30>
 800f110:	2801      	cmp	r0, #1
 800f112:	d012      	beq.n	800f13a <RadioTimeOnAir+0x46>
 800f114:	2501      	movs	r5, #1
 800f116:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 800f118:	442c      	add	r4, r5
 800f11a:	1e60      	subs	r0, r4, #1
}
 800f11c:	fbb0 f0f5 	udiv	r0, r0, r5
 800f120:	b005      	add	sp, #20
 800f122:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800f124:	f8cd c004 	str.w	ip, [sp, #4]
 800f128:	9700      	str	r7, [sp, #0]
 800f12a:	4628      	mov	r0, r5
 800f12c:	f7ff ff7e 	bl	800f02c <RadioGetGfskTimeOnAirNumerator>
 800f130:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f134:	fb03 f400 	mul.w	r4, r3, r0
        break;
 800f138:	e7ee      	b.n	800f118 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800f13a:	f8cd c008 	str.w	ip, [sp, #8]
 800f13e:	9701      	str	r7, [sp, #4]
 800f140:	9300      	str	r3, [sp, #0]
 800f142:	4613      	mov	r3, r2
 800f144:	460a      	mov	r2, r1
 800f146:	4629      	mov	r1, r5
 800f148:	4630      	mov	r0, r6
 800f14a:	f7ff ff82 	bl	800f052 <RadioGetLoRaTimeOnAirNumerator>
 800f14e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f152:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800f156:	4b03      	ldr	r3, [pc, #12]	@ (800f164 <RadioTimeOnAir+0x70>)
 800f158:	5d98      	ldrb	r0, [r3, r6]
 800f15a:	f7ff ff39 	bl	800efd0 <RadioGetLoRaBandwidthInHz>
 800f15e:	4605      	mov	r5, r0
        break;
 800f160:	e7da      	b.n	800f118 <RadioTimeOnAir+0x24>
 800f162:	bf00      	nop
 800f164:	080126d0 	.word	0x080126d0

0800f168 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800f168:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800f16a:	4b05      	ldr	r3, [pc, #20]	@ (800f180 <RadioOnTxTimeoutProcess+0x18>)
 800f16c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f170:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f172:	4b04      	ldr	r3, [pc, #16]	@ (800f184 <RadioOnTxTimeoutProcess+0x1c>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	b113      	cbz	r3, 800f17e <RadioOnTxTimeoutProcess+0x16>
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	b103      	cbz	r3, 800f17e <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 800f17c:	4798      	blx	r3
    }
}
 800f17e:	bd08      	pop	{r3, pc}
 800f180:	48000400 	.word	0x48000400
 800f184:	200010ec 	.word	0x200010ec

0800f188 <RadioOnTxTimeoutIrq>:
{
 800f188:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800f18a:	f7ff ffed 	bl	800f168 <RadioOnTxTimeoutProcess>
}
 800f18e:	bd08      	pop	{r3, pc}

0800f190 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800f190:	b508      	push	{r3, lr}
 800f192:	4b05      	ldr	r3, [pc, #20]	@ (800f1a8 <RadioOnRxTimeoutProcess+0x18>)
 800f194:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800f198:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f19a:	4b04      	ldr	r3, [pc, #16]	@ (800f1ac <RadioOnRxTimeoutProcess+0x1c>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	b113      	cbz	r3, 800f1a6 <RadioOnRxTimeoutProcess+0x16>
 800f1a0:	68db      	ldr	r3, [r3, #12]
 800f1a2:	b103      	cbz	r3, 800f1a6 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 800f1a4:	4798      	blx	r3
    }
}
 800f1a6:	bd08      	pop	{r3, pc}
 800f1a8:	48000400 	.word	0x48000400
 800f1ac:	200010ec 	.word	0x200010ec

0800f1b0 <RadioOnRxTimeoutIrq>:
{
 800f1b0:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800f1b2:	f7ff ffed 	bl	800f190 <RadioOnRxTimeoutProcess>
}
 800f1b6:	bd08      	pop	{r3, pc}

0800f1b8 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800f1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1bc:	4770      	bx	lr

0800f1be <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800f1be:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c2:	4770      	bx	lr

0800f1c4 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 800f1c4:	2001      	movs	r0, #1
 800f1c6:	4770      	bx	lr

0800f1c8 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 800f1c8:	2001      	movs	r0, #1
 800f1ca:	4770      	bx	lr

0800f1cc <RadioWrite>:
{
 800f1cc:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800f1ce:	f000 fe35 	bl	800fe3c <SUBGRF_WriteRegister>
}
 800f1d2:	bd08      	pop	{r3, pc}

0800f1d4 <RadioTxCw>:
{
 800f1d4:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800f1d6:	f001 fbcd 	bl	8010974 <SUBGRF_SetRfTxPower>
 800f1da:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800f1dc:	210e      	movs	r1, #14
 800f1de:	f640 101f 	movw	r0, #2335	@ 0x91f
 800f1e2:	f000 fe2b 	bl	800fe3c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800f1e6:	2101      	movs	r1, #1
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f001 fbaf 	bl	801094c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800f1ee:	f000 fff5 	bl	80101dc <SUBGRF_SetTxContinuousWave>
}
 800f1f2:	bd10      	pop	{r4, pc}

0800f1f4 <RadioTxPrbs>:
{
 800f1f4:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800f1f6:	2101      	movs	r1, #1
 800f1f8:	4b07      	ldr	r3, [pc, #28]	@ (800f218 <RadioTxPrbs+0x24>)
 800f1fa:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 800f1fe:	f001 fba5 	bl	801094c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800f202:	212d      	movs	r1, #45	@ 0x2d
 800f204:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800f208:	f7ff ffe0 	bl	800f1cc <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800f20c:	f000 ffed 	bl	80101ea <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800f210:	4802      	ldr	r0, [pc, #8]	@ (800f21c <RadioTxPrbs+0x28>)
 800f212:	f000 ff23 	bl	801005c <SUBGRF_SetTx>
}
 800f216:	bd08      	pop	{r3, pc}
 800f218:	20001090 	.word	0x20001090
 800f21c:	000fffff 	.word	0x000fffff

0800f220 <RadioSetRxDutyCycle>:
{
 800f220:	b570      	push	{r4, r5, r6, lr}
 800f222:	4604      	mov	r4, r0
 800f224:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800f226:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 800f22a:	4e09      	ldr	r6, [pc, #36]	@ (800f250 <RadioSetRxDutyCycle+0x30>)
 800f22c:	65b3      	str	r3, [r6, #88]	@ 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f22e:	2300      	movs	r3, #0
 800f230:	461a      	mov	r2, r3
 800f232:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f236:	4608      	mov	r0, r1
 800f238:	f001 f8a3 	bl	8010382 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f23c:	2100      	movs	r1, #0
 800f23e:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 800f242:	f001 fb83 	bl	801094c <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800f246:	4629      	mov	r1, r5
 800f248:	4620      	mov	r0, r4
 800f24a:	f000 ff97 	bl	801017c <SUBGRF_SetRxDutyCycle>
}
 800f24e:	bd70      	pop	{r4, r5, r6, pc}
 800f250:	20001090 	.word	0x20001090

0800f254 <RadioRxBoosted>:
{
 800f254:	b538      	push	{r3, r4, r5, lr}
 800f256:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 800f258:	f001 fc67 	bl	8010b2a <RFW_Is_Init>
 800f25c:	2801      	cmp	r0, #1
 800f25e:	d019      	beq.n	800f294 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f260:	2300      	movs	r3, #0
 800f262:	461a      	mov	r2, r3
 800f264:	f240 2162 	movw	r1, #610	@ 0x262
 800f268:	4608      	mov	r0, r1
 800f26a:	f001 f88a 	bl	8010382 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800f26e:	b9a4      	cbnz	r4, 800f29a <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800f270:	4c11      	ldr	r4, [pc, #68]	@ (800f2b8 <RadioRxBoosted+0x64>)
 800f272:	2100      	movs	r1, #0
 800f274:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800f276:	4b11      	ldr	r3, [pc, #68]	@ (800f2bc <RadioRxBoosted+0x68>)
 800f278:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800f27c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f27e:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800f282:	f001 fb63 	bl	801094c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800f286:	7863      	ldrb	r3, [r4, #1]
 800f288:	b183      	cbz	r3, 800f2ac <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800f28a:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800f28e:	f000 ff57 	bl	8010140 <SUBGRF_SetRxBoosted>
}
 800f292:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 800f294:	f001 fc51 	bl	8010b3a <RFW_ReceiveInit>
 800f298:	e7e9      	b.n	800f26e <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800f29a:	4d09      	ldr	r5, [pc, #36]	@ (800f2c0 <RadioRxBoosted+0x6c>)
 800f29c:	4621      	mov	r1, r4
 800f29e:	4628      	mov	r0, r5
 800f2a0:	f002 f91c 	bl	80114dc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	f002 f8d3 	bl	8011450 <UTIL_TIMER_Start>
 800f2aa:	e7e1      	b.n	800f270 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800f2ac:	4b02      	ldr	r3, [pc, #8]	@ (800f2b8 <RadioRxBoosted+0x64>)
 800f2ae:	6898      	ldr	r0, [r3, #8]
 800f2b0:	0180      	lsls	r0, r0, #6
 800f2b2:	f000 ff45 	bl	8010140 <SUBGRF_SetRxBoosted>
}
 800f2b6:	e7ec      	b.n	800f292 <RadioRxBoosted+0x3e>
 800f2b8:	20001090 	.word	0x20001090
 800f2bc:	48000400 	.word	0x48000400
 800f2c0:	20001060 	.word	0x20001060

0800f2c4 <RadioStandby>:
{
 800f2c4:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800f2c6:	2000      	movs	r0, #0
 800f2c8:	f000 feae 	bl	8010028 <SUBGRF_SetStandby>
}
 800f2cc:	bd08      	pop	{r3, pc}

0800f2ce <RadioRead>:
{
 800f2ce:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 800f2d0:	f000 fdc4 	bl	800fe5c <SUBGRF_ReadRegister>
}
 800f2d4:	bd08      	pop	{r3, pc}

0800f2d6 <RadioGetStatus>:
{
 800f2d6:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800f2d8:	f000 fda4 	bl	800fe24 <SUBGRF_GetOperatingMode>
 800f2dc:	2805      	cmp	r0, #5
 800f2de:	d007      	beq.n	800f2f0 <RadioGetStatus+0x1a>
 800f2e0:	2807      	cmp	r0, #7
 800f2e2:	d007      	beq.n	800f2f4 <RadioGetStatus+0x1e>
 800f2e4:	2804      	cmp	r0, #4
 800f2e6:	d001      	beq.n	800f2ec <RadioGetStatus+0x16>
            return RF_IDLE;
 800f2e8:	2000      	movs	r0, #0
}
 800f2ea:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800f2ec:	2002      	movs	r0, #2
 800f2ee:	e7fc      	b.n	800f2ea <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 800f2f0:	2001      	movs	r0, #1
 800f2f2:	e7fa      	b.n	800f2ea <RadioGetStatus+0x14>
            return RF_CAD;
 800f2f4:	2003      	movs	r0, #3
 800f2f6:	e7f8      	b.n	800f2ea <RadioGetStatus+0x14>

0800f2f8 <RadioIrqProcess>:
{
 800f2f8:	b530      	push	{r4, r5, lr}
 800f2fa:	b083      	sub	sp, #12
    uint8_t size = 0;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800f302:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 800f304:	4ba5      	ldr	r3, [pc, #660]	@ (800f59c <RadioIrqProcess+0x2a4>)
 800f306:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800f30a:	2b20      	cmp	r3, #32
 800f30c:	d829      	bhi.n	800f362 <RadioIrqProcess+0x6a>
 800f30e:	b21a      	sxth	r2, r3
 800f310:	2a00      	cmp	r2, #0
 800f312:	f000 8140 	beq.w	800f596 <RadioIrqProcess+0x29e>
 800f316:	3b01      	subs	r3, #1
 800f318:	2b1f      	cmp	r3, #31
 800f31a:	f200 813c 	bhi.w	800f596 <RadioIrqProcess+0x29e>
 800f31e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f322:	0063      	.short	0x0063
 800f324:	013a007f 	.word	0x013a007f
 800f328:	013a00f7 	.word	0x013a00f7
 800f32c:	013a013a 	.word	0x013a013a
 800f330:	013a0127 	.word	0x013a0127
 800f334:	013a013a 	.word	0x013a013a
 800f338:	013a013a 	.word	0x013a013a
 800f33c:	013a013a 	.word	0x013a013a
 800f340:	013a0134 	.word	0x013a0134
 800f344:	013a013a 	.word	0x013a013a
 800f348:	013a013a 	.word	0x013a013a
 800f34c:	013a013a 	.word	0x013a013a
 800f350:	013a013a 	.word	0x013a013a
 800f354:	013a013a 	.word	0x013a013a
 800f358:	013a013a 	.word	0x013a013a
 800f35c:	013a013a 	.word	0x013a013a
 800f360:	0155      	.short	0x0155
 800f362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f366:	f000 80b3 	beq.w	800f4d0 <RadioIrqProcess+0x1d8>
 800f36a:	d928      	bls.n	800f3be <RadioIrqProcess+0xc6>
 800f36c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f370:	f040 8111 	bne.w	800f596 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800f374:	4b8a      	ldr	r3, [pc, #552]	@ (800f5a0 <RadioIrqProcess+0x2a8>)
 800f376:	2201      	movs	r2, #1
 800f378:	2100      	movs	r1, #0
 800f37a:	2002      	movs	r0, #2
 800f37c:	f001 fcbc 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800f380:	f000 fd50 	bl	800fe24 <SUBGRF_GetOperatingMode>
 800f384:	2804      	cmp	r0, #4
 800f386:	f000 80b0 	beq.w	800f4ea <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800f38a:	f000 fd4b 	bl	800fe24 <SUBGRF_GetOperatingMode>
 800f38e:	2805      	cmp	r0, #5
 800f390:	f040 8101 	bne.w	800f596 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 800f394:	4b83      	ldr	r3, [pc, #524]	@ (800f5a4 <RadioIrqProcess+0x2ac>)
 800f396:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800f39a:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &RxTimeoutTimer );
 800f39c:	4882      	ldr	r0, [pc, #520]	@ (800f5a8 <RadioIrqProcess+0x2b0>)
 800f39e:	f001 fffd 	bl	801139c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800f3a2:	2000      	movs	r0, #0
 800f3a4:	f000 fe40 	bl	8010028 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f3a8:	4b80      	ldr	r3, [pc, #512]	@ (800f5ac <RadioIrqProcess+0x2b4>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	f000 80f2 	beq.w	800f596 <RadioIrqProcess+0x29e>
 800f3b2:	68db      	ldr	r3, [r3, #12]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	f000 80ee 	beq.w	800f596 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 800f3ba:	4798      	blx	r3
 800f3bc:	e0eb      	b.n	800f596 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 800f3be:	2b40      	cmp	r3, #64	@ 0x40
 800f3c0:	f000 811d 	beq.w	800f5fe <RadioIrqProcess+0x306>
 800f3c4:	2b80      	cmp	r3, #128	@ 0x80
 800f3c6:	f040 80e6 	bne.w	800f596 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800f3ca:	2000      	movs	r0, #0
 800f3cc:	f000 fe2c 	bl	8010028 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800f3d0:	4b76      	ldr	r3, [pc, #472]	@ (800f5ac <RadioIrqProcess+0x2b4>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	f000 80de 	beq.w	800f596 <RadioIrqProcess+0x29e>
 800f3da:	699b      	ldr	r3, [r3, #24]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	f000 80da 	beq.w	800f596 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 800f3e2:	2000      	movs	r0, #0
 800f3e4:	4798      	blx	r3
 800f3e6:	e0d6      	b.n	800f596 <RadioIrqProcess+0x29e>
 800f3e8:	4b6e      	ldr	r3, [pc, #440]	@ (800f5a4 <RadioIrqProcess+0x2ac>)
 800f3ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f3ee:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &TxTimeoutTimer );
 800f3f0:	486f      	ldr	r0, [pc, #444]	@ (800f5b0 <RadioIrqProcess+0x2b8>)
 800f3f2:	f001 ffd3 	bl	801139c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800f3f6:	2000      	movs	r0, #0
 800f3f8:	f000 fe16 	bl	8010028 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800f3fc:	f001 fb97 	bl	8010b2e <RFW_Is_LongPacketModeEnabled>
 800f400:	2801      	cmp	r0, #1
 800f402:	d00a      	beq.n	800f41a <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800f404:	4b69      	ldr	r3, [pc, #420]	@ (800f5ac <RadioIrqProcess+0x2b4>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	f000 80c4 	beq.w	800f596 <RadioIrqProcess+0x29e>
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	2b00      	cmp	r3, #0
 800f412:	f000 80c0 	beq.w	800f596 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 800f416:	4798      	blx	r3
 800f418:	e0bd      	b.n	800f596 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 800f41a:	f001 fb91 	bl	8010b40 <RFW_DeInit_TxLongPacket>
 800f41e:	e7f1      	b.n	800f404 <RadioIrqProcess+0x10c>
 800f420:	4b60      	ldr	r3, [pc, #384]	@ (800f5a4 <RadioIrqProcess+0x2ac>)
 800f422:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800f426:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &RxTimeoutTimer );
 800f428:	485f      	ldr	r0, [pc, #380]	@ (800f5a8 <RadioIrqProcess+0x2b0>)
 800f42a:	f001 ffb7 	bl	801139c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800f42e:	4b5b      	ldr	r3, [pc, #364]	@ (800f59c <RadioIrqProcess+0x2a4>)
 800f430:	785b      	ldrb	r3, [r3, #1]
 800f432:	b303      	cbz	r3, 800f476 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800f434:	22ff      	movs	r2, #255	@ 0xff
 800f436:	f10d 0107 	add.w	r1, sp, #7
 800f43a:	485e      	ldr	r0, [pc, #376]	@ (800f5b4 <RadioIrqProcess+0x2bc>)
 800f43c:	f001 fa30 	bl	80108a0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800f440:	485d      	ldr	r0, [pc, #372]	@ (800f5b8 <RadioIrqProcess+0x2c0>)
 800f442:	f001 fa47 	bl	80108d4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800f446:	4b59      	ldr	r3, [pc, #356]	@ (800f5ac <RadioIrqProcess+0x2b4>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	f000 80a3 	beq.w	800f596 <RadioIrqProcess+0x29e>
 800f450:	689c      	ldr	r4, [r3, #8]
 800f452:	2c00      	cmp	r4, #0
 800f454:	f000 809f 	beq.w	800f596 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 800f458:	4b50      	ldr	r3, [pc, #320]	@ (800f59c <RadioIrqProcess+0x2a4>)
 800f45a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d11d      	bne.n	800f49e <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800f462:	4a4e      	ldr	r2, [pc, #312]	@ (800f59c <RadioIrqProcess+0x2a4>)
 800f464:	f992 3031 	ldrsb.w	r3, [r2, #49]	@ 0x31
 800f468:	f992 2030 	ldrsb.w	r2, [r2, #48]	@ 0x30
 800f46c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f470:	4850      	ldr	r0, [pc, #320]	@ (800f5b4 <RadioIrqProcess+0x2bc>)
 800f472:	47a0      	blx	r4
                break;
 800f474:	e08f      	b.n	800f596 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800f476:	2000      	movs	r0, #0
 800f478:	f000 fdd6 	bl	8010028 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800f47c:	2100      	movs	r1, #0
 800f47e:	f640 1002 	movw	r0, #2306	@ 0x902
 800f482:	f000 fcdb 	bl	800fe3c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800f486:	f640 1044 	movw	r0, #2372	@ 0x944
 800f48a:	f000 fce7 	bl	800fe5c <SUBGRF_ReadRegister>
 800f48e:	f040 0102 	orr.w	r1, r0, #2
 800f492:	b2c9      	uxtb	r1, r1
 800f494:	f640 1044 	movw	r0, #2372	@ 0x944
 800f498:	f000 fcd0 	bl	800fe3c <SUBGRF_WriteRegister>
 800f49c:	e7ca      	b.n	800f434 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800f49e:	4c3f      	ldr	r4, [pc, #252]	@ (800f59c <RadioIrqProcess+0x2a4>)
 800f4a0:	4669      	mov	r1, sp
 800f4a2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800f4a4:	f001 faf6 	bl	8010a94 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800f4a8:	4b40      	ldr	r3, [pc, #256]	@ (800f5ac <RadioIrqProcess+0x2b4>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	689d      	ldr	r5, [r3, #8]
 800f4ae:	9b00      	ldr	r3, [sp, #0]
 800f4b0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800f4b4:	4a41      	ldr	r2, [pc, #260]	@ (800f5bc <RadioIrqProcess+0x2c4>)
 800f4b6:	fb82 1203 	smull	r1, r2, r2, r3
 800f4ba:	17db      	asrs	r3, r3, #31
 800f4bc:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800f4c0:	b25b      	sxtb	r3, r3
 800f4c2:	f994 2029 	ldrsb.w	r2, [r4, #41]	@ 0x29
 800f4c6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f4ca:	483a      	ldr	r0, [pc, #232]	@ (800f5b4 <RadioIrqProcess+0x2bc>)
 800f4cc:	47a8      	blx	r5
                break;
 800f4ce:	e062      	b.n	800f596 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800f4d0:	2000      	movs	r0, #0
 800f4d2:	f000 fda9 	bl	8010028 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800f4d6:	4b35      	ldr	r3, [pc, #212]	@ (800f5ac <RadioIrqProcess+0x2b4>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d05b      	beq.n	800f596 <RadioIrqProcess+0x29e>
 800f4de:	699b      	ldr	r3, [r3, #24]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d058      	beq.n	800f596 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 800f4e4:	2001      	movs	r0, #1
 800f4e6:	4798      	blx	r3
 800f4e8:	e055      	b.n	800f596 <RadioIrqProcess+0x29e>
 800f4ea:	4b2e      	ldr	r3, [pc, #184]	@ (800f5a4 <RadioIrqProcess+0x2ac>)
 800f4ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f4f0:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &TxTimeoutTimer );
 800f4f2:	482f      	ldr	r0, [pc, #188]	@ (800f5b0 <RadioIrqProcess+0x2b8>)
 800f4f4:	f001 ff52 	bl	801139c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800f4f8:	2000      	movs	r0, #0
 800f4fa:	f000 fd95 	bl	8010028 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f4fe:	4b2b      	ldr	r3, [pc, #172]	@ (800f5ac <RadioIrqProcess+0x2b4>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d047      	beq.n	800f596 <RadioIrqProcess+0x29e>
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d044      	beq.n	800f596 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 800f50c:	4798      	blx	r3
 800f50e:	e042      	b.n	800f596 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800f510:	4b2b      	ldr	r3, [pc, #172]	@ (800f5c0 <RadioIrqProcess+0x2c8>)
 800f512:	2201      	movs	r2, #1
 800f514:	2100      	movs	r1, #0
 800f516:	2002      	movs	r0, #2
 800f518:	f001 fbee 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800f51c:	4b1f      	ldr	r3, [pc, #124]	@ (800f59c <RadioIrqProcess+0x2a4>)
 800f51e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800f520:	b3c9      	cbz	r1, 800f596 <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800f522:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800f526:	f640 1003 	movw	r0, #2307	@ 0x903
 800f52a:	f7ff fe4f 	bl	800f1cc <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800f52e:	4c1b      	ldr	r4, [pc, #108]	@ (800f59c <RadioIrqProcess+0x2a4>)
 800f530:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800f534:	f640 1004 	movw	r0, #2308	@ 0x904
 800f538:	f7ff fe48 	bl	800f1cc <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800f53c:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 800f540:	f640 1005 	movw	r0, #2309	@ 0x905
 800f544:	f7ff fe42 	bl	800f1cc <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800f548:	f640 1002 	movw	r0, #2306	@ 0x902
 800f54c:	f7ff febf 	bl	800f2ce <RadioRead>
 800f550:	f040 0101 	orr.w	r1, r0, #1
 800f554:	b2c9      	uxtb	r1, r1
 800f556:	f640 1002 	movw	r0, #2306	@ 0x902
 800f55a:	f7ff fe37 	bl	800f1cc <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800f55e:	2200      	movs	r2, #0
 800f560:	65a2      	str	r2, [r4, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f562:	4613      	mov	r3, r2
 800f564:	f240 2162 	movw	r1, #610	@ 0x262
 800f568:	4608      	mov	r0, r1
 800f56a:	f000 ff0a 	bl	8010382 <SUBGRF_SetDioIrqParams>
 800f56e:	e012      	b.n	800f596 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800f570:	4b14      	ldr	r3, [pc, #80]	@ (800f5c4 <RadioIrqProcess+0x2cc>)
 800f572:	2201      	movs	r2, #1
 800f574:	2100      	movs	r1, #0
 800f576:	2002      	movs	r0, #2
 800f578:	f001 fbbe 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800f57c:	f001 fad5 	bl	8010b2a <RFW_Is_Init>
 800f580:	2801      	cmp	r0, #1
 800f582:	d108      	bne.n	800f596 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 800f584:	f001 fadd 	bl	8010b42 <RFW_ReceivePayload>
 800f588:	e005      	b.n	800f596 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800f58a:	4b0f      	ldr	r3, [pc, #60]	@ (800f5c8 <RadioIrqProcess+0x2d0>)
 800f58c:	2201      	movs	r2, #1
 800f58e:	2100      	movs	r1, #0
 800f590:	2002      	movs	r0, #2
 800f592:	f001 fbb1 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f596:	b003      	add	sp, #12
 800f598:	bd30      	pop	{r4, r5, pc}
 800f59a:	bf00      	nop
 800f59c:	20001090 	.word	0x20001090
 800f5a0:	08012664 	.word	0x08012664
 800f5a4:	48000400 	.word	0x48000400
 800f5a8:	20001060 	.word	0x20001060
 800f5ac:	200010ec 	.word	0x200010ec
 800f5b0:	20001078 	.word	0x20001078
 800f5b4:	200010f0 	.word	0x200010f0
 800f5b8:	200010b4 	.word	0x200010b4
 800f5bc:	10624dd3 	.word	0x10624dd3
 800f5c0:	08012678 	.word	0x08012678
 800f5c4:	08012684 	.word	0x08012684
 800f5c8:	08012690 	.word	0x08012690
        TimerStop( &RxTimeoutTimer );
 800f5cc:	4817      	ldr	r0, [pc, #92]	@ (800f62c <RadioIrqProcess+0x334>)
 800f5ce:	f001 fee5 	bl	801139c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800f5d2:	4b17      	ldr	r3, [pc, #92]	@ (800f630 <RadioIrqProcess+0x338>)
 800f5d4:	785b      	ldrb	r3, [r3, #1]
 800f5d6:	b173      	cbz	r3, 800f5f6 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f5d8:	4b16      	ldr	r3, [pc, #88]	@ (800f634 <RadioIrqProcess+0x33c>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d0da      	beq.n	800f596 <RadioIrqProcess+0x29e>
 800f5e0:	68db      	ldr	r3, [r3, #12]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d0d7      	beq.n	800f596 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 800f5e6:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800f5e8:	4b13      	ldr	r3, [pc, #76]	@ (800f638 <RadioIrqProcess+0x340>)
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	2100      	movs	r1, #0
 800f5ee:	2002      	movs	r0, #2
 800f5f0:	f001 fb82 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
 800f5f4:	e7cf      	b.n	800f596 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800f5f6:	2000      	movs	r0, #0
 800f5f8:	f000 fd16 	bl	8010028 <SUBGRF_SetStandby>
 800f5fc:	e7ec      	b.n	800f5d8 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800f5fe:	4b0f      	ldr	r3, [pc, #60]	@ (800f63c <RadioIrqProcess+0x344>)
 800f600:	2201      	movs	r2, #1
 800f602:	2100      	movs	r1, #0
 800f604:	2002      	movs	r0, #2
 800f606:	f001 fb77 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800f60a:	4b09      	ldr	r3, [pc, #36]	@ (800f630 <RadioIrqProcess+0x338>)
 800f60c:	785b      	ldrb	r3, [r3, #1]
 800f60e:	b143      	cbz	r3, 800f622 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800f610:	4b08      	ldr	r3, [pc, #32]	@ (800f634 <RadioIrqProcess+0x33c>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d0be      	beq.n	800f596 <RadioIrqProcess+0x29e>
 800f618:	691b      	ldr	r3, [r3, #16]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d0bb      	beq.n	800f596 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 800f61e:	4798      	blx	r3
}
 800f620:	e7b9      	b.n	800f596 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800f622:	2000      	movs	r0, #0
 800f624:	f000 fd00 	bl	8010028 <SUBGRF_SetStandby>
 800f628:	e7f2      	b.n	800f610 <RadioIrqProcess+0x318>
 800f62a:	bf00      	nop
 800f62c:	20001060 	.word	0x20001060
 800f630:	20001090 	.word	0x20001090
 800f634:	200010ec 	.word	0x200010ec
 800f638:	0801269c 	.word	0x0801269c
 800f63c:	080126a8 	.word	0x080126a8

0800f640 <RadioOnDioIrq>:
{
 800f640:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800f642:	4b03      	ldr	r3, [pc, #12]	@ (800f650 <RadioOnDioIrq+0x10>)
 800f644:	f8a3 0054 	strh.w	r0, [r3, #84]	@ 0x54
    RADIO_IRQ_PROCESS();
 800f648:	f7ff fe56 	bl	800f2f8 <RadioIrqProcess>
}
 800f64c:	bd08      	pop	{r3, pc}
 800f64e:	bf00      	nop
 800f650:	20001090 	.word	0x20001090

0800f654 <RadioGetWakeupTime>:
{
 800f654:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800f656:	f001 f9a4 	bl	80109a2 <SUBGRF_GetRadioWakeUpTime>
}
 800f65a:	3003      	adds	r0, #3
 800f65c:	bd08      	pop	{r3, pc}
	...

0800f660 <RadioSetMaxPayloadLength>:
{
 800f660:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800f662:	2801      	cmp	r0, #1
 800f664:	d004      	beq.n	800f670 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800f666:	4b0a      	ldr	r3, [pc, #40]	@ (800f690 <RadioSetMaxPayloadLength+0x30>)
 800f668:	7d5b      	ldrb	r3, [r3, #21]
 800f66a:	2b01      	cmp	r3, #1
 800f66c:	d008      	beq.n	800f680 <RadioSetMaxPayloadLength+0x20>
}
 800f66e:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800f670:	4b08      	ldr	r3, [pc, #32]	@ (800f694 <RadioSetMaxPayloadLength+0x34>)
 800f672:	7019      	strb	r1, [r3, #0]
 800f674:	4806      	ldr	r0, [pc, #24]	@ (800f690 <RadioSetMaxPayloadLength+0x30>)
 800f676:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f678:	300e      	adds	r0, #14
 800f67a:	f001 f851 	bl	8010720 <SUBGRF_SetPacketParams>
 800f67e:	e7f6      	b.n	800f66e <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800f680:	4b04      	ldr	r3, [pc, #16]	@ (800f694 <RadioSetMaxPayloadLength+0x34>)
 800f682:	7019      	strb	r1, [r3, #0]
 800f684:	4802      	ldr	r0, [pc, #8]	@ (800f690 <RadioSetMaxPayloadLength+0x30>)
 800f686:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f688:	300e      	adds	r0, #14
 800f68a:	f001 f849 	bl	8010720 <SUBGRF_SetPacketParams>
}
 800f68e:	e7ee      	b.n	800f66e <RadioSetMaxPayloadLength+0xe>
 800f690:	20001090 	.word	0x20001090
 800f694:	20000114 	.word	0x20000114

0800f698 <RadioReadRegisters>:
{
 800f698:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800f69a:	f000 fc5d 	bl	800ff58 <SUBGRF_ReadRegisters>
}
 800f69e:	bd08      	pop	{r3, pc}

0800f6a0 <RadioWriteRegisters>:
{
 800f6a0:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800f6a2:	f000 fc17 	bl	800fed4 <SUBGRF_WriteRegisters>
}
 800f6a6:	bd08      	pop	{r3, pc}

0800f6a8 <RadioRssi>:
{
 800f6a8:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800f6aa:	f001 f8c9 	bl	8010840 <SUBGRF_GetRssiInst>
}
 800f6ae:	bd08      	pop	{r3, pc}

0800f6b0 <RadioSetTxContinuousWave>:
{
 800f6b0:	b538      	push	{r3, r4, r5, lr}
 800f6b2:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800f6b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f6b8:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 800f6bc:	f000 fed4 	bl	8010468 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800f6c0:	4628      	mov	r0, r5
 800f6c2:	f001 f957 	bl	8010974 <SUBGRF_SetRfTxPower>
 800f6c6:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800f6c8:	210e      	movs	r1, #14
 800f6ca:	f640 101f 	movw	r0, #2335	@ 0x91f
 800f6ce:	f000 fbb5 	bl	800fe3c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800f6d2:	2101      	movs	r1, #1
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	f001 f939 	bl	801094c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800f6da:	f000 fd7f 	bl	80101dc <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800f6de:	4d04      	ldr	r5, [pc, #16]	@ (800f6f0 <RadioSetTxContinuousWave+0x40>)
 800f6e0:	4621      	mov	r1, r4
 800f6e2:	4628      	mov	r0, r5
 800f6e4:	f001 fefa 	bl	80114dc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	f001 feb1 	bl	8011450 <UTIL_TIMER_Start>
}
 800f6ee:	bd38      	pop	{r3, r4, r5, pc}
 800f6f0:	20001078 	.word	0x20001078

0800f6f4 <RadioSetChannel>:
{
 800f6f4:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800f6f6:	f000 feb7 	bl	8010468 <SUBGRF_SetRfFrequency>
}
 800f6fa:	bd08      	pop	{r3, pc}

0800f6fc <RadioStartCad>:
{
 800f6fc:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f6fe:	2100      	movs	r1, #0
 800f700:	4b07      	ldr	r3, [pc, #28]	@ (800f720 <RadioStartCad+0x24>)
 800f702:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 800f706:	f001 f921 	bl	801094c <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800f70a:	2300      	movs	r3, #0
 800f70c:	461a      	mov	r2, r3
 800f70e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800f712:	4608      	mov	r0, r1
 800f714:	f000 fe35 	bl	8010382 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800f718:	f000 fd54 	bl	80101c4 <SUBGRF_SetCad>
}
 800f71c:	bd08      	pop	{r3, pc}
 800f71e:	bf00      	nop
 800f720:	20001090 	.word	0x20001090

0800f724 <RadioRx>:
{
 800f724:	b538      	push	{r3, r4, r5, lr}
 800f726:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 800f728:	f001 f9ff 	bl	8010b2a <RFW_Is_Init>
 800f72c:	2801      	cmp	r0, #1
 800f72e:	d019      	beq.n	800f764 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f730:	2300      	movs	r3, #0
 800f732:	461a      	mov	r2, r3
 800f734:	f240 2162 	movw	r1, #610	@ 0x262
 800f738:	4608      	mov	r0, r1
 800f73a:	f000 fe22 	bl	8010382 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800f73e:	b9a4      	cbnz	r4, 800f76a <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800f740:	4c11      	ldr	r4, [pc, #68]	@ (800f788 <RadioRx+0x64>)
 800f742:	2100      	movs	r1, #0
 800f744:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800f746:	4b11      	ldr	r3, [pc, #68]	@ (800f78c <RadioRx+0x68>)
 800f748:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800f74c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f74e:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800f752:	f001 f8fb 	bl	801094c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800f756:	7863      	ldrb	r3, [r4, #1]
 800f758:	b183      	cbz	r3, 800f77c <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800f75a:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800f75e:	f000 fc9f 	bl	80100a0 <SUBGRF_SetRx>
}
 800f762:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 800f764:	f001 f9e9 	bl	8010b3a <RFW_ReceiveInit>
 800f768:	e7e9      	b.n	800f73e <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800f76a:	4d09      	ldr	r5, [pc, #36]	@ (800f790 <RadioRx+0x6c>)
 800f76c:	4621      	mov	r1, r4
 800f76e:	4628      	mov	r0, r5
 800f770:	f001 feb4 	bl	80114dc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800f774:	4628      	mov	r0, r5
 800f776:	f001 fe6b 	bl	8011450 <UTIL_TIMER_Start>
 800f77a:	e7e1      	b.n	800f740 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800f77c:	4b02      	ldr	r3, [pc, #8]	@ (800f788 <RadioRx+0x64>)
 800f77e:	6898      	ldr	r0, [r3, #8]
 800f780:	0180      	lsls	r0, r0, #6
 800f782:	f000 fc8d 	bl	80100a0 <SUBGRF_SetRx>
}
 800f786:	e7ec      	b.n	800f762 <RadioRx+0x3e>
 800f788:	20001090 	.word	0x20001090
 800f78c:	48000400 	.word	0x48000400
 800f790:	20001060 	.word	0x20001060

0800f794 <RadioSleep>:
{
 800f794:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800f796:	f04f 0004 	mov.w	r0, #4
 800f79a:	f000 fc25 	bl	800ffe8 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800f79e:	2002      	movs	r0, #2
 800f7a0:	f7f2 fa34 	bl	8001c0c <HAL_Delay>
}
 800f7a4:	bd08      	pop	{r3, pc}
	...

0800f7a8 <RadioSend>:
{
 800f7a8:	b570      	push	{r4, r5, r6, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	4605      	mov	r5, r0
 800f7ae:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	f240 2101 	movw	r1, #513	@ 0x201
 800f7b8:	4608      	mov	r0, r1
 800f7ba:	f000 fde2 	bl	8010382 <SUBGRF_SetDioIrqParams>
 800f7be:	4b3f      	ldr	r3, [pc, #252]	@ (800f8bc <RadioSend+0x114>)
 800f7c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f7c4:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800f7c6:	4e3e      	ldr	r6, [pc, #248]	@ (800f8c0 <RadioSend+0x118>)
 800f7c8:	2101      	movs	r1, #1
 800f7ca:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 800f7ce:	f001 f8bd 	bl	801094c <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800f7d2:	7833      	ldrb	r3, [r6, #0]
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d103      	bne.n	800f7e0 <RadioSend+0x38>
 800f7d8:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 800f7dc:	2b06      	cmp	r3, #6
 800f7de:	d012      	beq.n	800f806 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800f7e0:	f640 0089 	movw	r0, #2185	@ 0x889
 800f7e4:	f000 fb3a 	bl	800fe5c <SUBGRF_ReadRegister>
 800f7e8:	f040 0104 	orr.w	r1, r0, #4
 800f7ec:	b2c9      	uxtb	r1, r1
 800f7ee:	f640 0089 	movw	r0, #2185	@ 0x889
 800f7f2:	f000 fb23 	bl	800fe3c <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 800f7f6:	4b32      	ldr	r3, [pc, #200]	@ (800f8c0 <RadioSend+0x118>)
 800f7f8:	781b      	ldrb	r3, [r3, #0]
 800f7fa:	2b03      	cmp	r3, #3
 800f7fc:	d818      	bhi.n	800f830 <RadioSend+0x88>
 800f7fe:	e8df f003 	tbb	[pc, r3]
 800f802:	0d23      	.short	0x0d23
 800f804:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800f806:	f640 0089 	movw	r0, #2185	@ 0x889
 800f80a:	f000 fb27 	bl	800fe5c <SUBGRF_ReadRegister>
 800f80e:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800f812:	f640 0089 	movw	r0, #2185	@ 0x889
 800f816:	f000 fb11 	bl	800fe3c <SUBGRF_WriteRegister>
 800f81a:	e7ec      	b.n	800f7f6 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800f81c:	4828      	ldr	r0, [pc, #160]	@ (800f8c0 <RadioSend+0x118>)
 800f81e:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f820:	300e      	adds	r0, #14
 800f822:	f000 ff7d 	bl	8010720 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800f826:	2200      	movs	r2, #0
 800f828:	4621      	mov	r1, r4
 800f82a:	4628      	mov	r0, r5
 800f82c:	f000 fc30 	bl	8010090 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800f830:	4c24      	ldr	r4, [pc, #144]	@ (800f8c4 <RadioSend+0x11c>)
 800f832:	4b23      	ldr	r3, [pc, #140]	@ (800f8c0 <RadioSend+0x118>)
 800f834:	6859      	ldr	r1, [r3, #4]
 800f836:	4620      	mov	r0, r4
 800f838:	f001 fe50 	bl	80114dc <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800f83c:	4620      	mov	r0, r4
 800f83e:	f001 fe07 	bl	8011450 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 800f842:	2000      	movs	r0, #0
}
 800f844:	b002      	add	sp, #8
 800f846:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 800f848:	f001 f96f 	bl	8010b2a <RFW_Is_Init>
 800f84c:	2801      	cmp	r0, #1
 800f84e:	d00a      	beq.n	800f866 <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800f850:	481b      	ldr	r0, [pc, #108]	@ (800f8c0 <RadioSend+0x118>)
 800f852:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f854:	300e      	adds	r0, #14
 800f856:	f000 ff63 	bl	8010720 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800f85a:	2200      	movs	r2, #0
 800f85c:	4621      	mov	r1, r4
 800f85e:	4628      	mov	r0, r5
 800f860:	f000 fc16 	bl	8010090 <SUBGRF_SendPayload>
 800f864:	e7e4      	b.n	800f830 <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800f866:	f10d 0207 	add.w	r2, sp, #7
 800f86a:	4621      	mov	r1, r4
 800f86c:	4628      	mov	r0, r5
 800f86e:	f001 f961 	bl	8010b34 <RFW_TransmitInit>
 800f872:	b968      	cbnz	r0, 800f890 <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800f874:	4812      	ldr	r0, [pc, #72]	@ (800f8c0 <RadioSend+0x118>)
 800f876:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f87a:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f87c:	300e      	adds	r0, #14
 800f87e:	f000 ff4f 	bl	8010720 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 800f882:	2200      	movs	r2, #0
 800f884:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f888:	4628      	mov	r0, r5
 800f88a:	f000 fc01 	bl	8010090 <SUBGRF_SendPayload>
 800f88e:	e7cf      	b.n	800f830 <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 800f890:	4b0d      	ldr	r3, [pc, #52]	@ (800f8c8 <RadioSend+0x120>)
 800f892:	2201      	movs	r2, #1
 800f894:	2100      	movs	r1, #0
 800f896:	2002      	movs	r0, #2
 800f898:	f001 fa2e 	bl	8010cf8 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 800f89c:	2003      	movs	r0, #3
 800f89e:	e7d1      	b.n	800f844 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800f8a0:	4807      	ldr	r0, [pc, #28]	@ (800f8c0 <RadioSend+0x118>)
 800f8a2:	2302      	movs	r3, #2
 800f8a4:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800f8a6:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f8a8:	300e      	adds	r0, #14
 800f8aa:	f000 ff39 	bl	8010720 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	4621      	mov	r1, r4
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	f000 fbec 	bl	8010090 <SUBGRF_SendPayload>
            break;
 800f8b8:	e7ba      	b.n	800f830 <RadioSend+0x88>
 800f8ba:	bf00      	nop
 800f8bc:	48000400 	.word	0x48000400
 800f8c0:	20001090 	.word	0x20001090
 800f8c4:	20001078 	.word	0x20001078
 800f8c8:	080126b8 	.word	0x080126b8

0800f8cc <RadioRandom>:
{
 800f8cc:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f000 fd54 	bl	8010382 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 800f8da:	f000 fbfb 	bl	80100d4 <SUBGRF_GetRandom>
}
 800f8de:	bd08      	pop	{r3, pc}

0800f8e0 <RadioSetModem>:
{
 800f8e0:	b510      	push	{r4, lr}
 800f8e2:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 800f8e4:	4b14      	ldr	r3, [pc, #80]	@ (800f938 <RadioSetModem+0x58>)
 800f8e6:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 800f8e8:	f001 f92c 	bl	8010b44 <RFW_SetRadioModem>
    switch( modem )
 800f8ec:	2c01      	cmp	r4, #1
 800f8ee:	d010      	beq.n	800f912 <RadioSetModem+0x32>
 800f8f0:	2c03      	cmp	r4, #3
 800f8f2:	d01a      	beq.n	800f92a <RadioSetModem+0x4a>
 800f8f4:	b134      	cbz	r4, 800f904 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800f8f6:	2003      	movs	r0, #3
 800f8f8:	f000 fde2 	bl	80104c0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800f8fc:	4b0e      	ldr	r3, [pc, #56]	@ (800f938 <RadioSetModem+0x58>)
 800f8fe:	2200      	movs	r2, #0
 800f900:	735a      	strb	r2, [r3, #13]
}
 800f902:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800f904:	2000      	movs	r0, #0
 800f906:	f000 fddb 	bl	80104c0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800f90a:	4b0b      	ldr	r3, [pc, #44]	@ (800f938 <RadioSetModem+0x58>)
 800f90c:	2200      	movs	r2, #0
 800f90e:	735a      	strb	r2, [r3, #13]
        break;
 800f910:	e7f7      	b.n	800f902 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800f912:	2001      	movs	r0, #1
 800f914:	f000 fdd4 	bl	80104c0 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800f918:	4b07      	ldr	r3, [pc, #28]	@ (800f938 <RadioSetModem+0x58>)
 800f91a:	7b5a      	ldrb	r2, [r3, #13]
 800f91c:	7b18      	ldrb	r0, [r3, #12]
 800f91e:	4282      	cmp	r2, r0
 800f920:	d0ef      	beq.n	800f902 <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800f922:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800f924:	f000 f80a 	bl	800f93c <RadioSetPublicNetwork>
 800f928:	e7eb      	b.n	800f902 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800f92a:	2002      	movs	r0, #2
 800f92c:	f000 fdc8 	bl	80104c0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800f930:	4b01      	ldr	r3, [pc, #4]	@ (800f938 <RadioSetModem+0x58>)
 800f932:	2200      	movs	r2, #0
 800f934:	735a      	strb	r2, [r3, #13]
}
 800f936:	e7e4      	b.n	800f902 <RadioSetModem+0x22>
 800f938:	20001090 	.word	0x20001090

0800f93c <RadioSetPublicNetwork>:
{
 800f93c:	b510      	push	{r4, lr}
 800f93e:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800f940:	4b0e      	ldr	r3, [pc, #56]	@ (800f97c <RadioSetPublicNetwork+0x40>)
 800f942:	7318      	strb	r0, [r3, #12]
 800f944:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 800f946:	2001      	movs	r0, #1
 800f948:	f7ff ffca 	bl	800f8e0 <RadioSetModem>
    if( enable == true )
 800f94c:	b154      	cbz	r4, 800f964 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800f94e:	2134      	movs	r1, #52	@ 0x34
 800f950:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800f954:	f000 fa72 	bl	800fe3c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800f958:	2144      	movs	r1, #68	@ 0x44
 800f95a:	f240 7041 	movw	r0, #1857	@ 0x741
 800f95e:	f000 fa6d 	bl	800fe3c <SUBGRF_WriteRegister>
}
 800f962:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800f964:	2114      	movs	r1, #20
 800f966:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800f96a:	f000 fa67 	bl	800fe3c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800f96e:	2124      	movs	r1, #36	@ 0x24
 800f970:	f240 7041 	movw	r0, #1857	@ 0x741
 800f974:	f000 fa62 	bl	800fe3c <SUBGRF_WriteRegister>
}
 800f978:	e7f3      	b.n	800f962 <RadioSetPublicNetwork+0x26>
 800f97a:	bf00      	nop
 800f97c:	20001090 	.word	0x20001090

0800f980 <RadioSetTxConfig>:
{
 800f980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f984:	b083      	sub	sp, #12
 800f986:	4604      	mov	r4, r0
 800f988:	460e      	mov	r6, r1
 800f98a:	4617      	mov	r7, r2
 800f98c:	461d      	mov	r5, r3
 800f98e:	f8bd 8038 	ldrh.w	r8, [sp, #56]	@ 0x38
 800f992:	f89d 903c 	ldrb.w	r9, [sp, #60]	@ 0x3c
 800f996:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
    RFW_DeInit();
 800f99a:	f001 f8c5 	bl	8010b28 <RFW_DeInit>
    switch( modem )
 800f99e:	b1ac      	cbz	r4, 800f9cc <RadioSetTxConfig+0x4c>
 800f9a0:	2c01      	cmp	r4, #1
 800f9a2:	d05a      	beq.n	800fa5a <RadioSetTxConfig+0xda>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800f9a4:	4630      	mov	r0, r6
 800f9a6:	f000 ffe5 	bl	8010974 <SUBGRF_SetRfTxPower>
 800f9aa:	4c55      	ldr	r4, [pc, #340]	@ (800fb00 <RadioSetTxConfig+0x180>)
 800f9ac:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800f9b0:	210e      	movs	r1, #14
 800f9b2:	f640 101f 	movw	r0, #2335	@ 0x91f
 800f9b6:	f000 fa41 	bl	800fe3c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800f9ba:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800f9be:	f001 f8b8 	bl	8010b32 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800f9c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f9c4:	6063      	str	r3, [r4, #4]
}
 800f9c6:	b003      	add	sp, #12
 800f9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f9cc:	4c4c      	ldr	r4, [pc, #304]	@ (800fb00 <RadioSetTxConfig+0x180>)
 800f9ce:	f04f 0b00 	mov.w	fp, #0
 800f9d2:	f884 b038 	strb.w	fp, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f9d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9d8:	63e3      	str	r3, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800f9da:	230b      	movs	r3, #11
 800f9dc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f9e0:	4628      	mov	r0, r5
 800f9e2:	f001 f83f 	bl	8010a64 <SUBGRF_GetFskBandwidthRegValue>
 800f9e6:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800f9ea:	6427      	str	r7, [r4, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f9ec:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f9f0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800f9f4:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800f9f8:	2304      	movs	r3, #4
 800f9fa:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800f9fc:	2318      	movs	r3, #24
 800f9fe:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800fa00:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800fa04:	f089 0901 	eor.w	r9, r9, #1
 800fa08:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 800fa0c:	f1ba 0f00 	cmp.w	sl, #0
 800fa10:	d01f      	beq.n	800fa52 <RadioSetTxConfig+0xd2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800fa12:	22f2      	movs	r2, #242	@ 0xf2
 800fa14:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800fa16:	4c3a      	ldr	r4, [pc, #232]	@ (800fb00 <RadioSetTxConfig+0x180>)
 800fa18:	2301      	movs	r3, #1
 800fa1a:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800fa1c:	f7ff fc52 	bl	800f2c4 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800fa20:	2000      	movs	r0, #0
 800fa22:	f7ff ff5d 	bl	800f8e0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fa26:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800fa2a:	f000 fdf1 	bl	8010610 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fa2e:	f104 000e 	add.w	r0, r4, #14
 800fa32:	f000 fe75 	bl	8010720 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800fa36:	4a33      	ldr	r2, [pc, #204]	@ (800fb04 <RadioSetTxConfig+0x184>)
 800fa38:	466b      	mov	r3, sp
 800fa3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa3e:	e883 0003 	stmia.w	r3, {r0, r1}
 800fa42:	4618      	mov	r0, r3
 800fa44:	f000 fa56 	bl	800fef4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800fa48:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800fa4c:	f000 fa29 	bl	800fea2 <SUBGRF_SetWhiteningSeed>
            break;
 800fa50:	e7a8      	b.n	800f9a4 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800fa52:	4b2b      	ldr	r3, [pc, #172]	@ (800fb00 <RadioSetTxConfig+0x180>)
 800fa54:	2201      	movs	r2, #1
 800fa56:	75da      	strb	r2, [r3, #23]
 800fa58:	e7dd      	b.n	800fa16 <RadioSetTxConfig+0x96>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800fa5a:	4a29      	ldr	r2, [pc, #164]	@ (800fb00 <RadioSetTxConfig+0x180>)
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800fa62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fa64:	b2db      	uxtb	r3, r3
 800fa66:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800fa6a:	4927      	ldr	r1, [pc, #156]	@ (800fb08 <RadioSetTxConfig+0x188>)
 800fa6c:	5d49      	ldrb	r1, [r1, r5]
 800fa6e:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800fa72:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 800fa76:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800fa7a:	b91d      	cbnz	r5, 800fa84 <RadioSetTxConfig+0x104>
 800fa7c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fa7e:	3a0b      	subs	r2, #11
 800fa80:	2a01      	cmp	r2, #1
 800fa82:	d92c      	bls.n	800fade <RadioSetTxConfig+0x15e>
 800fa84:	2d01      	cmp	r5, #1
 800fa86:	d027      	beq.n	800fad8 <RadioSetTxConfig+0x158>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800fa88:	4a1d      	ldr	r2, [pc, #116]	@ (800fb00 <RadioSetTxConfig+0x180>)
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800fa90:	4a1b      	ldr	r2, [pc, #108]	@ (800fb00 <RadioSetTxConfig+0x180>)
 800fa92:	2101      	movs	r1, #1
 800fa94:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800fa96:	3b05      	subs	r3, #5
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	428b      	cmp	r3, r1
 800fa9c:	d924      	bls.n	800fae8 <RadioSetTxConfig+0x168>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800fa9e:	4b18      	ldr	r3, [pc, #96]	@ (800fb00 <RadioSetTxConfig+0x180>)
 800faa0:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800faa4:	4c16      	ldr	r4, [pc, #88]	@ (800fb00 <RadioSetTxConfig+0x180>)
 800faa6:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800faaa:	4b18      	ldr	r3, [pc, #96]	@ (800fb0c <RadioSetTxConfig+0x18c>)
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800fab0:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800fab4:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800fab8:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 800fabc:	f7ff fc02 	bl	800f2c4 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800fac0:	2001      	movs	r0, #1
 800fac2:	f7ff ff0d 	bl	800f8e0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fac6:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800faca:	f000 fda1 	bl	8010610 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800face:	f104 000e 	add.w	r0, r4, #14
 800fad2:	f000 fe25 	bl	8010720 <SUBGRF_SetPacketParams>
            break;
 800fad6:	e765      	b.n	800f9a4 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800fad8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fada:	2a0c      	cmp	r2, #12
 800fadc:	d1d4      	bne.n	800fa88 <RadioSetTxConfig+0x108>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800fade:	4a08      	ldr	r2, [pc, #32]	@ (800fb00 <RadioSetTxConfig+0x180>)
 800fae0:	2101      	movs	r1, #1
 800fae2:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 800fae6:	e7d3      	b.n	800fa90 <RadioSetTxConfig+0x110>
                if( preambleLen < 12 )
 800fae8:	f1b8 0f0b 	cmp.w	r8, #11
 800faec:	d803      	bhi.n	800faf6 <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800faee:	4613      	mov	r3, r2
 800faf0:	220c      	movs	r2, #12
 800faf2:	839a      	strh	r2, [r3, #28]
 800faf4:	e7d6      	b.n	800faa4 <RadioSetTxConfig+0x124>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800faf6:	4b02      	ldr	r3, [pc, #8]	@ (800fb00 <RadioSetTxConfig+0x180>)
 800faf8:	f8a3 801c 	strh.w	r8, [r3, #28]
 800fafc:	e7d2      	b.n	800faa4 <RadioSetTxConfig+0x124>
 800fafe:	bf00      	nop
 800fb00:	20001090 	.word	0x20001090
 800fb04:	08011a3c 	.word	0x08011a3c
 800fb08:	080126d0 	.word	0x080126d0
 800fb0c:	20000114 	.word	0x20000114

0800fb10 <RadioSetRxConfig>:
{
 800fb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb14:	b085      	sub	sp, #20
 800fb16:	4604      	mov	r4, r0
 800fb18:	460d      	mov	r5, r1
 800fb1a:	4616      	mov	r6, r2
 800fb1c:	9301      	str	r3, [sp, #4]
 800fb1e:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 800fb22:	f8bd a040 	ldrh.w	sl, [sp, #64]	@ 0x40
 800fb26:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 800fb2a:	f89d b04c 	ldrb.w	fp, [sp, #76]	@ 0x4c
 800fb2e:	f89d 805c 	ldrb.w	r8, [sp, #92]	@ 0x5c
    SubgRf.RxContinuous = rxContinuous;
 800fb32:	4b73      	ldr	r3, [pc, #460]	@ (800fd00 <RadioSetRxConfig+0x1f0>)
 800fb34:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 800fb38:	f000 fff6 	bl	8010b28 <RFW_DeInit>
    if( rxContinuous == true )
 800fb3c:	f1b8 0f00 	cmp.w	r8, #0
 800fb40:	d001      	beq.n	800fb46 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 800fb42:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 800fb46:	b14f      	cbz	r7, 800fb5c <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 800fb48:	f89d 2048 	ldrb.w	r2, [sp, #72]	@ 0x48
 800fb4c:	4b6d      	ldr	r3, [pc, #436]	@ (800fd04 <RadioSetRxConfig+0x1f4>)
 800fb4e:	701a      	strb	r2, [r3, #0]
    switch( modem )
 800fb50:	b144      	cbz	r4, 800fb64 <RadioSetRxConfig+0x54>
 800fb52:	2c01      	cmp	r4, #1
 800fb54:	d057      	beq.n	800fc06 <RadioSetRxConfig+0xf6>
}
 800fb56:	b005      	add	sp, #20
 800fb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 800fb5c:	4b69      	ldr	r3, [pc, #420]	@ (800fd04 <RadioSetRxConfig+0x1f4>)
 800fb5e:	22ff      	movs	r2, #255	@ 0xff
 800fb60:	701a      	strb	r2, [r3, #0]
 800fb62:	e7f5      	b.n	800fb50 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800fb64:	2000      	movs	r0, #0
 800fb66:	f000 fb47 	bl	80101f8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800fb6a:	4c65      	ldr	r4, [pc, #404]	@ (800fd00 <RadioSetRxConfig+0x1f0>)
 800fb6c:	f04f 0800 	mov.w	r8, #0
 800fb70:	f884 8038 	strb.w	r8, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800fb74:	63e6      	str	r6, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800fb76:	230b      	movs	r3, #11
 800fb78:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800fb7c:	4628      	mov	r0, r5
 800fb7e:	f000 ff71 	bl	8010a64 <SUBGRF_GetFskBandwidthRegValue>
 800fb82:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800fb86:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800fb8a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800fb8e:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800fb92:	2304      	movs	r3, #4
 800fb94:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800fb96:	2318      	movs	r3, #24
 800fb98:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800fb9a:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800fb9e:	f087 0701 	eor.w	r7, r7, #1
 800fba2:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800fba4:	4b57      	ldr	r3, [pc, #348]	@ (800fd04 <RadioSetRxConfig+0x1f4>)
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 800fbaa:	f1bb 0f00 	cmp.w	fp, #0
 800fbae:	d026      	beq.n	800fbfe <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800fbb0:	22f2      	movs	r2, #242	@ 0xf2
 800fbb2:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800fbb4:	4c52      	ldr	r4, [pc, #328]	@ (800fd00 <RadioSetRxConfig+0x1f0>)
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800fbba:	f7ff fb83 	bl	800f2c4 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800fbbe:	2000      	movs	r0, #0
 800fbc0:	f7ff fe8e 	bl	800f8e0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fbc4:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800fbc8:	f000 fd22 	bl	8010610 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fbcc:	f104 000e 	add.w	r0, r4, #14
 800fbd0:	f000 fda6 	bl	8010720 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800fbd4:	4a4c      	ldr	r2, [pc, #304]	@ (800fd08 <RadioSetRxConfig+0x1f8>)
 800fbd6:	ab02      	add	r3, sp, #8
 800fbd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbdc:	e883 0003 	stmia.w	r3, {r0, r1}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f000 f987 	bl	800fef4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800fbe6:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800fbea:	f000 f95a 	bl	800fea2 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800fbee:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800fbf2:	fb03 f30a 	mul.w	r3, r3, sl
 800fbf6:	fbb3 f3f6 	udiv	r3, r3, r6
 800fbfa:	60a3      	str	r3, [r4, #8]
            break;
 800fbfc:	e7ab      	b.n	800fb56 <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800fbfe:	4b40      	ldr	r3, [pc, #256]	@ (800fd00 <RadioSetRxConfig+0x1f0>)
 800fc00:	2201      	movs	r2, #1
 800fc02:	75da      	strb	r2, [r3, #23]
 800fc04:	e7d6      	b.n	800fbb4 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800fc06:	2000      	movs	r0, #0
 800fc08:	f000 faf6 	bl	80101f8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800fc0c:	4a3c      	ldr	r2, [pc, #240]	@ (800fd00 <RadioSetRxConfig+0x1f0>)
 800fc0e:	2301      	movs	r3, #1
 800fc10:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800fc14:	b2f3      	uxtb	r3, r6
 800fc16:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800fc1a:	493c      	ldr	r1, [pc, #240]	@ (800fd0c <RadioSetRxConfig+0x1fc>)
 800fc1c:	5d49      	ldrb	r1, [r1, r5]
 800fc1e:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800fc22:	9901      	ldr	r1, [sp, #4]
 800fc24:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800fc28:	b91d      	cbnz	r5, 800fc32 <RadioSetRxConfig+0x122>
 800fc2a:	f1a6 020b 	sub.w	r2, r6, #11
 800fc2e:	2a01      	cmp	r2, #1
 800fc30:	d94b      	bls.n	800fcca <RadioSetRxConfig+0x1ba>
 800fc32:	2d01      	cmp	r5, #1
 800fc34:	d047      	beq.n	800fcc6 <RadioSetRxConfig+0x1b6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800fc36:	4a32      	ldr	r2, [pc, #200]	@ (800fd00 <RadioSetRxConfig+0x1f0>)
 800fc38:	2100      	movs	r1, #0
 800fc3a:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800fc3e:	4a30      	ldr	r2, [pc, #192]	@ (800fd00 <RadioSetRxConfig+0x1f0>)
 800fc40:	2101      	movs	r1, #1
 800fc42:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800fc44:	3b05      	subs	r3, #5
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	428b      	cmp	r3, r1
 800fc4a:	d943      	bls.n	800fcd4 <RadioSetRxConfig+0x1c4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800fc4c:	4b2c      	ldr	r3, [pc, #176]	@ (800fd00 <RadioSetRxConfig+0x1f0>)
 800fc4e:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800fc52:	4c2b      	ldr	r4, [pc, #172]	@ (800fd00 <RadioSetRxConfig+0x1f0>)
 800fc54:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800fc56:	4b2b      	ldr	r3, [pc, #172]	@ (800fd04 <RadioSetRxConfig+0x1f4>)
 800fc58:	781b      	ldrb	r3, [r3, #0]
 800fc5a:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800fc5c:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800fc60:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800fc64:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 800fc68:	f7ff fb2c 	bl	800f2c4 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800fc6c:	2001      	movs	r0, #1
 800fc6e:	f7ff fe37 	bl	800f8e0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800fc72:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800fc76:	f000 fccb 	bl	8010610 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800fc7a:	f104 000e 	add.w	r0, r4, #14
 800fc7e:	f000 fd4f 	bl	8010720 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800fc82:	fa5f f08a 	uxtb.w	r0, sl
 800fc86:	f000 fac4 	bl	8010212 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800fc8a:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800fc8e:	f000 f8e5 	bl	800fe5c <SUBGRF_ReadRegister>
 800fc92:	f000 0101 	and.w	r1, r0, #1
 800fc96:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800fc9a:	f000 f8cf 	bl	800fe3c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800fc9e:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d021      	beq.n	800fcea <RadioSetRxConfig+0x1da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800fca6:	f240 7036 	movw	r0, #1846	@ 0x736
 800fcaa:	f000 f8d7 	bl	800fe5c <SUBGRF_ReadRegister>
 800fcae:	f040 0104 	orr.w	r1, r0, #4
 800fcb2:	b2c9      	uxtb	r1, r1
 800fcb4:	f240 7036 	movw	r0, #1846	@ 0x736
 800fcb8:	f000 f8c0 	bl	800fe3c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800fcbc:	4b10      	ldr	r3, [pc, #64]	@ (800fd00 <RadioSetRxConfig+0x1f0>)
 800fcbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fcc2:	609a      	str	r2, [r3, #8]
}
 800fcc4:	e747      	b.n	800fb56 <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800fcc6:	2e0c      	cmp	r6, #12
 800fcc8:	d1b5      	bne.n	800fc36 <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800fcca:	4a0d      	ldr	r2, [pc, #52]	@ (800fd00 <RadioSetRxConfig+0x1f0>)
 800fccc:	2101      	movs	r1, #1
 800fcce:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 800fcd2:	e7b4      	b.n	800fc3e <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 800fcd4:	f1b9 0f0b 	cmp.w	r9, #11
 800fcd8:	d803      	bhi.n	800fce2 <RadioSetRxConfig+0x1d2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800fcda:	4613      	mov	r3, r2
 800fcdc:	220c      	movs	r2, #12
 800fcde:	839a      	strh	r2, [r3, #28]
 800fce0:	e7b7      	b.n	800fc52 <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800fce2:	4b07      	ldr	r3, [pc, #28]	@ (800fd00 <RadioSetRxConfig+0x1f0>)
 800fce4:	f8a3 901c 	strh.w	r9, [r3, #28]
 800fce8:	e7b3      	b.n	800fc52 <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800fcea:	f240 7036 	movw	r0, #1846	@ 0x736
 800fcee:	f000 f8b5 	bl	800fe5c <SUBGRF_ReadRegister>
 800fcf2:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800fcf6:	f240 7036 	movw	r0, #1846	@ 0x736
 800fcfa:	f000 f89f 	bl	800fe3c <SUBGRF_WriteRegister>
 800fcfe:	e7dd      	b.n	800fcbc <RadioSetRxConfig+0x1ac>
 800fd00:	20001090 	.word	0x20001090
 800fd04:	20000114 	.word	0x20000114
 800fd08:	08011a3c 	.word	0x08011a3c
 800fd0c:	080126d0 	.word	0x080126d0

0800fd10 <RadioIsChannelFree>:
{
 800fd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd12:	b08b      	sub	sp, #44	@ 0x2c
 800fd14:	4604      	mov	r4, r0
 800fd16:	460f      	mov	r7, r1
 800fd18:	4616      	mov	r6, r2
 800fd1a:	461d      	mov	r5, r3
    RadioStandby( );
 800fd1c:	f7ff fad2 	bl	800f2c4 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 800fd20:	2000      	movs	r0, #0
 800fd22:	f7ff fddd 	bl	800f8e0 <RadioSetModem>
    RadioSetChannel( freq );
 800fd26:	4620      	mov	r0, r4
 800fd28:	f7ff fce4 	bl	800f6f4 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd30:	2400      	movs	r4, #0
 800fd32:	9408      	str	r4, [sp, #32]
 800fd34:	9407      	str	r4, [sp, #28]
 800fd36:	9406      	str	r4, [sp, #24]
 800fd38:	9405      	str	r4, [sp, #20]
 800fd3a:	9404      	str	r4, [sp, #16]
 800fd3c:	9403      	str	r4, [sp, #12]
 800fd3e:	9402      	str	r4, [sp, #8]
 800fd40:	2303      	movs	r3, #3
 800fd42:	9301      	str	r3, [sp, #4]
 800fd44:	9700      	str	r7, [sp, #0]
 800fd46:	4623      	mov	r3, r4
 800fd48:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800fd4c:	4639      	mov	r1, r7
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f7ff fede 	bl	800fb10 <RadioSetRxConfig>
    RadioRx( 0 );
 800fd54:	4620      	mov	r0, r4
 800fd56:	f7ff fce5 	bl	800f724 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800fd5a:	f7ff fc7b 	bl	800f654 <RadioGetWakeupTime>
 800fd5e:	f7f1 ff55 	bl	8001c0c <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800fd62:	f001 fadb 	bl	801131c <UTIL_TIMER_GetCurrentTime>
 800fd66:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800fd68:	4620      	mov	r0, r4
 800fd6a:	f001 fae1 	bl	8011330 <UTIL_TIMER_GetElapsedTime>
 800fd6e:	42a8      	cmp	r0, r5
 800fd70:	d206      	bcs.n	800fd80 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 800fd72:	2000      	movs	r0, #0
 800fd74:	f7ff fc98 	bl	800f6a8 <RadioRssi>
        if( rssi > rssiThresh )
 800fd78:	42b0      	cmp	r0, r6
 800fd7a:	ddf5      	ble.n	800fd68 <RadioIsChannelFree+0x58>
            status = false;
 800fd7c:	2400      	movs	r4, #0
 800fd7e:	e000      	b.n	800fd82 <RadioIsChannelFree+0x72>
    bool status = true;
 800fd80:	2401      	movs	r4, #1
    RadioStandby( );
 800fd82:	f7ff fa9f 	bl	800f2c4 <RadioStandby>
}
 800fd86:	4620      	mov	r0, r4
 800fd88:	b00b      	add	sp, #44	@ 0x2c
 800fd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd8c <RadioInit>:
{
 800fd8c:	b570      	push	{r4, r5, r6, lr}
 800fd8e:	b082      	sub	sp, #8
    RadioEvents = events;
 800fd90:	4b1d      	ldr	r3, [pc, #116]	@ (800fe08 <RadioInit+0x7c>)
 800fd92:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 800fd94:	4d1d      	ldr	r5, [pc, #116]	@ (800fe0c <RadioInit+0x80>)
 800fd96:	2400      	movs	r4, #0
 800fd98:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 800fd9a:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 800fd9c:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800fd9e:	65ac      	str	r4, [r5, #88]	@ 0x58
    SUBGRF_Init( RadioOnDioIrq );
 800fda0:	481b      	ldr	r0, [pc, #108]	@ (800fe10 <RadioInit+0x84>)
 800fda2:	f000 fb27 	bl	80103f4 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 800fda6:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 800fda8:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 800fdaa:	f000 fa53 	bl	8010254 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800fdae:	4621      	mov	r1, r4
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	f000 fd27 	bl	8010804 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800fdb6:	2204      	movs	r2, #4
 800fdb8:	4621      	mov	r1, r4
 800fdba:	2001      	movs	r0, #1
 800fdbc:	f000 fb9a 	bl	80104f4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800fdc0:	4623      	mov	r3, r4
 800fdc2:	4622      	mov	r2, r4
 800fdc4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fdc8:	4608      	mov	r0, r1
 800fdca:	f000 fada 	bl	8010382 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800fdce:	f7ff fce1 	bl	800f794 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800fdd2:	4e10      	ldr	r6, [pc, #64]	@ (800fe14 <RadioInit+0x88>)
 800fdd4:	9400      	str	r4, [sp, #0]
 800fdd6:	4b10      	ldr	r3, [pc, #64]	@ (800fe18 <RadioInit+0x8c>)
 800fdd8:	4622      	mov	r2, r4
 800fdda:	f04f 31ff 	mov.w	r1, #4294967295
 800fdde:	4630      	mov	r0, r6
 800fde0:	f001 fa7e 	bl	80112e0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800fde4:	4d0d      	ldr	r5, [pc, #52]	@ (800fe1c <RadioInit+0x90>)
 800fde6:	9400      	str	r4, [sp, #0]
 800fde8:	4b0d      	ldr	r3, [pc, #52]	@ (800fe20 <RadioInit+0x94>)
 800fdea:	4622      	mov	r2, r4
 800fdec:	f04f 31ff 	mov.w	r1, #4294967295
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	f001 fa75 	bl	80112e0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800fdf6:	4630      	mov	r0, r6
 800fdf8:	f001 fad0 	bl	801139c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800fdfc:	4628      	mov	r0, r5
 800fdfe:	f001 facd 	bl	801139c <UTIL_TIMER_Stop>
}
 800fe02:	b002      	add	sp, #8
 800fe04:	bd70      	pop	{r4, r5, r6, pc}
 800fe06:	bf00      	nop
 800fe08:	200010ec 	.word	0x200010ec
 800fe0c:	20001090 	.word	0x20001090
 800fe10:	0800f641 	.word	0x0800f641
 800fe14:	20001078 	.word	0x20001078
 800fe18:	0800f189 	.word	0x0800f189
 800fe1c:	20001060 	.word	0x20001060
 800fe20:	0800f1b1 	.word	0x0800f1b1

0800fe24 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 800fe24:	4b01      	ldr	r3, [pc, #4]	@ (800fe2c <SUBGRF_GetOperatingMode+0x8>)
 800fe26:	7818      	ldrb	r0, [r3, #0]
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop
 800fe2c:	200011fe 	.word	0x200011fe

0800fe30 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 800fe30:	4b01      	ldr	r3, [pc, #4]	@ (800fe38 <SUBGRF_GetPacketType+0x8>)
 800fe32:	7818      	ldrb	r0, [r3, #0]
 800fe34:	4770      	bx	lr
 800fe36:	bf00      	nop
 800fe38:	200011fd 	.word	0x200011fd

0800fe3c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800fe3c:	b500      	push	{lr}
 800fe3e:	b083      	sub	sp, #12
 800fe40:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800fe44:	2301      	movs	r3, #1
 800fe46:	f10d 0207 	add.w	r2, sp, #7
 800fe4a:	4601      	mov	r1, r0
 800fe4c:	4802      	ldr	r0, [pc, #8]	@ (800fe58 <SUBGRF_WriteRegister+0x1c>)
 800fe4e:	f7f5 ff5b 	bl	8005d08 <HAL_SUBGHZ_WriteRegisters>
}
 800fe52:	b003      	add	sp, #12
 800fe54:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe58:	2000023c 	.word	0x2000023c

0800fe5c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800fe5c:	b500      	push	{lr}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800fe62:	2301      	movs	r3, #1
 800fe64:	f10d 0207 	add.w	r2, sp, #7
 800fe68:	4803      	ldr	r0, [pc, #12]	@ (800fe78 <SUBGRF_ReadRegister+0x1c>)
 800fe6a:	f7f5 ff9d 	bl	8005da8 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 800fe6e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fe72:	b003      	add	sp, #12
 800fe74:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe78:	2000023c 	.word	0x2000023c

0800fe7c <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800fe7c:	b510      	push	{r4, lr}
 800fe7e:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 800fe80:	f7f2 ffce 	bl	8002e20 <RBI_IsDCDC>
 800fe84:	2801      	cmp	r0, #1
 800fe86:	d000      	beq.n	800fe8a <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 800fe88:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800fe8a:	f640 1023 	movw	r0, #2339	@ 0x923
 800fe8e:	f7ff ffe5 	bl	800fe5c <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 800fe92:	f000 01f9 	and.w	r1, r0, #249	@ 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800fe96:	4321      	orrs	r1, r4
 800fe98:	f640 1023 	movw	r0, #2339	@ 0x923
 800fe9c:	f7ff ffce 	bl	800fe3c <SUBGRF_WriteRegister>
}
 800fea0:	e7f2      	b.n	800fe88 <Radio_SMPS_Set+0xc>

0800fea2 <SUBGRF_SetWhiteningSeed>:
{
 800fea2:	b510      	push	{r4, lr}
 800fea4:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 800fea6:	f7ff ffc3 	bl	800fe30 <SUBGRF_GetPacketType>
 800feaa:	b100      	cbz	r0, 800feae <SUBGRF_SetWhiteningSeed+0xc>
}
 800feac:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800feae:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800feb2:	f7ff ffd3 	bl	800fe5c <SUBGRF_ReadRegister>
 800feb6:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800feba:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800febe:	4301      	orrs	r1, r0
 800fec0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800fec4:	f7ff ffba 	bl	800fe3c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800fec8:	b2e1      	uxtb	r1, r4
 800feca:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 800fece:	f7ff ffb5 	bl	800fe3c <SUBGRF_WriteRegister>
}
 800fed2:	e7eb      	b.n	800feac <SUBGRF_SetWhiteningSeed+0xa>

0800fed4 <SUBGRF_WriteRegisters>:
{
 800fed4:	b510      	push	{r4, lr}
 800fed6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fed8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fedc:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800fede:	460a      	mov	r2, r1
 800fee0:	4601      	mov	r1, r0
 800fee2:	4803      	ldr	r0, [pc, #12]	@ (800fef0 <SUBGRF_WriteRegisters+0x1c>)
 800fee4:	f7f5 ff10 	bl	8005d08 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fee8:	f384 8810 	msr	PRIMASK, r4
}
 800feec:	bd10      	pop	{r4, pc}
 800feee:	bf00      	nop
 800fef0:	2000023c 	.word	0x2000023c

0800fef4 <SUBGRF_SetSyncWord>:
{
 800fef4:	b508      	push	{r3, lr}
 800fef6:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800fef8:	2208      	movs	r2, #8
 800fefa:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800fefe:	f7ff ffe9 	bl	800fed4 <SUBGRF_WriteRegisters>
}
 800ff02:	2000      	movs	r0, #0
 800ff04:	bd08      	pop	{r3, pc}

0800ff06 <SUBGRF_SetCrcSeed>:
{
 800ff06:	b500      	push	{lr}
 800ff08:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800ff0a:	0a03      	lsrs	r3, r0, #8
 800ff0c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800ff10:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800ff14:	f7ff ff8c 	bl	800fe30 <SUBGRF_GetPacketType>
 800ff18:	b110      	cbz	r0, 800ff20 <SUBGRF_SetCrcSeed+0x1a>
}
 800ff1a:	b003      	add	sp, #12
 800ff1c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800ff20:	2202      	movs	r2, #2
 800ff22:	a901      	add	r1, sp, #4
 800ff24:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800ff28:	f7ff ffd4 	bl	800fed4 <SUBGRF_WriteRegisters>
}
 800ff2c:	e7f5      	b.n	800ff1a <SUBGRF_SetCrcSeed+0x14>

0800ff2e <SUBGRF_SetCrcPolynomial>:
{
 800ff2e:	b500      	push	{lr}
 800ff30:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800ff32:	0a03      	lsrs	r3, r0, #8
 800ff34:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800ff38:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800ff3c:	f7ff ff78 	bl	800fe30 <SUBGRF_GetPacketType>
 800ff40:	b110      	cbz	r0, 800ff48 <SUBGRF_SetCrcPolynomial+0x1a>
}
 800ff42:	b003      	add	sp, #12
 800ff44:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800ff48:	2202      	movs	r2, #2
 800ff4a:	a901      	add	r1, sp, #4
 800ff4c:	f240 60be 	movw	r0, #1726	@ 0x6be
 800ff50:	f7ff ffc0 	bl	800fed4 <SUBGRF_WriteRegisters>
}
 800ff54:	e7f5      	b.n	800ff42 <SUBGRF_SetCrcPolynomial+0x14>
	...

0800ff58 <SUBGRF_ReadRegisters>:
{
 800ff58:	b510      	push	{r4, lr}
 800ff5a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff5c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ff60:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800ff62:	460a      	mov	r2, r1
 800ff64:	4601      	mov	r1, r0
 800ff66:	4803      	ldr	r0, [pc, #12]	@ (800ff74 <SUBGRF_ReadRegisters+0x1c>)
 800ff68:	f7f5 ff1e 	bl	8005da8 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff6c:	f384 8810 	msr	PRIMASK, r4
}
 800ff70:	bd10      	pop	{r4, pc}
 800ff72:	bf00      	nop
 800ff74:	2000023c 	.word	0x2000023c

0800ff78 <SUBGRF_WriteBuffer>:
{
 800ff78:	b510      	push	{r4, lr}
 800ff7a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff7c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ff80:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800ff82:	460a      	mov	r2, r1
 800ff84:	4601      	mov	r1, r0
 800ff86:	4803      	ldr	r0, [pc, #12]	@ (800ff94 <SUBGRF_WriteBuffer+0x1c>)
 800ff88:	f7f6 f86c 	bl	8006064 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff8c:	f384 8810 	msr	PRIMASK, r4
}
 800ff90:	bd10      	pop	{r4, pc}
 800ff92:	bf00      	nop
 800ff94:	2000023c 	.word	0x2000023c

0800ff98 <SUBGRF_SetPayload>:
{
 800ff98:	b508      	push	{r3, lr}
 800ff9a:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800ff9c:	4601      	mov	r1, r0
 800ff9e:	2000      	movs	r0, #0
 800ffa0:	f7ff ffea 	bl	800ff78 <SUBGRF_WriteBuffer>
}
 800ffa4:	bd08      	pop	{r3, pc}
	...

0800ffa8 <SUBGRF_ReadBuffer>:
{
 800ffa8:	b510      	push	{r4, lr}
 800ffaa:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffac:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ffb0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800ffb2:	460a      	mov	r2, r1
 800ffb4:	4601      	mov	r1, r0
 800ffb6:	4803      	ldr	r0, [pc, #12]	@ (800ffc4 <SUBGRF_ReadBuffer+0x1c>)
 800ffb8:	f7f6 f89e 	bl	80060f8 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ffbc:	f384 8810 	msr	PRIMASK, r4
}
 800ffc0:	bd10      	pop	{r4, pc}
 800ffc2:	bf00      	nop
 800ffc4:	2000023c 	.word	0x2000023c

0800ffc8 <SUBGRF_WriteCommand>:
{
 800ffc8:	b510      	push	{r4, lr}
 800ffca:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffcc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ffd0:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800ffd2:	460a      	mov	r2, r1
 800ffd4:	4601      	mov	r1, r0
 800ffd6:	4803      	ldr	r0, [pc, #12]	@ (800ffe4 <SUBGRF_WriteCommand+0x1c>)
 800ffd8:	f7f5 ff3a 	bl	8005e50 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ffdc:	f384 8810 	msr	PRIMASK, r4
}
 800ffe0:	bd10      	pop	{r4, pc}
 800ffe2:	bf00      	nop
 800ffe4:	2000023c 	.word	0x2000023c

0800ffe8 <SUBGRF_SetSleep>:
{
 800ffe8:	b510      	push	{r4, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800ffee:	2000      	movs	r0, #0
 800fff0:	f7f2 ff0a 	bl	8002e08 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800fff4:	2002      	movs	r0, #2
 800fff6:	f7ff ff41 	bl	800fe7c <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fffa:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800fffe:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010002:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8010004:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8010008:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801000a:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801000e:	2201      	movs	r2, #1
 8010010:	f10d 0107 	add.w	r1, sp, #7
 8010014:	2084      	movs	r0, #132	@ 0x84
 8010016:	f7ff ffd7 	bl	800ffc8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801001a:	4b02      	ldr	r3, [pc, #8]	@ (8010024 <SUBGRF_SetSleep+0x3c>)
 801001c:	2200      	movs	r2, #0
 801001e:	701a      	strb	r2, [r3, #0]
}
 8010020:	b002      	add	sp, #8
 8010022:	bd10      	pop	{r4, pc}
 8010024:	200011fe 	.word	0x200011fe

08010028 <SUBGRF_SetStandby>:
{
 8010028:	b500      	push	{lr}
 801002a:	b083      	sub	sp, #12
 801002c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8010030:	2201      	movs	r2, #1
 8010032:	f10d 0107 	add.w	r1, sp, #7
 8010036:	2080      	movs	r0, #128	@ 0x80
 8010038:	f7ff ffc6 	bl	800ffc8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801003c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010040:	b92b      	cbnz	r3, 801004e <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8010042:	4b05      	ldr	r3, [pc, #20]	@ (8010058 <SUBGRF_SetStandby+0x30>)
 8010044:	2201      	movs	r2, #1
 8010046:	701a      	strb	r2, [r3, #0]
}
 8010048:	b003      	add	sp, #12
 801004a:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 801004e:	4b02      	ldr	r3, [pc, #8]	@ (8010058 <SUBGRF_SetStandby+0x30>)
 8010050:	2202      	movs	r2, #2
 8010052:	701a      	strb	r2, [r3, #0]
}
 8010054:	e7f8      	b.n	8010048 <SUBGRF_SetStandby+0x20>
 8010056:	bf00      	nop
 8010058:	200011fe 	.word	0x200011fe

0801005c <SUBGRF_SetTx>:
{
 801005c:	b500      	push	{lr}
 801005e:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8010060:	4b0a      	ldr	r3, [pc, #40]	@ (801008c <SUBGRF_SetTx+0x30>)
 8010062:	2204      	movs	r2, #4
 8010064:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010066:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801006a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801006e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010072:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010076:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801007a:	2203      	movs	r2, #3
 801007c:	a901      	add	r1, sp, #4
 801007e:	2083      	movs	r0, #131	@ 0x83
 8010080:	f7ff ffa2 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 8010084:	b003      	add	sp, #12
 8010086:	f85d fb04 	ldr.w	pc, [sp], #4
 801008a:	bf00      	nop
 801008c:	200011fe 	.word	0x200011fe

08010090 <SUBGRF_SendPayload>:
{
 8010090:	b510      	push	{r4, lr}
 8010092:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8010094:	f7ff ff80 	bl	800ff98 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8010098:	4620      	mov	r0, r4
 801009a:	f7ff ffdf 	bl	801005c <SUBGRF_SetTx>
}
 801009e:	bd10      	pop	{r4, pc}

080100a0 <SUBGRF_SetRx>:
{
 80100a0:	b500      	push	{lr}
 80100a2:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 80100a4:	4b0a      	ldr	r3, [pc, #40]	@ (80100d0 <SUBGRF_SetRx+0x30>)
 80100a6:	2205      	movs	r2, #5
 80100a8:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80100aa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80100ae:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80100b2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80100b6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80100ba:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80100be:	2203      	movs	r2, #3
 80100c0:	a901      	add	r1, sp, #4
 80100c2:	2082      	movs	r0, #130	@ 0x82
 80100c4:	f7ff ff80 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 80100c8:	b003      	add	sp, #12
 80100ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80100ce:	bf00      	nop
 80100d0:	200011fe 	.word	0x200011fe

080100d4 <SUBGRF_GetRandom>:
{
 80100d4:	b570      	push	{r4, r5, r6, lr}
 80100d6:	b082      	sub	sp, #8
    uint32_t number = 0;
 80100d8:	2600      	movs	r6, #0
 80100da:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80100dc:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80100e0:	f7ff febc 	bl	800fe5c <SUBGRF_ReadRegister>
 80100e4:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80100e6:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
 80100ea:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80100ee:	f7ff fea5 	bl	800fe3c <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80100f2:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80100f6:	f7ff feb1 	bl	800fe5c <SUBGRF_ReadRegister>
 80100fa:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80100fc:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 8010100:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8010104:	f7ff fe9a 	bl	800fe3c <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8010108:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801010c:	f7ff ffc8 	bl	80100a0 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8010110:	2204      	movs	r2, #4
 8010112:	eb0d 0102 	add.w	r1, sp, r2
 8010116:	f640 0019 	movw	r0, #2073	@ 0x819
 801011a:	f7ff ff1d 	bl	800ff58 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 801011e:	4630      	mov	r0, r6
 8010120:	f7ff ff82 	bl	8010028 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8010124:	4629      	mov	r1, r5
 8010126:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801012a:	f7ff fe87 	bl	800fe3c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801012e:	4621      	mov	r1, r4
 8010130:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8010134:	f7ff fe82 	bl	800fe3c <SUBGRF_WriteRegister>
}
 8010138:	9801      	ldr	r0, [sp, #4]
 801013a:	b002      	add	sp, #8
 801013c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010140 <SUBGRF_SetRxBoosted>:
{
 8010140:	b510      	push	{r4, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8010146:	4b0c      	ldr	r3, [pc, #48]	@ (8010178 <SUBGRF_SetRxBoosted+0x38>)
 8010148:	2205      	movs	r2, #5
 801014a:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801014c:	2197      	movs	r1, #151	@ 0x97
 801014e:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8010152:	f7ff fe73 	bl	800fe3c <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010156:	f3c4 4307 	ubfx	r3, r4, #16, #8
 801015a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801015e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8010162:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010166:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801016a:	2203      	movs	r2, #3
 801016c:	a901      	add	r1, sp, #4
 801016e:	2082      	movs	r0, #130	@ 0x82
 8010170:	f7ff ff2a 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 8010174:	b002      	add	sp, #8
 8010176:	bd10      	pop	{r4, pc}
 8010178:	200011fe 	.word	0x200011fe

0801017c <SUBGRF_SetRxDutyCycle>:
{
 801017c:	b500      	push	{lr}
 801017e:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8010180:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010184:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8010188:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801018c:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8010190:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8010194:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010198:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801019c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80101a0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80101a4:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80101a8:	2206      	movs	r2, #6
 80101aa:	4669      	mov	r1, sp
 80101ac:	2094      	movs	r0, #148	@ 0x94
 80101ae:	f7ff ff0b 	bl	800ffc8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80101b2:	4b03      	ldr	r3, [pc, #12]	@ (80101c0 <SUBGRF_SetRxDutyCycle+0x44>)
 80101b4:	2206      	movs	r2, #6
 80101b6:	701a      	strb	r2, [r3, #0]
}
 80101b8:	b003      	add	sp, #12
 80101ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80101be:	bf00      	nop
 80101c0:	200011fe 	.word	0x200011fe

080101c4 <SUBGRF_SetCad>:
{
 80101c4:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80101c6:	2200      	movs	r2, #0
 80101c8:	4611      	mov	r1, r2
 80101ca:	20c5      	movs	r0, #197	@ 0xc5
 80101cc:	f7ff fefc 	bl	800ffc8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80101d0:	4b01      	ldr	r3, [pc, #4]	@ (80101d8 <SUBGRF_SetCad+0x14>)
 80101d2:	2207      	movs	r2, #7
 80101d4:	701a      	strb	r2, [r3, #0]
}
 80101d6:	bd08      	pop	{r3, pc}
 80101d8:	200011fe 	.word	0x200011fe

080101dc <SUBGRF_SetTxContinuousWave>:
{
 80101dc:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80101de:	2200      	movs	r2, #0
 80101e0:	4611      	mov	r1, r2
 80101e2:	20d1      	movs	r0, #209	@ 0xd1
 80101e4:	f7ff fef0 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 80101e8:	bd08      	pop	{r3, pc}

080101ea <SUBGRF_SetTxInfinitePreamble>:
{
 80101ea:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80101ec:	2200      	movs	r2, #0
 80101ee:	4611      	mov	r1, r2
 80101f0:	20d2      	movs	r0, #210	@ 0xd2
 80101f2:	f7ff fee9 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 80101f6:	bd08      	pop	{r3, pc}

080101f8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 80101f8:	b500      	push	{lr}
 80101fa:	b083      	sub	sp, #12
 80101fc:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8010200:	2201      	movs	r2, #1
 8010202:	f10d 0107 	add.w	r1, sp, #7
 8010206:	209f      	movs	r0, #159	@ 0x9f
 8010208:	f7ff fede 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 801020c:	b003      	add	sp, #12
 801020e:	f85d fb04 	ldr.w	pc, [sp], #4

08010212 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8010212:	b500      	push	{lr}
 8010214:	b083      	sub	sp, #12
 8010216:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801021a:	2201      	movs	r2, #1
 801021c:	f10d 0107 	add.w	r1, sp, #7
 8010220:	20a0      	movs	r0, #160	@ 0xa0
 8010222:	f7ff fed1 	bl	800ffc8 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8010226:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801022a:	2b3f      	cmp	r3, #63	@ 0x3f
 801022c:	d90f      	bls.n	801024e <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 801022e:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8010230:	2200      	movs	r2, #0
        while( mant > 31 )
 8010232:	e002      	b.n	801023a <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8010234:	089b      	lsrs	r3, r3, #2
            exp++;
 8010236:	3201      	adds	r2, #1
 8010238:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 801023a:	2b1f      	cmp	r3, #31
 801023c:	d8fa      	bhi.n	8010234 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 801023e:	00d9      	lsls	r1, r3, #3
 8010240:	b2c9      	uxtb	r1, r1
 8010242:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8010244:	b2c9      	uxtb	r1, r1
 8010246:	f240 7006 	movw	r0, #1798	@ 0x706
 801024a:	f7ff fdf7 	bl	800fe3c <SUBGRF_WriteRegister>
}
 801024e:	b003      	add	sp, #12
 8010250:	f85d fb04 	ldr.w	pc, [sp], #4

08010254 <SUBGRF_SetRegulatorMode>:
{
 8010254:	b500      	push	{lr}
 8010256:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8010258:	f7f2 fde2 	bl	8002e20 <RBI_IsDCDC>
 801025c:	2801      	cmp	r0, #1
 801025e:	d00b      	beq.n	8010278 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8010260:	2300      	movs	r3, #0
 8010262:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8010266:	2201      	movs	r2, #1
 8010268:	f10d 0107 	add.w	r1, sp, #7
 801026c:	2096      	movs	r0, #150	@ 0x96
 801026e:	f7ff feab 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 8010272:	b003      	add	sp, #12
 8010274:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8010278:	2301      	movs	r3, #1
 801027a:	f88d 3007 	strb.w	r3, [sp, #7]
 801027e:	e7f2      	b.n	8010266 <SUBGRF_SetRegulatorMode+0x12>

08010280 <SUBGRF_Calibrate>:
{
 8010280:	b500      	push	{lr}
 8010282:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010284:	f000 0340 	and.w	r3, r0, #64	@ 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8010288:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801028c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801028e:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8010292:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8010294:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8010298:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801029a:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801029e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80102a0:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80102a4:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80102a6:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80102aa:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80102ac:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80102b0:	2201      	movs	r2, #1
 80102b2:	f10d 0107 	add.w	r1, sp, #7
 80102b6:	2089      	movs	r0, #137	@ 0x89
 80102b8:	f7ff fe86 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 80102bc:	b003      	add	sp, #12
 80102be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080102c4 <SUBGRF_CalibrateImage>:
{
 80102c4:	b500      	push	{lr}
 80102c6:	b083      	sub	sp, #12
    if( freq > 900000000 )
 80102c8:	4b1f      	ldr	r3, [pc, #124]	@ (8010348 <SUBGRF_CalibrateImage+0x84>)
 80102ca:	4298      	cmp	r0, r3
 80102cc:	d90d      	bls.n	80102ea <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 80102ce:	23e1      	movs	r3, #225	@ 0xe1
 80102d0:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 80102d4:	23e9      	movs	r3, #233	@ 0xe9
 80102d6:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80102da:	2202      	movs	r2, #2
 80102dc:	a901      	add	r1, sp, #4
 80102de:	2098      	movs	r0, #152	@ 0x98
 80102e0:	f7ff fe72 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 80102e4:	b003      	add	sp, #12
 80102e6:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 80102ea:	4b18      	ldr	r3, [pc, #96]	@ (801034c <SUBGRF_CalibrateImage+0x88>)
 80102ec:	4298      	cmp	r0, r3
 80102ee:	d906      	bls.n	80102fe <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 80102f0:	23d7      	movs	r3, #215	@ 0xd7
 80102f2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 80102f6:	23db      	movs	r3, #219	@ 0xdb
 80102f8:	f88d 3005 	strb.w	r3, [sp, #5]
 80102fc:	e7ed      	b.n	80102da <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 80102fe:	4b14      	ldr	r3, [pc, #80]	@ (8010350 <SUBGRF_CalibrateImage+0x8c>)
 8010300:	4298      	cmp	r0, r3
 8010302:	d906      	bls.n	8010312 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8010304:	23c1      	movs	r3, #193	@ 0xc1
 8010306:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 801030a:	23c5      	movs	r3, #197	@ 0xc5
 801030c:	f88d 3005 	strb.w	r3, [sp, #5]
 8010310:	e7e3      	b.n	80102da <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8010312:	4b10      	ldr	r3, [pc, #64]	@ (8010354 <SUBGRF_CalibrateImage+0x90>)
 8010314:	4298      	cmp	r0, r3
 8010316:	d906      	bls.n	8010326 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8010318:	2375      	movs	r3, #117	@ 0x75
 801031a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 801031e:	2381      	movs	r3, #129	@ 0x81
 8010320:	f88d 3005 	strb.w	r3, [sp, #5]
 8010324:	e7d9      	b.n	80102da <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8010326:	4b0c      	ldr	r3, [pc, #48]	@ (8010358 <SUBGRF_CalibrateImage+0x94>)
 8010328:	4298      	cmp	r0, r3
 801032a:	d906      	bls.n	801033a <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 801032c:	236b      	movs	r3, #107	@ 0x6b
 801032e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8010332:	236f      	movs	r3, #111	@ 0x6f
 8010334:	f88d 3005 	strb.w	r3, [sp, #5]
 8010338:	e7cf      	b.n	80102da <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 801033a:	2329      	movs	r3, #41	@ 0x29
 801033c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 8010340:	232b      	movs	r3, #43	@ 0x2b
 8010342:	f88d 3005 	strb.w	r3, [sp, #5]
 8010346:	e7c8      	b.n	80102da <SUBGRF_CalibrateImage+0x16>
 8010348:	35a4e900 	.word	0x35a4e900
 801034c:	32a9f880 	.word	0x32a9f880
 8010350:	2de54480 	.word	0x2de54480
 8010354:	1b6b0b00 	.word	0x1b6b0b00
 8010358:	1954fc40 	.word	0x1954fc40

0801035c <SUBGRF_SetPaConfig>:
{
 801035c:	b500      	push	{lr}
 801035e:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8010360:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8010364:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8010368:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 801036c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8010370:	2204      	movs	r2, #4
 8010372:	eb0d 0102 	add.w	r1, sp, r2
 8010376:	2095      	movs	r0, #149	@ 0x95
 8010378:	f7ff fe26 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 801037c:	b003      	add	sp, #12
 801037e:	f85d fb04 	ldr.w	pc, [sp], #4

08010382 <SUBGRF_SetDioIrqParams>:
{
 8010382:	b500      	push	{lr}
 8010384:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8010386:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 801038a:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801038e:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8010392:	0a08      	lsrs	r0, r1, #8
 8010394:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8010398:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801039c:	0a11      	lsrs	r1, r2, #8
 801039e:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80103a2:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80103a6:	0a1a      	lsrs	r2, r3, #8
 80103a8:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80103ac:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80103b0:	2208      	movs	r2, #8
 80103b2:	4669      	mov	r1, sp
 80103b4:	4610      	mov	r0, r2
 80103b6:	f7ff fe07 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 80103ba:	b003      	add	sp, #12
 80103bc:	f85d fb04 	ldr.w	pc, [sp], #4

080103c0 <SUBGRF_SetTcxoMode>:
{
 80103c0:	b500      	push	{lr}
 80103c2:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 80103c4:	f000 0007 	and.w	r0, r0, #7
 80103c8:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80103cc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80103d0:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80103d4:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80103d8:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80103dc:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80103e0:	2204      	movs	r2, #4
 80103e2:	eb0d 0102 	add.w	r1, sp, r2
 80103e6:	2097      	movs	r0, #151	@ 0x97
 80103e8:	f7ff fdee 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 80103ec:	b003      	add	sp, #12
 80103ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080103f4 <SUBGRF_Init>:
{
 80103f4:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 80103f6:	b108      	cbz	r0, 80103fc <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80103f8:	4a18      	ldr	r2, [pc, #96]	@ (801045c <SUBGRF_Init+0x68>)
 80103fa:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 80103fc:	f7f1 fafa 	bl	80019f4 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8010400:	2002      	movs	r0, #2
 8010402:	f7ff fd3b 	bl	800fe7c <Radio_SMPS_Set>
    ImageCalibrated = false;
 8010406:	2000      	movs	r0, #0
 8010408:	4b15      	ldr	r3, [pc, #84]	@ (8010460 <SUBGRF_Init+0x6c>)
 801040a:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 801040c:	f7ff fe0c 	bl	8010028 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8010410:	f7f2 fd02 	bl	8002e18 <RBI_IsTCXO>
 8010414:	2801      	cmp	r0, #1
 8010416:	d014      	beq.n	8010442 <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8010418:	2120      	movs	r1, #32
 801041a:	f640 1011 	movw	r0, #2321	@ 0x911
 801041e:	f7ff fd0d 	bl	800fe3c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8010422:	2120      	movs	r1, #32
 8010424:	f640 1012 	movw	r0, #2322	@ 0x912
 8010428:	f7ff fd08 	bl	800fe3c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801042c:	210e      	movs	r1, #14
 801042e:	f640 101f 	movw	r0, #2335	@ 0x91f
 8010432:	f7ff fd03 	bl	800fe3c <SUBGRF_WriteRegister>
    RBI_Init();
 8010436:	f7f2 fce3 	bl	8002e00 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 801043a:	4b0a      	ldr	r3, [pc, #40]	@ (8010464 <SUBGRF_Init+0x70>)
 801043c:	2201      	movs	r2, #1
 801043e:	701a      	strb	r2, [r3, #0]
}
 8010440:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8010442:	2140      	movs	r1, #64	@ 0x40
 8010444:	f7ff ffbc 	bl	80103c0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8010448:	2100      	movs	r1, #0
 801044a:	f640 1011 	movw	r0, #2321	@ 0x911
 801044e:	f7ff fcf5 	bl	800fe3c <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8010452:	f04f 007f 	mov.w	r0, #127	@ 0x7f
 8010456:	f7ff ff13 	bl	8010280 <SUBGRF_Calibrate>
 801045a:	e7e7      	b.n	801042c <SUBGRF_Init+0x38>
 801045c:	200011f0 	.word	0x200011f0
 8010460:	200011f4 	.word	0x200011f4
 8010464:	200011fe 	.word	0x200011fe

08010468 <SUBGRF_SetRfFrequency>:
{
 8010468:	b510      	push	{r4, lr}
 801046a:	b082      	sub	sp, #8
 801046c:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 801046e:	4b12      	ldr	r3, [pc, #72]	@ (80104b8 <SUBGRF_SetRfFrequency+0x50>)
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	b1d3      	cbz	r3, 80104aa <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8010474:	4a11      	ldr	r2, [pc, #68]	@ (80104bc <SUBGRF_SetRfFrequency+0x54>)
 8010476:	2300      	movs	r3, #0
 8010478:	0660      	lsls	r0, r4, #25
 801047a:	09e1      	lsrs	r1, r4, #7
 801047c:	f7f0 fb94 	bl	8000ba8 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8010480:	0e03      	lsrs	r3, r0, #24
 8010482:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8010486:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801048a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801048e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010492:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8010496:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801049a:	2204      	movs	r2, #4
 801049c:	eb0d 0102 	add.w	r1, sp, r2
 80104a0:	2086      	movs	r0, #134	@ 0x86
 80104a2:	f7ff fd91 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 80104a6:	b002      	add	sp, #8
 80104a8:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 80104aa:	f7ff ff0b 	bl	80102c4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80104ae:	4b02      	ldr	r3, [pc, #8]	@ (80104b8 <SUBGRF_SetRfFrequency+0x50>)
 80104b0:	2201      	movs	r2, #1
 80104b2:	701a      	strb	r2, [r3, #0]
 80104b4:	e7de      	b.n	8010474 <SUBGRF_SetRfFrequency+0xc>
 80104b6:	bf00      	nop
 80104b8:	200011f4 	.word	0x200011f4
 80104bc:	01e84800 	.word	0x01e84800

080104c0 <SUBGRF_SetPacketType>:
{
 80104c0:	b500      	push	{lr}
 80104c2:	b083      	sub	sp, #12
 80104c4:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 80104c8:	b2c3      	uxtb	r3, r0
 80104ca:	4a09      	ldr	r2, [pc, #36]	@ (80104f0 <SUBGRF_SetPacketType+0x30>)
 80104cc:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 80104ce:	b143      	cbz	r3, 80104e2 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80104d0:	2201      	movs	r2, #1
 80104d2:	f10d 0107 	add.w	r1, sp, #7
 80104d6:	208a      	movs	r0, #138	@ 0x8a
 80104d8:	f7ff fd76 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 80104dc:	b003      	add	sp, #12
 80104de:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80104e2:	2100      	movs	r1, #0
 80104e4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80104e8:	f7ff fca8 	bl	800fe3c <SUBGRF_WriteRegister>
 80104ec:	e7f0      	b.n	80104d0 <SUBGRF_SetPacketType+0x10>
 80104ee:	bf00      	nop
 80104f0:	200011fd 	.word	0x200011fd

080104f4 <SUBGRF_SetTxParams>:
{
 80104f4:	b570      	push	{r4, r5, r6, lr}
 80104f6:	b082      	sub	sp, #8
 80104f8:	460c      	mov	r4, r1
 80104fa:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 80104fc:	2801      	cmp	r0, #1
 80104fe:	d035      	beq.n	801056c <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8010500:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8010504:	f7ff fcaa 	bl	800fe5c <SUBGRF_ReadRegister>
 8010508:	f040 011e 	orr.w	r1, r0, #30
 801050c:	b2c9      	uxtb	r1, r1
 801050e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8010512:	f7ff fc93 	bl	800fe3c <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8010516:	2001      	movs	r0, #1
 8010518:	f7f2 fc86 	bl	8002e28 <RBI_GetRFOMaxPowerConfig>
 801051c:	4605      	mov	r5, r0
        if (power > max_power)
 801051e:	4284      	cmp	r4, r0
 8010520:	dd00      	ble.n	8010524 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8010522:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8010524:	2d14      	cmp	r5, #20
 8010526:	d054      	beq.n	80105d2 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8010528:	2d11      	cmp	r5, #17
 801052a:	d05c      	beq.n	80105e6 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 801052c:	2d0e      	cmp	r5, #14
 801052e:	d064      	beq.n	80105fa <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8010530:	2301      	movs	r3, #1
 8010532:	2200      	movs	r2, #0
 8010534:	2107      	movs	r1, #7
 8010536:	2004      	movs	r0, #4
 8010538:	f7ff ff10 	bl	801035c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801053c:	1b64      	subs	r4, r4, r5
 801053e:	3416      	adds	r4, #22
 8010540:	b265      	sxtb	r5, r4
        if (power < -9)
 8010542:	f115 0f09 	cmn.w	r5, #9
 8010546:	da01      	bge.n	801054c <SUBGRF_SetTxParams+0x58>
            power = -9;
 8010548:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801054c:	2138      	movs	r1, #56	@ 0x38
 801054e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8010552:	f7ff fc73 	bl	800fe3c <SUBGRF_WriteRegister>
    buf[0] = power;
 8010556:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 801055a:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801055e:	2202      	movs	r2, #2
 8010560:	a901      	add	r1, sp, #4
 8010562:	208e      	movs	r0, #142	@ 0x8e
 8010564:	f7ff fd30 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 8010568:	b002      	add	sp, #8
 801056a:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801056c:	2000      	movs	r0, #0
 801056e:	f7f2 fc5b 	bl	8002e28 <RBI_GetRFOMaxPowerConfig>
 8010572:	4605      	mov	r5, r0
        if (power >  max_power)
 8010574:	4284      	cmp	r4, r0
 8010576:	dd00      	ble.n	801057a <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8010578:	b244      	sxtb	r4, r0
        if (max_power == 14)
 801057a:	2d0e      	cmp	r5, #14
 801057c:	d015      	beq.n	80105aa <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 801057e:	2d0a      	cmp	r5, #10
 8010580:	d01d      	beq.n	80105be <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8010582:	2301      	movs	r3, #1
 8010584:	461a      	mov	r2, r3
 8010586:	2100      	movs	r1, #0
 8010588:	2007      	movs	r0, #7
 801058a:	f7ff fee7 	bl	801035c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801058e:	1b65      	subs	r5, r4, r5
 8010590:	350e      	adds	r5, #14
 8010592:	b26d      	sxtb	r5, r5
        if (power < -17)
 8010594:	f115 0f11 	cmn.w	r5, #17
 8010598:	da01      	bge.n	801059e <SUBGRF_SetTxParams+0xaa>
            power = -17;
 801059a:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801059e:	2118      	movs	r1, #24
 80105a0:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80105a4:	f7ff fc4a 	bl	800fe3c <SUBGRF_WriteRegister>
 80105a8:	e7d5      	b.n	8010556 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80105aa:	2301      	movs	r3, #1
 80105ac:	461a      	mov	r2, r3
 80105ae:	2100      	movs	r1, #0
 80105b0:	2004      	movs	r0, #4
 80105b2:	f7ff fed3 	bl	801035c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80105b6:	1b65      	subs	r5, r4, r5
 80105b8:	350e      	adds	r5, #14
 80105ba:	b26d      	sxtb	r5, r5
 80105bc:	e7ea      	b.n	8010594 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80105be:	2301      	movs	r3, #1
 80105c0:	461a      	mov	r2, r3
 80105c2:	2100      	movs	r1, #0
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7ff fec9 	bl	801035c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80105ca:	1b65      	subs	r5, r4, r5
 80105cc:	350d      	adds	r5, #13
 80105ce:	b26d      	sxtb	r5, r5
 80105d0:	e7e0      	b.n	8010594 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80105d2:	2301      	movs	r3, #1
 80105d4:	2200      	movs	r2, #0
 80105d6:	2105      	movs	r1, #5
 80105d8:	2003      	movs	r0, #3
 80105da:	f7ff febf 	bl	801035c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80105de:	1b65      	subs	r5, r4, r5
 80105e0:	3516      	adds	r5, #22
 80105e2:	b26d      	sxtb	r5, r5
 80105e4:	e7ad      	b.n	8010542 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80105e6:	2301      	movs	r3, #1
 80105e8:	2200      	movs	r2, #0
 80105ea:	2103      	movs	r1, #3
 80105ec:	2002      	movs	r0, #2
 80105ee:	f7ff feb5 	bl	801035c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80105f2:	1b65      	subs	r5, r4, r5
 80105f4:	3516      	adds	r5, #22
 80105f6:	b26d      	sxtb	r5, r5
 80105f8:	e7a3      	b.n	8010542 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80105fa:	2301      	movs	r3, #1
 80105fc:	2200      	movs	r2, #0
 80105fe:	2102      	movs	r1, #2
 8010600:	4608      	mov	r0, r1
 8010602:	f7ff feab 	bl	801035c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8010606:	1b65      	subs	r5, r4, r5
 8010608:	350e      	adds	r5, #14
 801060a:	b26d      	sxtb	r5, r5
 801060c:	e799      	b.n	8010542 <SUBGRF_SetTxParams+0x4e>
	...

08010610 <SUBGRF_SetModulationParams>:
{
 8010610:	b510      	push	{r4, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8010616:	4b3e      	ldr	r3, [pc, #248]	@ (8010710 <SUBGRF_SetModulationParams+0x100>)
 8010618:	e893 0003 	ldmia.w	r3, {r0, r1}
 801061c:	ab02      	add	r3, sp, #8
 801061e:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8010622:	7820      	ldrb	r0, [r4, #0]
 8010624:	4b3b      	ldr	r3, [pc, #236]	@ (8010714 <SUBGRF_SetModulationParams+0x104>)
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	4298      	cmp	r0, r3
 801062a:	d106      	bne.n	801063a <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 801062c:	7823      	ldrb	r3, [r4, #0]
 801062e:	2b03      	cmp	r3, #3
 8010630:	d82c      	bhi.n	801068c <SUBGRF_SetModulationParams+0x7c>
 8010632:	e8df f003 	tbb	[pc, r3]
 8010636:	4205      	.short	0x4205
 8010638:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801063a:	f7ff ff41 	bl	80104c0 <SUBGRF_SetPacketType>
 801063e:	e7f5      	b.n	801062c <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8010640:	6862      	ldr	r2, [r4, #4]
 8010642:	4b35      	ldr	r3, [pc, #212]	@ (8010718 <SUBGRF_SetModulationParams+0x108>)
 8010644:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010648:	0c1a      	lsrs	r2, r3, #16
 801064a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801064e:	0a1a      	lsrs	r2, r3, #8
 8010650:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8010654:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8010658:	7b23      	ldrb	r3, [r4, #12]
 801065a:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801065e:	7b63      	ldrb	r3, [r4, #13]
 8010660:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8010664:	68a1      	ldr	r1, [r4, #8]
 8010666:	4a2d      	ldr	r2, [pc, #180]	@ (801071c <SUBGRF_SetModulationParams+0x10c>)
 8010668:	2300      	movs	r3, #0
 801066a:	0648      	lsls	r0, r1, #25
 801066c:	09c9      	lsrs	r1, r1, #7
 801066e:	f7f0 fa9b 	bl	8000ba8 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8010672:	0c03      	lsrs	r3, r0, #16
 8010674:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8010678:	0a03      	lsrs	r3, r0, #8
 801067a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 801067e:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010682:	2208      	movs	r2, #8
 8010684:	4669      	mov	r1, sp
 8010686:	208b      	movs	r0, #139	@ 0x8b
 8010688:	f7ff fc9e 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 801068c:	b002      	add	sp, #8
 801068e:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8010690:	6922      	ldr	r2, [r4, #16]
 8010692:	4b21      	ldr	r3, [pc, #132]	@ (8010718 <SUBGRF_SetModulationParams+0x108>)
 8010694:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8010698:	0c1a      	lsrs	r2, r3, #16
 801069a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801069e:	0a1a      	lsrs	r2, r3, #8
 80106a0:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80106a4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80106a8:	7d23      	ldrb	r3, [r4, #20]
 80106aa:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80106ae:	2204      	movs	r2, #4
 80106b0:	4669      	mov	r1, sp
 80106b2:	208b      	movs	r0, #139	@ 0x8b
 80106b4:	f7ff fc88 	bl	800ffc8 <SUBGRF_WriteCommand>
        break;
 80106b8:	e7e8      	b.n	801068c <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80106ba:	7e23      	ldrb	r3, [r4, #24]
 80106bc:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80106c0:	7e63      	ldrb	r3, [r4, #25]
 80106c2:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80106c6:	7ea3      	ldrb	r3, [r4, #26]
 80106c8:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80106cc:	7ee3      	ldrb	r3, [r4, #27]
 80106ce:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80106d2:	2204      	movs	r2, #4
 80106d4:	4669      	mov	r1, sp
 80106d6:	208b      	movs	r0, #139	@ 0x8b
 80106d8:	f7ff fc76 	bl	800ffc8 <SUBGRF_WriteCommand>
        break;
 80106dc:	e7d6      	b.n	801068c <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80106de:	6862      	ldr	r2, [r4, #4]
 80106e0:	4b0d      	ldr	r3, [pc, #52]	@ (8010718 <SUBGRF_SetModulationParams+0x108>)
 80106e2:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80106e6:	0c1a      	lsrs	r2, r3, #16
 80106e8:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80106ec:	0a1a      	lsrs	r2, r3, #8
 80106ee:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80106f2:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80106f6:	7b23      	ldrb	r3, [r4, #12]
 80106f8:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80106fc:	7b63      	ldrb	r3, [r4, #13]
 80106fe:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010702:	2205      	movs	r2, #5
 8010704:	4669      	mov	r1, sp
 8010706:	208b      	movs	r0, #139	@ 0x8b
 8010708:	f7ff fc5e 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 801070c:	e7be      	b.n	801068c <SUBGRF_SetModulationParams+0x7c>
 801070e:	bf00      	nop
 8010710:	08011a44 	.word	0x08011a44
 8010714:	200011fd 	.word	0x200011fd
 8010718:	3d090000 	.word	0x3d090000
 801071c:	01e84800 	.word	0x01e84800

08010720 <SUBGRF_SetPacketParams>:
{
 8010720:	b510      	push	{r4, lr}
 8010722:	b084      	sub	sp, #16
 8010724:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8010726:	ab01      	add	r3, sp, #4
 8010728:	4a33      	ldr	r2, [pc, #204]	@ (80107f8 <SUBGRF_SetPacketParams+0xd8>)
 801072a:	ca07      	ldmia	r2, {r0, r1, r2}
 801072c:	c303      	stmia	r3!, {r0, r1}
 801072e:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8010730:	7820      	ldrb	r0, [r4, #0]
 8010732:	4b32      	ldr	r3, [pc, #200]	@ (80107fc <SUBGRF_SetPacketParams+0xdc>)
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	4298      	cmp	r0, r3
 8010738:	d106      	bne.n	8010748 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 801073a:	7823      	ldrb	r3, [r4, #0]
 801073c:	2b03      	cmp	r3, #3
 801073e:	d82a      	bhi.n	8010796 <SUBGRF_SetPacketParams+0x76>
 8010740:	e8df f003 	tbb	[pc, r3]
 8010744:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8010748:	f7ff feba 	bl	80104c0 <SUBGRF_SetPacketType>
 801074c:	e7f5      	b.n	801073a <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801074e:	7a63      	ldrb	r3, [r4, #9]
 8010750:	2bf1      	cmp	r3, #241	@ 0xf1
 8010752:	d022      	beq.n	801079a <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8010754:	2bf2      	cmp	r3, #242	@ 0xf2
 8010756:	d02a      	beq.n	80107ae <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8010758:	8862      	ldrh	r2, [r4, #2]
 801075a:	0a11      	lsrs	r1, r2, #8
 801075c:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8010760:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8010764:	7922      	ldrb	r2, [r4, #4]
 8010766:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801076a:	7962      	ldrb	r2, [r4, #5]
 801076c:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8010770:	79a2      	ldrb	r2, [r4, #6]
 8010772:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8010776:	79e2      	ldrb	r2, [r4, #7]
 8010778:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801077c:	7a22      	ldrb	r2, [r4, #8]
 801077e:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8010782:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8010786:	7aa3      	ldrb	r3, [r4, #10]
 8010788:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 801078c:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801078e:	a901      	add	r1, sp, #4
 8010790:	208c      	movs	r0, #140	@ 0x8c
 8010792:	f7ff fc19 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 8010796:	b004      	add	sp, #16
 8010798:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801079a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801079e:	f7ff fbb2 	bl	800ff06 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80107a2:	f248 0005 	movw	r0, #32773	@ 0x8005
 80107a6:	f7ff fbc2 	bl	800ff2e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80107aa:	2302      	movs	r3, #2
 80107ac:	e7d4      	b.n	8010758 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80107ae:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 80107b2:	f7ff fba8 	bl	800ff06 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80107b6:	f241 0021 	movw	r0, #4129	@ 0x1021
 80107ba:	f7ff fbb8 	bl	800ff2e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80107be:	2306      	movs	r3, #6
 80107c0:	e7ca      	b.n	8010758 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80107c2:	7b23      	ldrb	r3, [r4, #12]
 80107c4:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 80107c8:	2201      	movs	r2, #1
        break;
 80107ca:	e7e0      	b.n	801078e <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80107cc:	89e3      	ldrh	r3, [r4, #14]
 80107ce:	0a1a      	lsrs	r2, r3, #8
 80107d0:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80107d4:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80107d8:	7c23      	ldrb	r3, [r4, #16]
 80107da:	4a09      	ldr	r2, [pc, #36]	@ (8010800 <SUBGRF_SetPacketParams+0xe0>)
 80107dc:	7013      	strb	r3, [r2, #0]
 80107de:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80107e2:	7c63      	ldrb	r3, [r4, #17]
 80107e4:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80107e8:	7ca3      	ldrb	r3, [r4, #18]
 80107ea:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80107ee:	7ce3      	ldrb	r3, [r4, #19]
 80107f0:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 80107f4:	2206      	movs	r2, #6
        break;
 80107f6:	e7ca      	b.n	801078e <SUBGRF_SetPacketParams+0x6e>
 80107f8:	08011a4c 	.word	0x08011a4c
 80107fc:	200011fd 	.word	0x200011fd
 8010800:	200011fc 	.word	0x200011fc

08010804 <SUBGRF_SetBufferBaseAddress>:
{
 8010804:	b500      	push	{lr}
 8010806:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8010808:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 801080c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8010810:	2202      	movs	r2, #2
 8010812:	a901      	add	r1, sp, #4
 8010814:	208f      	movs	r0, #143	@ 0x8f
 8010816:	f7ff fbd7 	bl	800ffc8 <SUBGRF_WriteCommand>
}
 801081a:	b003      	add	sp, #12
 801081c:	f85d fb04 	ldr.w	pc, [sp], #4

08010820 <SUBGRF_ReadCommand>:
{
 8010820:	b510      	push	{r4, lr}
 8010822:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010824:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010828:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801082a:	460a      	mov	r2, r1
 801082c:	4601      	mov	r1, r0
 801082e:	4803      	ldr	r0, [pc, #12]	@ (801083c <SUBGRF_ReadCommand+0x1c>)
 8010830:	f7f5 fb64 	bl	8005efc <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010834:	f384 8810 	msr	PRIMASK, r4
}
 8010838:	bd10      	pop	{r4, pc}
 801083a:	bf00      	nop
 801083c:	2000023c 	.word	0x2000023c

08010840 <SUBGRF_GetRssiInst>:
{
 8010840:	b500      	push	{lr}
 8010842:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8010844:	2201      	movs	r2, #1
 8010846:	a901      	add	r1, sp, #4
 8010848:	2015      	movs	r0, #21
 801084a:	f7ff ffe9 	bl	8010820 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801084e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8010852:	4240      	negs	r0, r0
}
 8010854:	1040      	asrs	r0, r0, #1
 8010856:	b003      	add	sp, #12
 8010858:	f85d fb04 	ldr.w	pc, [sp], #4

0801085c <SUBGRF_GetRxBufferStatus>:
{
 801085c:	b530      	push	{r4, r5, lr}
 801085e:	b083      	sub	sp, #12
 8010860:	4605      	mov	r5, r0
 8010862:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8010864:	2202      	movs	r2, #2
 8010866:	a901      	add	r1, sp, #4
 8010868:	2013      	movs	r0, #19
 801086a:	f7ff ffd9 	bl	8010820 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801086e:	f7ff fadf 	bl	800fe30 <SUBGRF_GetPacketType>
 8010872:	2801      	cmp	r0, #1
 8010874:	d007      	beq.n	8010886 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8010876:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801087a:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 801087c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010880:	7023      	strb	r3, [r4, #0]
}
 8010882:	b003      	add	sp, #12
 8010884:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8010886:	4b05      	ldr	r3, [pc, #20]	@ (801089c <SUBGRF_GetRxBufferStatus+0x40>)
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	b2db      	uxtb	r3, r3
 801088c:	2b01      	cmp	r3, #1
 801088e:	d1f2      	bne.n	8010876 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8010890:	f240 7002 	movw	r0, #1794	@ 0x702
 8010894:	f7ff fae2 	bl	800fe5c <SUBGRF_ReadRegister>
 8010898:	7028      	strb	r0, [r5, #0]
 801089a:	e7ef      	b.n	801087c <SUBGRF_GetRxBufferStatus+0x20>
 801089c:	200011fc 	.word	0x200011fc

080108a0 <SUBGRF_GetPayload>:
{
 80108a0:	b570      	push	{r4, r5, r6, lr}
 80108a2:	b082      	sub	sp, #8
 80108a4:	4606      	mov	r6, r0
 80108a6:	460c      	mov	r4, r1
 80108a8:	4615      	mov	r5, r2
    uint8_t offset = 0;
 80108aa:	2300      	movs	r3, #0
 80108ac:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 80108b0:	f10d 0107 	add.w	r1, sp, #7
 80108b4:	4620      	mov	r0, r4
 80108b6:	f7ff ffd1 	bl	801085c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80108ba:	7822      	ldrb	r2, [r4, #0]
 80108bc:	42aa      	cmp	r2, r5
 80108be:	d902      	bls.n	80108c6 <SUBGRF_GetPayload+0x26>
        return 1;
 80108c0:	2001      	movs	r0, #1
}
 80108c2:	b002      	add	sp, #8
 80108c4:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80108c6:	4631      	mov	r1, r6
 80108c8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80108cc:	f7ff fb6c 	bl	800ffa8 <SUBGRF_ReadBuffer>
    return 0;
 80108d0:	2000      	movs	r0, #0
 80108d2:	e7f6      	b.n	80108c2 <SUBGRF_GetPayload+0x22>

080108d4 <SUBGRF_GetPacketStatus>:
{
 80108d4:	b510      	push	{r4, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80108da:	2203      	movs	r2, #3
 80108dc:	a901      	add	r1, sp, #4
 80108de:	2014      	movs	r0, #20
 80108e0:	f7ff ff9e 	bl	8010820 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 80108e4:	f7ff faa4 	bl	800fe30 <SUBGRF_GetPacketType>
 80108e8:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 80108ea:	b148      	cbz	r0, 8010900 <SUBGRF_GetPacketStatus+0x2c>
 80108ec:	2801      	cmp	r0, #1
 80108ee:	d018      	beq.n	8010922 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80108f0:	2214      	movs	r2, #20
 80108f2:	2100      	movs	r1, #0
 80108f4:	4620      	mov	r0, r4
 80108f6:	f000 fb20 	bl	8010f3a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80108fa:	230f      	movs	r3, #15
 80108fc:	7023      	strb	r3, [r4, #0]
}
 80108fe:	e00e      	b.n	801091e <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8010900:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010904:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8010906:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801090a:	425b      	negs	r3, r3
 801090c:	105b      	asrs	r3, r3, #1
 801090e:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8010910:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010914:	425b      	negs	r3, r3
 8010916:	105b      	asrs	r3, r3, #1
 8010918:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801091a:	2300      	movs	r3, #0
 801091c:	60a3      	str	r3, [r4, #8]
}
 801091e:	b002      	add	sp, #8
 8010920:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8010922:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010926:	425b      	negs	r3, r3
 8010928:	105b      	asrs	r3, r3, #1
 801092a:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801092c:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8010930:	3302      	adds	r3, #2
 8010932:	109b      	asrs	r3, r3, #2
 8010934:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8010936:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801093a:	425b      	negs	r3, r3
 801093c:	105b      	asrs	r3, r3, #1
 801093e:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8010940:	4b01      	ldr	r3, [pc, #4]	@ (8010948 <SUBGRF_GetPacketStatus+0x74>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	6123      	str	r3, [r4, #16]
            break;
 8010946:	e7ea      	b.n	801091e <SUBGRF_GetPacketStatus+0x4a>
 8010948:	200011f8 	.word	0x200011f8

0801094c <SUBGRF_SetSwitch>:
{
 801094c:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 801094e:	2901      	cmp	r1, #1
 8010950:	d003      	beq.n	801095a <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8010952:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8010954:	f7f2 fa58 	bl	8002e08 <RBI_ConfigRFSwitch>
}
 8010958:	bd10      	pop	{r4, pc}
 801095a:	4604      	mov	r4, r0
 801095c:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 801095e:	2c01      	cmp	r4, #1
 8010960:	d003      	beq.n	801096a <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8010962:	2c02      	cmp	r4, #2
 8010964:	d1f6      	bne.n	8010954 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8010966:	2003      	movs	r0, #3
 8010968:	e7f4      	b.n	8010954 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801096a:	2004      	movs	r0, #4
 801096c:	f7ff fa86 	bl	800fe7c <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8010970:	2002      	movs	r0, #2
 8010972:	e7f6      	b.n	8010962 <SUBGRF_SetSwitch+0x16>

08010974 <SUBGRF_SetRfTxPower>:
{
 8010974:	b538      	push	{r3, r4, r5, lr}
 8010976:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8010978:	f7f2 fa4a 	bl	8002e10 <RBI_GetTxConfig>
    switch (TxConfig)
 801097c:	b148      	cbz	r0, 8010992 <SUBGRF_SetRfTxPower+0x1e>
 801097e:	2802      	cmp	r0, #2
 8010980:	d10d      	bne.n	801099e <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8010982:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8010984:	2202      	movs	r2, #2
 8010986:	4621      	mov	r1, r4
 8010988:	4628      	mov	r0, r5
 801098a:	f7ff fdb3 	bl	80104f4 <SUBGRF_SetTxParams>
}
 801098e:	4628      	mov	r0, r5
 8010990:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8010992:	2c0f      	cmp	r4, #15
 8010994:	dc01      	bgt.n	801099a <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8010996:	2501      	movs	r5, #1
 8010998:	e7f4      	b.n	8010984 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 801099a:	2502      	movs	r5, #2
 801099c:	e7f2      	b.n	8010984 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 801099e:	2501      	movs	r5, #1
 80109a0:	e7f0      	b.n	8010984 <SUBGRF_SetRfTxPower+0x10>

080109a2 <SUBGRF_GetRadioWakeUpTime>:
}
 80109a2:	2001      	movs	r0, #1
 80109a4:	4770      	bx	lr
	...

080109a8 <HAL_SUBGHZ_TxCpltCallback>:
{
 80109a8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80109aa:	4b02      	ldr	r3, [pc, #8]	@ (80109b4 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2001      	movs	r0, #1
 80109b0:	4798      	blx	r3
}
 80109b2:	bd08      	pop	{r3, pc}
 80109b4:	200011f0 	.word	0x200011f0

080109b8 <HAL_SUBGHZ_RxCpltCallback>:
{
 80109b8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80109ba:	4b02      	ldr	r3, [pc, #8]	@ (80109c4 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	2002      	movs	r0, #2
 80109c0:	4798      	blx	r3
}
 80109c2:	bd08      	pop	{r3, pc}
 80109c4:	200011f0 	.word	0x200011f0

080109c8 <HAL_SUBGHZ_CRCErrorCallback>:
{
 80109c8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80109ca:	4b02      	ldr	r3, [pc, #8]	@ (80109d4 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	2040      	movs	r0, #64	@ 0x40
 80109d0:	4798      	blx	r3
}
 80109d2:	bd08      	pop	{r3, pc}
 80109d4:	200011f0 	.word	0x200011f0

080109d8 <HAL_SUBGHZ_CADStatusCallback>:
{
 80109d8:	b508      	push	{r3, lr}
    switch (cadstatus)
 80109da:	b111      	cbz	r1, 80109e2 <HAL_SUBGHZ_CADStatusCallback+0xa>
 80109dc:	2901      	cmp	r1, #1
 80109de:	d005      	beq.n	80109ec <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 80109e0:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80109e2:	4b05      	ldr	r3, [pc, #20]	@ (80109f8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	2080      	movs	r0, #128	@ 0x80
 80109e8:	4798      	blx	r3
            break;
 80109ea:	e7f9      	b.n	80109e0 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80109ec:	4b02      	ldr	r3, [pc, #8]	@ (80109f8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80109f4:	4798      	blx	r3
}
 80109f6:	e7f3      	b.n	80109e0 <HAL_SUBGHZ_CADStatusCallback+0x8>
 80109f8:	200011f0 	.word	0x200011f0

080109fc <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 80109fc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80109fe:	4b03      	ldr	r3, [pc, #12]	@ (8010a0c <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010a06:	4798      	blx	r3
}
 8010a08:	bd08      	pop	{r3, pc}
 8010a0a:	bf00      	nop
 8010a0c:	200011f0 	.word	0x200011f0

08010a10 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8010a10:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8010a12:	4b02      	ldr	r3, [pc, #8]	@ (8010a1c <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	2020      	movs	r0, #32
 8010a18:	4798      	blx	r3
}
 8010a1a:	bd08      	pop	{r3, pc}
 8010a1c:	200011f0 	.word	0x200011f0

08010a20 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8010a20:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8010a22:	4b02      	ldr	r3, [pc, #8]	@ (8010a2c <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	2004      	movs	r0, #4
 8010a28:	4798      	blx	r3
}
 8010a2a:	bd08      	pop	{r3, pc}
 8010a2c:	200011f0 	.word	0x200011f0

08010a30 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8010a30:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8010a32:	4b02      	ldr	r3, [pc, #8]	@ (8010a3c <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	2008      	movs	r0, #8
 8010a38:	4798      	blx	r3
}
 8010a3a:	bd08      	pop	{r3, pc}
 8010a3c:	200011f0 	.word	0x200011f0

08010a40 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8010a40:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8010a42:	4b02      	ldr	r3, [pc, #8]	@ (8010a4c <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	2010      	movs	r0, #16
 8010a48:	4798      	blx	r3
}
 8010a4a:	bd08      	pop	{r3, pc}
 8010a4c:	200011f0 	.word	0x200011f0

08010a50 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8010a50:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8010a52:	4b03      	ldr	r3, [pc, #12]	@ (8010a60 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8010a5a:	4798      	blx	r3
}
 8010a5c:	bd08      	pop	{r3, pc}
 8010a5e:	bf00      	nop
 8010a60:	200011f0 	.word	0x200011f0

08010a64 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8010a64:	4601      	mov	r1, r0
 8010a66:	b180      	cbz	r0, 8010a8a <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010a68:	2300      	movs	r3, #0
 8010a6a:	2b15      	cmp	r3, #21
 8010a6c:	d80c      	bhi.n	8010a88 <SUBGRF_GetFskBandwidthRegValue+0x24>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8010a6e:	4a08      	ldr	r2, [pc, #32]	@ (8010a90 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8010a70:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010a74:	428a      	cmp	r2, r1
 8010a76:	d802      	bhi.n	8010a7e <SUBGRF_GetFskBandwidthRegValue+0x1a>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010a78:	3301      	adds	r3, #1
 8010a7a:	b2db      	uxtb	r3, r3
 8010a7c:	e7f5      	b.n	8010a6a <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8010a7e:	4a04      	ldr	r2, [pc, #16]	@ (8010a90 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8010a80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010a84:	7918      	ldrb	r0, [r3, #4]
 8010a86:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8010a88:	e7fe      	b.n	8010a88 <SUBGRF_GetFskBandwidthRegValue+0x24>
        return( 0x1F );
 8010a8a:	201f      	movs	r0, #31
}
 8010a8c:	4770      	bx	lr
 8010a8e:	bf00      	nop
 8010a90:	08012760 	.word	0x08012760

08010a94 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8010a94:	b570      	push	{r4, r5, r6, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	4605      	mov	r5, r0
 8010a9a:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8010a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8010b14 <SUBGRF_GetCFO+0x80>)
 8010a9e:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8010aa0:	f640 0007 	movw	r0, #2055	@ 0x807
 8010aa4:	f7ff f9da 	bl	800fe5c <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8010aa8:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8010aac:	3308      	adds	r3, #8
 8010aae:	446b      	add	r3, sp
 8010ab0:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8010ab4:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8010ab8:	3301      	adds	r3, #1
 8010aba:	fa02 f303 	lsl.w	r3, r2, r3
 8010abe:	4a16      	ldr	r2, [pc, #88]	@ (8010b18 <SUBGRF_GetCFO+0x84>)
 8010ac0:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8010ac4:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8010ac8:	2807      	cmp	r0, #7
 8010aca:	d921      	bls.n	8010b10 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8010acc:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8010ace:	fb03 f000 	mul.w	r0, r3, r0
 8010ad2:	2803      	cmp	r0, #3
 8010ad4:	d800      	bhi.n	8010ad8 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8010ad6:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8010ad8:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8010adc:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 8010ae0:	f7ff f9bc 	bl	800fe5c <SUBGRF_ReadRegister>
 8010ae4:	0206      	lsls	r6, r0, #8
 8010ae6:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8010aea:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 8010aee:	f7ff f9b5 	bl	800fe5c <SUBGRF_ReadRegister>
 8010af2:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8010af4:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8010af8:	d003      	beq.n	8010b02 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8010afa:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8010afe:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8010b02:	096b      	lsrs	r3, r5, #5
 8010b04:	fb03 f000 	mul.w	r0, r3, r0
 8010b08:	11c0      	asrs	r0, r0, #7
 8010b0a:	6020      	str	r0, [r4, #0]
}
 8010b0c:	b002      	add	sp, #8
 8010b0e:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8010b10:	2302      	movs	r3, #2
 8010b12:	e7dc      	b.n	8010ace <SUBGRF_GetCFO+0x3a>
 8010b14:	0c0a0804 	.word	0x0c0a0804
 8010b18:	01e84800 	.word	0x01e84800

08010b1c <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8010b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b20:	4770      	bx	lr

08010b22 <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8010b22:	f04f 30ff 	mov.w	r0, #4294967295
 8010b26:	4770      	bx	lr

08010b28 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8010b28:	4770      	bx	lr

08010b2a <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8010b2a:	2000      	movs	r0, #0
 8010b2c:	4770      	bx	lr

08010b2e <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8010b2e:	2000      	movs	r0, #0
 8010b30:	4770      	bx	lr

08010b32 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8010b32:	4770      	bx	lr

08010b34 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 8010b34:	f04f 30ff 	mov.w	r0, #4294967295
 8010b38:	4770      	bx	lr

08010b3a <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8010b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b3e:	4770      	bx	lr

08010b40 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8010b40:	4770      	bx	lr

08010b42 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8010b42:	4770      	bx	lr

08010b44 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8010b44:	4770      	bx	lr
	...

08010b48 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8010b48:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b4a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010b4e:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8010b50:	4b1e      	ldr	r3, [pc, #120]	@ (8010bcc <TRACE_AllocateBufer+0x84>)
 8010b52:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 8010b56:	8a1a      	ldrh	r2, [r3, #16]
 8010b58:	4596      	cmp	lr, r2
 8010b5a:	d011      	beq.n	8010b80 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010b5c:	4596      	cmp	lr, r2
 8010b5e:	d921      	bls.n	8010ba4 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8010b60:	f5ce 6380 	rsb	r3, lr, #1024	@ 0x400
 8010b64:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8010b66:	4283      	cmp	r3, r0
 8010b68:	d81f      	bhi.n	8010baa <TRACE_AllocateBufer+0x62>
 8010b6a:	4282      	cmp	r2, r0
 8010b6c:	d91d      	bls.n	8010baa <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8010b6e:	4b17      	ldr	r3, [pc, #92]	@ (8010bcc <TRACE_AllocateBufer+0x84>)
 8010b70:	2401      	movs	r4, #1
 8010b72:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8010b74:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8010b78:	2400      	movs	r4, #0
 8010b7a:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8010b7c:	4613      	mov	r3, r2
 8010b7e:	e014      	b.n	8010baa <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8010b80:	f5ce 6380 	rsb	r3, lr, #1024	@ 0x400
 8010b84:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8010b86:	4298      	cmp	r0, r3
 8010b88:	d30f      	bcc.n	8010baa <TRACE_AllocateBufer+0x62>
 8010b8a:	4282      	cmp	r2, r0
 8010b8c:	d90d      	bls.n	8010baa <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8010b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8010bcc <TRACE_AllocateBufer+0x84>)
 8010b90:	2401      	movs	r4, #1
 8010b92:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8010b94:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8010b98:	f04f 0e00 	mov.w	lr, #0
 8010b9c:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	e002      	b.n	8010baa <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8010ba4:	eba2 020e 	sub.w	r2, r2, lr
 8010ba8:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8010baa:	4283      	cmp	r3, r0
 8010bac:	d90a      	bls.n	8010bc4 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8010bae:	4a07      	ldr	r2, [pc, #28]	@ (8010bcc <TRACE_AllocateBufer+0x84>)
 8010bb0:	8a53      	ldrh	r3, [r2, #18]
 8010bb2:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8010bb4:	4403      	add	r3, r0
 8010bb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010bba:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8010bbc:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010bbe:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8010bc2:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8010bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8010bc8:	e7f9      	b.n	8010bbe <TRACE_AllocateBufer+0x76>
 8010bca:	bf00      	nop
 8010bcc:	20001800 	.word	0x20001800

08010bd0 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010bd0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010bd4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8010bd6:	4a03      	ldr	r2, [pc, #12]	@ (8010be4 <TRACE_Lock+0x14>)
 8010bd8:	8ad3      	ldrh	r3, [r2, #22]
 8010bda:	3301      	adds	r3, #1
 8010bdc:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010bde:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8010be2:	4770      	bx	lr
 8010be4:	20001800 	.word	0x20001800

08010be8 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010be8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010bec:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8010bee:	4a03      	ldr	r2, [pc, #12]	@ (8010bfc <TRACE_UnLock+0x14>)
 8010bf0:	8ad3      	ldrh	r3, [r2, #22]
 8010bf2:	3b01      	subs	r3, #1
 8010bf4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010bf6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8010bfa:	4770      	bx	lr
 8010bfc:	20001800 	.word	0x20001800

08010c00 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8010c00:	4b02      	ldr	r3, [pc, #8]	@ (8010c0c <TRACE_IsLocked+0xc>)
 8010c02:	8ad8      	ldrh	r0, [r3, #22]
}
 8010c04:	3800      	subs	r0, #0
 8010c06:	bf18      	it	ne
 8010c08:	2001      	movne	r0, #1
 8010c0a:	4770      	bx	lr
 8010c0c:	20001800 	.word	0x20001800

08010c10 <UTIL_ADV_TRACE_Init>:
{
 8010c10:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8010c12:	2218      	movs	r2, #24
 8010c14:	2100      	movs	r1, #0
 8010c16:	4807      	ldr	r0, [pc, #28]	@ (8010c34 <UTIL_ADV_TRACE_Init+0x24>)
 8010c18:	f000 f98f 	bl	8010f3a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8010c1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010c20:	2100      	movs	r1, #0
 8010c22:	4805      	ldr	r0, [pc, #20]	@ (8010c38 <UTIL_ADV_TRACE_Init+0x28>)
 8010c24:	f000 f989 	bl	8010f3a <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8010c28:	4b04      	ldr	r3, [pc, #16]	@ (8010c3c <UTIL_ADV_TRACE_Init+0x2c>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	4804      	ldr	r0, [pc, #16]	@ (8010c40 <UTIL_ADV_TRACE_Init+0x30>)
 8010c2e:	4798      	blx	r3
}
 8010c30:	bd08      	pop	{r3, pc}
 8010c32:	bf00      	nop
 8010c34:	20001800 	.word	0x20001800
 8010c38:	20001400 	.word	0x20001400
 8010c3c:	08011abc 	.word	0x08011abc
 8010c40:	08010dc1 	.word	0x08010dc1

08010c44 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8010c44:	4b01      	ldr	r3, [pc, #4]	@ (8010c4c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8010c46:	6058      	str	r0, [r3, #4]
}
 8010c48:	4770      	bx	lr
 8010c4a:	bf00      	nop
 8010c4c:	20001800 	.word	0x20001800

08010c50 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8010c50:	4b01      	ldr	r3, [pc, #4]	@ (8010c58 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8010c52:	7218      	strb	r0, [r3, #8]
}
 8010c54:	4770      	bx	lr
 8010c56:	bf00      	nop
 8010c58:	20001800 	.word	0x20001800

08010c5c <TRACE_Send>:
{
 8010c5c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8010c62:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8010c64:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8010c66:	f7ff ffcb 	bl	8010c00 <TRACE_IsLocked>
 8010c6a:	b118      	cbz	r0, 8010c74 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c6c:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8010c70:	2000      	movs	r0, #0
}
 8010c72:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8010c74:	f7ff ffac 	bl	8010bd0 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8010c78:	4b1c      	ldr	r3, [pc, #112]	@ (8010cec <TRACE_Send+0x90>)
 8010c7a:	8a1a      	ldrh	r2, [r3, #16]
 8010c7c:	8a5b      	ldrh	r3, [r3, #18]
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d02e      	beq.n	8010ce0 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8010c82:	491a      	ldr	r1, [pc, #104]	@ (8010cec <TRACE_Send+0x90>)
 8010c84:	7889      	ldrb	r1, [r1, #2]
 8010c86:	2901      	cmp	r1, #1
 8010c88:	d017      	beq.n	8010cba <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8010c8a:	4a18      	ldr	r2, [pc, #96]	@ (8010cec <TRACE_Send+0x90>)
 8010c8c:	7892      	ldrb	r2, [r2, #2]
 8010c8e:	b932      	cbnz	r2, 8010c9e <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010c90:	4a16      	ldr	r2, [pc, #88]	@ (8010cec <TRACE_Send+0x90>)
 8010c92:	8a12      	ldrh	r2, [r2, #16]
 8010c94:	4293      	cmp	r3, r2
 8010c96:	d91e      	bls.n	8010cd6 <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8010c98:	1a9b      	subs	r3, r3, r2
 8010c9a:	4a14      	ldr	r2, [pc, #80]	@ (8010cec <TRACE_Send+0x90>)
 8010c9c:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8010c9e:	4e13      	ldr	r6, [pc, #76]	@ (8010cec <TRACE_Send+0x90>)
 8010ca0:	8a35      	ldrh	r5, [r6, #16]
 8010ca2:	4b13      	ldr	r3, [pc, #76]	@ (8010cf0 <TRACE_Send+0x94>)
 8010ca4:	441d      	add	r5, r3
 8010ca6:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8010caa:	f7f0 ff95 	bl	8001bd8 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8010cae:	4b11      	ldr	r3, [pc, #68]	@ (8010cf4 <TRACE_Send+0x98>)
 8010cb0:	68db      	ldr	r3, [r3, #12]
 8010cb2:	8ab1      	ldrh	r1, [r6, #20]
 8010cb4:	4628      	mov	r0, r5
 8010cb6:	4798      	blx	r3
 8010cb8:	e7db      	b.n	8010c72 <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8010cba:	480c      	ldr	r0, [pc, #48]	@ (8010cec <TRACE_Send+0x90>)
 8010cbc:	8801      	ldrh	r1, [r0, #0]
 8010cbe:	1a8a      	subs	r2, r1, r2
 8010cc0:	b292      	uxth	r2, r2
 8010cc2:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8010cc4:	2102      	movs	r1, #2
 8010cc6:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8010cc8:	2100      	movs	r1, #0
 8010cca:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8010ccc:	2a00      	cmp	r2, #0
 8010cce:	d1dc      	bne.n	8010c8a <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010cd0:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010cd2:	8201      	strh	r1, [r0, #16]
 8010cd4:	e7d9      	b.n	8010c8a <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8010cd6:	f5c2 6280 	rsb	r2, r2, #1024	@ 0x400
 8010cda:	4b04      	ldr	r3, [pc, #16]	@ (8010cec <TRACE_Send+0x90>)
 8010cdc:	829a      	strh	r2, [r3, #20]
 8010cde:	e7de      	b.n	8010c9e <TRACE_Send+0x42>
      TRACE_UnLock();
 8010ce0:	f7ff ff82 	bl	8010be8 <TRACE_UnLock>
 8010ce4:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8010ce8:	2000      	movs	r0, #0
}
 8010cea:	e7c2      	b.n	8010c72 <TRACE_Send+0x16>
 8010cec:	20001800 	.word	0x20001800
 8010cf0:	20001400 	.word	0x20001400
 8010cf4:	08011abc 	.word	0x08011abc

08010cf8 <UTIL_ADV_TRACE_COND_FSend>:
{
 8010cf8:	b408      	push	{r3}
 8010cfa:	b530      	push	{r4, r5, lr}
 8010cfc:	b086      	sub	sp, #24
 8010cfe:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  uint16_t timestamp_size = 0u;
 8010d00:	2300      	movs	r3, #0
 8010d02:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8010d06:	4b2b      	ldr	r3, [pc, #172]	@ (8010db4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8010d08:	7a1b      	ldrb	r3, [r3, #8]
 8010d0a:	4283      	cmp	r3, r0
 8010d0c:	d34c      	bcc.n	8010da8 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8010d0e:	4b29      	ldr	r3, [pc, #164]	@ (8010db4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8010d10:	68db      	ldr	r3, [r3, #12]
 8010d12:	4399      	bics	r1, r3
 8010d14:	d14b      	bne.n	8010dae <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8010d16:	4b27      	ldr	r3, [pc, #156]	@ (8010db4 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8010d18:	685b      	ldr	r3, [r3, #4]
 8010d1a:	b123      	cbz	r3, 8010d26 <UTIL_ADV_TRACE_COND_FSend+0x2e>
 8010d1c:	b11a      	cbz	r2, 8010d26 <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8010d1e:	f10d 0102 	add.w	r1, sp, #2
 8010d22:	a801      	add	r0, sp, #4
 8010d24:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8010d26:	ab0a      	add	r3, sp, #40	@ 0x28
 8010d28:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8010d2a:	4622      	mov	r2, r4
 8010d2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010d30:	4821      	ldr	r0, [pc, #132]	@ (8010db8 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8010d32:	f000 fcd1 	bl	80116d8 <tiny_vsnprintf_like>
 8010d36:	b285      	uxth	r5, r0
  TRACE_Lock();
 8010d38:	f7ff ff4a 	bl	8010bd0 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8010d3c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010d40:	18e8      	adds	r0, r5, r3
 8010d42:	4669      	mov	r1, sp
 8010d44:	b280      	uxth	r0, r0
 8010d46:	f7ff feff 	bl	8010b48 <TRACE_AllocateBufer>
 8010d4a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010d4e:	d026      	beq.n	8010d9e <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8010d50:	2300      	movs	r3, #0
 8010d52:	e00d      	b.n	8010d70 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8010d54:	f8bd 2000 	ldrh.w	r2, [sp]
 8010d58:	f103 0118 	add.w	r1, r3, #24
 8010d5c:	4469      	add	r1, sp
 8010d5e:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8010d62:	4916      	ldr	r1, [pc, #88]	@ (8010dbc <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8010d64:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8010d66:	3201      	adds	r2, #1
 8010d68:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	b29b      	uxth	r3, r3
 8010d70:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d8ed      	bhi.n	8010d54 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8010d78:	f8bd 0000 	ldrh.w	r0, [sp]
 8010d7c:	9b05      	ldr	r3, [sp, #20]
 8010d7e:	4622      	mov	r2, r4
 8010d80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010d84:	4c0d      	ldr	r4, [pc, #52]	@ (8010dbc <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8010d86:	4420      	add	r0, r4
 8010d88:	f000 fca6 	bl	80116d8 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8010d8c:	f7ff ff2c 	bl	8010be8 <TRACE_UnLock>
    return TRACE_Send();
 8010d90:	f7ff ff64 	bl	8010c5c <TRACE_Send>
}
 8010d94:	b006      	add	sp, #24
 8010d96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d9a:	b001      	add	sp, #4
 8010d9c:	4770      	bx	lr
  TRACE_UnLock();
 8010d9e:	f7ff ff23 	bl	8010be8 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8010da2:	f06f 0002 	mvn.w	r0, #2
 8010da6:	e7f5      	b.n	8010d94 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8010da8:	f06f 0004 	mvn.w	r0, #4
 8010dac:	e7f2      	b.n	8010d94 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8010dae:	f06f 0005 	mvn.w	r0, #5
 8010db2:	e7ef      	b.n	8010d94 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8010db4:	20001800 	.word	0x20001800
 8010db8:	20001200 	.word	0x20001200
 8010dbc:	20001400 	.word	0x20001400

08010dc0 <TRACE_TxCpltCallback>:
{
 8010dc0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8010dc6:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8010dc8:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8010dca:	4b26      	ldr	r3, [pc, #152]	@ (8010e64 <TRACE_TxCpltCallback+0xa4>)
 8010dcc:	789b      	ldrb	r3, [r3, #2]
 8010dce:	2b02      	cmp	r3, #2
 8010dd0:	d016      	beq.n	8010e00 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8010dd2:	4a24      	ldr	r2, [pc, #144]	@ (8010e64 <TRACE_TxCpltCallback+0xa4>)
 8010dd4:	8a13      	ldrh	r3, [r2, #16]
 8010dd6:	8a90      	ldrh	r0, [r2, #20]
 8010dd8:	4403      	add	r3, r0
 8010dda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010dde:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8010de0:	4b20      	ldr	r3, [pc, #128]	@ (8010e64 <TRACE_TxCpltCallback+0xa4>)
 8010de2:	8a1a      	ldrh	r2, [r3, #16]
 8010de4:	8a5b      	ldrh	r3, [r3, #18]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d003      	beq.n	8010df2 <TRACE_TxCpltCallback+0x32>
 8010dea:	481e      	ldr	r0, [pc, #120]	@ (8010e64 <TRACE_TxCpltCallback+0xa4>)
 8010dec:	8ac0      	ldrh	r0, [r0, #22]
 8010dee:	2801      	cmp	r0, #1
 8010df0:	d00b      	beq.n	8010e0a <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010df2:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8010df6:	f7f0 fef5 	bl	8001be4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8010dfa:	f7ff fef5 	bl	8010be8 <TRACE_UnLock>
}
 8010dfe:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010e00:	4b18      	ldr	r3, [pc, #96]	@ (8010e64 <TRACE_TxCpltCallback+0xa4>)
 8010e02:	2200      	movs	r2, #0
 8010e04:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010e06:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8010e08:	e7ea      	b.n	8010de0 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8010e0a:	4816      	ldr	r0, [pc, #88]	@ (8010e64 <TRACE_TxCpltCallback+0xa4>)
 8010e0c:	7880      	ldrb	r0, [r0, #2]
 8010e0e:	2801      	cmp	r0, #1
 8010e10:	d014      	beq.n	8010e3c <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8010e12:	4a14      	ldr	r2, [pc, #80]	@ (8010e64 <TRACE_TxCpltCallback+0xa4>)
 8010e14:	7892      	ldrb	r2, [r2, #2]
 8010e16:	b932      	cbnz	r2, 8010e26 <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010e18:	4a12      	ldr	r2, [pc, #72]	@ (8010e64 <TRACE_TxCpltCallback+0xa4>)
 8010e1a:	8a12      	ldrh	r2, [r2, #16]
 8010e1c:	4293      	cmp	r3, r2
 8010e1e:	d91b      	bls.n	8010e58 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8010e20:	1a9b      	subs	r3, r3, r2
 8010e22:	4a10      	ldr	r2, [pc, #64]	@ (8010e64 <TRACE_TxCpltCallback+0xa4>)
 8010e24:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8010e26:	4b0f      	ldr	r3, [pc, #60]	@ (8010e64 <TRACE_TxCpltCallback+0xa4>)
 8010e28:	8a18      	ldrh	r0, [r3, #16]
 8010e2a:	4a0f      	ldr	r2, [pc, #60]	@ (8010e68 <TRACE_TxCpltCallback+0xa8>)
 8010e2c:	4410      	add	r0, r2
 8010e2e:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8010e32:	4a0e      	ldr	r2, [pc, #56]	@ (8010e6c <TRACE_TxCpltCallback+0xac>)
 8010e34:	68d2      	ldr	r2, [r2, #12]
 8010e36:	8a99      	ldrh	r1, [r3, #20]
 8010e38:	4790      	blx	r2
 8010e3a:	e7e0      	b.n	8010dfe <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8010e3c:	4c09      	ldr	r4, [pc, #36]	@ (8010e64 <TRACE_TxCpltCallback+0xa4>)
 8010e3e:	8820      	ldrh	r0, [r4, #0]
 8010e40:	1a82      	subs	r2, r0, r2
 8010e42:	b292      	uxth	r2, r2
 8010e44:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8010e46:	2002      	movs	r0, #2
 8010e48:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8010e4a:	2000      	movs	r0, #0
 8010e4c:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8010e4e:	2a00      	cmp	r2, #0
 8010e50:	d1df      	bne.n	8010e12 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010e52:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010e54:	8220      	strh	r0, [r4, #16]
 8010e56:	e7dc      	b.n	8010e12 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8010e58:	f5c2 6280 	rsb	r2, r2, #1024	@ 0x400
 8010e5c:	4b01      	ldr	r3, [pc, #4]	@ (8010e64 <TRACE_TxCpltCallback+0xa4>)
 8010e5e:	829a      	strh	r2, [r3, #20]
 8010e60:	e7e1      	b.n	8010e26 <TRACE_TxCpltCallback+0x66>
 8010e62:	bf00      	nop
 8010e64:	20001800 	.word	0x20001800
 8010e68:	20001400 	.word	0x20001400
 8010e6c:	08011abc 	.word	0x08011abc

08010e70 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8010e70:	2300      	movs	r3, #0
 8010e72:	4a02      	ldr	r2, [pc, #8]	@ (8010e7c <UTIL_LPM_Init+0xc>)
 8010e74:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8010e76:	4a02      	ldr	r2, [pc, #8]	@ (8010e80 <UTIL_LPM_Init+0x10>)
 8010e78:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8010e7a:	4770      	bx	lr
 8010e7c:	2000181c 	.word	0x2000181c
 8010e80:	20001818 	.word	0x20001818

08010e84 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e84:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010e88:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8010e8a:	b141      	cbz	r1, 8010e9e <UTIL_LPM_SetStopMode+0x1a>
 8010e8c:	2901      	cmp	r1, #1
 8010e8e:	d103      	bne.n	8010e98 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8010e90:	4906      	ldr	r1, [pc, #24]	@ (8010eac <UTIL_LPM_SetStopMode+0x28>)
 8010e92:	680a      	ldr	r2, [r1, #0]
 8010e94:	4302      	orrs	r2, r0
 8010e96:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e98:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010e9c:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8010e9e:	4903      	ldr	r1, [pc, #12]	@ (8010eac <UTIL_LPM_SetStopMode+0x28>)
 8010ea0:	680a      	ldr	r2, [r1, #0]
 8010ea2:	ea22 0200 	bic.w	r2, r2, r0
 8010ea6:	600a      	str	r2, [r1, #0]
      break;
 8010ea8:	e7f6      	b.n	8010e98 <UTIL_LPM_SetStopMode+0x14>
 8010eaa:	bf00      	nop
 8010eac:	2000181c 	.word	0x2000181c

08010eb0 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010eb0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010eb4:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8010eb6:	b141      	cbz	r1, 8010eca <UTIL_LPM_SetOffMode+0x1a>
 8010eb8:	2901      	cmp	r1, #1
 8010eba:	d103      	bne.n	8010ec4 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8010ebc:	4906      	ldr	r1, [pc, #24]	@ (8010ed8 <UTIL_LPM_SetOffMode+0x28>)
 8010ebe:	680a      	ldr	r2, [r1, #0]
 8010ec0:	4302      	orrs	r2, r0
 8010ec2:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ec4:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010ec8:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8010eca:	4903      	ldr	r1, [pc, #12]	@ (8010ed8 <UTIL_LPM_SetOffMode+0x28>)
 8010ecc:	680a      	ldr	r2, [r1, #0]
 8010ece:	ea22 0200 	bic.w	r2, r2, r0
 8010ed2:	600a      	str	r2, [r1, #0]
      break;
 8010ed4:	e7f6      	b.n	8010ec4 <UTIL_LPM_SetOffMode+0x14>
 8010ed6:	bf00      	nop
 8010ed8:	20001818 	.word	0x20001818

08010edc <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8010edc:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ede:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010ee2:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8010ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8010f18 <UTIL_LPM_EnterLowPower+0x3c>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	b13b      	cbz	r3, 8010efa <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8010eea:	4d0c      	ldr	r5, [pc, #48]	@ (8010f1c <UTIL_LPM_EnterLowPower+0x40>)
 8010eec:	682b      	ldr	r3, [r5, #0]
 8010eee:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8010ef0:	686b      	ldr	r3, [r5, #4]
 8010ef2:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ef4:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8010ef8:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8010efa:	4b09      	ldr	r3, [pc, #36]	@ (8010f20 <UTIL_LPM_EnterLowPower+0x44>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	b12b      	cbz	r3, 8010f0c <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8010f00:	4d06      	ldr	r5, [pc, #24]	@ (8010f1c <UTIL_LPM_EnterLowPower+0x40>)
 8010f02:	68ab      	ldr	r3, [r5, #8]
 8010f04:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8010f06:	68eb      	ldr	r3, [r5, #12]
 8010f08:	4798      	blx	r3
 8010f0a:	e7f3      	b.n	8010ef4 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8010f0c:	4d03      	ldr	r5, [pc, #12]	@ (8010f1c <UTIL_LPM_EnterLowPower+0x40>)
 8010f0e:	692b      	ldr	r3, [r5, #16]
 8010f10:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8010f12:	696b      	ldr	r3, [r5, #20]
 8010f14:	4798      	blx	r3
 8010f16:	e7ed      	b.n	8010ef4 <UTIL_LPM_EnterLowPower+0x18>
 8010f18:	2000181c 	.word	0x2000181c
 8010f1c:	08011a58 	.word	0x08011a58
 8010f20:	20001818 	.word	0x20001818

08010f24 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8010f24:	e004      	b.n	8010f30 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8010f26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f2a:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8010f2e:	461a      	mov	r2, r3
 8010f30:	1e53      	subs	r3, r2, #1
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	2a00      	cmp	r2, #0
 8010f36:	d1f6      	bne.n	8010f26 <UTIL_MEM_cpy_8+0x2>
    }
}
 8010f38:	4770      	bx	lr

08010f3a <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8010f3a:	e002      	b.n	8010f42 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8010f3c:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8010f40:	461a      	mov	r2, r3
 8010f42:	1e53      	subs	r3, r2, #1
 8010f44:	b29b      	uxth	r3, r3
 8010f46:	2a00      	cmp	r2, #0
 8010f48:	d1f8      	bne.n	8010f3c <UTIL_MEM_set_8+0x2>
  }
}
 8010f4a:	4770      	bx	lr

08010f4c <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f4c:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010f50:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8010f52:	4a06      	ldr	r2, [pc, #24]	@ (8010f6c <UTIL_SEQ_SetTask+0x20>)
 8010f54:	6813      	ldr	r3, [r2, #0]
 8010f56:	4303      	orrs	r3, r0
 8010f58:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8010f5a:	4a05      	ldr	r2, [pc, #20]	@ (8010f70 <UTIL_SEQ_SetTask+0x24>)
 8010f5c:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8010f60:	4303      	orrs	r3, r0
 8010f62:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f66:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8010f6a:	4770      	bx	lr
 8010f6c:	20001844 	.word	0x20001844
 8010f70:	20001820 	.word	0x20001820

08010f74 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8010f74:	4770      	bx	lr

08010f76 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8010f76:	4770      	bx	lr

08010f78 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8010f78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010f7c:	d216      	bcs.n	8010fac <SEQ_BitPosition+0x34>
 8010f7e:	0400      	lsls	r0, r0, #16
 8010f80:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8010f82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8010f86:	d202      	bcs.n	8010f8e <SEQ_BitPosition+0x16>
 8010f88:	3308      	adds	r3, #8
 8010f8a:	b2db      	uxtb	r3, r3
 8010f8c:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8010f8e:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8010f92:	d202      	bcs.n	8010f9a <SEQ_BitPosition+0x22>
 8010f94:	3304      	adds	r3, #4
 8010f96:	b2db      	uxtb	r3, r3
 8010f98:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8010f9a:	0f00      	lsrs	r0, r0, #28
 8010f9c:	4a04      	ldr	r2, [pc, #16]	@ (8010fb0 <SEQ_BitPosition+0x38>)
 8010f9e:	5c10      	ldrb	r0, [r2, r0]
 8010fa0:	4418      	add	r0, r3
 8010fa2:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8010fa4:	f1c0 001f 	rsb	r0, r0, #31
}
 8010fa8:	b2c0      	uxtb	r0, r0
 8010faa:	4770      	bx	lr
uint8_t n = 0U;
 8010fac:	2300      	movs	r3, #0
 8010fae:	e7e8      	b.n	8010f82 <SEQ_BitPosition+0xa>
 8010fb0:	08012810 	.word	0x08012810

08010fb4 <UTIL_SEQ_Run>:
{
 8010fb4:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8010fb6:	4b42      	ldr	r3, [pc, #264]	@ (80110c0 <UTIL_SEQ_Run+0x10c>)
 8010fb8:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8010fba:	4020      	ands	r0, r4
 8010fbc:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8010fbe:	4b41      	ldr	r3, [pc, #260]	@ (80110c4 <UTIL_SEQ_Run+0x110>)
 8010fc0:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 8010fc2:	4b41      	ldr	r3, [pc, #260]	@ (80110c8 <UTIL_SEQ_Run+0x114>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8010fc6:	4941      	ldr	r1, [pc, #260]	@ (80110cc <UTIL_SEQ_Run+0x118>)
 8010fc8:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 8010fca:	4941      	ldr	r1, [pc, #260]	@ (80110d0 <UTIL_SEQ_Run+0x11c>)
 8010fcc:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010fce:	e02f      	b.n	8011030 <UTIL_SEQ_Run+0x7c>
      counter++;
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	e034      	b.n	801103e <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8010fd4:	4d3f      	ldr	r5, [pc, #252]	@ (80110d4 <UTIL_SEQ_Run+0x120>)
 8010fd6:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8010fda:	6868      	ldr	r0, [r5, #4]
 8010fdc:	4010      	ands	r0, r2
 8010fde:	f7ff ffcb 	bl	8010f78 <SEQ_BitPosition>
 8010fe2:	4e3d      	ldr	r6, [pc, #244]	@ (80110d8 <UTIL_SEQ_Run+0x124>)
 8010fe4:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8010fe6:	686a      	ldr	r2, [r5, #4]
 8010fe8:	2301      	movs	r3, #1
 8010fea:	fa03 f000 	lsl.w	r0, r3, r0
 8010fee:	ea22 0200 	bic.w	r2, r2, r0
 8010ff2:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ff4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010ff8:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8010ffa:	6832      	ldr	r2, [r6, #0]
 8010ffc:	fa03 f202 	lsl.w	r2, r3, r2
 8011000:	43d6      	mvns	r6, r2
 8011002:	4d30      	ldr	r5, [pc, #192]	@ (80110c4 <UTIL_SEQ_Run+0x110>)
 8011004:	6828      	ldr	r0, [r5, #0]
 8011006:	ea20 0202 	bic.w	r2, r0, r2
 801100a:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801100c:	2b00      	cmp	r3, #0
 801100e:	d12d      	bne.n	801106c <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011010:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8011014:	4b30      	ldr	r3, [pc, #192]	@ (80110d8 <UTIL_SEQ_Run+0x124>)
 8011016:	681a      	ldr	r2, [r3, #0]
 8011018:	4b30      	ldr	r3, [pc, #192]	@ (80110dc <UTIL_SEQ_Run+0x128>)
 801101a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801101e:	4798      	blx	r3
    local_taskset = TaskSet;
 8011020:	4b28      	ldr	r3, [pc, #160]	@ (80110c4 <UTIL_SEQ_Run+0x110>)
 8011022:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 8011024:	4b28      	ldr	r3, [pc, #160]	@ (80110c8 <UTIL_SEQ_Run+0x114>)
 8011026:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8011028:	4928      	ldr	r1, [pc, #160]	@ (80110cc <UTIL_SEQ_Run+0x118>)
 801102a:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 801102c:	4928      	ldr	r1, [pc, #160]	@ (80110d0 <UTIL_SEQ_Run+0x11c>)
 801102e:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011030:	4002      	ands	r2, r0
 8011032:	4d23      	ldr	r5, [pc, #140]	@ (80110c0 <UTIL_SEQ_Run+0x10c>)
 8011034:	682d      	ldr	r5, [r5, #0]
 8011036:	422a      	tst	r2, r5
 8011038:	d020      	beq.n	801107c <UTIL_SEQ_Run+0xc8>
 801103a:	400b      	ands	r3, r1
 801103c:	d11e      	bne.n	801107c <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801103e:	4a25      	ldr	r2, [pc, #148]	@ (80110d4 <UTIL_SEQ_Run+0x120>)
 8011040:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011044:	4002      	ands	r2, r0
 8011046:	422a      	tst	r2, r5
 8011048:	d0c2      	beq.n	8010fd0 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801104a:	4922      	ldr	r1, [pc, #136]	@ (80110d4 <UTIL_SEQ_Run+0x120>)
 801104c:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8011050:	4002      	ands	r2, r0
 8011052:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8011054:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011058:	6849      	ldr	r1, [r1, #4]
 801105a:	4211      	tst	r1, r2
 801105c:	d1ba      	bne.n	8010fd4 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801105e:	491d      	ldr	r1, [pc, #116]	@ (80110d4 <UTIL_SEQ_Run+0x120>)
 8011060:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011064:	f04f 30ff 	mov.w	r0, #4294967295
 8011068:	6048      	str	r0, [r1, #4]
 801106a:	e7b3      	b.n	8010fd4 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801106c:	3b01      	subs	r3, #1
 801106e:	4819      	ldr	r0, [pc, #100]	@ (80110d4 <UTIL_SEQ_Run+0x120>)
 8011070:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 8011074:	4032      	ands	r2, r6
 8011076:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801107a:	e7c7      	b.n	801100c <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801107c:	4b16      	ldr	r3, [pc, #88]	@ (80110d8 <UTIL_SEQ_Run+0x124>)
 801107e:	f04f 32ff 	mov.w	r2, #4294967295
 8011082:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8011084:	f7ff ff76 	bl	8010f74 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011088:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801108c:	b672      	cpsid	i
  local_taskset = TaskSet;
 801108e:	4b0d      	ldr	r3, [pc, #52]	@ (80110c4 <UTIL_SEQ_Run+0x110>)
 8011090:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8011092:	4a0d      	ldr	r2, [pc, #52]	@ (80110c8 <UTIL_SEQ_Run+0x114>)
 8011094:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8011096:	4a0d      	ldr	r2, [pc, #52]	@ (80110cc <UTIL_SEQ_Run+0x118>)
 8011098:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801109a:	4013      	ands	r3, r2
 801109c:	4a08      	ldr	r2, [pc, #32]	@ (80110c0 <UTIL_SEQ_Run+0x10c>)
 801109e:	6812      	ldr	r2, [r2, #0]
 80110a0:	4213      	tst	r3, r2
 80110a2:	d103      	bne.n	80110ac <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 80110a4:	4b0a      	ldr	r3, [pc, #40]	@ (80110d0 <UTIL_SEQ_Run+0x11c>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	420b      	tst	r3, r1
 80110aa:	d006      	beq.n	80110ba <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110ac:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 80110b0:	f7ff ff61 	bl	8010f76 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 80110b4:	4b02      	ldr	r3, [pc, #8]	@ (80110c0 <UTIL_SEQ_Run+0x10c>)
 80110b6:	601c      	str	r4, [r3, #0]
}
 80110b8:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 80110ba:	f7f0 fd13 	bl	8001ae4 <UTIL_SEQ_Idle>
 80110be:	e7f5      	b.n	80110ac <UTIL_SEQ_Run+0xf8>
 80110c0:	20000118 	.word	0x20000118
 80110c4:	20001844 	.word	0x20001844
 80110c8:	20001840 	.word	0x20001840
 80110cc:	2000011c 	.word	0x2000011c
 80110d0:	2000183c 	.word	0x2000183c
 80110d4:	20001820 	.word	0x20001820
 80110d8:	20001838 	.word	0x20001838
 80110dc:	20001828 	.word	0x20001828

080110e0 <UTIL_SEQ_RegTask>:
{
 80110e0:	b538      	push	{r3, r4, r5, lr}
 80110e2:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110e4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80110e8:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80110ea:	f7ff ff45 	bl	8010f78 <SEQ_BitPosition>
 80110ee:	4b03      	ldr	r3, [pc, #12]	@ (80110fc <UTIL_SEQ_RegTask+0x1c>)
 80110f0:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110f4:	f385 8810 	msr	PRIMASK, r5
}
 80110f8:	bd38      	pop	{r3, r4, r5, pc}
 80110fa:	bf00      	nop
 80110fc:	20001828 	.word	0x20001828

08011100 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8011100:	b082      	sub	sp, #8
 8011102:	b082      	sub	sp, #8
 8011104:	f10d 0c08 	add.w	ip, sp, #8
 8011108:	e90c 0006 	stmdb	ip, {r1, r2}
 801110c:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801110e:	2200      	movs	r2, #0
 8011110:	6002      	str	r2, [r0, #0]
 8011112:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8011114:	440b      	add	r3, r1
 8011116:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8011118:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801111c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8011120:	440a      	add	r2, r1
 8011122:	b291      	uxth	r1, r2
 8011124:	b212      	sxth	r2, r2
 8011126:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8011128:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 801112c:	db04      	blt.n	8011138 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 801112e:	3301      	adds	r3, #1
 8011130:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8011132:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 8011136:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8011138:	b002      	add	sp, #8
 801113a:	b002      	add	sp, #8
 801113c:	4770      	bx	lr

0801113e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801113e:	b082      	sub	sp, #8
 8011140:	b082      	sub	sp, #8
 8011142:	f10d 0c08 	add.w	ip, sp, #8
 8011146:	e90c 0006 	stmdb	ip, {r1, r2}
 801114a:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801114c:	2200      	movs	r2, #0
 801114e:	6002      	str	r2, [r0, #0]
 8011150:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 8011152:	1acb      	subs	r3, r1, r3
 8011154:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8011156:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801115a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801115e:	1a52      	subs	r2, r2, r1
 8011160:	b291      	uxth	r1, r2
 8011162:	b212      	sxth	r2, r2
 8011164:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8011166:	2a00      	cmp	r2, #0
 8011168:	db02      	blt.n	8011170 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 801116a:	b002      	add	sp, #8
 801116c:	b002      	add	sp, #8
 801116e:	4770      	bx	lr
    c.Seconds--;
 8011170:	3b01      	subs	r3, #1
 8011172:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8011174:	f501 717a 	add.w	r1, r1, #1000	@ 0x3e8
 8011178:	8081      	strh	r1, [r0, #4]
  return c;
 801117a:	e7f6      	b.n	801116a <SysTimeSub+0x2c>

0801117c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801117c:	b530      	push	{r4, r5, lr}
 801117e:	b089      	sub	sp, #36	@ 0x24
 8011180:	ac02      	add	r4, sp, #8
 8011182:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011186:	2300      	movs	r3, #0
 8011188:	9304      	str	r3, [sp, #16]
 801118a:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801118e:	4d0b      	ldr	r5, [pc, #44]	@ (80111bc <SysTimeSet+0x40>)
 8011190:	692b      	ldr	r3, [r5, #16]
 8011192:	a805      	add	r0, sp, #20
 8011194:	4798      	blx	r3
 8011196:	4603      	mov	r3, r0
 8011198:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801119a:	9a05      	ldr	r2, [sp, #20]
 801119c:	9200      	str	r2, [sp, #0]
 801119e:	e894 0006 	ldmia.w	r4, {r1, r2}
 80111a2:	a806      	add	r0, sp, #24
 80111a4:	f7ff ffcb 	bl	801113e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 80111a8:	682b      	ldr	r3, [r5, #0]
 80111aa:	9806      	ldr	r0, [sp, #24]
 80111ac:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 80111ae:	68ab      	ldr	r3, [r5, #8]
 80111b0:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80111b4:	4798      	blx	r3
}
 80111b6:	b009      	add	sp, #36	@ 0x24
 80111b8:	bd30      	pop	{r4, r5, pc}
 80111ba:	bf00      	nop
 80111bc:	08011a7c 	.word	0x08011a7c

080111c0 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 80111c0:	b530      	push	{r4, r5, lr}
 80111c2:	b087      	sub	sp, #28
 80111c4:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80111c6:	2300      	movs	r3, #0
 80111c8:	9304      	str	r3, [sp, #16]
 80111ca:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 80111ce:	6003      	str	r3, [r0, #0]
 80111d0:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80111d2:	4d0b      	ldr	r5, [pc, #44]	@ (8011200 <SysTimeGet+0x40>)
 80111d4:	692b      	ldr	r3, [r5, #16]
 80111d6:	a805      	add	r0, sp, #20
 80111d8:	4798      	blx	r3
 80111da:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80111dc:	68eb      	ldr	r3, [r5, #12]
 80111de:	4798      	blx	r3
 80111e0:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80111e4:	686b      	ldr	r3, [r5, #4]
 80111e6:	4798      	blx	r3
 80111e8:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80111ea:	9b05      	ldr	r3, [sp, #20]
 80111ec:	9300      	str	r3, [sp, #0]
 80111ee:	9b04      	ldr	r3, [sp, #16]
 80111f0:	aa02      	add	r2, sp, #8
 80111f2:	ca06      	ldmia	r2, {r1, r2}
 80111f4:	4620      	mov	r0, r4
 80111f6:	f7ff ff83 	bl	8011100 <SysTimeAdd>

  return sysTime;
}
 80111fa:	4620      	mov	r0, r4
 80111fc:	b007      	add	sp, #28
 80111fe:	bd30      	pop	{r4, r5, pc}
 8011200:	08011a7c 	.word	0x08011a7c

08011204 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8011204:	b530      	push	{r4, r5, lr}
 8011206:	b083      	sub	sp, #12
 8011208:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801120a:	2300      	movs	r3, #0
 801120c:	9300      	str	r3, [sp, #0]
 801120e:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011212:	4b06      	ldr	r3, [pc, #24]	@ (801122c <SysTimeGetMcuTime+0x28>)
 8011214:	691b      	ldr	r3, [r3, #16]
 8011216:	466d      	mov	r5, sp
 8011218:	a801      	add	r0, sp, #4
 801121a:	4798      	blx	r3
 801121c:	9000      	str	r0, [sp, #0]

  return calendarTime;
 801121e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011222:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8011226:	4620      	mov	r0, r4
 8011228:	b003      	add	sp, #12
 801122a:	bd30      	pop	{r4, r5, pc}
 801122c:	08011a7c 	.word	0x08011a7c

08011230 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8011230:	b530      	push	{r4, r5, lr}
 8011232:	b089      	sub	sp, #36	@ 0x24
 8011234:	ac02      	add	r4, sp, #8
 8011236:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801123a:	4d0c      	ldr	r5, [pc, #48]	@ (801126c <SysTimeToMs+0x3c>)
 801123c:	68eb      	ldr	r3, [r5, #12]
 801123e:	4798      	blx	r3
 8011240:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011244:	686b      	ldr	r3, [r5, #4]
 8011246:	4798      	blx	r3
 8011248:	4603      	mov	r3, r0
 801124a:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801124c:	9a07      	ldr	r2, [sp, #28]
 801124e:	9200      	str	r2, [sp, #0]
 8011250:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011254:	a804      	add	r0, sp, #16
 8011256:	f7ff ff72 	bl	801113e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801125a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 801125e:	9a04      	ldr	r2, [sp, #16]
 8011260:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011264:	fb00 3002 	mla	r0, r0, r2, r3
 8011268:	b009      	add	sp, #36	@ 0x24
 801126a:	bd30      	pop	{r4, r5, pc}
 801126c:	08011a7c 	.word	0x08011a7c

08011270 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8011270:	b530      	push	{r4, r5, lr}
 8011272:	b087      	sub	sp, #28
 8011274:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8011276:	4b12      	ldr	r3, [pc, #72]	@ (80112c0 <SysTimeFromMs+0x50>)
 8011278:	fba3 2301 	umull	r2, r3, r3, r1
 801127c:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801127e:	9304      	str	r3, [sp, #16]
 8011280:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8011284:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011288:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 801128c:	f8ad 1014 	strh.w	r1, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8011290:	2300      	movs	r3, #0
 8011292:	9302      	str	r3, [sp, #8]
 8011294:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011296:	4d0b      	ldr	r5, [pc, #44]	@ (80112c4 <SysTimeFromMs+0x54>)
 8011298:	68eb      	ldr	r3, [r5, #12]
 801129a:	4798      	blx	r3
 801129c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80112a0:	686b      	ldr	r3, [r5, #4]
 80112a2:	4798      	blx	r3
 80112a4:	4603      	mov	r3, r0
 80112a6:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 80112a8:	9a03      	ldr	r2, [sp, #12]
 80112aa:	9200      	str	r2, [sp, #0]
 80112ac:	aa06      	add	r2, sp, #24
 80112ae:	e912 0006 	ldmdb	r2, {r1, r2}
 80112b2:	4620      	mov	r0, r4
 80112b4:	f7ff ff24 	bl	8011100 <SysTimeAdd>
}
 80112b8:	4620      	mov	r0, r4
 80112ba:	b007      	add	sp, #28
 80112bc:	bd30      	pop	{r4, r5, pc}
 80112be:	bf00      	nop
 80112c0:	10624dd3 	.word	0x10624dd3
 80112c4:	08011a7c 	.word	0x08011a7c

080112c8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80112c8:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80112ca:	4b03      	ldr	r3, [pc, #12]	@ (80112d8 <UTIL_TIMER_Init+0x10>)
 80112cc:	2200      	movs	r2, #0
 80112ce:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80112d0:	4b02      	ldr	r3, [pc, #8]	@ (80112dc <UTIL_TIMER_Init+0x14>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	4798      	blx	r3
}
 80112d6:	bd08      	pop	{r3, pc}
 80112d8:	20001848 	.word	0x20001848
 80112dc:	08011a90 	.word	0x08011a90

080112e0 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 80112e0:	b1a8      	cbz	r0, 801130e <UTIL_TIMER_Create+0x2e>
{
 80112e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112e4:	4617      	mov	r7, r2
 80112e6:	461e      	mov	r6, r3
 80112e8:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 80112ea:	b193      	cbz	r3, 8011312 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 80112ec:	2500      	movs	r5, #0
 80112ee:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80112f0:	4b09      	ldr	r3, [pc, #36]	@ (8011318 <UTIL_TIMER_Create+0x38>)
 80112f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112f4:	4608      	mov	r0, r1
 80112f6:	4798      	blx	r3
 80112f8:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 80112fa:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 80112fc:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80112fe:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8011300:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8011302:	9b06      	ldr	r3, [sp, #24]
 8011304:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8011306:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8011308:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 801130a:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 801130c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 801130e:	2001      	movs	r0, #1
}
 8011310:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8011312:	2001      	movs	r0, #1
 8011314:	e7fa      	b.n	801130c <UTIL_TIMER_Create+0x2c>
 8011316:	bf00      	nop
 8011318:	08011a90 	.word	0x08011a90

0801131c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801131c:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801131e:	4c03      	ldr	r4, [pc, #12]	@ (801132c <UTIL_TIMER_GetCurrentTime+0x10>)
 8011320:	69e3      	ldr	r3, [r4, #28]
 8011322:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8011324:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8011326:	4798      	blx	r3
}
 8011328:	bd10      	pop	{r4, pc}
 801132a:	bf00      	nop
 801132c:	08011a90 	.word	0x08011a90

08011330 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8011330:	b570      	push	{r4, r5, r6, lr}
 8011332:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8011334:	4d05      	ldr	r5, [pc, #20]	@ (801134c <UTIL_TIMER_GetElapsedTime+0x1c>)
 8011336:	69eb      	ldr	r3, [r5, #28]
 8011338:	4798      	blx	r3
 801133a:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801133c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801133e:	4630      	mov	r0, r6
 8011340:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8011342:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8011344:	1a20      	subs	r0, r4, r0
 8011346:	4798      	blx	r3
}
 8011348:	bd70      	pop	{r4, r5, r6, pc}
 801134a:	bf00      	nop
 801134c:	08011a90 	.word	0x08011a90

08011350 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011350:	4b05      	ldr	r3, [pc, #20]	@ (8011368 <TimerExists+0x18>)
 8011352:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8011354:	e000      	b.n	8011358 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8011356:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8011358:	b11b      	cbz	r3, 8011362 <TimerExists+0x12>
    if( cur == TimerObject )
 801135a:	4283      	cmp	r3, r0
 801135c:	d1fb      	bne.n	8011356 <TimerExists+0x6>
      return true;
 801135e:	2001      	movs	r0, #1
  }
  return false;
}
 8011360:	4770      	bx	lr
  return false;
 8011362:	2000      	movs	r0, #0
 8011364:	4770      	bx	lr
 8011366:	bf00      	nop
 8011368:	20001848 	.word	0x20001848

0801136c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801136c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801136e:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8011370:	4e09      	ldr	r6, [pc, #36]	@ (8011398 <TimerSetTimeout+0x2c>)
 8011372:	6a33      	ldr	r3, [r6, #32]
 8011374:	4798      	blx	r3
 8011376:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8011378:	2301      	movs	r3, #1
 801137a:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801137c:	6827      	ldr	r7, [r4, #0]
 801137e:	69b6      	ldr	r6, [r6, #24]
 8011380:	47b0      	blx	r6
 8011382:	4428      	add	r0, r5
 8011384:	4287      	cmp	r7, r0
 8011386:	d202      	bcs.n	801138e <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8011388:	47b0      	blx	r6
 801138a:	4428      	add	r0, r5
 801138c:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801138e:	4b02      	ldr	r3, [pc, #8]	@ (8011398 <TimerSetTimeout+0x2c>)
 8011390:	689b      	ldr	r3, [r3, #8]
 8011392:	6820      	ldr	r0, [r4, #0]
 8011394:	4798      	blx	r3
}
 8011396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011398:	08011a90 	.word	0x08011a90

0801139c <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 801139c:	b368      	cbz	r0, 80113fa <UTIL_TIMER_Stop+0x5e>
{
 801139e:	b510      	push	{r4, lr}
 80113a0:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113a2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80113a6:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80113a8:	4b15      	ldr	r3, [pc, #84]	@ (8011400 <UTIL_TIMER_Stop+0x64>)
 80113aa:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 80113ac:	2301      	movs	r3, #1
 80113ae:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 80113b0:	b1e1      	cbz	r1, 80113ec <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 80113b2:	2300      	movs	r3, #0
 80113b4:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80113b6:	4288      	cmp	r0, r1
 80113b8:	d006      	beq.n	80113c8 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 80113ba:	460b      	mov	r3, r1
        while( cur != NULL )
 80113bc:	b1b3      	cbz	r3, 80113ec <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 80113be:	4293      	cmp	r3, r2
 80113c0:	d011      	beq.n	80113e6 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 80113c2:	4619      	mov	r1, r3
            cur = cur->Next;
 80113c4:	695b      	ldr	r3, [r3, #20]
 80113c6:	e7f9      	b.n	80113bc <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 80113c8:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 80113ca:	6948      	ldr	r0, [r1, #20]
 80113cc:	b120      	cbz	r0, 80113d8 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 80113ce:	4b0c      	ldr	r3, [pc, #48]	@ (8011400 <UTIL_TIMER_Stop+0x64>)
 80113d0:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 80113d2:	f7ff ffcb 	bl	801136c <TimerSetTimeout>
 80113d6:	e009      	b.n	80113ec <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 80113d8:	4b0a      	ldr	r3, [pc, #40]	@ (8011404 <UTIL_TIMER_Stop+0x68>)
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	4798      	blx	r3
            TimerListHead = NULL;
 80113de:	4b08      	ldr	r3, [pc, #32]	@ (8011400 <UTIL_TIMER_Stop+0x64>)
 80113e0:	2200      	movs	r2, #0
 80113e2:	601a      	str	r2, [r3, #0]
 80113e4:	e002      	b.n	80113ec <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 80113e6:	695b      	ldr	r3, [r3, #20]
 80113e8:	b123      	cbz	r3, 80113f4 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 80113ea:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113ec:	f384 8810 	msr	PRIMASK, r4
}
 80113f0:	2000      	movs	r0, #0
}
 80113f2:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 80113f4:	2300      	movs	r3, #0
 80113f6:	614b      	str	r3, [r1, #20]
 80113f8:	e7f8      	b.n	80113ec <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 80113fa:	2001      	movs	r0, #1
}
 80113fc:	4770      	bx	lr
 80113fe:	bf00      	nop
 8011400:	20001848 	.word	0x20001848
 8011404:	08011a90 	.word	0x08011a90

08011408 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011408:	4b09      	ldr	r3, [pc, #36]	@ (8011430 <TimerInsertTimer+0x28>)
 801140a:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801140c:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 801140e:	e001      	b.n	8011414 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8011410:	461a      	mov	r2, r3
        next = next->Next;
 8011412:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8011414:	6951      	ldr	r1, [r2, #20]
 8011416:	b139      	cbz	r1, 8011428 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8011418:	6819      	ldr	r1, [r3, #0]
 801141a:	f8d0 c000 	ldr.w	ip, [r0]
 801141e:	458c      	cmp	ip, r1
 8011420:	d8f6      	bhi.n	8011410 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8011422:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8011424:	6143      	str	r3, [r0, #20]
        return;
 8011426:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8011428:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 801142a:	2300      	movs	r3, #0
 801142c:	6143      	str	r3, [r0, #20]
}
 801142e:	4770      	bx	lr
 8011430:	20001848 	.word	0x20001848

08011434 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8011434:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011436:	4b05      	ldr	r3, [pc, #20]	@ (801144c <TimerInsertNewHeadTimer+0x18>)
 8011438:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 801143a:	b10b      	cbz	r3, 8011440 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 801143c:	2200      	movs	r2, #0
 801143e:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8011440:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8011442:	4b02      	ldr	r3, [pc, #8]	@ (801144c <TimerInsertNewHeadTimer+0x18>)
 8011444:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8011446:	f7ff ff91 	bl	801136c <TimerSetTimeout>
}
 801144a:	bd08      	pop	{r3, pc}
 801144c:	20001848 	.word	0x20001848

08011450 <UTIL_TIMER_Start>:
{
 8011450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8011452:	2800      	cmp	r0, #0
 8011454:	d036      	beq.n	80114c4 <UTIL_TIMER_Start+0x74>
 8011456:	4604      	mov	r4, r0
 8011458:	f7ff ff7a 	bl	8011350 <TimerExists>
 801145c:	2800      	cmp	r0, #0
 801145e:	d134      	bne.n	80114ca <UTIL_TIMER_Start+0x7a>
 8011460:	7a65      	ldrb	r5, [r4, #9]
 8011462:	2d00      	cmp	r5, #0
 8011464:	d133      	bne.n	80114ce <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011466:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801146a:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 801146c:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801146e:	4b19      	ldr	r3, [pc, #100]	@ (80114d4 <UTIL_TIMER_Start+0x84>)
 8011470:	6a1b      	ldr	r3, [r3, #32]
 8011472:	4798      	blx	r3
    if( ticks < minValue )
 8011474:	4287      	cmp	r7, r0
 8011476:	d300      	bcc.n	801147a <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8011478:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 801147a:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 801147c:	2300      	movs	r3, #0
 801147e:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8011480:	2201      	movs	r2, #1
 8011482:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8011484:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8011486:	4b14      	ldr	r3, [pc, #80]	@ (80114d8 <UTIL_TIMER_Start+0x88>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	b183      	cbz	r3, 80114ae <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801148c:	4b11      	ldr	r3, [pc, #68]	@ (80114d4 <UTIL_TIMER_Start+0x84>)
 801148e:	699b      	ldr	r3, [r3, #24]
 8011490:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8011492:	6823      	ldr	r3, [r4, #0]
 8011494:	4418      	add	r0, r3
 8011496:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8011498:	4b0f      	ldr	r3, [pc, #60]	@ (80114d8 <UTIL_TIMER_Start+0x88>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	4298      	cmp	r0, r3
 80114a0:	d20c      	bcs.n	80114bc <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 80114a2:	4620      	mov	r0, r4
 80114a4:	f7ff ffc6 	bl	8011434 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114a8:	f386 8810 	msr	PRIMASK, r6
}
 80114ac:	e00b      	b.n	80114c6 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 80114ae:	4b09      	ldr	r3, [pc, #36]	@ (80114d4 <UTIL_TIMER_Start+0x84>)
 80114b0:	691b      	ldr	r3, [r3, #16]
 80114b2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80114b4:	4620      	mov	r0, r4
 80114b6:	f7ff ffbd 	bl	8011434 <TimerInsertNewHeadTimer>
 80114ba:	e7f5      	b.n	80114a8 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 80114bc:	4620      	mov	r0, r4
 80114be:	f7ff ffa3 	bl	8011408 <TimerInsertTimer>
 80114c2:	e7f1      	b.n	80114a8 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 80114c4:	2501      	movs	r5, #1
}
 80114c6:	4628      	mov	r0, r5
 80114c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 80114ca:	2501      	movs	r5, #1
 80114cc:	e7fb      	b.n	80114c6 <UTIL_TIMER_Start+0x76>
 80114ce:	2501      	movs	r5, #1
 80114d0:	e7f9      	b.n	80114c6 <UTIL_TIMER_Start+0x76>
 80114d2:	bf00      	nop
 80114d4:	08011a90 	.word	0x08011a90
 80114d8:	20001848 	.word	0x20001848

080114dc <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 80114dc:	b198      	cbz	r0, 8011506 <UTIL_TIMER_SetPeriod+0x2a>
{
 80114de:	b510      	push	{r4, lr}
 80114e0:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80114e2:	4b0a      	ldr	r3, [pc, #40]	@ (801150c <UTIL_TIMER_SetPeriod+0x30>)
 80114e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114e6:	4608      	mov	r0, r1
 80114e8:	4798      	blx	r3
 80114ea:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80114ec:	4620      	mov	r0, r4
 80114ee:	f7ff ff2f 	bl	8011350 <TimerExists>
 80114f2:	b908      	cbnz	r0, 80114f8 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80114f4:	2000      	movs	r0, #0
}
 80114f6:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 80114f8:	4620      	mov	r0, r4
 80114fa:	f7ff ff4f 	bl	801139c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80114fe:	4620      	mov	r0, r4
 8011500:	f7ff ffa6 	bl	8011450 <UTIL_TIMER_Start>
 8011504:	e7f7      	b.n	80114f6 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8011506:	2001      	movs	r0, #1
}
 8011508:	4770      	bx	lr
 801150a:	bf00      	nop
 801150c:	08011a90 	.word	0x08011a90

08011510 <UTIL_TIMER_IRQ_Handler>:
{
 8011510:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011512:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011516:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8011518:	4c1e      	ldr	r4, [pc, #120]	@ (8011594 <UTIL_TIMER_IRQ_Handler+0x84>)
 801151a:	6963      	ldr	r3, [r4, #20]
 801151c:	4798      	blx	r3
 801151e:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8011520:	6923      	ldr	r3, [r4, #16]
 8011522:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8011524:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8011526:	4b1c      	ldr	r3, [pc, #112]	@ (8011598 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	b923      	cbnz	r3, 8011536 <UTIL_TIMER_IRQ_Handler+0x26>
 801152c:	e018      	b.n	8011560 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 801152e:	2200      	movs	r2, #0
 8011530:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8011532:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8011534:	b1a3      	cbz	r3, 8011560 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8011536:	681a      	ldr	r2, [r3, #0]
 8011538:	42a2      	cmp	r2, r4
 801153a:	d9f8      	bls.n	801152e <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 801153c:	1a31      	subs	r1, r6, r0
 801153e:	440a      	add	r2, r1
 8011540:	601a      	str	r2, [r3, #0]
 8011542:	e7f6      	b.n	8011532 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8011544:	4b14      	ldr	r3, [pc, #80]	@ (8011598 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011546:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8011548:	6962      	ldr	r2, [r4, #20]
 801154a:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 801154c:	2300      	movs	r3, #0
 801154e:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8011550:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8011552:	68e3      	ldr	r3, [r4, #12]
 8011554:	6920      	ldr	r0, [r4, #16]
 8011556:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8011558:	8963      	ldrh	r3, [r4, #10]
 801155a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801155e:	d012      	beq.n	8011586 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8011560:	4b0d      	ldr	r3, [pc, #52]	@ (8011598 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	b13b      	cbz	r3, 8011576 <UTIL_TIMER_IRQ_Handler+0x66>
 8011566:	681c      	ldr	r4, [r3, #0]
 8011568:	2c00      	cmp	r4, #0
 801156a:	d0eb      	beq.n	8011544 <UTIL_TIMER_IRQ_Handler+0x34>
 801156c:	4b09      	ldr	r3, [pc, #36]	@ (8011594 <UTIL_TIMER_IRQ_Handler+0x84>)
 801156e:	699b      	ldr	r3, [r3, #24]
 8011570:	4798      	blx	r3
 8011572:	4284      	cmp	r4, r0
 8011574:	d3e6      	bcc.n	8011544 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8011576:	4b08      	ldr	r3, [pc, #32]	@ (8011598 <UTIL_TIMER_IRQ_Handler+0x88>)
 8011578:	6818      	ldr	r0, [r3, #0]
 801157a:	b108      	cbz	r0, 8011580 <UTIL_TIMER_IRQ_Handler+0x70>
 801157c:	7a03      	ldrb	r3, [r0, #8]
 801157e:	b133      	cbz	r3, 801158e <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011580:	f385 8810 	msr	PRIMASK, r5
}
 8011584:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8011586:	4620      	mov	r0, r4
 8011588:	f7ff ff62 	bl	8011450 <UTIL_TIMER_Start>
 801158c:	e7e8      	b.n	8011560 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 801158e:	f7ff feed 	bl	801136c <TimerSetTimeout>
 8011592:	e7f5      	b.n	8011580 <UTIL_TIMER_IRQ_Handler+0x70>
 8011594:	08011a90 	.word	0x08011a90
 8011598:	20001848 	.word	0x20001848

0801159c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801159c:	4601      	mov	r1, r0
  int i = 0;
 801159e:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80115a0:	e008      	b.n	80115b4 <ee_skip_atoi+0x18>
 80115a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80115a6:	1c53      	adds	r3, r2, #1
 80115a8:	600b      	str	r3, [r1, #0]
 80115aa:	7813      	ldrb	r3, [r2, #0]
 80115ac:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80115b0:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 80115b4:	680a      	ldr	r2, [r1, #0]
 80115b6:	7813      	ldrb	r3, [r2, #0]
 80115b8:	3b30      	subs	r3, #48	@ 0x30
 80115ba:	b2db      	uxtb	r3, r3
 80115bc:	2b09      	cmp	r3, #9
 80115be:	d9f0      	bls.n	80115a2 <ee_skip_atoi+0x6>
  return i;
}
 80115c0:	4770      	bx	lr
	...

080115c4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80115c4:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 80115c8:	b093      	sub	sp, #76	@ 0x4c
 80115ca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80115cc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 80115ce:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80115d2:	d110      	bne.n	80115f6 <ee_number+0x32>
  char *dig = lower_digits;
 80115d4:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 80116d0 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80115d8:	1e9f      	subs	r7, r3, #2
 80115da:	2f22      	cmp	r7, #34	@ 0x22
 80115dc:	d875      	bhi.n	80116ca <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 80115de:	f016 0401 	ands.w	r4, r6, #1
 80115e2:	d00b      	beq.n	80115fc <ee_number+0x38>
 80115e4:	f04f 0e30 	mov.w	lr, #48	@ 0x30
  sign = 0;
  if (type & SIGN)
 80115e8:	f016 0f02 	tst.w	r6, #2
 80115ec:	d00f      	beq.n	801160e <ee_number+0x4a>
  {
    if (num < 0)
 80115ee:	2a00      	cmp	r2, #0
 80115f0:	db07      	blt.n	8011602 <ee_number+0x3e>
  sign = 0;
 80115f2:	2700      	movs	r7, #0
 80115f4:	e00c      	b.n	8011610 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 80115f6:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 80116d4 <ee_number+0x110>
 80115fa:	e7ed      	b.n	80115d8 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80115fc:	f04f 0e20 	mov.w	lr, #32
 8011600:	e7f2      	b.n	80115e8 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8011602:	4252      	negs	r2, r2
      size--;
 8011604:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8011606:	3e01      	subs	r6, #1
 8011608:	961a      	str	r6, [sp, #104]	@ 0x68
      sign = '-';
 801160a:	272d      	movs	r7, #45	@ 0x2d
 801160c:	e000      	b.n	8011610 <ee_number+0x4c>
  sign = 0;
 801160e:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8011610:	bb5a      	cbnz	r2, 801166a <ee_number+0xa6>
    tmp[i++] = '0';
 8011612:	2330      	movs	r3, #48	@ 0x30
 8011614:	f88d 3004 	strb.w	r3, [sp, #4]
 8011618:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 801161c:	45ac      	cmp	ip, r5
 801161e:	dd00      	ble.n	8011622 <ee_number+0x5e>
 8011620:	4665      	mov	r5, ip
  size -= precision;
 8011622:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011624:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8011626:	b31c      	cbz	r4, 8011670 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8011628:	b11f      	cbz	r7, 8011632 <ee_number+0x6e>
 801162a:	f800 7b01 	strb.w	r7, [r0], #1
 801162e:	3901      	subs	r1, #1
 8011630:	d007      	beq.n	8011642 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8011632:	2b00      	cmp	r3, #0
 8011634:	f103 33ff 	add.w	r3, r3, #4294967295
 8011638:	dd24      	ble.n	8011684 <ee_number+0xc0>
 801163a:	f800 eb01 	strb.w	lr, [r0], #1
 801163e:	3901      	subs	r1, #1
 8011640:	d1f7      	bne.n	8011632 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8011642:	b013      	add	sp, #76	@ 0x4c
 8011644:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8011648:	fbb2 f6f3 	udiv	r6, r2, r3
 801164c:	fb03 2216 	mls	r2, r3, r6, r2
 8011650:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8011654:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 8011658:	446a      	add	r2, sp
 801165a:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 801165e:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8011660:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8011664:	2a00      	cmp	r2, #0
 8011666:	d1ef      	bne.n	8011648 <ee_number+0x84>
 8011668:	e7d8      	b.n	801161c <ee_number+0x58>
  i = 0;
 801166a:	f04f 0c00 	mov.w	ip, #0
 801166e:	e7f9      	b.n	8011664 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8011670:	2b00      	cmp	r3, #0
 8011672:	f103 33ff 	add.w	r3, r3, #4294967295
 8011676:	ddd7      	ble.n	8011628 <ee_number+0x64>
 8011678:	2220      	movs	r2, #32
 801167a:	f800 2b01 	strb.w	r2, [r0], #1
 801167e:	3901      	subs	r1, #1
 8011680:	d1f6      	bne.n	8011670 <ee_number+0xac>
 8011682:	e7de      	b.n	8011642 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8011684:	4565      	cmp	r5, ip
 8011686:	f105 35ff 	add.w	r5, r5, #4294967295
 801168a:	dd05      	ble.n	8011698 <ee_number+0xd4>
 801168c:	2230      	movs	r2, #48	@ 0x30
 801168e:	f800 2b01 	strb.w	r2, [r0], #1
 8011692:	3901      	subs	r1, #1
 8011694:	d1f6      	bne.n	8011684 <ee_number+0xc0>
 8011696:	e7d4      	b.n	8011642 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8011698:	4662      	mov	r2, ip
 801169a:	2a00      	cmp	r2, #0
 801169c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80116a0:	dd09      	ble.n	80116b6 <ee_number+0xf2>
 80116a2:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 80116a6:	446a      	add	r2, sp
 80116a8:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 80116ac:	f800 2b01 	strb.w	r2, [r0], #1
 80116b0:	3901      	subs	r1, #1
 80116b2:	d1f1      	bne.n	8011698 <ee_number+0xd4>
 80116b4:	e7c5      	b.n	8011642 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	f103 33ff 	add.w	r3, r3, #4294967295
 80116bc:	ddc1      	ble.n	8011642 <ee_number+0x7e>
 80116be:	2220      	movs	r2, #32
 80116c0:	f800 2b01 	strb.w	r2, [r0], #1
 80116c4:	3901      	subs	r1, #1
 80116c6:	d1f6      	bne.n	80116b6 <ee_number+0xf2>
 80116c8:	e7bb      	b.n	8011642 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 80116ca:	2000      	movs	r0, #0
 80116cc:	e7b9      	b.n	8011642 <ee_number+0x7e>
 80116ce:	bf00      	nop
 80116d0:	08012820 	.word	0x08012820
 80116d4:	08012848 	.word	0x08012848

080116d8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80116d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116dc:	b087      	sub	sp, #28
 80116de:	9205      	str	r2, [sp, #20]
 80116e0:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80116e2:	1e0f      	subs	r7, r1, #0
 80116e4:	f340 80b8 	ble.w	8011858 <tiny_vsnprintf_like+0x180>
 80116e8:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80116ea:	4604      	mov	r4, r0
 80116ec:	e004      	b.n	80116f8 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 80116ee:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80116f2:	9b05      	ldr	r3, [sp, #20]
 80116f4:	3301      	adds	r3, #1
 80116f6:	9305      	str	r3, [sp, #20]
 80116f8:	9905      	ldr	r1, [sp, #20]
 80116fa:	780a      	ldrb	r2, [r1, #0]
 80116fc:	b922      	cbnz	r2, 8011708 <tiny_vsnprintf_like+0x30>
 80116fe:	1ba3      	subs	r3, r4, r6
 8011700:	1e78      	subs	r0, r7, #1
 8011702:	4283      	cmp	r3, r0
 8011704:	f2c0 80a2 	blt.w	801184c <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8011708:	1ba3      	subs	r3, r4, r6
 801170a:	f107 38ff 	add.w	r8, r7, #4294967295
 801170e:	4543      	cmp	r3, r8
 8011710:	f280 809c 	bge.w	801184c <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8011714:	2a25      	cmp	r2, #37	@ 0x25
 8011716:	d1ea      	bne.n	80116ee <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8011718:	1c4b      	adds	r3, r1, #1
 801171a:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 801171c:	784b      	ldrb	r3, [r1, #1]
 801171e:	2b30      	cmp	r3, #48	@ 0x30
 8011720:	d020      	beq.n	8011764 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8011722:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8011726:	3b30      	subs	r3, #48	@ 0x30
 8011728:	b2db      	uxtb	r3, r3
 801172a:	2b09      	cmp	r3, #9
 801172c:	d91d      	bls.n	801176a <tiny_vsnprintf_like+0x92>
    field_width = -1;
 801172e:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8011732:	9b05      	ldr	r3, [sp, #20]
 8011734:	781a      	ldrb	r2, [r3, #0]
 8011736:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 801173a:	2b20      	cmp	r3, #32
 801173c:	d867      	bhi.n	801180e <tiny_vsnprintf_like+0x136>
 801173e:	e8df f003 	tbb	[pc, r3]
 8011742:	664a      	.short	0x664a
 8011744:	66666666 	.word	0x66666666
 8011748:	66666666 	.word	0x66666666
 801174c:	66621e66 	.word	0x66621e66
 8011750:	62666666 	.word	0x62666666
 8011754:	66666666 	.word	0x66666666
 8011758:	66666666 	.word	0x66666666
 801175c:	19662866 	.word	0x19662866
 8011760:	6666      	.short	0x6666
 8011762:	7c          	.byte	0x7c
 8011763:	00          	.byte	0x00
      flags |= ZEROPAD;
 8011764:	f04f 0901 	mov.w	r9, #1
 8011768:	e7dd      	b.n	8011726 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 801176a:	a805      	add	r0, sp, #20
 801176c:	f7ff ff16 	bl	801159c <ee_skip_atoi>
 8011770:	4605      	mov	r5, r0
 8011772:	e7de      	b.n	8011732 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8011774:	230a      	movs	r3, #10
 8011776:	e031      	b.n	80117dc <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8011778:	2320      	movs	r3, #32
 801177a:	f804 3b01 	strb.w	r3, [r4], #1
 801177e:	3d01      	subs	r5, #1
 8011780:	2d00      	cmp	r5, #0
 8011782:	dcf9      	bgt.n	8011778 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8011784:	9b04      	ldr	r3, [sp, #16]
 8011786:	1d1a      	adds	r2, r3, #4
 8011788:	9204      	str	r2, [sp, #16]
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8011790:	e7af      	b.n	80116f2 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8011792:	9b04      	ldr	r3, [sp, #16]
 8011794:	1d1a      	adds	r2, r3, #4
 8011796:	9204      	str	r2, [sp, #16]
 8011798:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 801179c:	f1b8 0f00 	cmp.w	r8, #0
 80117a0:	d003      	beq.n	80117aa <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 80117a2:	4640      	mov	r0, r8
 80117a4:	f7ee fce8 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 80117a8:	e006      	b.n	80117b8 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 80117aa:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 801185c <tiny_vsnprintf_like+0x184>
 80117ae:	e7f8      	b.n	80117a2 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 80117b0:	2220      	movs	r2, #32
 80117b2:	f804 2b01 	strb.w	r2, [r4], #1
 80117b6:	461d      	mov	r5, r3
 80117b8:	1e6b      	subs	r3, r5, #1
 80117ba:	4285      	cmp	r5, r0
 80117bc:	dcf8      	bgt.n	80117b0 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80117be:	2200      	movs	r2, #0
 80117c0:	e006      	b.n	80117d0 <tiny_vsnprintf_like+0xf8>
 80117c2:	4643      	mov	r3, r8
 80117c4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80117c8:	f804 1b01 	strb.w	r1, [r4], #1
 80117cc:	3201      	adds	r2, #1
 80117ce:	4698      	mov	r8, r3
 80117d0:	4282      	cmp	r2, r0
 80117d2:	dbf6      	blt.n	80117c2 <tiny_vsnprintf_like+0xea>
 80117d4:	e78d      	b.n	80116f2 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 80117d6:	f049 0940 	orr.w	r9, r9, #64	@ 0x40

      case 'x':
        base = 16;
 80117da:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 80117dc:	f019 0f02 	tst.w	r9, #2
 80117e0:	d02f      	beq.n	8011842 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 80117e2:	9a04      	ldr	r2, [sp, #16]
 80117e4:	1d11      	adds	r1, r2, #4
 80117e6:	9104      	str	r1, [sp, #16]
 80117e8:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80117ea:	1ba1      	subs	r1, r4, r6
 80117ec:	f8cd 9008 	str.w	r9, [sp, #8]
 80117f0:	f04f 30ff 	mov.w	r0, #4294967295
 80117f4:	9001      	str	r0, [sp, #4]
 80117f6:	9500      	str	r5, [sp, #0]
 80117f8:	eba8 0101 	sub.w	r1, r8, r1
 80117fc:	4620      	mov	r0, r4
 80117fe:	f7ff fee1 	bl	80115c4 <ee_number>
 8011802:	4604      	mov	r4, r0
 8011804:	e775      	b.n	80116f2 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8011806:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 801180a:	230a      	movs	r3, #10
 801180c:	e7e6      	b.n	80117dc <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 801180e:	2a25      	cmp	r2, #37	@ 0x25
 8011810:	d002      	beq.n	8011818 <tiny_vsnprintf_like+0x140>
 8011812:	2325      	movs	r3, #37	@ 0x25
 8011814:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8011818:	1ba3      	subs	r3, r4, r6
 801181a:	4598      	cmp	r8, r3
 801181c:	dd0f      	ble.n	801183e <tiny_vsnprintf_like+0x166>
        if (*fmt)
 801181e:	9b05      	ldr	r3, [sp, #20]
 8011820:	781a      	ldrb	r2, [r3, #0]
 8011822:	b13a      	cbz	r2, 8011834 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8011824:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8011828:	1ba3      	subs	r3, r4, r6
 801182a:	4598      	cmp	r8, r3
 801182c:	f73f af61 	bgt.w	80116f2 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8011830:	230a      	movs	r3, #10
 8011832:	e7d3      	b.n	80117dc <tiny_vsnprintf_like+0x104>
          --fmt;
 8011834:	3b01      	subs	r3, #1
 8011836:	9305      	str	r3, [sp, #20]
 8011838:	e7f6      	b.n	8011828 <tiny_vsnprintf_like+0x150>
        base = 16;
 801183a:	2310      	movs	r3, #16
 801183c:	e7ce      	b.n	80117dc <tiny_vsnprintf_like+0x104>
    base = 10;
 801183e:	230a      	movs	r3, #10
 8011840:	e7cc      	b.n	80117dc <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8011842:	9a04      	ldr	r2, [sp, #16]
 8011844:	1d11      	adds	r1, r2, #4
 8011846:	9104      	str	r1, [sp, #16]
 8011848:	6812      	ldr	r2, [r2, #0]
 801184a:	e7ce      	b.n	80117ea <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 801184c:	2300      	movs	r3, #0
 801184e:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8011850:	1ba0      	subs	r0, r4, r6
}
 8011852:	b007      	add	sp, #28
 8011854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8011858:	2000      	movs	r0, #0
 801185a:	e7fa      	b.n	8011852 <tiny_vsnprintf_like+0x17a>
 801185c:	08012870 	.word	0x08012870

08011860 <memset>:
 8011860:	4402      	add	r2, r0
 8011862:	4603      	mov	r3, r0
 8011864:	4293      	cmp	r3, r2
 8011866:	d100      	bne.n	801186a <memset+0xa>
 8011868:	4770      	bx	lr
 801186a:	f803 1b01 	strb.w	r1, [r3], #1
 801186e:	e7f9      	b.n	8011864 <memset+0x4>

08011870 <__libc_init_array>:
 8011870:	b570      	push	{r4, r5, r6, lr}
 8011872:	4d0d      	ldr	r5, [pc, #52]	@ (80118a8 <__libc_init_array+0x38>)
 8011874:	4c0d      	ldr	r4, [pc, #52]	@ (80118ac <__libc_init_array+0x3c>)
 8011876:	1b64      	subs	r4, r4, r5
 8011878:	10a4      	asrs	r4, r4, #2
 801187a:	2600      	movs	r6, #0
 801187c:	42a6      	cmp	r6, r4
 801187e:	d109      	bne.n	8011894 <__libc_init_array+0x24>
 8011880:	4d0b      	ldr	r5, [pc, #44]	@ (80118b0 <__libc_init_array+0x40>)
 8011882:	4c0c      	ldr	r4, [pc, #48]	@ (80118b4 <__libc_init_array+0x44>)
 8011884:	f000 f898 	bl	80119b8 <_init>
 8011888:	1b64      	subs	r4, r4, r5
 801188a:	10a4      	asrs	r4, r4, #2
 801188c:	2600      	movs	r6, #0
 801188e:	42a6      	cmp	r6, r4
 8011890:	d105      	bne.n	801189e <__libc_init_array+0x2e>
 8011892:	bd70      	pop	{r4, r5, r6, pc}
 8011894:	f855 3b04 	ldr.w	r3, [r5], #4
 8011898:	4798      	blx	r3
 801189a:	3601      	adds	r6, #1
 801189c:	e7ee      	b.n	801187c <__libc_init_array+0xc>
 801189e:	f855 3b04 	ldr.w	r3, [r5], #4
 80118a2:	4798      	blx	r3
 80118a4:	3601      	adds	r6, #1
 80118a6:	e7f2      	b.n	801188e <__libc_init_array+0x1e>
 80118a8:	08012880 	.word	0x08012880
 80118ac:	08012880 	.word	0x08012880
 80118b0:	08012880 	.word	0x08012880
 80118b4:	08012884 	.word	0x08012884

080118b8 <floor>:
 80118b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118bc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80118c0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80118c4:	2e13      	cmp	r6, #19
 80118c6:	4602      	mov	r2, r0
 80118c8:	460b      	mov	r3, r1
 80118ca:	460c      	mov	r4, r1
 80118cc:	4605      	mov	r5, r0
 80118ce:	4680      	mov	r8, r0
 80118d0:	dc35      	bgt.n	801193e <floor+0x86>
 80118d2:	2e00      	cmp	r6, #0
 80118d4:	da17      	bge.n	8011906 <floor+0x4e>
 80118d6:	a334      	add	r3, pc, #208	@ (adr r3, 80119a8 <floor+0xf0>)
 80118d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118dc:	f7ee fc5a 	bl	8000194 <__adddf3>
 80118e0:	2200      	movs	r2, #0
 80118e2:	2300      	movs	r3, #0
 80118e4:	f7ee fe8a 	bl	80005fc <__aeabi_dcmpgt>
 80118e8:	b150      	cbz	r0, 8011900 <floor+0x48>
 80118ea:	2c00      	cmp	r4, #0
 80118ec:	da57      	bge.n	801199e <floor+0xe6>
 80118ee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80118f2:	432c      	orrs	r4, r5
 80118f4:	2500      	movs	r5, #0
 80118f6:	42ac      	cmp	r4, r5
 80118f8:	4c2d      	ldr	r4, [pc, #180]	@ (80119b0 <floor+0xf8>)
 80118fa:	bf08      	it	eq
 80118fc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8011900:	4623      	mov	r3, r4
 8011902:	462a      	mov	r2, r5
 8011904:	e024      	b.n	8011950 <floor+0x98>
 8011906:	4f2b      	ldr	r7, [pc, #172]	@ (80119b4 <floor+0xfc>)
 8011908:	4137      	asrs	r7, r6
 801190a:	ea01 0c07 	and.w	ip, r1, r7
 801190e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8011912:	d01d      	beq.n	8011950 <floor+0x98>
 8011914:	a324      	add	r3, pc, #144	@ (adr r3, 80119a8 <floor+0xf0>)
 8011916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801191a:	f7ee fc3b 	bl	8000194 <__adddf3>
 801191e:	2200      	movs	r2, #0
 8011920:	2300      	movs	r3, #0
 8011922:	f7ee fe6b 	bl	80005fc <__aeabi_dcmpgt>
 8011926:	2800      	cmp	r0, #0
 8011928:	d0ea      	beq.n	8011900 <floor+0x48>
 801192a:	2c00      	cmp	r4, #0
 801192c:	bfbe      	ittt	lt
 801192e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8011932:	4133      	asrlt	r3, r6
 8011934:	18e4      	addlt	r4, r4, r3
 8011936:	ea24 0407 	bic.w	r4, r4, r7
 801193a:	2500      	movs	r5, #0
 801193c:	e7e0      	b.n	8011900 <floor+0x48>
 801193e:	2e33      	cmp	r6, #51	@ 0x33
 8011940:	dd0a      	ble.n	8011958 <floor+0xa0>
 8011942:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8011946:	d103      	bne.n	8011950 <floor+0x98>
 8011948:	f7ee fc24 	bl	8000194 <__adddf3>
 801194c:	4602      	mov	r2, r0
 801194e:	460b      	mov	r3, r1
 8011950:	4610      	mov	r0, r2
 8011952:	4619      	mov	r1, r3
 8011954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011958:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801195c:	f04f 3cff 	mov.w	ip, #4294967295
 8011960:	fa2c f707 	lsr.w	r7, ip, r7
 8011964:	4207      	tst	r7, r0
 8011966:	d0f3      	beq.n	8011950 <floor+0x98>
 8011968:	a30f      	add	r3, pc, #60	@ (adr r3, 80119a8 <floor+0xf0>)
 801196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801196e:	f7ee fc11 	bl	8000194 <__adddf3>
 8011972:	2200      	movs	r2, #0
 8011974:	2300      	movs	r3, #0
 8011976:	f7ee fe41 	bl	80005fc <__aeabi_dcmpgt>
 801197a:	2800      	cmp	r0, #0
 801197c:	d0c0      	beq.n	8011900 <floor+0x48>
 801197e:	2c00      	cmp	r4, #0
 8011980:	da0a      	bge.n	8011998 <floor+0xe0>
 8011982:	2e14      	cmp	r6, #20
 8011984:	d101      	bne.n	801198a <floor+0xd2>
 8011986:	3401      	adds	r4, #1
 8011988:	e006      	b.n	8011998 <floor+0xe0>
 801198a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801198e:	2301      	movs	r3, #1
 8011990:	40b3      	lsls	r3, r6
 8011992:	441d      	add	r5, r3
 8011994:	4545      	cmp	r5, r8
 8011996:	d3f6      	bcc.n	8011986 <floor+0xce>
 8011998:	ea25 0507 	bic.w	r5, r5, r7
 801199c:	e7b0      	b.n	8011900 <floor+0x48>
 801199e:	2500      	movs	r5, #0
 80119a0:	462c      	mov	r4, r5
 80119a2:	e7ad      	b.n	8011900 <floor+0x48>
 80119a4:	f3af 8000 	nop.w
 80119a8:	8800759c 	.word	0x8800759c
 80119ac:	7e37e43c 	.word	0x7e37e43c
 80119b0:	bff00000 	.word	0xbff00000
 80119b4:	000fffff 	.word	0x000fffff

080119b8 <_init>:
 80119b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ba:	bf00      	nop
 80119bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119be:	bc08      	pop	{r3}
 80119c0:	469e      	mov	lr, r3
 80119c2:	4770      	bx	lr

080119c4 <_fini>:
 80119c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119c6:	bf00      	nop
 80119c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119ca:	bc08      	pop	{r3}
 80119cc:	469e      	mov	lr, r3
 80119ce:	4770      	bx	lr
