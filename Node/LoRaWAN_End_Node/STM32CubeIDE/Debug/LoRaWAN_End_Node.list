
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b80  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001030  08012cb8  08012cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ce8  08013ce8  000155d8  2**0
                  CONTENTS
  4 .ARM          00000008  08013ce8  08013ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013cf0  08013cf0  000155d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013cf0  08013cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08013cf8  08013cf8  00014cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000128  20000000  08013d00  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000000  20008000  20008000  000155d8  2**0
                  CONTENTS
 11 .bss          00001d20  20000128  20000128  00016128  2**2
                  ALLOC
 12 RAM1_region   00000000  20001e48  20001e48  000155d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  000155d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001e48  20001e48  00016128  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  000155d8  2**0
                  CONTENTS, READONLY
 16 .debug_info   000579ae  00000000  00000000  00015602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000bcc3  00000000  00000000  0006cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00019394  00000000  00000000  00078c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002da0  00000000  00000000  00092008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 000024c2  00000000  00000000  00094da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002bda9  00000000  00000000  0009726a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00050f88  00000000  00000000  000c3013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000e0d84  00000000  00000000  00113f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  001f4d1f  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00007f24  00000000  00000000  001f4d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000085  00000000  00000000  001fcc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000128 	.word	0x20000128
 8000154:	00000000 	.word	0x00000000
 8000158:	08012ca0 	.word	0x08012ca0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000012c 	.word	0x2000012c
 8000174:	08012ca0 	.word	0x08012ca0

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_dmul>:
 8000188:	b570      	push	{r4, r5, r6, lr}
 800018a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800018e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000192:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000196:	bf1d      	ittte	ne
 8000198:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800019c:	ea94 0f0c 	teqne	r4, ip
 80001a0:	ea95 0f0c 	teqne	r5, ip
 80001a4:	f000 f8de 	bleq	8000364 <__aeabi_dmul+0x1dc>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea81 0603 	eor.w	r6, r1, r3
 80001ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001ba:	bf18      	it	ne
 80001bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80001c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001c8:	d038      	beq.n	800023c <__aeabi_dmul+0xb4>
 80001ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80001ce:	f04f 0500 	mov.w	r5, #0
 80001d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001de:	f04f 0600 	mov.w	r6, #0
 80001e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001e6:	f09c 0f00 	teq	ip, #0
 80001ea:	bf18      	it	ne
 80001ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80001f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001fc:	d204      	bcs.n	8000208 <__aeabi_dmul+0x80>
 80001fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000202:	416d      	adcs	r5, r5
 8000204:	eb46 0606 	adc.w	r6, r6, r6
 8000208:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800020c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000210:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000214:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000218:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800021c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000220:	bf88      	it	hi
 8000222:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000226:	d81e      	bhi.n	8000266 <__aeabi_dmul+0xde>
 8000228:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800022c:	bf08      	it	eq
 800022e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000232:	f150 0000 	adcs.w	r0, r0, #0
 8000236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000240:	ea46 0101 	orr.w	r1, r6, r1
 8000244:	ea40 0002 	orr.w	r0, r0, r2
 8000248:	ea81 0103 	eor.w	r1, r1, r3
 800024c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000250:	bfc2      	ittt	gt
 8000252:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000256:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800025a:	bd70      	popgt	{r4, r5, r6, pc}
 800025c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000260:	f04f 0e00 	mov.w	lr, #0
 8000264:	3c01      	subs	r4, #1
 8000266:	f300 80ab 	bgt.w	80003c0 <__aeabi_dmul+0x238>
 800026a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800026e:	bfde      	ittt	le
 8000270:	2000      	movle	r0, #0
 8000272:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000276:	bd70      	pople	{r4, r5, r6, pc}
 8000278:	f1c4 0400 	rsb	r4, r4, #0
 800027c:	3c20      	subs	r4, #32
 800027e:	da35      	bge.n	80002ec <__aeabi_dmul+0x164>
 8000280:	340c      	adds	r4, #12
 8000282:	dc1b      	bgt.n	80002bc <__aeabi_dmul+0x134>
 8000284:	f104 0414 	add.w	r4, r4, #20
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f305 	lsl.w	r3, r0, r5
 8000290:	fa20 f004 	lsr.w	r0, r0, r4
 8000294:	fa01 f205 	lsl.w	r2, r1, r5
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ac:	eb42 0106 	adc.w	r1, r2, r6
 80002b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b4:	bf08      	it	eq
 80002b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f1c4 040c 	rsb	r4, r4, #12
 80002c0:	f1c4 0520 	rsb	r5, r4, #32
 80002c4:	fa00 f304 	lsl.w	r3, r0, r4
 80002c8:	fa20 f005 	lsr.w	r0, r0, r5
 80002cc:	fa01 f204 	lsl.w	r2, r1, r4
 80002d0:	ea40 0002 	orr.w	r0, r0, r2
 80002d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f1c4 0520 	rsb	r5, r4, #32
 80002f0:	fa00 f205 	lsl.w	r2, r0, r5
 80002f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80002f8:	fa20 f304 	lsr.w	r3, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea43 0302 	orr.w	r3, r3, r2
 8000304:	fa21 f004 	lsr.w	r0, r1, r4
 8000308:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800030c:	fa21 f204 	lsr.w	r2, r1, r4
 8000310:	ea20 0002 	bic.w	r0, r0, r2
 8000314:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f094 0f00 	teq	r4, #0
 8000328:	d10f      	bne.n	800034a <__aeabi_dmul+0x1c2>
 800032a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800032e:	0040      	lsls	r0, r0, #1
 8000330:	eb41 0101 	adc.w	r1, r1, r1
 8000334:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000338:	bf08      	it	eq
 800033a:	3c01      	subeq	r4, #1
 800033c:	d0f7      	beq.n	800032e <__aeabi_dmul+0x1a6>
 800033e:	ea41 0106 	orr.w	r1, r1, r6
 8000342:	f095 0f00 	teq	r5, #0
 8000346:	bf18      	it	ne
 8000348:	4770      	bxne	lr
 800034a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800034e:	0052      	lsls	r2, r2, #1
 8000350:	eb43 0303 	adc.w	r3, r3, r3
 8000354:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000358:	bf08      	it	eq
 800035a:	3d01      	subeq	r5, #1
 800035c:	d0f7      	beq.n	800034e <__aeabi_dmul+0x1c6>
 800035e:	ea43 0306 	orr.w	r3, r3, r6
 8000362:	4770      	bx	lr
 8000364:	ea94 0f0c 	teq	r4, ip
 8000368:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800036c:	bf18      	it	ne
 800036e:	ea95 0f0c 	teqne	r5, ip
 8000372:	d00c      	beq.n	800038e <__aeabi_dmul+0x206>
 8000374:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000378:	bf18      	it	ne
 800037a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800037e:	d1d1      	bne.n	8000324 <__aeabi_dmul+0x19c>
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000388:	f04f 0000 	mov.w	r0, #0
 800038c:	bd70      	pop	{r4, r5, r6, pc}
 800038e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000392:	bf06      	itte	eq
 8000394:	4610      	moveq	r0, r2
 8000396:	4619      	moveq	r1, r3
 8000398:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800039c:	d019      	beq.n	80003d2 <__aeabi_dmul+0x24a>
 800039e:	ea94 0f0c 	teq	r4, ip
 80003a2:	d102      	bne.n	80003aa <__aeabi_dmul+0x222>
 80003a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003a8:	d113      	bne.n	80003d2 <__aeabi_dmul+0x24a>
 80003aa:	ea95 0f0c 	teq	r5, ip
 80003ae:	d105      	bne.n	80003bc <__aeabi_dmul+0x234>
 80003b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003b4:	bf1c      	itt	ne
 80003b6:	4610      	movne	r0, r2
 80003b8:	4619      	movne	r1, r3
 80003ba:	d10a      	bne.n	80003d2 <__aeabi_dmul+0x24a>
 80003bc:	ea81 0103 	eor.w	r1, r1, r3
 80003c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003cc:	f04f 0000 	mov.w	r0, #0
 80003d0:	bd70      	pop	{r4, r5, r6, pc}
 80003d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003da:	bd70      	pop	{r4, r5, r6, pc}

080003dc <__aeabi_fmul>:
 80003dc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80003e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003e4:	bf1e      	ittt	ne
 80003e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003ea:	ea92 0f0c 	teqne	r2, ip
 80003ee:	ea93 0f0c 	teqne	r3, ip
 80003f2:	d06f      	beq.n	80004d4 <__aeabi_fmul+0xf8>
 80003f4:	441a      	add	r2, r3
 80003f6:	ea80 0c01 	eor.w	ip, r0, r1
 80003fa:	0240      	lsls	r0, r0, #9
 80003fc:	bf18      	it	ne
 80003fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000402:	d01e      	beq.n	8000442 <__aeabi_fmul+0x66>
 8000404:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000408:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800040c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000410:	fba0 3101 	umull	r3, r1, r0, r1
 8000414:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000418:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800041c:	bf3e      	ittt	cc
 800041e:	0049      	lslcc	r1, r1, #1
 8000420:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000424:	005b      	lslcc	r3, r3, #1
 8000426:	ea40 0001 	orr.w	r0, r0, r1
 800042a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800042e:	2afd      	cmp	r2, #253	@ 0xfd
 8000430:	d81d      	bhi.n	800046e <__aeabi_fmul+0x92>
 8000432:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000436:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800043a:	bf08      	it	eq
 800043c:	f020 0001 	biceq.w	r0, r0, #1
 8000440:	4770      	bx	lr
 8000442:	f090 0f00 	teq	r0, #0
 8000446:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800044a:	bf08      	it	eq
 800044c:	0249      	lsleq	r1, r1, #9
 800044e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000452:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000456:	3a7f      	subs	r2, #127	@ 0x7f
 8000458:	bfc2      	ittt	gt
 800045a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800045e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000462:	4770      	bxgt	lr
 8000464:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000468:	f04f 0300 	mov.w	r3, #0
 800046c:	3a01      	subs	r2, #1
 800046e:	dc5d      	bgt.n	800052c <__aeabi_fmul+0x150>
 8000470:	f112 0f19 	cmn.w	r2, #25
 8000474:	bfdc      	itt	le
 8000476:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800047a:	4770      	bxle	lr
 800047c:	f1c2 0200 	rsb	r2, r2, #0
 8000480:	0041      	lsls	r1, r0, #1
 8000482:	fa21 f102 	lsr.w	r1, r1, r2
 8000486:	f1c2 0220 	rsb	r2, r2, #32
 800048a:	fa00 fc02 	lsl.w	ip, r0, r2
 800048e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000492:	f140 0000 	adc.w	r0, r0, #0
 8000496:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800049a:	bf08      	it	eq
 800049c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004a0:	4770      	bx	lr
 80004a2:	f092 0f00 	teq	r2, #0
 80004a6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80004aa:	bf02      	ittt	eq
 80004ac:	0040      	lsleq	r0, r0, #1
 80004ae:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80004b2:	3a01      	subeq	r2, #1
 80004b4:	d0f9      	beq.n	80004aa <__aeabi_fmul+0xce>
 80004b6:	ea40 000c 	orr.w	r0, r0, ip
 80004ba:	f093 0f00 	teq	r3, #0
 80004be:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80004c2:	bf02      	ittt	eq
 80004c4:	0049      	lsleq	r1, r1, #1
 80004c6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80004ca:	3b01      	subeq	r3, #1
 80004cc:	d0f9      	beq.n	80004c2 <__aeabi_fmul+0xe6>
 80004ce:	ea41 010c 	orr.w	r1, r1, ip
 80004d2:	e78f      	b.n	80003f4 <__aeabi_fmul+0x18>
 80004d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004d8:	ea92 0f0c 	teq	r2, ip
 80004dc:	bf18      	it	ne
 80004de:	ea93 0f0c 	teqne	r3, ip
 80004e2:	d00a      	beq.n	80004fa <__aeabi_fmul+0x11e>
 80004e4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80004e8:	bf18      	it	ne
 80004ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80004ee:	d1d8      	bne.n	80004a2 <__aeabi_fmul+0xc6>
 80004f0:	ea80 0001 	eor.w	r0, r0, r1
 80004f4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004f8:	4770      	bx	lr
 80004fa:	f090 0f00 	teq	r0, #0
 80004fe:	bf17      	itett	ne
 8000500:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000504:	4608      	moveq	r0, r1
 8000506:	f091 0f00 	teqne	r1, #0
 800050a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800050e:	d014      	beq.n	800053a <__aeabi_fmul+0x15e>
 8000510:	ea92 0f0c 	teq	r2, ip
 8000514:	d101      	bne.n	800051a <__aeabi_fmul+0x13e>
 8000516:	0242      	lsls	r2, r0, #9
 8000518:	d10f      	bne.n	800053a <__aeabi_fmul+0x15e>
 800051a:	ea93 0f0c 	teq	r3, ip
 800051e:	d103      	bne.n	8000528 <__aeabi_fmul+0x14c>
 8000520:	024b      	lsls	r3, r1, #9
 8000522:	bf18      	it	ne
 8000524:	4608      	movne	r0, r1
 8000526:	d108      	bne.n	800053a <__aeabi_fmul+0x15e>
 8000528:	ea80 0001 	eor.w	r0, r0, r1
 800052c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000530:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000534:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000538:	4770      	bx	lr
 800053a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800053e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000542:	4770      	bx	lr

08000544 <__aeabi_drsub>:
 8000544:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e002      	b.n	8000550 <__adddf3>
 800054a:	bf00      	nop

0800054c <__aeabi_dsub>:
 800054c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000550 <__adddf3>:
 8000550:	b530      	push	{r4, r5, lr}
 8000552:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000556:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800055a:	ea94 0f05 	teq	r4, r5
 800055e:	bf08      	it	eq
 8000560:	ea90 0f02 	teqeq	r0, r2
 8000564:	bf1f      	itttt	ne
 8000566:	ea54 0c00 	orrsne.w	ip, r4, r0
 800056a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800056e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000572:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000576:	f000 80e2 	beq.w	800073e <__adddf3+0x1ee>
 800057a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800057e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000582:	bfb8      	it	lt
 8000584:	426d      	neglt	r5, r5
 8000586:	dd0c      	ble.n	80005a2 <__adddf3+0x52>
 8000588:	442c      	add	r4, r5
 800058a:	ea80 0202 	eor.w	r2, r0, r2
 800058e:	ea81 0303 	eor.w	r3, r1, r3
 8000592:	ea82 0000 	eor.w	r0, r2, r0
 8000596:	ea83 0101 	eor.w	r1, r3, r1
 800059a:	ea80 0202 	eor.w	r2, r0, r2
 800059e:	ea81 0303 	eor.w	r3, r1, r3
 80005a2:	2d36      	cmp	r5, #54	@ 0x36
 80005a4:	bf88      	it	hi
 80005a6:	bd30      	pophi	{r4, r5, pc}
 80005a8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80005ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005b0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80005b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005b8:	d002      	beq.n	80005c0 <__adddf3+0x70>
 80005ba:	4240      	negs	r0, r0
 80005bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80005c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005cc:	d002      	beq.n	80005d4 <__adddf3+0x84>
 80005ce:	4252      	negs	r2, r2
 80005d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005d4:	ea94 0f05 	teq	r4, r5
 80005d8:	f000 80a7 	beq.w	800072a <__adddf3+0x1da>
 80005dc:	f1a4 0401 	sub.w	r4, r4, #1
 80005e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005e4:	db0d      	blt.n	8000602 <__adddf3+0xb2>
 80005e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ea:	fa22 f205 	lsr.w	r2, r2, r5
 80005ee:	1880      	adds	r0, r0, r2
 80005f0:	f141 0100 	adc.w	r1, r1, #0
 80005f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005f8:	1880      	adds	r0, r0, r2
 80005fa:	fa43 f305 	asr.w	r3, r3, r5
 80005fe:	4159      	adcs	r1, r3
 8000600:	e00e      	b.n	8000620 <__adddf3+0xd0>
 8000602:	f1a5 0520 	sub.w	r5, r5, #32
 8000606:	f10e 0e20 	add.w	lr, lr, #32
 800060a:	2a01      	cmp	r2, #1
 800060c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000610:	bf28      	it	cs
 8000612:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000616:	fa43 f305 	asr.w	r3, r3, r5
 800061a:	18c0      	adds	r0, r0, r3
 800061c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000624:	d507      	bpl.n	8000636 <__adddf3+0xe6>
 8000626:	f04f 0e00 	mov.w	lr, #0
 800062a:	f1dc 0c00 	rsbs	ip, ip, #0
 800062e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000632:	eb6e 0101 	sbc.w	r1, lr, r1
 8000636:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800063a:	d31b      	bcc.n	8000674 <__adddf3+0x124>
 800063c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000640:	d30c      	bcc.n	800065c <__adddf3+0x10c>
 8000642:	0849      	lsrs	r1, r1, #1
 8000644:	ea5f 0030 	movs.w	r0, r0, rrx
 8000648:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800064c:	f104 0401 	add.w	r4, r4, #1
 8000650:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000654:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000658:	f080 809a 	bcs.w	8000790 <__adddf3+0x240>
 800065c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000660:	bf08      	it	eq
 8000662:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000666:	f150 0000 	adcs.w	r0, r0, #0
 800066a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066e:	ea41 0105 	orr.w	r1, r1, r5
 8000672:	bd30      	pop	{r4, r5, pc}
 8000674:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000678:	4140      	adcs	r0, r0
 800067a:	eb41 0101 	adc.w	r1, r1, r1
 800067e:	3c01      	subs	r4, #1
 8000680:	bf28      	it	cs
 8000682:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000686:	d2e9      	bcs.n	800065c <__adddf3+0x10c>
 8000688:	f091 0f00 	teq	r1, #0
 800068c:	bf04      	itt	eq
 800068e:	4601      	moveq	r1, r0
 8000690:	2000      	moveq	r0, #0
 8000692:	fab1 f381 	clz	r3, r1
 8000696:	bf08      	it	eq
 8000698:	3320      	addeq	r3, #32
 800069a:	f1a3 030b 	sub.w	r3, r3, #11
 800069e:	f1b3 0220 	subs.w	r2, r3, #32
 80006a2:	da0c      	bge.n	80006be <__adddf3+0x16e>
 80006a4:	320c      	adds	r2, #12
 80006a6:	dd08      	ble.n	80006ba <__adddf3+0x16a>
 80006a8:	f102 0c14 	add.w	ip, r2, #20
 80006ac:	f1c2 020c 	rsb	r2, r2, #12
 80006b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006b4:	fa21 f102 	lsr.w	r1, r1, r2
 80006b8:	e00c      	b.n	80006d4 <__adddf3+0x184>
 80006ba:	f102 0214 	add.w	r2, r2, #20
 80006be:	bfd8      	it	le
 80006c0:	f1c2 0c20 	rsble	ip, r2, #32
 80006c4:	fa01 f102 	lsl.w	r1, r1, r2
 80006c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006cc:	bfdc      	itt	le
 80006ce:	ea41 010c 	orrle.w	r1, r1, ip
 80006d2:	4090      	lslle	r0, r2
 80006d4:	1ae4      	subs	r4, r4, r3
 80006d6:	bfa2      	ittt	ge
 80006d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006dc:	4329      	orrge	r1, r5
 80006de:	bd30      	popge	{r4, r5, pc}
 80006e0:	ea6f 0404 	mvn.w	r4, r4
 80006e4:	3c1f      	subs	r4, #31
 80006e6:	da1c      	bge.n	8000722 <__adddf3+0x1d2>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc0e      	bgt.n	800070a <__adddf3+0x1ba>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0220 	rsb	r2, r4, #32
 80006f4:	fa20 f004 	lsr.w	r0, r0, r4
 80006f8:	fa01 f302 	lsl.w	r3, r1, r2
 80006fc:	ea40 0003 	orr.w	r0, r0, r3
 8000700:	fa21 f304 	lsr.w	r3, r1, r4
 8000704:	ea45 0103 	orr.w	r1, r5, r3
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f1c4 040c 	rsb	r4, r4, #12
 800070e:	f1c4 0220 	rsb	r2, r4, #32
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 f304 	lsl.w	r3, r1, r4
 800071a:	ea40 0003 	orr.w	r0, r0, r3
 800071e:	4629      	mov	r1, r5
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	fa21 f004 	lsr.w	r0, r1, r4
 8000726:	4629      	mov	r1, r5
 8000728:	bd30      	pop	{r4, r5, pc}
 800072a:	f094 0f00 	teq	r4, #0
 800072e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000732:	bf06      	itte	eq
 8000734:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000738:	3401      	addeq	r4, #1
 800073a:	3d01      	subne	r5, #1
 800073c:	e74e      	b.n	80005dc <__adddf3+0x8c>
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf18      	it	ne
 8000744:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000748:	d029      	beq.n	800079e <__adddf3+0x24e>
 800074a:	ea94 0f05 	teq	r4, r5
 800074e:	bf08      	it	eq
 8000750:	ea90 0f02 	teqeq	r0, r2
 8000754:	d005      	beq.n	8000762 <__adddf3+0x212>
 8000756:	ea54 0c00 	orrs.w	ip, r4, r0
 800075a:	bf04      	itt	eq
 800075c:	4619      	moveq	r1, r3
 800075e:	4610      	moveq	r0, r2
 8000760:	bd30      	pop	{r4, r5, pc}
 8000762:	ea91 0f03 	teq	r1, r3
 8000766:	bf1e      	ittt	ne
 8000768:	2100      	movne	r1, #0
 800076a:	2000      	movne	r0, #0
 800076c:	bd30      	popne	{r4, r5, pc}
 800076e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000772:	d105      	bne.n	8000780 <__adddf3+0x230>
 8000774:	0040      	lsls	r0, r0, #1
 8000776:	4149      	adcs	r1, r1
 8000778:	bf28      	it	cs
 800077a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800077e:	bd30      	pop	{r4, r5, pc}
 8000780:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000784:	bf3c      	itt	cc
 8000786:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800078a:	bd30      	popcc	{r4, r5, pc}
 800078c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000790:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000794:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd30      	pop	{r4, r5, pc}
 800079e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007a2:	bf1a      	itte	ne
 80007a4:	4619      	movne	r1, r3
 80007a6:	4610      	movne	r0, r2
 80007a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007ac:	bf1c      	itt	ne
 80007ae:	460b      	movne	r3, r1
 80007b0:	4602      	movne	r2, r0
 80007b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007b6:	bf06      	itte	eq
 80007b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007bc:	ea91 0f03 	teqeq	r1, r3
 80007c0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80007c4:	bd30      	pop	{r4, r5, pc}
 80007c6:	bf00      	nop

080007c8 <__aeabi_ui2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007dc:	f04f 0500 	mov.w	r5, #0
 80007e0:	f04f 0100 	mov.w	r1, #0
 80007e4:	e750      	b.n	8000688 <__adddf3+0x138>
 80007e6:	bf00      	nop

080007e8 <__aeabi_i2d>:
 80007e8:	f090 0f00 	teq	r0, #0
 80007ec:	bf04      	itt	eq
 80007ee:	2100      	moveq	r1, #0
 80007f0:	4770      	bxeq	lr
 80007f2:	b530      	push	{r4, r5, lr}
 80007f4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007f8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000800:	bf48      	it	mi
 8000802:	4240      	negmi	r0, r0
 8000804:	f04f 0100 	mov.w	r1, #0
 8000808:	e73e      	b.n	8000688 <__adddf3+0x138>
 800080a:	bf00      	nop

0800080c <__aeabi_f2d>:
 800080c:	0042      	lsls	r2, r0, #1
 800080e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000812:	ea4f 0131 	mov.w	r1, r1, rrx
 8000816:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800081a:	bf1f      	itttt	ne
 800081c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000820:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000824:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000828:	4770      	bxne	lr
 800082a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800082e:	bf08      	it	eq
 8000830:	4770      	bxeq	lr
 8000832:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000836:	bf04      	itt	eq
 8000838:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800083c:	4770      	bxeq	lr
 800083e:	b530      	push	{r4, r5, lr}
 8000840:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000844:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000848:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800084c:	e71c      	b.n	8000688 <__adddf3+0x138>
 800084e:	bf00      	nop

08000850 <__aeabi_ul2d>:
 8000850:	ea50 0201 	orrs.w	r2, r0, r1
 8000854:	bf08      	it	eq
 8000856:	4770      	bxeq	lr
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	f04f 0500 	mov.w	r5, #0
 800085e:	e00a      	b.n	8000876 <__aeabi_l2d+0x16>

08000860 <__aeabi_l2d>:
 8000860:	ea50 0201 	orrs.w	r2, r0, r1
 8000864:	bf08      	it	eq
 8000866:	4770      	bxeq	lr
 8000868:	b530      	push	{r4, r5, lr}
 800086a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800086e:	d502      	bpl.n	8000876 <__aeabi_l2d+0x16>
 8000870:	4240      	negs	r0, r0
 8000872:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000876:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800087a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800087e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000882:	f43f aed8 	beq.w	8000636 <__adddf3+0xe6>
 8000886:	f04f 0203 	mov.w	r2, #3
 800088a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800088e:	bf18      	it	ne
 8000890:	3203      	addne	r2, #3
 8000892:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000896:	bf18      	it	ne
 8000898:	3203      	addne	r2, #3
 800089a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800089e:	f1c2 0320 	rsb	r3, r2, #32
 80008a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80008a6:	fa20 f002 	lsr.w	r0, r0, r2
 80008aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80008ae:	ea40 000e 	orr.w	r0, r0, lr
 80008b2:	fa21 f102 	lsr.w	r1, r1, r2
 80008b6:	4414      	add	r4, r2
 80008b8:	e6bd      	b.n	8000636 <__adddf3+0xe6>
 80008ba:	bf00      	nop

080008bc <__gedf2>:
 80008bc:	f04f 3cff 	mov.w	ip, #4294967295
 80008c0:	e006      	b.n	80008d0 <__cmpdf2+0x4>
 80008c2:	bf00      	nop

080008c4 <__ledf2>:
 80008c4:	f04f 0c01 	mov.w	ip, #1
 80008c8:	e002      	b.n	80008d0 <__cmpdf2+0x4>
 80008ca:	bf00      	nop

080008cc <__cmpdf2>:
 80008cc:	f04f 0c01 	mov.w	ip, #1
 80008d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008e6:	d01b      	beq.n	8000920 <__cmpdf2+0x54>
 80008e8:	b001      	add	sp, #4
 80008ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ee:	bf0c      	ite	eq
 80008f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008f4:	ea91 0f03 	teqne	r1, r3
 80008f8:	bf02      	ittt	eq
 80008fa:	ea90 0f02 	teqeq	r0, r2
 80008fe:	2000      	moveq	r0, #0
 8000900:	4770      	bxeq	lr
 8000902:	f110 0f00 	cmn.w	r0, #0
 8000906:	ea91 0f03 	teq	r1, r3
 800090a:	bf58      	it	pl
 800090c:	4299      	cmppl	r1, r3
 800090e:	bf08      	it	eq
 8000910:	4290      	cmpeq	r0, r2
 8000912:	bf2c      	ite	cs
 8000914:	17d8      	asrcs	r0, r3, #31
 8000916:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800091a:	f040 0001 	orr.w	r0, r0, #1
 800091e:	4770      	bx	lr
 8000920:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000928:	d102      	bne.n	8000930 <__cmpdf2+0x64>
 800092a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800092e:	d107      	bne.n	8000940 <__cmpdf2+0x74>
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000938:	d1d6      	bne.n	80008e8 <__cmpdf2+0x1c>
 800093a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800093e:	d0d3      	beq.n	80008e8 <__cmpdf2+0x1c>
 8000940:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <__aeabi_cdrcmple>:
 8000948:	4684      	mov	ip, r0
 800094a:	4610      	mov	r0, r2
 800094c:	4662      	mov	r2, ip
 800094e:	468c      	mov	ip, r1
 8000950:	4619      	mov	r1, r3
 8000952:	4663      	mov	r3, ip
 8000954:	e000      	b.n	8000958 <__aeabi_cdcmpeq>
 8000956:	bf00      	nop

08000958 <__aeabi_cdcmpeq>:
 8000958:	b501      	push	{r0, lr}
 800095a:	f7ff ffb7 	bl	80008cc <__cmpdf2>
 800095e:	2800      	cmp	r0, #0
 8000960:	bf48      	it	mi
 8000962:	f110 0f00 	cmnmi.w	r0, #0
 8000966:	bd01      	pop	{r0, pc}

08000968 <__aeabi_dcmpeq>:
 8000968:	f84d ed08 	str.w	lr, [sp, #-8]!
 800096c:	f7ff fff4 	bl	8000958 <__aeabi_cdcmpeq>
 8000970:	bf0c      	ite	eq
 8000972:	2001      	moveq	r0, #1
 8000974:	2000      	movne	r0, #0
 8000976:	f85d fb08 	ldr.w	pc, [sp], #8
 800097a:	bf00      	nop

0800097c <__aeabi_dcmplt>:
 800097c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000980:	f7ff ffea 	bl	8000958 <__aeabi_cdcmpeq>
 8000984:	bf34      	ite	cc
 8000986:	2001      	movcc	r0, #1
 8000988:	2000      	movcs	r0, #0
 800098a:	f85d fb08 	ldr.w	pc, [sp], #8
 800098e:	bf00      	nop

08000990 <__aeabi_dcmple>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff ffe0 	bl	8000958 <__aeabi_cdcmpeq>
 8000998:	bf94      	ite	ls
 800099a:	2001      	movls	r0, #1
 800099c:	2000      	movhi	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmpge>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffce 	bl	8000948 <__aeabi_cdrcmple>
 80009ac:	bf94      	ite	ls
 80009ae:	2001      	movls	r0, #1
 80009b0:	2000      	movhi	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmpgt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffc4 	bl	8000948 <__aeabi_cdrcmple>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_d2iz>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009d4:	d215      	bcs.n	8000a02 <__aeabi_d2iz+0x36>
 80009d6:	d511      	bpl.n	80009fc <__aeabi_d2iz+0x30>
 80009d8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d912      	bls.n	8000a08 <__aeabi_d2iz+0x3c>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009f2:	fa23 f002 	lsr.w	r0, r3, r2
 80009f6:	bf18      	it	ne
 80009f8:	4240      	negne	r0, r0
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a06:	d105      	bne.n	8000a14 <__aeabi_d2iz+0x48>
 8000a08:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a0c:	bf08      	it	eq
 8000a0e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a12:	4770      	bx	lr
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_frsub>:
 8000abc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ac0:	e002      	b.n	8000ac8 <__addsf3>
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_fsub>:
 8000ac4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ac8 <__addsf3>:
 8000ac8:	0042      	lsls	r2, r0, #1
 8000aca:	bf1f      	itttt	ne
 8000acc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad0:	ea92 0f03 	teqne	r2, r3
 8000ad4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000adc:	d06a      	beq.n	8000bb4 <__addsf3+0xec>
 8000ade:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ae2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae6:	bfc1      	itttt	gt
 8000ae8:	18d2      	addgt	r2, r2, r3
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	4048      	eorgt	r0, r1
 8000aee:	4041      	eorgt	r1, r0
 8000af0:	bfb8      	it	lt
 8000af2:	425b      	neglt	r3, r3
 8000af4:	2b19      	cmp	r3, #25
 8000af6:	bf88      	it	hi
 8000af8:	4770      	bxhi	lr
 8000afa:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000afe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b02:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b0e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b12:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b16:	bf18      	it	ne
 8000b18:	4249      	negne	r1, r1
 8000b1a:	ea92 0f03 	teq	r2, r3
 8000b1e:	d03f      	beq.n	8000ba0 <__addsf3+0xd8>
 8000b20:	f1a2 0201 	sub.w	r2, r2, #1
 8000b24:	fa41 fc03 	asr.w	ip, r1, r3
 8000b28:	eb10 000c 	adds.w	r0, r0, ip
 8000b2c:	f1c3 0320 	rsb	r3, r3, #32
 8000b30:	fa01 f103 	lsl.w	r1, r1, r3
 8000b34:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__addsf3+0x78>
 8000b3a:	4249      	negs	r1, r1
 8000b3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b40:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b44:	d313      	bcc.n	8000b6e <__addsf3+0xa6>
 8000b46:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b4a:	d306      	bcc.n	8000b5a <__addsf3+0x92>
 8000b4c:	0840      	lsrs	r0, r0, #1
 8000b4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b52:	f102 0201 	add.w	r2, r2, #1
 8000b56:	2afe      	cmp	r2, #254	@ 0xfe
 8000b58:	d251      	bcs.n	8000bfe <__addsf3+0x136>
 8000b5a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b62:	bf08      	it	eq
 8000b64:	f020 0001 	biceq.w	r0, r0, #1
 8000b68:	ea40 0003 	orr.w	r0, r0, r3
 8000b6c:	4770      	bx	lr
 8000b6e:	0049      	lsls	r1, r1, #1
 8000b70:	eb40 0000 	adc.w	r0, r0, r0
 8000b74:	3a01      	subs	r2, #1
 8000b76:	bf28      	it	cs
 8000b78:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b7c:	d2ed      	bcs.n	8000b5a <__addsf3+0x92>
 8000b7e:	fab0 fc80 	clz	ip, r0
 8000b82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b86:	ebb2 020c 	subs.w	r2, r2, ip
 8000b8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8e:	bfaa      	itet	ge
 8000b90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b94:	4252      	neglt	r2, r2
 8000b96:	4318      	orrge	r0, r3
 8000b98:	bfbc      	itt	lt
 8000b9a:	40d0      	lsrlt	r0, r2
 8000b9c:	4318      	orrlt	r0, r3
 8000b9e:	4770      	bx	lr
 8000ba0:	f092 0f00 	teq	r2, #0
 8000ba4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ba8:	bf06      	itte	eq
 8000baa:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bae:	3201      	addeq	r2, #1
 8000bb0:	3b01      	subne	r3, #1
 8000bb2:	e7b5      	b.n	8000b20 <__addsf3+0x58>
 8000bb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	bf18      	it	ne
 8000bbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc2:	d021      	beq.n	8000c08 <__addsf3+0x140>
 8000bc4:	ea92 0f03 	teq	r2, r3
 8000bc8:	d004      	beq.n	8000bd4 <__addsf3+0x10c>
 8000bca:	f092 0f00 	teq	r2, #0
 8000bce:	bf08      	it	eq
 8000bd0:	4608      	moveq	r0, r1
 8000bd2:	4770      	bx	lr
 8000bd4:	ea90 0f01 	teq	r0, r1
 8000bd8:	bf1c      	itt	ne
 8000bda:	2000      	movne	r0, #0
 8000bdc:	4770      	bxne	lr
 8000bde:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000be2:	d104      	bne.n	8000bee <__addsf3+0x126>
 8000be4:	0040      	lsls	r0, r0, #1
 8000be6:	bf28      	it	cs
 8000be8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bec:	4770      	bx	lr
 8000bee:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bf2:	bf3c      	itt	cc
 8000bf4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bf8:	4770      	bxcc	lr
 8000bfa:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bfe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c02:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c06:	4770      	bx	lr
 8000c08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c0c:	bf16      	itet	ne
 8000c0e:	4608      	movne	r0, r1
 8000c10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c14:	4601      	movne	r1, r0
 8000c16:	0242      	lsls	r2, r0, #9
 8000c18:	bf06      	itte	eq
 8000c1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1e:	ea90 0f01 	teqeq	r0, r1
 8000c22:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_ui2f>:
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e004      	b.n	8000c38 <__aeabi_i2f+0x8>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_i2f>:
 8000c30:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c34:	bf48      	it	mi
 8000c36:	4240      	negmi	r0, r0
 8000c38:	ea5f 0c00 	movs.w	ip, r0
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c44:	4601      	mov	r1, r0
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	e01c      	b.n	8000c86 <__aeabi_l2f+0x2a>

08000c4c <__aeabi_ul2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e00a      	b.n	8000c70 <__aeabi_l2f+0x14>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_l2f>:
 8000c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c60:	bf08      	it	eq
 8000c62:	4770      	bxeq	lr
 8000c64:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c68:	d502      	bpl.n	8000c70 <__aeabi_l2f+0x14>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	ea5f 0c01 	movs.w	ip, r1
 8000c74:	bf02      	ittt	eq
 8000c76:	4684      	moveq	ip, r0
 8000c78:	4601      	moveq	r1, r0
 8000c7a:	2000      	moveq	r0, #0
 8000c7c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c80:	bf08      	it	eq
 8000c82:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c86:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c8a:	fabc f28c 	clz	r2, ip
 8000c8e:	3a08      	subs	r2, #8
 8000c90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c94:	db10      	blt.n	8000cb8 <__aeabi_l2f+0x5c>
 8000c96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ca8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f102 0220 	add.w	r2, r2, #32
 8000cbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd6:	4770      	bx	lr

08000cd8 <__gesf2>:
 8000cd8:	f04f 3cff 	mov.w	ip, #4294967295
 8000cdc:	e006      	b.n	8000cec <__cmpsf2+0x4>
 8000cde:	bf00      	nop

08000ce0 <__lesf2>:
 8000ce0:	f04f 0c01 	mov.w	ip, #1
 8000ce4:	e002      	b.n	8000cec <__cmpsf2+0x4>
 8000ce6:	bf00      	nop

08000ce8 <__cmpsf2>:
 8000ce8:	f04f 0c01 	mov.w	ip, #1
 8000cec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cf0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cfc:	bf18      	it	ne
 8000cfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d02:	d011      	beq.n	8000d28 <__cmpsf2+0x40>
 8000d04:	b001      	add	sp, #4
 8000d06:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d0a:	bf18      	it	ne
 8000d0c:	ea90 0f01 	teqne	r0, r1
 8000d10:	bf58      	it	pl
 8000d12:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d16:	bf88      	it	hi
 8000d18:	17c8      	asrhi	r0, r1, #31
 8000d1a:	bf38      	it	cc
 8000d1c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d20:	bf18      	it	ne
 8000d22:	f040 0001 	orrne.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d2c:	d102      	bne.n	8000d34 <__cmpsf2+0x4c>
 8000d2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d32:	d105      	bne.n	8000d40 <__cmpsf2+0x58>
 8000d34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d38:	d1e4      	bne.n	8000d04 <__cmpsf2+0x1c>
 8000d3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d3e:	d0e1      	beq.n	8000d04 <__cmpsf2+0x1c>
 8000d40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_cfrcmple>:
 8000d48:	4684      	mov	ip, r0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	4661      	mov	r1, ip
 8000d4e:	e7ff      	b.n	8000d50 <__aeabi_cfcmpeq>

08000d50 <__aeabi_cfcmpeq>:
 8000d50:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d52:	f7ff ffc9 	bl	8000ce8 <__cmpsf2>
 8000d56:	2800      	cmp	r0, #0
 8000d58:	bf48      	it	mi
 8000d5a:	f110 0f00 	cmnmi.w	r0, #0
 8000d5e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d60 <__aeabi_fcmpeq>:
 8000d60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d64:	f7ff fff4 	bl	8000d50 <__aeabi_cfcmpeq>
 8000d68:	bf0c      	ite	eq
 8000d6a:	2001      	moveq	r0, #1
 8000d6c:	2000      	movne	r0, #0
 8000d6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d72:	bf00      	nop

08000d74 <__aeabi_fcmplt>:
 8000d74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d78:	f7ff ffea 	bl	8000d50 <__aeabi_cfcmpeq>
 8000d7c:	bf34      	ite	cc
 8000d7e:	2001      	movcc	r0, #1
 8000d80:	2000      	movcs	r0, #0
 8000d82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d86:	bf00      	nop

08000d88 <__aeabi_fcmple>:
 8000d88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d8c:	f7ff ffe0 	bl	8000d50 <__aeabi_cfcmpeq>
 8000d90:	bf94      	ite	ls
 8000d92:	2001      	movls	r0, #1
 8000d94:	2000      	movhi	r0, #0
 8000d96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d9a:	bf00      	nop

08000d9c <__aeabi_fcmpge>:
 8000d9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da0:	f7ff ffd2 	bl	8000d48 <__aeabi_cfrcmple>
 8000da4:	bf94      	ite	ls
 8000da6:	2001      	movls	r0, #1
 8000da8:	2000      	movhi	r0, #0
 8000daa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dae:	bf00      	nop

08000db0 <__aeabi_fcmpgt>:
 8000db0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000db4:	f7ff ffc8 	bl	8000d48 <__aeabi_cfrcmple>
 8000db8:	bf34      	ite	cc
 8000dba:	2001      	movcc	r0, #1
 8000dbc:	2000      	movcs	r0, #0
 8000dbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dc2:	bf00      	nop

08000dc4 <__aeabi_f2iz>:
 8000dc4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000dc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000dcc:	d30f      	bcc.n	8000dee <__aeabi_f2iz+0x2a>
 8000dce:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000dd2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dd6:	d90d      	bls.n	8000df4 <__aeabi_f2iz+0x30>
 8000dd8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ddc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000de0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000de4:	fa23 f002 	lsr.w	r0, r3, r2
 8000de8:	bf18      	it	ne
 8000dea:	4240      	negne	r0, r0
 8000dec:	4770      	bx	lr
 8000dee:	f04f 0000 	mov.w	r0, #0
 8000df2:	4770      	bx	lr
 8000df4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000df8:	d101      	bne.n	8000dfe <__aeabi_f2iz+0x3a>
 8000dfa:	0242      	lsls	r2, r0, #9
 8000dfc:	d105      	bne.n	8000e0a <__aeabi_f2iz+0x46>
 8000dfe:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e02:	bf08      	it	eq
 8000e04:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e08:	4770      	bx	lr
 8000e0a:	f04f 0000 	mov.w	r0, #0
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_f2uiz>:
 8000e10:	0042      	lsls	r2, r0, #1
 8000e12:	d20e      	bcs.n	8000e32 <__aeabi_f2uiz+0x22>
 8000e14:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e18:	d30b      	bcc.n	8000e32 <__aeabi_f2uiz+0x22>
 8000e1a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e22:	d409      	bmi.n	8000e38 <__aeabi_f2uiz+0x28>
 8000e24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e30:	4770      	bx	lr
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	4770      	bx	lr
 8000e38:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e3c:	d101      	bne.n	8000e42 <__aeabi_f2uiz+0x32>
 8000e3e:	0242      	lsls	r2, r0, #9
 8000e40:	d102      	bne.n	8000e48 <__aeabi_f2uiz+0x38>
 8000e42:	f04f 30ff 	mov.w	r0, #4294967295
 8000e46:	4770      	bx	lr
 8000e48:	f04f 0000 	mov.w	r0, #0
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <__aeabi_uldivmod>:
 8000e50:	b953      	cbnz	r3, 8000e68 <__aeabi_uldivmod+0x18>
 8000e52:	b94a      	cbnz	r2, 8000e68 <__aeabi_uldivmod+0x18>
 8000e54:	2900      	cmp	r1, #0
 8000e56:	bf08      	it	eq
 8000e58:	2800      	cmpeq	r0, #0
 8000e5a:	bf1c      	itt	ne
 8000e5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e60:	f04f 30ff 	movne.w	r0, #4294967295
 8000e64:	f000 b988 	b.w	8001178 <__aeabi_idiv0>
 8000e68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e70:	f000 f806 	bl	8000e80 <__udivmoddi4>
 8000e74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e7c:	b004      	add	sp, #16
 8000e7e:	4770      	bx	lr

08000e80 <__udivmoddi4>:
 8000e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e84:	9d08      	ldr	r5, [sp, #32]
 8000e86:	468e      	mov	lr, r1
 8000e88:	4604      	mov	r4, r0
 8000e8a:	4688      	mov	r8, r1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d14a      	bne.n	8000f26 <__udivmoddi4+0xa6>
 8000e90:	428a      	cmp	r2, r1
 8000e92:	4617      	mov	r7, r2
 8000e94:	d962      	bls.n	8000f5c <__udivmoddi4+0xdc>
 8000e96:	fab2 f682 	clz	r6, r2
 8000e9a:	b14e      	cbz	r6, 8000eb0 <__udivmoddi4+0x30>
 8000e9c:	f1c6 0320 	rsb	r3, r6, #32
 8000ea0:	fa01 f806 	lsl.w	r8, r1, r6
 8000ea4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ea8:	40b7      	lsls	r7, r6
 8000eaa:	ea43 0808 	orr.w	r8, r3, r8
 8000eae:	40b4      	lsls	r4, r6
 8000eb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eb4:	fa1f fc87 	uxth.w	ip, r7
 8000eb8:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ebc:	0c23      	lsrs	r3, r4, #16
 8000ebe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ec2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ec6:	fb01 f20c 	mul.w	r2, r1, ip
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d909      	bls.n	8000ee2 <__udivmoddi4+0x62>
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ed4:	f080 80ea 	bcs.w	80010ac <__udivmoddi4+0x22c>
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	f240 80e7 	bls.w	80010ac <__udivmoddi4+0x22c>
 8000ede:	3902      	subs	r1, #2
 8000ee0:	443b      	add	r3, r7
 8000ee2:	1a9a      	subs	r2, r3, r2
 8000ee4:	b2a3      	uxth	r3, r4
 8000ee6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000eea:	fb0e 2210 	mls	r2, lr, r0, r2
 8000eee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ef2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ef6:	459c      	cmp	ip, r3
 8000ef8:	d909      	bls.n	8000f0e <__udivmoddi4+0x8e>
 8000efa:	18fb      	adds	r3, r7, r3
 8000efc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f00:	f080 80d6 	bcs.w	80010b0 <__udivmoddi4+0x230>
 8000f04:	459c      	cmp	ip, r3
 8000f06:	f240 80d3 	bls.w	80010b0 <__udivmoddi4+0x230>
 8000f0a:	443b      	add	r3, r7
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f12:	eba3 030c 	sub.w	r3, r3, ip
 8000f16:	2100      	movs	r1, #0
 8000f18:	b11d      	cbz	r5, 8000f22 <__udivmoddi4+0xa2>
 8000f1a:	40f3      	lsrs	r3, r6
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d905      	bls.n	8000f36 <__udivmoddi4+0xb6>
 8000f2a:	b10d      	cbz	r5, 8000f30 <__udivmoddi4+0xb0>
 8000f2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000f30:	2100      	movs	r1, #0
 8000f32:	4608      	mov	r0, r1
 8000f34:	e7f5      	b.n	8000f22 <__udivmoddi4+0xa2>
 8000f36:	fab3 f183 	clz	r1, r3
 8000f3a:	2900      	cmp	r1, #0
 8000f3c:	d146      	bne.n	8000fcc <__udivmoddi4+0x14c>
 8000f3e:	4573      	cmp	r3, lr
 8000f40:	d302      	bcc.n	8000f48 <__udivmoddi4+0xc8>
 8000f42:	4282      	cmp	r2, r0
 8000f44:	f200 8105 	bhi.w	8001152 <__udivmoddi4+0x2d2>
 8000f48:	1a84      	subs	r4, r0, r2
 8000f4a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000f4e:	2001      	movs	r0, #1
 8000f50:	4690      	mov	r8, r2
 8000f52:	2d00      	cmp	r5, #0
 8000f54:	d0e5      	beq.n	8000f22 <__udivmoddi4+0xa2>
 8000f56:	e9c5 4800 	strd	r4, r8, [r5]
 8000f5a:	e7e2      	b.n	8000f22 <__udivmoddi4+0xa2>
 8000f5c:	2a00      	cmp	r2, #0
 8000f5e:	f000 8090 	beq.w	8001082 <__udivmoddi4+0x202>
 8000f62:	fab2 f682 	clz	r6, r2
 8000f66:	2e00      	cmp	r6, #0
 8000f68:	f040 80a4 	bne.w	80010b4 <__udivmoddi4+0x234>
 8000f6c:	1a8a      	subs	r2, r1, r2
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f74:	b280      	uxth	r0, r0
 8000f76:	b2bc      	uxth	r4, r7
 8000f78:	2101      	movs	r1, #1
 8000f7a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000f7e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f86:	fb04 f20c 	mul.w	r2, r4, ip
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x11e>
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f94:	d202      	bcs.n	8000f9c <__udivmoddi4+0x11c>
 8000f96:	429a      	cmp	r2, r3
 8000f98:	f200 80e0 	bhi.w	800115c <__udivmoddi4+0x2dc>
 8000f9c:	46c4      	mov	ip, r8
 8000f9e:	1a9b      	subs	r3, r3, r2
 8000fa0:	fbb3 f2fe 	udiv	r2, r3, lr
 8000fa4:	fb0e 3312 	mls	r3, lr, r2, r3
 8000fa8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000fac:	fb02 f404 	mul.w	r4, r2, r4
 8000fb0:	429c      	cmp	r4, r3
 8000fb2:	d907      	bls.n	8000fc4 <__udivmoddi4+0x144>
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	f102 30ff 	add.w	r0, r2, #4294967295
 8000fba:	d202      	bcs.n	8000fc2 <__udivmoddi4+0x142>
 8000fbc:	429c      	cmp	r4, r3
 8000fbe:	f200 80ca 	bhi.w	8001156 <__udivmoddi4+0x2d6>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	1b1b      	subs	r3, r3, r4
 8000fc6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000fca:	e7a5      	b.n	8000f18 <__udivmoddi4+0x98>
 8000fcc:	f1c1 0620 	rsb	r6, r1, #32
 8000fd0:	408b      	lsls	r3, r1
 8000fd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000fd6:	431f      	orrs	r7, r3
 8000fd8:	fa0e f401 	lsl.w	r4, lr, r1
 8000fdc:	fa20 f306 	lsr.w	r3, r0, r6
 8000fe0:	fa2e fe06 	lsr.w	lr, lr, r6
 8000fe4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000fe8:	4323      	orrs	r3, r4
 8000fea:	fa00 f801 	lsl.w	r8, r0, r1
 8000fee:	fa1f fc87 	uxth.w	ip, r7
 8000ff2:	fbbe f0f9 	udiv	r0, lr, r9
 8000ff6:	0c1c      	lsrs	r4, r3, #16
 8000ff8:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ffc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001000:	fb00 fe0c 	mul.w	lr, r0, ip
 8001004:	45a6      	cmp	lr, r4
 8001006:	fa02 f201 	lsl.w	r2, r2, r1
 800100a:	d909      	bls.n	8001020 <__udivmoddi4+0x1a0>
 800100c:	193c      	adds	r4, r7, r4
 800100e:	f100 3aff 	add.w	sl, r0, #4294967295
 8001012:	f080 809c 	bcs.w	800114e <__udivmoddi4+0x2ce>
 8001016:	45a6      	cmp	lr, r4
 8001018:	f240 8099 	bls.w	800114e <__udivmoddi4+0x2ce>
 800101c:	3802      	subs	r0, #2
 800101e:	443c      	add	r4, r7
 8001020:	eba4 040e 	sub.w	r4, r4, lr
 8001024:	fa1f fe83 	uxth.w	lr, r3
 8001028:	fbb4 f3f9 	udiv	r3, r4, r9
 800102c:	fb09 4413 	mls	r4, r9, r3, r4
 8001030:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001034:	fb03 fc0c 	mul.w	ip, r3, ip
 8001038:	45a4      	cmp	ip, r4
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x1ce>
 800103c:	193c      	adds	r4, r7, r4
 800103e:	f103 3eff 	add.w	lr, r3, #4294967295
 8001042:	f080 8082 	bcs.w	800114a <__udivmoddi4+0x2ca>
 8001046:	45a4      	cmp	ip, r4
 8001048:	d97f      	bls.n	800114a <__udivmoddi4+0x2ca>
 800104a:	3b02      	subs	r3, #2
 800104c:	443c      	add	r4, r7
 800104e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001052:	eba4 040c 	sub.w	r4, r4, ip
 8001056:	fba0 ec02 	umull	lr, ip, r0, r2
 800105a:	4564      	cmp	r4, ip
 800105c:	4673      	mov	r3, lr
 800105e:	46e1      	mov	r9, ip
 8001060:	d362      	bcc.n	8001128 <__udivmoddi4+0x2a8>
 8001062:	d05f      	beq.n	8001124 <__udivmoddi4+0x2a4>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x1fe>
 8001066:	ebb8 0203 	subs.w	r2, r8, r3
 800106a:	eb64 0409 	sbc.w	r4, r4, r9
 800106e:	fa04 f606 	lsl.w	r6, r4, r6
 8001072:	fa22 f301 	lsr.w	r3, r2, r1
 8001076:	431e      	orrs	r6, r3
 8001078:	40cc      	lsrs	r4, r1
 800107a:	e9c5 6400 	strd	r6, r4, [r5]
 800107e:	2100      	movs	r1, #0
 8001080:	e74f      	b.n	8000f22 <__udivmoddi4+0xa2>
 8001082:	fbb1 fcf2 	udiv	ip, r1, r2
 8001086:	0c01      	lsrs	r1, r0, #16
 8001088:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800108c:	b280      	uxth	r0, r0
 800108e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001092:	463b      	mov	r3, r7
 8001094:	4638      	mov	r0, r7
 8001096:	463c      	mov	r4, r7
 8001098:	46b8      	mov	r8, r7
 800109a:	46be      	mov	lr, r7
 800109c:	2620      	movs	r6, #32
 800109e:	fbb1 f1f7 	udiv	r1, r1, r7
 80010a2:	eba2 0208 	sub.w	r2, r2, r8
 80010a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80010aa:	e766      	b.n	8000f7a <__udivmoddi4+0xfa>
 80010ac:	4601      	mov	r1, r0
 80010ae:	e718      	b.n	8000ee2 <__udivmoddi4+0x62>
 80010b0:	4610      	mov	r0, r2
 80010b2:	e72c      	b.n	8000f0e <__udivmoddi4+0x8e>
 80010b4:	f1c6 0220 	rsb	r2, r6, #32
 80010b8:	fa2e f302 	lsr.w	r3, lr, r2
 80010bc:	40b7      	lsls	r7, r6
 80010be:	40b1      	lsls	r1, r6
 80010c0:	fa20 f202 	lsr.w	r2, r0, r2
 80010c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010c8:	430a      	orrs	r2, r1
 80010ca:	fbb3 f8fe 	udiv	r8, r3, lr
 80010ce:	b2bc      	uxth	r4, r7
 80010d0:	fb0e 3318 	mls	r3, lr, r8, r3
 80010d4:	0c11      	lsrs	r1, r2, #16
 80010d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010da:	fb08 f904 	mul.w	r9, r8, r4
 80010de:	40b0      	lsls	r0, r6
 80010e0:	4589      	cmp	r9, r1
 80010e2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80010e6:	b280      	uxth	r0, r0
 80010e8:	d93e      	bls.n	8001168 <__udivmoddi4+0x2e8>
 80010ea:	1879      	adds	r1, r7, r1
 80010ec:	f108 3cff 	add.w	ip, r8, #4294967295
 80010f0:	d201      	bcs.n	80010f6 <__udivmoddi4+0x276>
 80010f2:	4589      	cmp	r9, r1
 80010f4:	d81f      	bhi.n	8001136 <__udivmoddi4+0x2b6>
 80010f6:	eba1 0109 	sub.w	r1, r1, r9
 80010fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80010fe:	fb09 f804 	mul.w	r8, r9, r4
 8001102:	fb0e 1119 	mls	r1, lr, r9, r1
 8001106:	b292      	uxth	r2, r2
 8001108:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800110c:	4542      	cmp	r2, r8
 800110e:	d229      	bcs.n	8001164 <__udivmoddi4+0x2e4>
 8001110:	18ba      	adds	r2, r7, r2
 8001112:	f109 31ff 	add.w	r1, r9, #4294967295
 8001116:	d2c4      	bcs.n	80010a2 <__udivmoddi4+0x222>
 8001118:	4542      	cmp	r2, r8
 800111a:	d2c2      	bcs.n	80010a2 <__udivmoddi4+0x222>
 800111c:	f1a9 0102 	sub.w	r1, r9, #2
 8001120:	443a      	add	r2, r7
 8001122:	e7be      	b.n	80010a2 <__udivmoddi4+0x222>
 8001124:	45f0      	cmp	r8, lr
 8001126:	d29d      	bcs.n	8001064 <__udivmoddi4+0x1e4>
 8001128:	ebbe 0302 	subs.w	r3, lr, r2
 800112c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001130:	3801      	subs	r0, #1
 8001132:	46e1      	mov	r9, ip
 8001134:	e796      	b.n	8001064 <__udivmoddi4+0x1e4>
 8001136:	eba7 0909 	sub.w	r9, r7, r9
 800113a:	4449      	add	r1, r9
 800113c:	f1a8 0c02 	sub.w	ip, r8, #2
 8001140:	fbb1 f9fe 	udiv	r9, r1, lr
 8001144:	fb09 f804 	mul.w	r8, r9, r4
 8001148:	e7db      	b.n	8001102 <__udivmoddi4+0x282>
 800114a:	4673      	mov	r3, lr
 800114c:	e77f      	b.n	800104e <__udivmoddi4+0x1ce>
 800114e:	4650      	mov	r0, sl
 8001150:	e766      	b.n	8001020 <__udivmoddi4+0x1a0>
 8001152:	4608      	mov	r0, r1
 8001154:	e6fd      	b.n	8000f52 <__udivmoddi4+0xd2>
 8001156:	443b      	add	r3, r7
 8001158:	3a02      	subs	r2, #2
 800115a:	e733      	b.n	8000fc4 <__udivmoddi4+0x144>
 800115c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001160:	443b      	add	r3, r7
 8001162:	e71c      	b.n	8000f9e <__udivmoddi4+0x11e>
 8001164:	4649      	mov	r1, r9
 8001166:	e79c      	b.n	80010a2 <__udivmoddi4+0x222>
 8001168:	eba1 0109 	sub.w	r1, r1, r9
 800116c:	46c4      	mov	ip, r8
 800116e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001172:	fb09 f804 	mul.w	r8, r9, r4
 8001176:	e7c4      	b.n	8001102 <__udivmoddi4+0x282>

08001178 <__aeabi_idiv0>:
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop

0800117c <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800117c:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 800117e:	4814      	ldr	r0, [pc, #80]	@ (80011d0 <MX_ADC_Init+0x54>)
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_ADC_Init+0x58>)
 8001182:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001184:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001188:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800118a:	2300      	movs	r3, #0
 800118c:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118e:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001190:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001192:	2204      	movs	r2, #4
 8001194:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = ENABLE;
 8001196:	2201      	movs	r2, #1
 8001198:	7602      	strb	r2, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 800119a:	7642      	strb	r2, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800119c:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 800119e:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80011a0:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a4:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a6:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 80011a8:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011b0:	6302      	str	r2, [r0, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80011b2:	2207      	movs	r2, #7
 80011b4:	6342      	str	r2, [r0, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80011b6:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80011b8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 80011bc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011c0:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011c2:	f002 fa2b 	bl	800361c <HAL_ADC_Init>
 80011c6:	b900      	cbnz	r0, 80011ca <MX_ADC_Init+0x4e>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80011c8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80011ca:	f000 fce5 	bl	8001b98 <Error_Handler>
}
 80011ce:	e7fb      	b.n	80011c8 <MX_ADC_Init+0x4c>
 80011d0:	200001a4 	.word	0x200001a4
 80011d4:	40012400 	.word	0x40012400

080011d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011d8:	b510      	push	{r4, lr}
 80011da:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	2300      	movs	r3, #0
 80011de:	9303      	str	r3, [sp, #12]
 80011e0:	9304      	str	r3, [sp, #16]
 80011e2:	9305      	str	r3, [sp, #20]
 80011e4:	9306      	str	r3, [sp, #24]
 80011e6:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC)
 80011e8:	6802      	ldr	r2, [r0, #0]
 80011ea:	4b27      	ldr	r3, [pc, #156]	@ (8001288 <HAL_ADC_MspInit+0xb0>)
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d001      	beq.n	80011f4 <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80011f0:	b008      	add	sp, #32
 80011f2:	bd10      	pop	{r4, pc}
 80011f4:	4604      	mov	r4, r0
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001200:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001202:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001204:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001208:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800120a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800120c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800120e:	f042 0202 	orr.w	r2, r2, #2
 8001212:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800121c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = H2O_Pin|EWPT_V_Pin;
 800121e:	2314      	movs	r3, #20
 8001220:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001222:	2303      	movs	r3, #3
 8001224:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	a903      	add	r1, sp, #12
 8001228:	4818      	ldr	r0, [pc, #96]	@ (800128c <HAL_ADC_MspInit+0xb4>)
 800122a:	f003 fbe7 	bl	80049fc <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel3;
 800122e:	4818      	ldr	r0, [pc, #96]	@ (8001290 <HAL_ADC_MspInit+0xb8>)
 8001230:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <HAL_ADC_MspInit+0xbc>)
 8001232:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Request = DMA_REQUEST_ADC;
 8001234:	2305      	movs	r3, #5
 8001236:	6043      	str	r3, [r0, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001238:	2300      	movs	r3, #0
 800123a:	6083      	str	r3, [r0, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800123c:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800123e:	2280      	movs	r2, #128	@ 0x80
 8001240:	6102      	str	r2, [r0, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001246:	6142      	str	r2, [r0, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001248:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800124c:	6182      	str	r2, [r0, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800124e:	61c3      	str	r3, [r0, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001250:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001252:	f003 f867 	bl	8004324 <HAL_DMA_Init>
 8001256:	b980      	cbnz	r0, 800127a <HAL_ADC_MspInit+0xa2>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001258:	2110      	movs	r1, #16
 800125a:	480d      	ldr	r0, [pc, #52]	@ (8001290 <HAL_ADC_MspInit+0xb8>)
 800125c:	f003 fa62 	bl	8004724 <HAL_DMA_ConfigChannelAttributes>
 8001260:	b970      	cbnz	r0, 8001280 <HAL_ADC_MspInit+0xa8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_ADC_MspInit+0xb8>)
 8001264:	6523      	str	r3, [r4, #80]	@ 0x50
 8001266:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	4611      	mov	r1, r2
 800126c:	2012      	movs	r0, #18
 800126e:	f002 ffd1 	bl	8004214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001272:	2012      	movs	r0, #18
 8001274:	f002 ffde 	bl	8004234 <HAL_NVIC_EnableIRQ>
}
 8001278:	e7ba      	b.n	80011f0 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 800127a:	f000 fc8d 	bl	8001b98 <Error_Handler>
 800127e:	e7eb      	b.n	8001258 <HAL_ADC_MspInit+0x80>
      Error_Handler();
 8001280:	f000 fc8a 	bl	8001b98 <Error_Handler>
 8001284:	e7ed      	b.n	8001262 <HAL_ADC_MspInit+0x8a>
 8001286:	bf00      	nop
 8001288:	40012400 	.word	0x40012400
 800128c:	48000400 	.word	0x48000400
 8001290:	20000144 	.word	0x20000144
 8001294:	40020030 	.word	0x40020030

08001298 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001298:	6802      	ldr	r2, [r0, #0]
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <HAL_ADC_MspDeInit+0x30>)
 800129c:	429a      	cmp	r2, r3
 800129e:	d000      	beq.n	80012a2 <HAL_ADC_MspDeInit+0xa>
 80012a0:	4770      	bx	lr
{
 80012a2:	b510      	push	{r4, lr}
 80012a4:	4604      	mov	r4, r0
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80012a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012aa:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80012ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80012b0:	6613      	str	r3, [r2, #96]	@ 0x60

    /**ADC GPIO Configuration
    PB4     ------> ADC_IN3
    PB2     ------> ADC_IN4
    */
    HAL_GPIO_DeInit(GPIOB, H2O_Pin|EWPT_V_Pin);
 80012b2:	2114      	movs	r1, #20
 80012b4:	4805      	ldr	r0, [pc, #20]	@ (80012cc <HAL_ADC_MspDeInit+0x34>)
 80012b6:	f003 fc73 	bl	8004ba0 <HAL_GPIO_DeInit>

    /* ADC DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 80012ba:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80012bc:	f003 f8a2 	bl	8004404 <HAL_DMA_DeInit>

    /* ADC interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 80012c0:	2012      	movs	r0, #18
 80012c2:	f002 ffbb 	bl	800423c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80012c6:	bd10      	pop	{r4, pc}
 80012c8:	40012400 	.word	0x40012400
 80012cc:	48000400 	.word	0x48000400

080012d0 <ADC_ReadChannels>:
  /* USER CODE END SYS_GetEWPTLevel_2 */
}
/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80012d0:	b530      	push	{r4, r5, lr}
 80012d2:	b085      	sub	sp, #20
 80012d4:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 80012d6:	2300      	movs	r3, #0
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 80012de:	f7ff ff4d 	bl	800117c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80012e2:	4816      	ldr	r0, [pc, #88]	@ (800133c <ADC_ReadChannels+0x6c>)
 80012e4:	f002 fe8c 	bl	8004000 <HAL_ADCEx_Calibration_Start>
 80012e8:	b9f8      	cbnz	r0, 800132a <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80012ea:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80012f0:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012f2:	a901      	add	r1, sp, #4
 80012f4:	4811      	ldr	r0, [pc, #68]	@ (800133c <ADC_ReadChannels+0x6c>)
 80012f6:	f002 fbc5 	bl	8003a84 <HAL_ADC_ConfigChannel>
 80012fa:	b9c8      	cbnz	r0, 8001330 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80012fc:	480f      	ldr	r0, [pc, #60]	@ (800133c <ADC_ReadChannels+0x6c>)
 80012fe:	f002 fd83 	bl	8003e08 <HAL_ADC_Start>
 8001302:	b9c0      	cbnz	r0, 8001336 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001304:	4c0d      	ldr	r4, [pc, #52]	@ (800133c <ADC_ReadChannels+0x6c>)
 8001306:	f04f 31ff 	mov.w	r1, #4294967295
 800130a:	4620      	mov	r0, r4
 800130c:	f002 fa9e 	bl	800384c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001310:	4620      	mov	r0, r4
 8001312:	f002 fe55 	bl	8003fc0 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001316:	4620      	mov	r0, r4
 8001318:	f002 faf7 	bl	800390a <HAL_ADC_GetValue>
 800131c:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 800131e:	4620      	mov	r0, r4
 8001320:	f002 fdee 	bl	8003f00 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001324:	4628      	mov	r0, r5
 8001326:	b005      	add	sp, #20
 8001328:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800132a:	f000 fc35 	bl	8001b98 <Error_Handler>
 800132e:	e7dc      	b.n	80012ea <ADC_ReadChannels+0x1a>
    Error_Handler();
 8001330:	f000 fc32 	bl	8001b98 <Error_Handler>
 8001334:	e7e2      	b.n	80012fc <ADC_ReadChannels+0x2c>
    Error_Handler();
 8001336:	f000 fc2f 	bl	8001b98 <Error_Handler>
 800133a:	e7e3      	b.n	8001304 <ADC_ReadChannels+0x34>
 800133c:	200001a4 	.word	0x200001a4

08001340 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8001340:	4b01      	ldr	r3, [pc, #4]	@ (8001348 <SYS_InitMeasurement+0x8>)
 8001342:	4a02      	ldr	r2, [pc, #8]	@ (800134c <SYS_InitMeasurement+0xc>)
 8001344:	601a      	str	r2, [r3, #0]
}
 8001346:	4770      	bx	lr
 8001348:	200001a4 	.word	0x200001a4
 800134c:	40012400 	.word	0x40012400

08001350 <SYS_GetBatteryLevel>:
{
 8001350:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001352:	480d      	ldr	r0, [pc, #52]	@ (8001388 <SYS_GetBatteryLevel+0x38>)
 8001354:	f7ff ffbc 	bl	80012d0 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8001358:	b1a0      	cbz	r0, 8001384 <SYS_GetBatteryLevel+0x34>
 800135a:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800135c:	4a0b      	ldr	r2, [pc, #44]	@ (800138c <SYS_GetBatteryLevel+0x3c>)
 800135e:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	@ 0xaa
 8001362:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001366:	4290      	cmp	r0, r2
 8001368:	d007      	beq.n	800137a <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800136a:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800136e:	fb02 f000 	mul.w	r0, r2, r0
 8001372:	fbb0 f0f3 	udiv	r0, r0, r3
 8001376:	b280      	uxth	r0, r0
 8001378:	e005      	b.n	8001386 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800137a:	4805      	ldr	r0, [pc, #20]	@ (8001390 <SYS_GetBatteryLevel+0x40>)
 800137c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001380:	b280      	uxth	r0, r0
 8001382:	e000      	b.n	8001386 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001384:	2000      	movs	r0, #0
}
 8001386:	bd08      	pop	{r3, pc}
 8001388:	b4002000 	.word	0xb4002000
 800138c:	1fff7500 	.word	0x1fff7500
 8001390:	004c08d8 	.word	0x004c08d8

08001394 <SYS_GetTemperatureLevel>:
{
 8001394:	b510      	push	{r4, lr}
 8001396:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800139e:	f7ff ffd7 	bl	8001350 <SYS_GetBatteryLevel>
 80013a2:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80013a4:	4821      	ldr	r0, [pc, #132]	@ (800142c <SYS_GetTemperatureLevel+0x98>)
 80013a6:	f7ff ff93 	bl	80012d0 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80013aa:	4b21      	ldr	r3, [pc, #132]	@ (8001430 <SYS_GetTemperatureLevel+0x9c>)
 80013ac:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	@ 0xc8
 80013b0:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	@ 0xa8
 80013b4:	428a      	cmp	r2, r1
 80013b6:	d01d      	beq.n	80013f4 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80013b8:	fb00 f304 	mul.w	r3, r0, r4
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	481d      	ldr	r0, [pc, #116]	@ (8001434 <SYS_GetTemperatureLevel+0xa0>)
 80013c0:	fba0 0303 	umull	r0, r3, r0, r3
 80013c4:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 80013c8:	2064      	movs	r0, #100	@ 0x64
 80013ca:	fb00 f303 	mul.w	r3, r0, r3
 80013ce:	1a52      	subs	r2, r2, r1
 80013d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80013d4:	331e      	adds	r3, #30
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 80013dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 80013ea:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 80013ee:	b200      	sxth	r0, r0
 80013f0:	b002      	add	sp, #8
 80013f2:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 80013f4:	fb04 f000 	mul.w	r0, r4, r0
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <SYS_GetTemperatureLevel+0xa4>)
 80013fa:	fba3 2300 	umull	r2, r3, r3, r0
 80013fe:	1ac4      	subs	r4, r0, r3
 8001400:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8001404:	0adb      	lsrs	r3, r3, #11
 8001406:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800140a:	fb02 f303 	mul.w	r3, r2, r3
 800140e:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 8001412:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 8001416:	4a09      	ldr	r2, [pc, #36]	@ (800143c <SYS_GetTemperatureLevel+0xa8>)
 8001418:	fb82 1203 	smull	r1, r2, r2, r3
 800141c:	17db      	asrs	r3, r3, #31
 800141e:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 8001422:	331e      	adds	r3, #30
 8001424:	b21b      	sxth	r3, r3
 8001426:	f8ad 3006 	strh.w	r3, [sp, #6]
 800142a:	e7d7      	b.n	80013dc <SYS_GetTemperatureLevel+0x48>
 800142c:	b0001000 	.word	0xb0001000
 8001430:	1fff7500 	.word	0x1fff7500
 8001434:	09ee009f 	.word	0x09ee009f
 8001438:	00100101 	.word	0x00100101
 800143c:	68db8bad 	.word	0x68db8bad

08001440 <SYS_GetH2OLevel>:
{
 8001440:	b530      	push	{r4, r5, lr}
 8001442:	b083      	sub	sp, #12
    measuredLevel = ADC_ReadChannels(ADC_CHANNEL_3);
 8001444:	4832      	ldr	r0, [pc, #200]	@ (8001510 <SYS_GetH2OLevel+0xd0>)
 8001446:	f7ff ff43 	bl	80012d0 <ADC_ReadChannels>
    if (measuredLevel == 0)
 800144a:	b300      	cbz	r0, 800148e <SYS_GetH2OLevel+0x4e>
      if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800144c:	4a31      	ldr	r2, [pc, #196]	@ (8001514 <SYS_GetH2OLevel+0xd4>)
 800144e:	f8b2 10aa 	ldrh.w	r1, [r2, #170]	@ 0xaa
 8001452:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001456:	4291      	cmp	r1, r2
 8001458:	d00c      	beq.n	8001474 <SYS_GetH2OLevel+0x34>
    	  H2OLevelmV = ((float)measuredLevel>=CORRECTION)
 800145a:	f7ff fbe5 	bl	8000c28 <__aeabi_ui2f>
 800145e:	4604      	mov	r4, r0
						  : 0.0f; 												//__LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001460:	492d      	ldr	r1, [pc, #180]	@ (8001518 <SYS_GetH2OLevel+0xd8>)
 8001462:	f7ff fc9b 	bl	8000d9c <__aeabi_fcmpge>
 8001466:	2800      	cmp	r0, #0
 8001468:	d046      	beq.n	80014f8 <SYS_GetH2OLevel+0xb8>
 800146a:	492b      	ldr	r1, [pc, #172]	@ (8001518 <SYS_GetH2OLevel+0xd8>)
 800146c:	4620      	mov	r0, r4
 800146e:	f7ff fb29 	bl	8000ac4 <__aeabi_fsub>
 8001472:	e00d      	b.n	8001490 <SYS_GetH2OLevel+0x50>
    	  H2OLevelmV = ((float)measuredLevel>=CORRECTION)
 8001474:	f7ff fbd8 	bl	8000c28 <__aeabi_ui2f>
 8001478:	4604      	mov	r4, r0
				  : 0.0f; 													//(VREFINT_CAL_VREF) / measuredLevel;
 800147a:	4927      	ldr	r1, [pc, #156]	@ (8001518 <SYS_GetH2OLevel+0xd8>)
 800147c:	f7ff fc8e 	bl	8000d9c <__aeabi_fcmpge>
 8001480:	2800      	cmp	r0, #0
 8001482:	d03b      	beq.n	80014fc <SYS_GetH2OLevel+0xbc>
 8001484:	4924      	ldr	r1, [pc, #144]	@ (8001518 <SYS_GetH2OLevel+0xd8>)
 8001486:	4620      	mov	r0, r4
 8001488:	f7ff fb1c 	bl	8000ac4 <__aeabi_fsub>
 800148c:	e000      	b.n	8001490 <SYS_GetH2OLevel+0x50>
    	H2OLevelmV = 0.0f;
 800148e:	2000      	movs	r0, #0
  APP_LOG(TS_ON, VLEVEL_M, "H2O Measured: %d\r\n", H2OLevelmV);
 8001490:	f7ff f9bc 	bl	800080c <__aeabi_f2d>
 8001494:	4604      	mov	r4, r0
 8001496:	460d      	mov	r5, r1
 8001498:	e9cd 4500 	strd	r4, r5, [sp]
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <SYS_GetH2OLevel+0xdc>)
 800149e:	2201      	movs	r2, #1
 80014a0:	2100      	movs	r1, #0
 80014a2:	2002      	movs	r0, #2
 80014a4:	f010 fde8 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
  H2OLevelmV -= 0.1991*x - 6.046;
 80014a8:	a315      	add	r3, pc, #84	@ (adr r3, 8001500 <SYS_GetH2OLevel+0xc0>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	4620      	mov	r0, r4
 80014b0:	4629      	mov	r1, r5
 80014b2:	f7fe fe69 	bl	8000188 <__aeabi_dmul>
 80014b6:	a314      	add	r3, pc, #80	@ (adr r3, 8001508 <SYS_GetH2OLevel+0xc8>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7ff f846 	bl	800054c <__aeabi_dsub>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4620      	mov	r0, r4
 80014c6:	4629      	mov	r1, r5
 80014c8:	f7ff f840 	bl	800054c <__aeabi_dsub>
 80014cc:	f7ff faa6 	bl	8000a1c <__aeabi_d2f>
 80014d0:	4604      	mov	r4, r0
  APP_LOG(TS_ON, VLEVEL_M, "H2O Scaled: %d\r\n", H2OLevelmV);
 80014d2:	f7ff f99b 	bl	800080c <__aeabi_f2d>
 80014d6:	e9cd 0100 	strd	r0, r1, [sp]
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <SYS_GetH2OLevel+0xe0>)
 80014dc:	2201      	movs	r2, #1
 80014de:	2100      	movs	r1, #0
 80014e0:	2002      	movs	r0, #2
 80014e2:	f010 fdc9 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
  return (uint16_t)(H2OLevelmV*SCALE);
 80014e6:	490f      	ldr	r1, [pc, #60]	@ (8001524 <SYS_GetH2OLevel+0xe4>)
 80014e8:	4620      	mov	r0, r4
 80014ea:	f7fe ff77 	bl	80003dc <__aeabi_fmul>
 80014ee:	f7ff fc8f 	bl	8000e10 <__aeabi_f2uiz>
}
 80014f2:	b280      	uxth	r0, r0
 80014f4:	b003      	add	sp, #12
 80014f6:	bd30      	pop	{r4, r5, pc}
						  : 0.0f; 												//__LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80014f8:	2000      	movs	r0, #0
 80014fa:	e7c9      	b.n	8001490 <SYS_GetH2OLevel+0x50>
				  : 0.0f; 													//(VREFINT_CAL_VREF) / measuredLevel;
 80014fc:	2000      	movs	r0, #0
 80014fe:	e7c7      	b.n	8001490 <SYS_GetH2OLevel+0x50>
 8001500:	da5119ce 	.word	0xda5119ce
 8001504:	3fc97c1b 	.word	0x3fc97c1b
 8001508:	9fbe76c9 	.word	0x9fbe76c9
 800150c:	40182f1a 	.word	0x40182f1a
 8001510:	0c000008 	.word	0x0c000008
 8001514:	1fff7500 	.word	0x1fff7500
 8001518:	42480000 	.word	0x42480000
 800151c:	08012d2c 	.word	0x08012d2c
 8001520:	08012d40 	.word	0x08012d40
 8001524:	3fbbc361 	.word	0x3fbbc361

08001528 <SYS_GetEWPTLevel>:
{
 8001528:	b530      	push	{r4, r5, lr}
 800152a:	b083      	sub	sp, #12
    measuredLevel = ADC_ReadChannels(ADC_CHANNEL_4);
 800152c:	4832      	ldr	r0, [pc, #200]	@ (80015f8 <SYS_GetEWPTLevel+0xd0>)
 800152e:	f7ff fecf 	bl	80012d0 <ADC_ReadChannels>
    if (measuredLevel == 0)
 8001532:	b300      	cbz	r0, 8001576 <SYS_GetEWPTLevel+0x4e>
      if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001534:	4a31      	ldr	r2, [pc, #196]	@ (80015fc <SYS_GetEWPTLevel+0xd4>)
 8001536:	f8b2 10aa 	ldrh.w	r1, [r2, #170]	@ 0xaa
 800153a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800153e:	4291      	cmp	r1, r2
 8001540:	d00c      	beq.n	800155c <SYS_GetEWPTLevel+0x34>
    	  EWPTLevelmV = ((float)measuredLevel >= CORRECTION)
 8001542:	f7ff fb71 	bl	8000c28 <__aeabi_ui2f>
 8001546:	4604      	mov	r4, r0
				  : 0.0f; 													//__LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001548:	492d      	ldr	r1, [pc, #180]	@ (8001600 <SYS_GetEWPTLevel+0xd8>)
 800154a:	f7ff fc27 	bl	8000d9c <__aeabi_fcmpge>
 800154e:	2800      	cmp	r0, #0
 8001550:	d046      	beq.n	80015e0 <SYS_GetEWPTLevel+0xb8>
 8001552:	492b      	ldr	r1, [pc, #172]	@ (8001600 <SYS_GetEWPTLevel+0xd8>)
 8001554:	4620      	mov	r0, r4
 8001556:	f7ff fab5 	bl	8000ac4 <__aeabi_fsub>
 800155a:	e00d      	b.n	8001578 <SYS_GetEWPTLevel+0x50>
    	  EWPTLevelmV = (float)measuredLevel >= CORRECTION
 800155c:	f7ff fb64 	bl	8000c28 <__aeabi_ui2f>
 8001560:	4604      	mov	r4, r0
						  : 0.0f; 											//(VREFINT_CAL_VREF) / measuredLevel;
 8001562:	4927      	ldr	r1, [pc, #156]	@ (8001600 <SYS_GetEWPTLevel+0xd8>)
 8001564:	f7ff fc1a 	bl	8000d9c <__aeabi_fcmpge>
 8001568:	2800      	cmp	r0, #0
 800156a:	d03b      	beq.n	80015e4 <SYS_GetEWPTLevel+0xbc>
 800156c:	4924      	ldr	r1, [pc, #144]	@ (8001600 <SYS_GetEWPTLevel+0xd8>)
 800156e:	4620      	mov	r0, r4
 8001570:	f7ff faa8 	bl	8000ac4 <__aeabi_fsub>
 8001574:	e000      	b.n	8001578 <SYS_GetEWPTLevel+0x50>
    	EWPTLevelmV = 0.0f;
 8001576:	2000      	movs	r0, #0
    APP_LOG(TS_ON, VLEVEL_M, "eWPT Measured: %d\r\n", EWPTLevelmV);
 8001578:	f7ff f948 	bl	800080c <__aeabi_f2d>
 800157c:	4604      	mov	r4, r0
 800157e:	460d      	mov	r5, r1
 8001580:	e9cd 4500 	strd	r4, r5, [sp]
 8001584:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <SYS_GetEWPTLevel+0xdc>)
 8001586:	2201      	movs	r2, #1
 8001588:	2100      	movs	r1, #0
 800158a:	2002      	movs	r0, #2
 800158c:	f010 fd74 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
    EWPTLevelmV -= 0.1991*x - 6.046;
 8001590:	a315      	add	r3, pc, #84	@ (adr r3, 80015e8 <SYS_GetEWPTLevel+0xc0>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	4620      	mov	r0, r4
 8001598:	4629      	mov	r1, r5
 800159a:	f7fe fdf5 	bl	8000188 <__aeabi_dmul>
 800159e:	a314      	add	r3, pc, #80	@ (adr r3, 80015f0 <SYS_GetEWPTLevel+0xc8>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7fe ffd2 	bl	800054c <__aeabi_dsub>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4620      	mov	r0, r4
 80015ae:	4629      	mov	r1, r5
 80015b0:	f7fe ffcc 	bl	800054c <__aeabi_dsub>
 80015b4:	f7ff fa32 	bl	8000a1c <__aeabi_d2f>
 80015b8:	4604      	mov	r4, r0
    APP_LOG(TS_ON, VLEVEL_M, "eWPT Scaled: %d\r\n", EWPTLevelmV);
 80015ba:	f7ff f927 	bl	800080c <__aeabi_f2d>
 80015be:	e9cd 0100 	strd	r0, r1, [sp]
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <SYS_GetEWPTLevel+0xe0>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	2100      	movs	r1, #0
 80015c8:	2002      	movs	r0, #2
 80015ca:	f010 fd55 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
    return (uint16_t)(EWPTLevelmV*SCALE);
 80015ce:	490f      	ldr	r1, [pc, #60]	@ (800160c <SYS_GetEWPTLevel+0xe4>)
 80015d0:	4620      	mov	r0, r4
 80015d2:	f7fe ff03 	bl	80003dc <__aeabi_fmul>
 80015d6:	f7ff fc1b 	bl	8000e10 <__aeabi_f2uiz>
}
 80015da:	b280      	uxth	r0, r0
 80015dc:	b003      	add	sp, #12
 80015de:	bd30      	pop	{r4, r5, pc}
				  : 0.0f; 													//__LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80015e0:	2000      	movs	r0, #0
 80015e2:	e7c9      	b.n	8001578 <SYS_GetEWPTLevel+0x50>
						  : 0.0f; 											//(VREFINT_CAL_VREF) / measuredLevel;
 80015e4:	2000      	movs	r0, #0
 80015e6:	e7c7      	b.n	8001578 <SYS_GetEWPTLevel+0x50>
 80015e8:	da5119ce 	.word	0xda5119ce
 80015ec:	3fc97c1b 	.word	0x3fc97c1b
 80015f0:	9fbe76c9 	.word	0x9fbe76c9
 80015f4:	40182f1a 	.word	0x40182f1a
 80015f8:	10000010 	.word	0x10000010
 80015fc:	1fff7500 	.word	0x1fff7500
 8001600:	42480000 	.word	0x42480000
 8001604:	08012d54 	.word	0x08012d54
 8001608:	08012d68 	.word	0x08012d68
 800160c:	3fbc154d 	.word	0x3fbc154d

08001610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001610:	b500      	push	{lr}
 8001612:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001618:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800161a:	f042 0204 	orr.w	r2, r2, #4
 800161e:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001620:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001622:	f002 0204 	and.w	r2, r2, #4
 8001626:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001628:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800162a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800162c:	f042 0201 	orr.w	r2, r2, #1
 8001630:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800163a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	4611      	mov	r1, r2
 8001640:	200b      	movs	r0, #11
 8001642:	f002 fde7 	bl	8004214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001646:	200b      	movs	r0, #11
 8001648:	f002 fdf4 	bl	8004234 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	4611      	mov	r1, r2
 8001650:	200c      	movs	r0, #12
 8001652:	f002 fddf 	bl	8004214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001656:	200c      	movs	r0, #12
 8001658:	f002 fdec 	bl	8004234 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	4611      	mov	r1, r2
 8001660:	200d      	movs	r0, #13
 8001662:	f002 fdd7 	bl	8004214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001666:	200d      	movs	r0, #13
 8001668:	f002 fde4 	bl	8004234 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	4611      	mov	r1, r2
 8001670:	200e      	movs	r0, #14
 8001672:	f002 fdcf 	bl	8004214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001676:	200e      	movs	r0, #14
 8001678:	f002 fddc 	bl	8004234 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	4611      	mov	r1, r2
 8001680:	200f      	movs	r0, #15
 8001682:	f002 fdc7 	bl	8004214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001686:	200f      	movs	r0, #15
 8001688:	f002 fdd4 	bl	8004234 <HAL_NVIC_EnableIRQ>

}
 800168c:	b003      	add	sp, #12
 800168e:	f85d fb04 	ldr.w	pc, [sp], #4

08001692 <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001692:	2300      	movs	r3, #0
 8001694:	e001      	b.n	800169a <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001696:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 8001698:	3308      	adds	r3, #8
 800169a:	428b      	cmp	r3, r1
 800169c:	d20a      	bcs.n	80016b4 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 800169e:	6842      	ldr	r2, [r0, #4]
 80016a0:	f8d0 c000 	ldr.w	ip, [r0]
 80016a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80016a8:	bf08      	it	eq
 80016aa:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 80016ae:	d0f2      	beq.n	8001696 <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 80016b0:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 80016b2:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 80016b4:	2000      	movs	r0, #0
 80016b6:	4770      	bx	lr

080016b8 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 80016b8:	b130      	cbz	r0, 80016c8 <FLASH_IF_INT_Read+0x10>
{
 80016ba:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 80016bc:	b139      	cbz	r1, 80016ce <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80016be:	b292      	uxth	r2, r2
 80016c0:	f010 fdf0 	bl	80122a4 <UTIL_MEM_cpy_8>
  return ret_status;
 80016c4:	2000      	movs	r0, #0
}
 80016c6:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 80016c8:	f06f 0005 	mvn.w	r0, #5
}
 80016cc:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 80016ce:	f06f 0005 	mvn.w	r0, #5
 80016d2:	e7f8      	b.n	80016c6 <FLASH_IF_INT_Read+0xe>

080016d4 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80016d4:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80016d6:	f003 f863 	bl	80047a0 <HAL_FLASH_Unlock>
 80016da:	b978      	cbnz	r0, 80016fc <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80016dc:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <FLASH_IF_INT_Clear_Error+0x30>)
 80016de:	699a      	ldr	r2, [r3, #24]
 80016e0:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80016e4:	619a      	str	r2, [r3, #24]
 80016e6:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 80016ea:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80016ec:	f003 f870 	bl	80047d0 <HAL_FLASH_Lock>
 80016f0:	b908      	cbnz	r0, 80016f6 <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 80016f2:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 80016f4:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80016f6:	f06f 0004 	mvn.w	r0, #4
 80016fa:	e7fb      	b.n	80016f4 <FLASH_IF_INT_Clear_Error+0x20>
 80016fc:	f06f 0004 	mvn.w	r0, #4
 8001700:	e7f8      	b.n	80016f4 <FLASH_IF_INT_Clear_Error+0x20>
 8001702:	bf00      	nop
 8001704:	58004000 	.word	0x58004000

08001708 <FLASH_IF_INT_Erase>:
{
 8001708:	b570      	push	{r4, r5, r6, lr}
 800170a:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 8001710:	2800      	cmp	r0, #0
 8001712:	d039      	beq.n	8001788 <FLASH_IF_INT_Erase+0x80>
 8001714:	460e      	mov	r6, r1
 8001716:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 8001718:	f7ff ffdc 	bl	80016d4 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 800171c:	4605      	mov	r5, r0
 800171e:	b110      	cbz	r0, 8001726 <FLASH_IF_INT_Erase+0x1e>
}
 8001720:	4628      	mov	r0, r5
 8001722:	b004      	add	sp, #16
 8001724:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001726:	f003 f83b 	bl	80047a0 <HAL_FLASH_Unlock>
 800172a:	bb80      	cbnz	r0, 800178e <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 800172c:	2302      	movs	r3, #2
 800172e:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 8001730:	f104 4378 	add.w	r3, r4, #4160749568	@ 0xf8000000
 8001734:	4817      	ldr	r0, [pc, #92]	@ (8001794 <FLASH_IF_INT_Erase+0x8c>)
 8001736:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	@ 0x5e0
 800173a:	4a17      	ldr	r2, [pc, #92]	@ (8001798 <FLASH_IF_INT_Erase+0x90>)
 800173c:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 8001740:	fbb3 fcf1 	udiv	ip, r3, r1
 8001744:	fb01 331c 	mls	r3, r1, ip, r3
 8001748:	0adb      	lsrs	r3, r3, #11
 800174a:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 800174c:	19a1      	adds	r1, r4, r6
 800174e:	f101 4178 	add.w	r1, r1, #4160749568	@ 0xf8000000
 8001752:	3901      	subs	r1, #1
 8001754:	f8d0 05e0 	ldr.w	r0, [r0, #1504]	@ 0x5e0
 8001758:	ea02 2280 	and.w	r2, r2, r0, lsl #10
 800175c:	fbb1 f0f2 	udiv	r0, r1, r2
 8001760:	fb02 1110 	mls	r1, r2, r0, r1
 8001764:	ebc3 23d1 	rsb	r3, r3, r1, lsr #11
 8001768:	3301      	adds	r3, #1
 800176a:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 800176c:	a903      	add	r1, sp, #12
 800176e:	4668      	mov	r0, sp
 8001770:	f003 f904 	bl	800497c <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 8001774:	b118      	cbz	r0, 800177e <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001776:	2802      	cmp	r0, #2
 8001778:	d004      	beq.n	8001784 <FLASH_IF_INT_Erase+0x7c>
 800177a:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 800177e:	f003 f827 	bl	80047d0 <HAL_FLASH_Lock>
 8001782:	e7cd      	b.n	8001720 <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001784:	2501      	movs	r5, #1
 8001786:	e7fa      	b.n	800177e <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 8001788:	f06f 0505 	mvn.w	r5, #5
 800178c:	e7c8      	b.n	8001720 <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 800178e:	f06f 0504 	mvn.w	r5, #4
 8001792:	e7c5      	b.n	8001720 <FLASH_IF_INT_Erase+0x18>
 8001794:	1fff7000 	.word	0x1fff7000
 8001798:	03fffc00 	.word	0x03fffc00

0800179c <FLASH_IF_INT_Write>:
{
 800179c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a0:	b089      	sub	sp, #36	@ 0x24
 80017a2:	9003      	str	r0, [sp, #12]
 80017a4:	9204      	str	r2, [sp, #16]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80017a6:	2800      	cmp	r0, #0
 80017a8:	f000 80b4 	beq.w	8001914 <FLASH_IF_INT_Write+0x178>
 80017ac:	4683      	mov	fp, r0
 80017ae:	460e      	mov	r6, r1
 80017b0:	2900      	cmp	r1, #0
 80017b2:	f000 80b3 	beq.w	800191c <FLASH_IF_INT_Write+0x180>
 80017b6:	f012 0f07 	tst.w	r2, #7
 80017ba:	f040 80b3 	bne.w	8001924 <FLASH_IF_INT_Write+0x188>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80017be:	f010 0307 	ands.w	r3, r0, #7
 80017c2:	9305      	str	r3, [sp, #20]
 80017c4:	f040 80b2 	bne.w	800192c <FLASH_IF_INT_Write+0x190>
  ret_status = FLASH_IF_INT_Clear_Error();
 80017c8:	f7ff ff84 	bl	80016d4 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 80017cc:	9001      	str	r0, [sp, #4]
 80017ce:	b118      	cbz	r0, 80017d8 <FLASH_IF_INT_Write+0x3c>
}
 80017d0:	9801      	ldr	r0, [sp, #4]
 80017d2:	b009      	add	sp, #36	@ 0x24
 80017d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 80017d8:	f002 ffe2 	bl	80047a0 <HAL_FLASH_Unlock>
 80017dc:	2800      	cmp	r0, #0
 80017de:	f040 80a9 	bne.w	8001934 <FLASH_IF_INT_Write+0x198>
      start_page_index = PAGE_INDEX(uDest);
 80017e2:	9c03      	ldr	r4, [sp, #12]
 80017e4:	f104 4278 	add.w	r2, r4, #4160749568	@ 0xf8000000
 80017e8:	4b54      	ldr	r3, [pc, #336]	@ (800193c <FLASH_IF_INT_Write+0x1a0>)
 80017ea:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	@ 0x5e0
 80017ee:	4954      	ldr	r1, [pc, #336]	@ (8001940 <FLASH_IF_INT_Write+0x1a4>)
 80017f0:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 80017f4:	fbb2 f3f1 	udiv	r3, r2, r1
 80017f8:	fb01 2213 	mls	r2, r1, r3, r2
 80017fc:	0ad3      	lsrs	r3, r2, #11
 80017fe:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001800:	9b04      	ldr	r3, [sp, #16]
 8001802:	18e3      	adds	r3, r4, r3
 8001804:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001808:	3b01      	subs	r3, #1
 800180a:	fbb3 f0f1 	udiv	r0, r3, r1
 800180e:	fb01 3310 	mls	r3, r1, r0, r3
 8001812:	0adb      	lsrs	r3, r3, #11
 8001814:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 8001818:	3301      	adds	r3, #1
      if (number_pages > 1)
 800181a:	2b01      	cmp	r3, #1
 800181c:	d907      	bls.n	800182e <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800181e:	f3c4 090a 	ubfx	r9, r4, #0, #11
 8001822:	f5c9 6900 	rsb	r9, r9, #2048	@ 0x800
            ret_status = FLASH_IF_WRITE_ERROR;
 8001826:	f8dd a018 	ldr.w	sl, [sp, #24]
 800182a:	9307      	str	r3, [sp, #28]
 800182c:	e031      	b.n	8001892 <FLASH_IF_INT_Write+0xf6>
  uint32_t length = uLength;
 800182e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8001832:	e7f8      	b.n	8001826 <FLASH_IF_INT_Write+0x8a>
          current_length = length;
 8001834:	46c8      	mov	r8, r9
          current_source = uSource;
 8001836:	4637      	mov	r7, r6
          current_dest = uDest;
 8001838:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800183a:	9d05      	ldr	r5, [sp, #20]
 800183c:	f8cd b008 	str.w	fp, [sp, #8]
 8001840:	4545      	cmp	r5, r8
 8001842:	d215      	bcs.n	8001870 <FLASH_IF_INT_Write+0xd4>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001844:	eb05 0b07 	add.w	fp, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001848:	e9db 2300 	ldrd	r2, r3, [fp]
 800184c:	4621      	mov	r1, r4
 800184e:	2001      	movs	r0, #1
 8001850:	f003 f80c 	bl	800486c <HAL_FLASH_Program>
 8001854:	2800      	cmp	r0, #0
 8001856:	d147      	bne.n	80018e8 <FLASH_IF_INT_Write+0x14c>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001858:	6820      	ldr	r0, [r4, #0]
 800185a:	6862      	ldr	r2, [r4, #4]
 800185c:	59e9      	ldr	r1, [r5, r7]
 800185e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	bf08      	it	eq
 8001866:	4288      	cmpeq	r0, r1
 8001868:	d144      	bne.n	80018f4 <FLASH_IF_INT_Write+0x158>
            current_dest = current_dest + 8U;
 800186a:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800186c:	3508      	adds	r5, #8
 800186e:	e7e7      	b.n	8001840 <FLASH_IF_INT_Write+0xa4>
 8001870:	f8dd b008 	ldr.w	fp, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 8001874:	9b01      	ldr	r3, [sp, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d145      	bne.n	8001906 <FLASH_IF_INT_Write+0x16a>
        uDest += length;
 800187a:	44cb      	add	fp, r9
        uSource += length;
 800187c:	444e      	add	r6, r9
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 800187e:	9b04      	ldr	r3, [sp, #16]
 8001880:	eba3 0909 	sub.w	r9, r3, r9
 8001884:	f5b9 6f00 	cmp.w	r9, #2048	@ 0x800
 8001888:	bf28      	it	cs
 800188a:	f44f 6900 	movcs.w	r9, #2048	@ 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800188e:	f10a 0a01 	add.w	sl, sl, #1
 8001892:	9b06      	ldr	r3, [sp, #24]
 8001894:	9a07      	ldr	r2, [sp, #28]
 8001896:	4413      	add	r3, r2
 8001898:	4553      	cmp	r3, sl
 800189a:	d934      	bls.n	8001906 <FLASH_IF_INT_Write+0x16a>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 800189c:	f50a 3480 	add.w	r4, sl, #65536	@ 0x10000
 80018a0:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80018a2:	4649      	mov	r1, r9
 80018a4:	9803      	ldr	r0, [sp, #12]
 80018a6:	f7ff fef4 	bl	8001692 <FLASH_IF_INT_IsEmpty>
 80018aa:	2800      	cmp	r0, #0
 80018ac:	d0c2      	beq.n	8001834 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 80018ae:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <FLASH_IF_INT_Write+0x1a8>)
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	b328      	cbz	r0, 8001900 <FLASH_IF_INT_Write+0x164>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80018b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018b8:	4621      	mov	r1, r4
 80018ba:	f7ff fefd 	bl	80016b8 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80018be:	4b21      	ldr	r3, [pc, #132]	@ (8001944 <FLASH_IF_INT_Write+0x1a8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f3cb 000a 	ubfx	r0, fp, #0, #11
 80018c6:	fa1f f289 	uxth.w	r2, r9
 80018ca:	4631      	mov	r1, r6
 80018cc:	4418      	add	r0, r3
 80018ce:	f010 fce9 	bl	80122a4 <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80018d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018d6:	4620      	mov	r0, r4
 80018d8:	f7ff ff16 	bl	8001708 <FLASH_IF_INT_Erase>
 80018dc:	b9b0      	cbnz	r0, 800190c <FLASH_IF_INT_Write+0x170>
          current_source = (uint32_t)pAllocatedBuffer;
 80018de:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <FLASH_IF_INT_Write+0x1a8>)
 80018e0:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 80018e2:	f44f 6800 	mov.w	r8, #2048	@ 0x800
 80018e6:	e7a8      	b.n	800183a <FLASH_IF_INT_Write+0x9e>
            ret_status = FLASH_IF_WRITE_ERROR;
 80018e8:	f8dd b008 	ldr.w	fp, [sp, #8]
 80018ec:	f06f 0303 	mvn.w	r3, #3
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	e7bf      	b.n	8001874 <FLASH_IF_INT_Write+0xd8>
              ret_status = FLASH_IF_WRITE_ERROR;
 80018f4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80018f8:	f06f 0303 	mvn.w	r3, #3
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	e7b9      	b.n	8001874 <FLASH_IF_INT_Write+0xd8>
            ret_status = FLASH_IF_PARAM_ERROR;
 8001900:	f06f 0305 	mvn.w	r3, #5
 8001904:	9301      	str	r3, [sp, #4]
      HAL_FLASH_Lock();
 8001906:	f002 ff63 	bl	80047d0 <HAL_FLASH_Lock>
 800190a:	e761      	b.n	80017d0 <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 800190c:	f06f 0301 	mvn.w	r3, #1
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	e7f8      	b.n	8001906 <FLASH_IF_INT_Write+0x16a>
    return FLASH_IF_PARAM_ERROR;
 8001914:	f06f 0305 	mvn.w	r3, #5
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	e759      	b.n	80017d0 <FLASH_IF_INT_Write+0x34>
 800191c:	f06f 0305 	mvn.w	r3, #5
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	e755      	b.n	80017d0 <FLASH_IF_INT_Write+0x34>
 8001924:	f06f 0305 	mvn.w	r3, #5
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	e751      	b.n	80017d0 <FLASH_IF_INT_Write+0x34>
 800192c:	f06f 0305 	mvn.w	r3, #5
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	e74d      	b.n	80017d0 <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 8001934:	f06f 0304 	mvn.w	r3, #4
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	e749      	b.n	80017d0 <FLASH_IF_INT_Write+0x34>
 800193c:	1fff7000 	.word	0x1fff7000
 8001940:	03fffc00 	.word	0x03fffc00
 8001944:	20000208 	.word	0x20000208

08001948 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 8001948:	4b01      	ldr	r3, [pc, #4]	@ (8001950 <FLASH_IF_Init+0x8>)
 800194a:	6018      	str	r0, [r3, #0]
}
 800194c:	2000      	movs	r0, #0
 800194e:	4770      	bx	lr
 8001950:	20000208 	.word	0x20000208

08001954 <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001954:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8001958:	d30e      	bcc.n	8001978 <FLASH_IF_Write+0x24>
{
 800195a:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800195c:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <FLASH_IF_Write+0x30>)
 800195e:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	@ 0x5e0
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <FLASH_IF_Write+0x34>)
 8001964:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001968:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800196c:	3b01      	subs	r3, #1
 800196e:	4298      	cmp	r0, r3
 8001970:	d805      	bhi.n	800197e <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8001972:	f7ff ff13 	bl	800179c <FLASH_IF_INT_Write>
}
 8001976:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
}
 800197c:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800197e:	f04f 30ff 	mov.w	r0, #4294967295
 8001982:	e7f8      	b.n	8001976 <FLASH_IF_Write+0x22>
 8001984:	1fff7000 	.word	0x1fff7000
 8001988:	03fffc00 	.word	0x03fffc00

0800198c <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 800198c:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 8001990:	d30e      	bcc.n	80019b0 <FLASH_IF_Read+0x24>
{
 8001992:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001994:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <FLASH_IF_Read+0x30>)
 8001996:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	@ 0x5e0
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <FLASH_IF_Read+0x34>)
 800199c:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80019a0:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80019a4:	3b01      	subs	r3, #1
 80019a6:	4299      	cmp	r1, r3
 80019a8:	d805      	bhi.n	80019b6 <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80019aa:	f7ff fe85 	bl	80016b8 <FLASH_IF_INT_Read>
}
 80019ae:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80019b4:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80019b6:	f04f 30ff 	mov.w	r0, #4294967295
 80019ba:	e7f8      	b.n	80019ae <FLASH_IF_Read+0x22>
 80019bc:	1fff7000 	.word	0x1fff7000
 80019c0:	03fffc00 	.word	0x03fffc00

080019c4 <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80019c4:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 80019c8:	d30e      	bcc.n	80019e8 <FLASH_IF_Erase+0x24>
{
 80019ca:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <FLASH_IF_Erase+0x30>)
 80019ce:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	@ 0x5e0
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <FLASH_IF_Erase+0x34>)
 80019d4:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 80019d8:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80019dc:	3b01      	subs	r3, #1
 80019de:	4298      	cmp	r0, r3
 80019e0:	d805      	bhi.n	80019ee <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80019e2:	f7ff fe91 	bl	8001708 <FLASH_IF_INT_Erase>
}
 80019e6:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80019ec:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80019ee:	f04f 30ff 	mov.w	r0, #4294967295
 80019f2:	e7f8      	b.n	80019e6 <FLASH_IF_Erase+0x22>
 80019f4:	1fff7000 	.word	0x1fff7000
 80019f8:	03fffc00 	.word	0x03fffc00

080019fc <MX_GPIO_Init>:
     PA7   ------> DEBUG_SUBGHZSPI-MOSIOUT
     PA4   ------> DEBUG_SUBGHZSPI-NSSOUT
     PA5   ------> DEBUG_SUBGHZSPI-SCKOUT
*/
void MX_GPIO_Init(void)
{
 80019fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a00:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	2400      	movs	r4, #0
 8001a04:	9405      	str	r4, [sp, #20]
 8001a06:	9406      	str	r4, [sp, #24]
 8001a08:	9407      	str	r4, [sp, #28]
 8001a0a:	9408      	str	r4, [sp, #32]
 8001a0c:	9409      	str	r4, [sp, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a14:	f042 0201 	orr.w	r2, r2, #1
 8001a18:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a1c:	f002 0201 	and.w	r2, r2, #1
 8001a20:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8001a22:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a26:	f042 0202 	orr.w	r2, r2, #2
 8001a2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a2e:	f002 0202 	and.w	r2, r2, #2
 8001a32:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001a34:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a38:	f042 0204 	orr.w	r2, r2, #4
 8001a3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a40:	f002 0204 	and.w	r2, r2, #4
 8001a44:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001a46:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a56:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a58:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LoRaProbe1_Pin|LoRaProbe2_Pin
 8001a5a:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8001b8c <MX_GPIO_Init+0x190>
 8001a5e:	4622      	mov	r2, r4
 8001a60:	f44f 413a 	mov.w	r1, #47616	@ 0xba00
 8001a64:	4640      	mov	r0, r8
 8001a66:	f003 f919 	bl	8004c9c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Power12VEN_GPIO_Port, Power12VEN_Pin, GPIO_PIN_SET);
 8001a6a:	4f49      	ldr	r7, [pc, #292]	@ (8001b90 <MX_GPIO_Init+0x194>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4638      	mov	r0, r7
 8001a72:	f003 f913 	bl	8004c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15 PA11 PA9 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_8;
 8001a76:	f44f 430b 	mov.w	r3, #35584	@ 0x8b00
 8001a7a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a7c:	2603      	movs	r6, #3
 8001a7e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	a905      	add	r1, sp, #20
 8001a84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a88:	f002 ffb8 	bl	80049fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001a8c:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 8001a90:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	2501      	movs	r5, #1
 8001a94:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a98:	f04f 0a02 	mov.w	sl, #2
 8001a9c:	f8cd a020 	str.w	sl, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa0:	a905      	add	r1, sp, #20
 8001aa2:	4640      	mov	r0, r8
 8001aa4:	f002 ffaa 	bl	80049fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB5 PB8 PB1
                           PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_1
 8001aa8:	f244 5322 	movw	r3, #17698	@ 0x4522
 8001aac:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aae:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	a905      	add	r1, sp, #20
 8001ab4:	4640      	mov	r0, r8
 8001ab6:	f002 ffa1 	bl	80049fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC2 PC3 PC5
                           PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8001aba:	f242 033e 	movw	r3, #8254	@ 0x203e
 8001abe:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_1|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac0:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac4:	a905      	add	r1, sp, #20
 8001ac6:	4638      	mov	r0, r7
 8001ac8:	f002 ff98 	bl	80049fc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBATOK_Pin */
  GPIO_InitStruct.Pin = VBATOK_Pin;
 8001acc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ad0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(VBATOK_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	a905      	add	r1, sp, #20
 8001ad8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001adc:	f002 ff8e 	bl	80049fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8001ae0:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ae2:	f44f 1904 	mov.w	r9, #2162688	@ 0x210000
 8001ae6:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aea:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	a905      	add	r1, sp, #20
 8001aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001af2:	f002 ff83 	bl	80049fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRaProbe1_Pin LoRaProbe2_Pin */
  GPIO_InitStruct.Pin = LoRaProbe1_Pin|LoRaProbe2_Pin;
 8001af6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001afa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b02:	a905      	add	r1, sp, #20
 8001b04:	4640      	mov	r0, r8
 8001b06:	f002 ff79 	bl	80049fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Power12VEN_Pin */
  GPIO_InitStruct.Pin = Power12VEN_Pin;
 8001b0a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(Power12VEN_GPIO_Port, &GPIO_InitStruct);
 8001b12:	a905      	add	r1, sp, #20
 8001b14:	4638      	mov	r0, r7
 8001b16:	f002 ff71 	bl	80049fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_4|GPIO_PIN_5;
 8001b1a:	23f0      	movs	r3, #240	@ 0xf0
 8001b1c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	f8cd a018 	str.w	sl, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_SUBGHZSPI;
 8001b26:	230d      	movs	r3, #13
 8001b28:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	a905      	add	r1, sp, #20
 8001b2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b30:	f002 ff64 	bl	80049fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT3_Pin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 8001b34:	2340      	movs	r3, #64	@ 0x40
 8001b36:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b38:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3c:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	a905      	add	r1, sp, #20
 8001b40:	4638      	mov	r0, r7
 8001b42:	f002 ff5b 	bl	80049fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b46:	2308      	movs	r3, #8
 8001b48:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b4a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b4e:	a905      	add	r1, sp, #20
 8001b50:	4810      	ldr	r0, [pc, #64]	@ (8001b94 <MX_GPIO_Init+0x198>)
 8001b52:	f002 ff53 	bl	80049fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001b56:	4622      	mov	r2, r4
 8001b58:	4621      	mov	r1, r4
 8001b5a:	2006      	movs	r0, #6
 8001b5c:	f002 fb5a 	bl	8004214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b60:	2006      	movs	r0, #6
 8001b62:	f002 fb67 	bl	8004234 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001b66:	4622      	mov	r2, r4
 8001b68:	4621      	mov	r1, r4
 8001b6a:	2007      	movs	r0, #7
 8001b6c:	f002 fb52 	bl	8004214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b70:	2007      	movs	r0, #7
 8001b72:	f002 fb5f 	bl	8004234 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b76:	4622      	mov	r2, r4
 8001b78:	4621      	mov	r1, r4
 8001b7a:	2016      	movs	r0, #22
 8001b7c:	f002 fb4a 	bl	8004214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b80:	2016      	movs	r0, #22
 8001b82:	f002 fb57 	bl	8004234 <HAL_NVIC_EnableIRQ>

}
 8001b86:	b00a      	add	sp, #40	@ 0x28
 8001b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b8c:	48000400 	.word	0x48000400
 8001b90:	48000800 	.word	0x48000800
 8001b94:	48001c00 	.word	0x48001c00

08001b98 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b98:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <Error_Handler+0x2>

08001b9c <SystemClock_Config>:
{
 8001b9c:	b510      	push	{r4, lr}
 8001b9e:	b09a      	sub	sp, #104	@ 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba0:	2248      	movs	r2, #72	@ 0x48
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	a808      	add	r0, sp, #32
 8001ba6:	f010 ffcf 	bl	8012b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001baa:	2400      	movs	r4, #0
 8001bac:	9401      	str	r4, [sp, #4]
 8001bae:	9402      	str	r4, [sp, #8]
 8001bb0:	9403      	str	r4, [sp, #12]
 8001bb2:	9404      	str	r4, [sp, #16]
 8001bb4:	9405      	str	r4, [sp, #20]
 8001bb6:	9406      	str	r4, [sp, #24]
 8001bb8:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001bba:	f003 f88b 	bl	8004cd4 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001bbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bc2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001bc6:	f023 0318 	bic.w	r3, r3, #24
 8001bca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001bd2:	6813      	ldr	r3, [r2, #0]
 8001bd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	6813      	ldr	r3, [r2, #0]
 8001be0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001be8:	2324      	movs	r3, #36	@ 0x24
 8001bea:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bec:	2381      	movs	r3, #129	@ 0x81
 8001bee:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001bf4:	9411      	str	r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001bf6:	23b0      	movs	r3, #176	@ 0xb0
 8001bf8:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bfa:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfc:	a808      	add	r0, sp, #32
 8001bfe:	f003 fa03 	bl	8005008 <HAL_RCC_OscConfig>
 8001c02:	b970      	cbnz	r0, 8001c22 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001c04:	234f      	movs	r3, #79	@ 0x4f
 8001c06:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c0c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c0e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c10:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001c12:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c14:	2102      	movs	r1, #2
 8001c16:	a801      	add	r0, sp, #4
 8001c18:	f003 fd28 	bl	800566c <HAL_RCC_ClockConfig>
 8001c1c:	b918      	cbnz	r0, 8001c26 <SystemClock_Config+0x8a>
}
 8001c1e:	b01a      	add	sp, #104	@ 0x68
 8001c20:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001c22:	f7ff ffb9 	bl	8001b98 <Error_Handler>
    Error_Handler();
 8001c26:	f7ff ffb7 	bl	8001b98 <Error_Handler>
	...

08001c2c <main>:
{
 8001c2c:	b508      	push	{r3, lr}
  HAL_Init();
 8001c2e:	f001 fca7 	bl	8003580 <HAL_Init>
  SystemClock_Config();
 8001c32:	f7ff ffb3 	bl	8001b9c <SystemClock_Config>
  MX_GPIO_Init();
 8001c36:	f7ff fee1 	bl	80019fc <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001c3a:	f000 ff05 	bl	8002a48 <MX_LoRaWAN_Init>
  MX_USART1_UART_Init();
 8001c3e:	f000 fc6f 	bl	8002520 <MX_USART1_UART_Init>
  HAL_GPIO_WritePin(GPIOC, 0, GPIO_PIN_SET);
 8001c42:	2201      	movs	r2, #1
 8001c44:	2100      	movs	r1, #0
 8001c46:	4803      	ldr	r0, [pc, #12]	@ (8001c54 <main+0x28>)
 8001c48:	f003 f828 	bl	8004c9c <HAL_GPIO_WritePin>
    MX_LoRaWAN_Process();
 8001c4c:	f000 ff02 	bl	8002a54 <MX_LoRaWAN_Process>
  while (1)
 8001c50:	e7fc      	b.n	8001c4c <main+0x20>
 8001c52:	bf00      	nop
 8001c54:	48000800 	.word	0x48000800

08001c58 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c58:	b500      	push	{lr}
 8001c5a:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001c5c:	222c      	movs	r2, #44	@ 0x2c
 8001c5e:	2100      	movs	r1, #0
 8001c60:	a801      	add	r0, sp, #4
 8001c62:	f010 ff71 	bl	8012b48 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c66:	481b      	ldr	r0, [pc, #108]	@ (8001cd4 <MX_RTC_Init+0x7c>)
 8001c68:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <MX_RTC_Init+0x80>)
 8001c6a:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001c6c:	237f      	movs	r3, #127	@ 0x7f
 8001c6e:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c74:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c76:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c7c:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001c7e:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001c80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c84:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c86:	f004 f83b 	bl	8005d00 <HAL_RTC_Init>
 8001c8a:	b9c8      	cbnz	r0, 8001cc0 <MX_RTC_Init+0x68>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001c8c:	4811      	ldr	r0, [pc, #68]	@ (8001cd4 <MX_RTC_Init+0x7c>)
 8001c8e:	f004 f97b 	bl	8005f88 <HAL_RTCEx_SetSSRU_IT>
 8001c92:	b9c0      	cbnz	r0, 8001cc6 <MX_RTC_Init+0x6e>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_YES;
 8001c94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001c98:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x1000;
 8001c9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c9e:	9302      	str	r3, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001ca4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001ca8:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001caa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cae:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001cb0:	a901      	add	r1, sp, #4
 8001cb2:	4808      	ldr	r0, [pc, #32]	@ (8001cd4 <MX_RTC_Init+0x7c>)
 8001cb4:	f004 f88c 	bl	8005dd0 <HAL_RTC_SetAlarm_IT>
 8001cb8:	b940      	cbnz	r0, 8001ccc <MX_RTC_Init+0x74>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cba:	b00d      	add	sp, #52	@ 0x34
 8001cbc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001cc0:	f7ff ff6a 	bl	8001b98 <Error_Handler>
 8001cc4:	e7e2      	b.n	8001c8c <MX_RTC_Init+0x34>
    Error_Handler();
 8001cc6:	f7ff ff67 	bl	8001b98 <Error_Handler>
 8001cca:	e7e3      	b.n	8001c94 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001ccc:	f7ff ff64 	bl	8001b98 <Error_Handler>
}
 8001cd0:	e7f3      	b.n	8001cba <MX_RTC_Init+0x62>
 8001cd2:	bf00      	nop
 8001cd4:	2000020c 	.word	0x2000020c
 8001cd8:	40002800 	.word	0x40002800

08001cdc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001cdc:	b510      	push	{r4, lr}
 8001cde:	b090      	sub	sp, #64	@ 0x40
 8001ce0:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce2:	2238      	movs	r2, #56	@ 0x38
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	a802      	add	r0, sp, #8
 8001ce8:	f010 ff2e 	bl	8012b48 <memset>
  if(rtcHandle->Instance==RTC)
 8001cec:	6822      	ldr	r2, [r4, #0]
 8001cee:	4b1a      	ldr	r3, [pc, #104]	@ (8001d58 <HAL_RTC_MspInit+0x7c>)
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001cf4:	b010      	add	sp, #64	@ 0x40
 8001cf6:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001cf8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cfc:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001cfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d02:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d04:	a802      	add	r0, sp, #8
 8001d06:	f003 fe15 	bl	8005934 <HAL_RCCEx_PeriphCLKConfig>
 8001d0a:	bb08      	cbnz	r0, 8001d50 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d10:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001d14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d22:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001d2c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	4611      	mov	r1, r2
 8001d32:	2002      	movs	r0, #2
 8001d34:	f002 fa6e 	bl	8004214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001d38:	2002      	movs	r0, #2
 8001d3a:	f002 fa7b 	bl	8004234 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	4611      	mov	r1, r2
 8001d42:	202a      	movs	r0, #42	@ 0x2a
 8001d44:	f002 fa66 	bl	8004214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001d48:	202a      	movs	r0, #42	@ 0x2a
 8001d4a:	f002 fa73 	bl	8004234 <HAL_NVIC_EnableIRQ>
}
 8001d4e:	e7d1      	b.n	8001cf4 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001d50:	f7ff ff22 	bl	8001b98 <Error_Handler>
 8001d54:	e7da      	b.n	8001d0c <HAL_RTC_MspInit+0x30>
 8001d56:	bf00      	nop
 8001d58:	40002800 	.word	0x40002800

08001d5c <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001d5c:	4770      	bx	lr

08001d5e <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001d5e:	4770      	bx	lr

08001d60 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001d60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001d62:	f001 fc23 	bl	80035ac <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001d66:	2001      	movs	r0, #1
 8001d68:	4b02      	ldr	r3, [pc, #8]	@ (8001d74 <PWR_EnterStopMode+0x14>)
 8001d6a:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001d6e:	f003 f815 	bl	8004d9c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001d72:	bd08      	pop	{r3, pc}
 8001d74:	58000400 	.word	0x58000400

08001d78 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001d78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001d7a:	f001 fc1e 	bl	80035ba <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001d7e:	bd08      	pop	{r3, pc}

08001d80 <PWR_ExitStopMode>:
{
 8001d80:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001d82:	f001 fc1a 	bl	80035ba <HAL_ResumeTick>
  vcom_Resume();
 8001d86:	f000 fdd3 	bl	8002930 <vcom_Resume>
}
 8001d8a:	bd08      	pop	{r3, pc}

08001d8c <PWR_EnterSleepMode>:
{
 8001d8c:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001d8e:	f001 fc0d 	bl	80035ac <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d92:	2101      	movs	r1, #1
 8001d94:	2000      	movs	r0, #0
 8001d96:	f002 ffa5 	bl	8004ce4 <HAL_PWR_EnterSLEEPMode>
}
 8001d9a:	bd08      	pop	{r3, pc}

08001d9c <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9c:	4770      	bx	lr

08001d9e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <NMI_Handler>

08001da0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <HardFault_Handler>

08001da2 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <MemManage_Handler>

08001da4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <BusFault_Handler>

08001da6 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <UsageFault_Handler>

08001da8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da8:	4770      	bx	lr

08001daa <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001daa:	4770      	bx	lr

08001dac <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dac:	4770      	bx	lr

08001dae <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dae:	4770      	bx	lr

08001db0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001db0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001db2:	4802      	ldr	r0, [pc, #8]	@ (8001dbc <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001db4:	f004 f914 	bl	8005fe0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001db8:	bd08      	pop	{r3, pc}
 8001dba:	bf00      	nop
 8001dbc:	2000020c 	.word	0x2000020c

08001dc0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001dc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f002 ff78 	bl	8004cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001dc8:	bd08      	pop	{r3, pc}

08001dca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001dca:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f002 ff73 	bl	8004cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001dd2:	bd08      	pop	{r3, pc}

08001dd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001dd6:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <DMA1_Channel1_IRQHandler+0xc>)
 8001dd8:	f002 fc30 	bl	800463c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ddc:	bd08      	pop	{r3, pc}
 8001dde:	bf00      	nop
 8001de0:	2000037c 	.word	0x2000037c

08001de4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001de4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001de6:	4802      	ldr	r0, [pc, #8]	@ (8001df0 <DMA1_Channel2_IRQHandler+0xc>)
 8001de8:	f002 fc28 	bl	800463c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001dec:	bd08      	pop	{r3, pc}
 8001dee:	bf00      	nop
 8001df0:	200002bc 	.word	0x200002bc

08001df4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001df4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001df6:	4802      	ldr	r0, [pc, #8]	@ (8001e00 <DMA1_Channel3_IRQHandler+0xc>)
 8001df8:	f002 fc20 	bl	800463c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001dfc:	bd08      	pop	{r3, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000144 	.word	0x20000144

08001e04 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001e04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001e06:	4802      	ldr	r0, [pc, #8]	@ (8001e10 <DMA1_Channel4_IRQHandler+0xc>)
 8001e08:	f002 fc18 	bl	800463c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001e0c:	bd08      	pop	{r3, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000031c 	.word	0x2000031c

08001e14 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e16:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <DMA1_Channel5_IRQHandler+0xc>)
 8001e18:	f002 fc10 	bl	800463c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e1c:	bd08      	pop	{r3, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000025c 	.word	0x2000025c

08001e24 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC Interrupt.
  */
void ADC_IRQHandler(void)
{
 8001e24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001e26:	4802      	ldr	r0, [pc, #8]	@ (8001e30 <ADC_IRQHandler+0xc>)
 8001e28:	f001 fd75 	bl	8003916 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e2c:	bd08      	pop	{r3, pc}
 8001e2e:	bf00      	nop
 8001e30:	200001a4 	.word	0x200001a4

08001e34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001e36:	2040      	movs	r0, #64	@ 0x40
 8001e38:	f002 ff3e 	bl	8004cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e3c:	bd08      	pop	{r3, pc}
	...

08001e40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e42:	4802      	ldr	r0, [pc, #8]	@ (8001e4c <USART1_IRQHandler+0xc>)
 8001e44:	f004 fd92 	bl	800696c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e48:	bd08      	pop	{r3, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200003dc 	.word	0x200003dc

08001e50 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001e50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001e52:	4802      	ldr	r0, [pc, #8]	@ (8001e5c <LPUART1_IRQHandler+0xc>)
 8001e54:	f004 fd8a 	bl	800696c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001e58:	bd08      	pop	{r3, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000470 	.word	0x20000470

08001e60 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e62:	4802      	ldr	r0, [pc, #8]	@ (8001e6c <RTC_Alarm_IRQHandler+0xc>)
 8001e64:	f003 fec6 	bl	8005bf4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e68:	bd08      	pop	{r3, pc}
 8001e6a:	bf00      	nop
 8001e6c:	2000020c 	.word	0x2000020c

08001e70 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001e70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001e72:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <SUBGHZ_Radio_IRQHandler+0xc>)
 8001e74:	f004 fb6c 	bl	8006550 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001e78:	bd08      	pop	{r3, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000244 	.word	0x20000244

08001e80 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001e80:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001e82:	4805      	ldr	r0, [pc, #20]	@ (8001e98 <MX_SUBGHZ_Init+0x18>)
 8001e84:	2308      	movs	r3, #8
 8001e86:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001e88:	f004 f8e0 	bl	800604c <HAL_SUBGHZ_Init>
 8001e8c:	b900      	cbnz	r0, 8001e90 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001e8e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e90:	f7ff fe82 	bl	8001b98 <Error_Handler>
}
 8001e94:	e7fb      	b.n	8001e8e <MX_SUBGHZ_Init+0xe>
 8001e96:	bf00      	nop
 8001e98:	20000244 	.word	0x20000244

08001e9c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001e9c:	b500      	push	{lr}
 8001e9e:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001eac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001eb4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4611      	mov	r1, r2
 8001eba:	2032      	movs	r0, #50	@ 0x32
 8001ebc:	f002 f9aa 	bl	8004214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001ec0:	2032      	movs	r0, #50	@ 0x32
 8001ec2:	f002 f9b7 	bl	8004234 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001ec6:	b003      	add	sp, #12
 8001ec8:	f85d fb04 	ldr.w	pc, [sp], #4

08001ecc <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001ecc:	b40c      	push	{r2, r3}
 8001ece:	b500      	push	{lr}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	ab04      	add	r3, sp, #16
 8001ed4:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001ed8:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001eda:	f010 fd71 	bl	80129c0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001ede:	b003      	add	sp, #12
 8001ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ee4:	b002      	add	sp, #8
 8001ee6:	4770      	bx	lr

08001ee8 <TimestampNow>:
{
 8001ee8:	b530      	push	{r4, r5, lr}
 8001eea:	b085      	sub	sp, #20
 8001eec:	4604      	mov	r4, r0
 8001eee:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001ef0:	a802      	add	r0, sp, #8
 8001ef2:	f010 fb25 	bl	8012540 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001ef6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	9b02      	ldr	r3, [sp, #8]
 8001efe:	4a05      	ldr	r2, [pc, #20]	@ (8001f14 <TimestampNow+0x2c>)
 8001f00:	2110      	movs	r1, #16
 8001f02:	4620      	mov	r0, r4
 8001f04:	f7ff ffe2 	bl	8001ecc <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7fe f935 	bl	8000178 <strlen>
 8001f0e:	8028      	strh	r0, [r5, #0]
}
 8001f10:	b005      	add	sp, #20
 8001f12:	bd30      	pop	{r4, r5, pc}
 8001f14:	08012d7c 	.word	0x08012d7c

08001f18 <SystemApp_Init>:
{
 8001f18:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001f1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f1e:	6893      	ldr	r3, [r2, #8]
 8001f20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001f24:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001f26:	f010 fb43 	bl	80125b0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001f2a:	2401      	movs	r4, #1
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <SystemApp_Init+0x4c>)
 8001f2e:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001f30:	f000 f8bc 	bl	80020ac <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001f34:	f010 f82c 	bl	8011f90 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001f38:	480b      	ldr	r0, [pc, #44]	@ (8001f68 <SystemApp_Init+0x50>)
 8001f3a:	f010 f843 	bl	8011fc4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <SystemApp_Init+0x54>)
 8001f40:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f44:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001f46:	2003      	movs	r0, #3
 8001f48:	f010 f842 	bl	8011fd0 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001f4c:	f7ff f9f8 	bl	8001340 <SYS_InitMeasurement>
  EnvSensors_Init();
 8001f50:	f000 f978 	bl	8002244 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001f54:	f010 f94c 	bl	80121f0 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f58:	4621      	mov	r1, r4
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f010 f968 	bl	8012230 <UTIL_LPM_SetOffMode>
}
 8001f60:	bd10      	pop	{r4, pc}
 8001f62:	bf00      	nop
 8001f64:	20000250 	.word	0x20000250
 8001f68:	08001ee9 	.word	0x08001ee9
 8001f6c:	58004000 	.word	0x58004000

08001f70 <UTIL_SEQ_Idle>:
{
 8001f70:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8001f72:	f010 f973 	bl	801225c <UTIL_LPM_EnterLowPower>
}
 8001f76:	bd08      	pop	{r3, pc}

08001f78 <GetBatteryLevel>:
{
 8001f78:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001f7a:	f7ff f9e9 	bl	8001350 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001f7e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001f82:	4298      	cmp	r0, r3
 8001f84:	d80d      	bhi.n	8001fa2 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001f86:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 8001f8a:	d30c      	bcc.n	8001fa6 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001f8c:	f5a0 60e1 	sub.w	r0, r0, #1800	@ 0x708
 8001f90:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001f94:	0040      	lsls	r0, r0, #1
 8001f96:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <GetBatteryLevel+0x34>)
 8001f98:	fba3 3000 	umull	r3, r0, r3, r0
 8001f9c:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001fa0:	e000      	b.n	8001fa4 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001fa2:	20fe      	movs	r0, #254	@ 0xfe
}
 8001fa4:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	e7fc      	b.n	8001fa4 <GetBatteryLevel+0x2c>
 8001faa:	bf00      	nop
 8001fac:	1b4e81b5 	.word	0x1b4e81b5

08001fb0 <GetTemperatureLevel>:
{
 8001fb0:	b500      	push	{lr}
 8001fb2:	b08b      	sub	sp, #44	@ 0x2c
  EnvSensors_Read(&sensor_data);
 8001fb4:	4668      	mov	r0, sp
 8001fb6:	f000 f90b 	bl	80021d0 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001fba:	9801      	ldr	r0, [sp, #4]
 8001fbc:	f7fe ff02 	bl	8000dc4 <__aeabi_f2iz>
}
 8001fc0:	b200      	sxth	r0, r0
 8001fc2:	b00b      	add	sp, #44	@ 0x2c
 8001fc4:	f85d fb04 	ldr.w	pc, [sp], #4

08001fc8 <GetUniqueId>:
{
 8001fc8:	b538      	push	{r3, r4, r5, lr}
 8001fca:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001fcc:	4b18      	ldr	r3, [pc, #96]	@ (8002030 <GetUniqueId+0x68>)
 8001fce:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd6:	d013      	beq.n	8002000 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001fd8:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001fda:	0a1a      	lsrs	r2, r3, #8
 8001fdc:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001fde:	0c1a      	lsrs	r2, r3, #16
 8001fe0:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001fe2:	0e1b      	lsrs	r3, r3, #24
 8001fe4:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001fe6:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <GetUniqueId+0x68>)
 8001fe8:	f8d3 2584 	ldr.w	r2, [r3, #1412]	@ 0x584
    id[3] = val & 0xFF;
 8001fec:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001fee:	f8d3 3584 	ldr.w	r3, [r3, #1412]	@ 0x584
 8001ff2:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001ff4:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001ff6:	0c1a      	lsrs	r2, r3, #16
 8001ff8:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001ffa:	0e1b      	lsrs	r3, r3, #24
 8001ffc:	7003      	strb	r3, [r0, #0]
}
 8001ffe:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002000:	f001 fae2 	bl	80035c8 <HAL_GetUIDw0>
 8002004:	4605      	mov	r5, r0
 8002006:	f001 faeb 	bl	80035e0 <HAL_GetUIDw2>
 800200a:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 800200c:	f001 fae2 	bl	80035d4 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8002010:	0e2b      	lsrs	r3, r5, #24
 8002012:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8002014:	0c2b      	lsrs	r3, r5, #16
 8002016:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8002018:	0a2b      	lsrs	r3, r5, #8
 800201a:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 800201c:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 800201e:	0e03      	lsrs	r3, r0, #24
 8002020:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8002022:	0c03      	lsrs	r3, r0, #16
 8002024:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8002026:	0a03      	lsrs	r3, r0, #8
 8002028:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 800202a:	7020      	strb	r0, [r4, #0]
 800202c:	e7e7      	b.n	8001ffe <GetUniqueId+0x36>
 800202e:	bf00      	nop
 8002030:	1fff7000 	.word	0x1fff7000

08002034 <GetDevAddr>:
{
 8002034:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002036:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <GetDevAddr+0x2c>)
 8002038:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
  *devAddr = LL_FLASH_GetUDN();
 800203c:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 800203e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002042:	d000      	beq.n	8002046 <GetDevAddr+0x12>
}
 8002044:	bd38      	pop	{r3, r4, r5, pc}
 8002046:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002048:	f001 fabe 	bl	80035c8 <HAL_GetUIDw0>
 800204c:	4605      	mov	r5, r0
 800204e:	f001 fac1 	bl	80035d4 <HAL_GetUIDw1>
 8002052:	4045      	eors	r5, r0
 8002054:	f001 fac4 	bl	80035e0 <HAL_GetUIDw2>
 8002058:	4045      	eors	r5, r0
 800205a:	6025      	str	r5, [r4, #0]
}
 800205c:	e7f2      	b.n	8002044 <GetDevAddr+0x10>
 800205e:	bf00      	nop
 8002060:	1fff7000 	.word	0x1fff7000

08002064 <UTIL_ADV_TRACE_PreSendHook>:
{
 8002064:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002066:	2101      	movs	r1, #1
 8002068:	2002      	movs	r0, #2
 800206a:	f010 f8cb 	bl	8012204 <UTIL_LPM_SetStopMode>
}
 800206e:	bd08      	pop	{r3, pc}

08002070 <UTIL_ADV_TRACE_PostSendHook>:
{
 8002070:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002072:	2100      	movs	r1, #0
 8002074:	2002      	movs	r0, #2
 8002076:	f010 f8c5 	bl	8012204 <UTIL_LPM_SetStopMode>
}
 800207a:	bd08      	pop	{r3, pc}

0800207c <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800207c:	2000      	movs	r0, #0
 800207e:	4770      	bx	lr

08002080 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002080:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002082:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <HAL_GetTick+0x14>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	b90b      	cbnz	r3, 800208c <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8002088:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 800208a:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 800208c:	f000 f906 	bl	800229c <TIMER_IF_GetTimerValue>
 8002090:	e7fb      	b.n	800208a <HAL_GetTick+0xa>
 8002092:	bf00      	nop
 8002094:	20000250 	.word	0x20000250

08002098 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002098:	b500      	push	{lr}
 800209a:	b083      	sub	sp, #12
 800209c:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800209e:	9801      	ldr	r0, [sp, #4]
 80020a0:	f000 f9e0 	bl	8002464 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80020a4:	b003      	add	sp, #12
 80020a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080020ac <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80020ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020b0:	b08b      	sub	sp, #44	@ 0x2c
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80020b2:	4a45      	ldr	r2, [pc, #276]	@ (80021c8 <DBG_Init+0x11c>)
 80020b4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80020b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 80020c0:	f001 fa94 	bl	80035ec <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80020c4:	f001 fa9a 	bl	80035fc <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80020c8:	f001 faa0 	bl	800360c <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80020cc:	2500      	movs	r5, #0
 80020ce:	9505      	str	r5, [sp, #20]
 80020d0:	9506      	str	r5, [sp, #24]
 80020d2:	9507      	str	r5, [sp, #28]
 80020d4:	9508      	str	r5, [sp, #32]
 80020d6:	9509      	str	r5, [sp, #36]	@ 0x24

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80020d8:	2301      	movs	r3, #1
 80020da:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2703      	movs	r7, #3
 80020de:	9708      	str	r7, [sp, #32]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020e0:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 80020e4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80020e6:	f043 0302 	orr.w	r3, r3, #2
 80020ea:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020ec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 80020f4:	9b04      	ldr	r3, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020f6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020fe:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8002106:	9b03      	ldr	r3, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002108:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002110:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8002118:	9b02      	ldr	r3, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800211a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002122:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800212a:	9b01      	ldr	r3, [sp, #4]
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();
  PROBE_LINE3_CLK_ENABLE();
  PROBE_LINE4_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 800212c:	f44f 5b00 	mov.w	fp, #8192	@ 0x2000
 8002130:	f8cd b014 	str.w	fp, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8002134:	4e25      	ldr	r6, [pc, #148]	@ (80021cc <DBG_Init+0x120>)
 8002136:	a905      	add	r1, sp, #20
 8002138:	4630      	mov	r0, r6
 800213a:	f002 fc5f 	bl	80049fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 800213e:	f44f 5a80 	mov.w	sl, #4096	@ 0x1000
 8002142:	f8cd a014 	str.w	sl, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8002146:	a905      	add	r1, sp, #20
 8002148:	4630      	mov	r0, r6
 800214a:	f002 fc57 	bl	80049fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 800214e:	f44f 7900 	mov.w	r9, #512	@ 0x200
 8002152:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8002156:	a905      	add	r1, sp, #20
 8002158:	4630      	mov	r0, r6
 800215a:	f002 fc4f 	bl	80049fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 800215e:	f44f 6800 	mov.w	r8, #2048	@ 0x800
 8002162:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8002166:	a905      	add	r1, sp, #20
 8002168:	4630      	mov	r0, r6
 800216a:	f002 fc47 	bl	80049fc <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 800216e:	462a      	mov	r2, r5
 8002170:	4659      	mov	r1, fp
 8002172:	4630      	mov	r0, r6
 8002174:	f002 fd92 	bl	8004c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8002178:	462a      	mov	r2, r5
 800217a:	4651      	mov	r1, sl
 800217c:	4630      	mov	r0, r6
 800217e:	f002 fd8d 	bl	8004c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8002182:	462a      	mov	r2, r5
 8002184:	4649      	mov	r1, r9
 8002186:	4630      	mov	r0, r6
 8002188:	f002 fd88 	bl	8004c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 800218c:	462a      	mov	r2, r5
 800218e:	4641      	mov	r1, r8
 8002190:	4630      	mov	r0, r6
 8002192:	f002 fd83 	bl	8004c9c <HAL_GPIO_WritePin>

  /* HW alternate functions for monitoring RF */

#if (DEBUG_SUBGHZSPI_MONITORING_ENABLED == 1)
  /*spi dbg*/
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8002196:	23f0      	movs	r3, #240	@ 0xf0
 8002198:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800219e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a0:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 80021a2:	230d      	movs	r3, #13
 80021a4:	9309      	str	r3, [sp, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021a6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021ae:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80021b6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	a905      	add	r1, sp, #20
 80021ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021be:	f002 fc1d 	bl	80049fc <HAL_GPIO_Init>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80021c2:	b00b      	add	sp, #44	@ 0x2c
 80021c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021c8:	58000800 	.word	0x58000800
 80021cc:	48000400 	.word	0x48000400

080021d0 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80021d0:	b570      	push	{r4, r5, r6, lr}
 80021d2:	4604      	mov	r4, r0
  /* USER CODE BEGIN EnvSensors_Read */
  HAL_GPIO_WritePin(Power12VEN_GPIO_Port, Power12VEN_Pin, GPIO_PIN_SET);
 80021d4:	4e18      	ldr	r6, [pc, #96]	@ (8002238 <EnvSensors_Read+0x68>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	4611      	mov	r1, r2
 80021da:	4630      	mov	r0, r6
 80021dc:	f002 fd5e 	bl	8004c9c <HAL_GPIO_WritePin>
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (float)(SYS_GetTemperatureLevel());	//DP: (SYS_GetTemperatureLevel() >> 8);
 80021e0:	f7ff f8d8 	bl	8001394 <SYS_GetTemperatureLevel>
 80021e4:	f7fe fd24 	bl	8000c30 <__aeabi_i2f>
 80021e8:	4605      	mov	r5, r0
#endif  /* SENSOR_ENABLED */
  SYS_GetNPK(N, P, K);
 80021ea:	2245      	movs	r2, #69	@ 0x45
 80021ec:	4611      	mov	r1, r2
 80021ee:	4610      	mov	r0, r2
 80021f0:	f000 fbd6 	bl	80029a0 <SYS_GetNPK>
  sensor_data->humidity    = HUMIDITY_Value;
 80021f4:	4b11      	ldr	r3, [pc, #68]	@ (800223c <EnvSensors_Read+0x6c>)
 80021f6:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80021f8:	6065      	str	r5, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80021fa:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <EnvSensors_Read+0x70>)
 80021fc:	6023      	str	r3, [r4, #0]
  sensor_data->h2o		   = SYS_GetH2OLevel();
 80021fe:	f7ff f91f 	bl	8001440 <SYS_GetH2OLevel>
 8002202:	f7fe fd11 	bl	8000c28 <__aeabi_ui2f>
 8002206:	61a0      	str	r0, [r4, #24]
  sensor_data->EWPT_V	   = SYS_GetEWPTLevel();
 8002208:	f7ff f98e 	bl	8001528 <SYS_GetEWPTLevel>
 800220c:	8460      	strh	r0, [r4, #34]	@ 0x22
  //sensor_data->soil_temp   = soil_temp_Value;
  //sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
  //sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
  // set delay to give SMPS inductor time to charge
  HAL_Delay(300); // Delay for 0.5 seconds
 800220e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002212:	f7ff ff41 	bl	8002098 <HAL_Delay>
  sensor_data->n		   = *N;	//SYS_GetN();
 8002216:	2500      	movs	r5, #0
 8002218:	f9b5 3045 	ldrsh.w	r3, [r5, #69]	@ 0x45
 800221c:	83a3      	strh	r3, [r4, #28]
  sensor_data->p		   = *P;	//SYS_GetP();
 800221e:	f9b5 3045 	ldrsh.w	r3, [r5, #69]	@ 0x45
 8002222:	83e3      	strh	r3, [r4, #30]
  sensor_data->k		   = *K;	//SYS_GetK();
 8002224:	f9b5 3045 	ldrsh.w	r3, [r5, #69]	@ 0x45
 8002228:	8423      	strh	r3, [r4, #32]

  //HAL_GPIO_WritePin(GPIOC, 0, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(Power12VEN_GPIO_Port, Power12VEN_Pin, GPIO_PIN_RESET);
 800222a:	462a      	mov	r2, r5
 800222c:	2101      	movs	r1, #1
 800222e:	4630      	mov	r0, r6
 8002230:	f002 fd34 	bl	8004c9c <HAL_GPIO_WritePin>
  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8002234:	4628      	mov	r0, r5
 8002236:	bd70      	pop	{r4, r5, r6, pc}
 8002238:	48000800 	.word	0x48000800
 800223c:	42480000 	.word	0x42480000
 8002240:	447a0000 	.word	0x447a0000

08002244 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002244:	2000      	movs	r0, #0
 8002246:	4770      	bx	lr

08002248 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <TIMER_IF_SetTimerContext+0x1c>)
 800224a:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800224c:	e001      	b.n	8002252 <TIMER_IF_SetTimerContext+0xa>
 800224e:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <TIMER_IF_SetTimerContext+0x1c>)
 8002250:	6898      	ldr	r0, [r3, #8]
 8002252:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <TIMER_IF_SetTimerContext+0x1c>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	4283      	cmp	r3, r0
 8002258:	d1f9      	bne.n	800224e <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 800225a:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 800225c:	4b02      	ldr	r3, [pc, #8]	@ (8002268 <TIMER_IF_SetTimerContext+0x20>)
 800225e:	6018      	str	r0, [r3, #0]
}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40002800 	.word	0x40002800
 8002268:	20000254 	.word	0x20000254

0800226c <TIMER_IF_GetTimerContext>:
}
 800226c:	4b01      	ldr	r3, [pc, #4]	@ (8002274 <TIMER_IF_GetTimerContext+0x8>)
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000254 	.word	0x20000254

08002278 <TIMER_IF_GetTimerElapsedTime>:
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 800227a:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800227c:	e001      	b.n	8002282 <TIMER_IF_GetTimerElapsedTime+0xa>
 800227e:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002280:	6898      	ldr	r0, [r3, #8]
 8002282:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4283      	cmp	r3, r0
 8002288:	d1f9      	bne.n	800227e <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 800228a:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800228c:	4b02      	ldr	r3, [pc, #8]	@ (8002298 <TIMER_IF_GetTimerElapsedTime+0x20>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	1ac0      	subs	r0, r0, r3
 8002292:	4770      	bx	lr
 8002294:	40002800 	.word	0x40002800
 8002298:	20000254 	.word	0x20000254

0800229c <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 800229c:	4b07      	ldr	r3, [pc, #28]	@ (80022bc <TIMER_IF_GetTimerValue+0x20>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b153      	cbz	r3, 80022b8 <TIMER_IF_GetTimerValue+0x1c>
 80022a2:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <TIMER_IF_GetTimerValue+0x24>)
 80022a4:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80022a6:	e001      	b.n	80022ac <TIMER_IF_GetTimerValue+0x10>
 80022a8:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <TIMER_IF_GetTimerValue+0x24>)
 80022aa:	6898      	ldr	r0, [r3, #8]
 80022ac:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <TIMER_IF_GetTimerValue+0x24>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4283      	cmp	r3, r0
 80022b2:	d1f9      	bne.n	80022a8 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 80022b4:	43c0      	mvns	r0, r0
 80022b6:	4770      	bx	lr
  uint32_t ret = 0;
 80022b8:	2000      	movs	r0, #0
}
 80022ba:	4770      	bx	lr
 80022bc:	20000258 	.word	0x20000258
 80022c0:	40002800 	.word	0x40002800

080022c4 <TIMER_IF_GetMinimumTimeout>:
}
 80022c4:	2003      	movs	r0, #3
 80022c6:	4770      	bx	lr

080022c8 <TIMER_IF_Convert_ms2Tick>:
{
 80022c8:	b508      	push	{r3, lr}
 80022ca:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80022cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022d0:	2300      	movs	r3, #0
 80022d2:	0200      	lsls	r0, r0, #8
 80022d4:	0e09      	lsrs	r1, r1, #24
 80022d6:	f7fe fdbb 	bl	8000e50 <__aeabi_uldivmod>
}
 80022da:	bd08      	pop	{r3, pc}

080022dc <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80022dc:	0ec2      	lsrs	r2, r0, #27
 80022de:	0143      	lsls	r3, r0, #5
 80022e0:	1a1b      	subs	r3, r3, r0
 80022e2:	f162 0200 	sbc.w	r2, r2, #0
 80022e6:	0092      	lsls	r2, r2, #2
 80022e8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	181b      	adds	r3, r3, r0
 80022f0:	f142 0000 	adc.w	r0, r2, #0
 80022f4:	00c0      	lsls	r0, r0, #3
 80022f6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80022fa:	f3c3 1357 	ubfx	r3, r3, #5, #24
}
 80022fe:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8002302:	4770      	bx	lr

08002304 <TIMER_IF_StopTimer>:
{
 8002304:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002306:	4b07      	ldr	r3, [pc, #28]	@ (8002324 <TIMER_IF_StopTimer+0x20>)
 8002308:	2201      	movs	r2, #1
 800230a:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800230c:	4c06      	ldr	r4, [pc, #24]	@ (8002328 <TIMER_IF_StopTimer+0x24>)
 800230e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002312:	4620      	mov	r0, r4
 8002314:	f003 fc2e 	bl	8005b74 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002318:	f04f 33ff 	mov.w	r3, #4294967295
 800231c:	6323      	str	r3, [r4, #48]	@ 0x30
}
 800231e:	2000      	movs	r0, #0
 8002320:	bd10      	pop	{r4, pc}
 8002322:	bf00      	nop
 8002324:	40002800 	.word	0x40002800
 8002328:	2000020c 	.word	0x2000020c

0800232c <TIMER_IF_BkUp_Write_MSBticks>:
{
 800232c:	b508      	push	{r3, lr}
 800232e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002330:	2102      	movs	r1, #2
 8002332:	4802      	ldr	r0, [pc, #8]	@ (800233c <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8002334:	f003 fe69 	bl	800600a <HAL_RTCEx_BKUPWrite>
}
 8002338:	bd08      	pop	{r3, pc}
 800233a:	bf00      	nop
 800233c:	2000020c 	.word	0x2000020c

08002340 <TIMER_IF_Init>:
{
 8002340:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8002342:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <TIMER_IF_Init+0x40>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	b10b      	cbz	r3, 800234c <TIMER_IF_Init+0xc>
}
 8002348:	2000      	movs	r0, #0
 800234a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800234c:	4c0d      	ldr	r4, [pc, #52]	@ (8002384 <TIMER_IF_Init+0x44>)
 800234e:	f04f 35ff 	mov.w	r5, #4294967295
 8002352:	6325      	str	r5, [r4, #48]	@ 0x30
    MX_RTC_Init();
 8002354:	f7ff fc80 	bl	8001c58 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8002358:	f7ff ffd4 	bl	8002304 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800235c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002360:	4620      	mov	r0, r4
 8002362:	f003 fc07 	bl	8005b74 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002366:	6325      	str	r5, [r4, #48]	@ 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002368:	4620      	mov	r0, r4
 800236a:	f003 fded 	bl	8005f48 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 800236e:	2000      	movs	r0, #0
 8002370:	f7ff ffdc 	bl	800232c <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8002374:	f7ff ff68 	bl	8002248 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8002378:	4b01      	ldr	r3, [pc, #4]	@ (8002380 <TIMER_IF_Init+0x40>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]
 800237e:	e7e3      	b.n	8002348 <TIMER_IF_Init+0x8>
 8002380:	20000258 	.word	0x20000258
 8002384:	2000020c 	.word	0x2000020c

08002388 <TIMER_IF_BkUp_Write_Seconds>:
{
 8002388:	b508      	push	{r3, lr}
 800238a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800238c:	2100      	movs	r1, #0
 800238e:	4802      	ldr	r0, [pc, #8]	@ (8002398 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8002390:	f003 fe3b 	bl	800600a <HAL_RTCEx_BKUPWrite>
}
 8002394:	bd08      	pop	{r3, pc}
 8002396:	bf00      	nop
 8002398:	2000020c 	.word	0x2000020c

0800239c <TIMER_IF_BkUp_Write_SubSeconds>:
{
 800239c:	b508      	push	{r3, lr}
 800239e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80023a0:	2101      	movs	r1, #1
 80023a2:	4802      	ldr	r0, [pc, #8]	@ (80023ac <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 80023a4:	f003 fe31 	bl	800600a <HAL_RTCEx_BKUPWrite>
}
 80023a8:	bd08      	pop	{r3, pc}
 80023aa:	bf00      	nop
 80023ac:	2000020c 	.word	0x2000020c

080023b0 <TIMER_IF_StartTimer>:
{
 80023b0:	b510      	push	{r4, lr}
 80023b2:	b08c      	sub	sp, #48	@ 0x30
 80023b4:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 80023b6:	222c      	movs	r2, #44	@ 0x2c
 80023b8:	2100      	movs	r1, #0
 80023ba:	a801      	add	r0, sp, #4
 80023bc:	f010 fbc4 	bl	8012b48 <memset>
  TIMER_IF_StopTimer();
 80023c0:	f7ff ffa0 	bl	8002304 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <TIMER_IF_StartTimer+0x48>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80023ca:	2300      	movs	r3, #0
 80023cc:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80023ce:	43e4      	mvns	r4, r4
 80023d0:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80023d2:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80023d4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80023d8:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80023da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023de:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80023e0:	2201      	movs	r2, #1
 80023e2:	a901      	add	r1, sp, #4
 80023e4:	4805      	ldr	r0, [pc, #20]	@ (80023fc <TIMER_IF_StartTimer+0x4c>)
 80023e6:	f003 fcf3 	bl	8005dd0 <HAL_RTC_SetAlarm_IT>
 80023ea:	b910      	cbnz	r0, 80023f2 <TIMER_IF_StartTimer+0x42>
}
 80023ec:	2000      	movs	r0, #0
 80023ee:	b00c      	add	sp, #48	@ 0x30
 80023f0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80023f2:	f7ff fbd1 	bl	8001b98 <Error_Handler>
 80023f6:	e7f9      	b.n	80023ec <TIMER_IF_StartTimer+0x3c>
 80023f8:	20000254 	.word	0x20000254
 80023fc:	2000020c 	.word	0x2000020c

08002400 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8002400:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002402:	2102      	movs	r1, #2
 8002404:	4801      	ldr	r0, [pc, #4]	@ (800240c <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8002406:	f003 fe07 	bl	8006018 <HAL_RTCEx_BKUPRead>
}
 800240a:	bd08      	pop	{r3, pc}
 800240c:	2000020c 	.word	0x2000020c

08002410 <TIMER_IF_GetTime>:
{
 8002410:	b538      	push	{r3, r4, r5, lr}
 8002412:	4605      	mov	r5, r0
 8002414:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <TIMER_IF_GetTime+0x30>)
 8002416:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002418:	e001      	b.n	800241e <TIMER_IF_GetTime+0xe>
 800241a:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <TIMER_IF_GetTime+0x30>)
 800241c:	689c      	ldr	r4, [r3, #8]
 800241e:	4a08      	ldr	r2, [pc, #32]	@ (8002440 <TIMER_IF_GetTime+0x30>)
 8002420:	6892      	ldr	r2, [r2, #8]
 8002422:	42a2      	cmp	r2, r4
 8002424:	d1f9      	bne.n	800241a <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8002426:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002428:	f7ff ffea 	bl	8002400 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800242c:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800242e:	0a24      	lsrs	r4, r4, #8
 8002430:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002434:	b2d8      	uxtb	r0, r3
 8002436:	f7ff ff51 	bl	80022dc <TIMER_IF_Convert_Tick2ms>
 800243a:	8028      	strh	r0, [r5, #0]
}
 800243c:	4620      	mov	r0, r4
 800243e:	bd38      	pop	{r3, r4, r5, pc}
 8002440:	40002800 	.word	0x40002800

08002444 <TIMER_IF_BkUp_Read_Seconds>:
{
 8002444:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002446:	2100      	movs	r1, #0
 8002448:	4801      	ldr	r0, [pc, #4]	@ (8002450 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 800244a:	f003 fde5 	bl	8006018 <HAL_RTCEx_BKUPRead>
}
 800244e:	bd08      	pop	{r3, pc}
 8002450:	2000020c 	.word	0x2000020c

08002454 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8002454:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002456:	2101      	movs	r1, #1
 8002458:	4801      	ldr	r0, [pc, #4]	@ (8002460 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 800245a:	f003 fddd 	bl	8006018 <HAL_RTCEx_BKUPRead>
}
 800245e:	bd08      	pop	{r3, pc}
 8002460:	2000020c 	.word	0x2000020c

08002464 <TIMER_IF_DelayMs>:
{
 8002464:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002466:	f7ff ff2f 	bl	80022c8 <TIMER_IF_Convert_ms2Tick>
 800246a:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <TIMER_IF_DelayMs+0x38>)
 800246c:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800246e:	e001      	b.n	8002474 <TIMER_IF_DelayMs+0x10>
 8002470:	4b0a      	ldr	r3, [pc, #40]	@ (800249c <TIMER_IF_DelayMs+0x38>)
 8002472:	6899      	ldr	r1, [r3, #8]
 8002474:	4b09      	ldr	r3, [pc, #36]	@ (800249c <TIMER_IF_DelayMs+0x38>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	428b      	cmp	r3, r1
 800247a:	d1f9      	bne.n	8002470 <TIMER_IF_DelayMs+0xc>
 800247c:	e009      	b.n	8002492 <TIMER_IF_DelayMs+0x2e>
 800247e:	4b07      	ldr	r3, [pc, #28]	@ (800249c <TIMER_IF_DelayMs+0x38>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4a06      	ldr	r2, [pc, #24]	@ (800249c <TIMER_IF_DelayMs+0x38>)
 8002484:	6892      	ldr	r2, [r2, #8]
 8002486:	429a      	cmp	r2, r3
 8002488:	d1f9      	bne.n	800247e <TIMER_IF_DelayMs+0x1a>
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800248a:	1acb      	subs	r3, r1, r3
 800248c:	4298      	cmp	r0, r3
 800248e:	d903      	bls.n	8002498 <TIMER_IF_DelayMs+0x34>
    __NOP();
 8002490:	bf00      	nop
 8002492:	4b02      	ldr	r3, [pc, #8]	@ (800249c <TIMER_IF_DelayMs+0x38>)
 8002494:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002496:	e7f4      	b.n	8002482 <TIMER_IF_DelayMs+0x1e>
}
 8002498:	bd08      	pop	{r3, pc}
 800249a:	bf00      	nop
 800249c:	40002800 	.word	0x40002800

080024a0 <HAL_RTC_AlarmAEventCallback>:
{
 80024a0:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80024a2:	f010 f9a9 	bl	80127f8 <UTIL_TIMER_IRQ_Handler>
}
 80024a6:	bd08      	pop	{r3, pc}

080024a8 <HAL_RTCEx_SSRUEventCallback>:
{
 80024a8:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80024aa:	f7ff ffa9 	bl	8002400 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80024ae:	3001      	adds	r0, #1
 80024b0:	f7ff ff3c 	bl	800232c <TIMER_IF_BkUp_Write_MSBticks>
}
 80024b4:	bd08      	pop	{r3, pc}
	...

080024b8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80024b8:	b508      	push	{r3, lr}
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80024ba:	4817      	ldr	r0, [pc, #92]	@ (8002518 <MX_LPUART1_UART_Init+0x60>)
 80024bc:	4b17      	ldr	r3, [pc, #92]	@ (800251c <MX_LPUART1_UART_Init+0x64>)
 80024be:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 230400;
 80024c0:	f44f 3361 	mov.w	r3, #230400	@ 0x38400
 80024c4:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	2300      	movs	r3, #0
 80024c8:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80024ca:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80024cc:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80024ce:	220c      	movs	r2, #12
 80024d0:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024d2:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024d4:	6203      	str	r3, [r0, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024d6:	6243      	str	r3, [r0, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d8:	6283      	str	r3, [r0, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80024da:	6643      	str	r3, [r0, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80024dc:	f005 f9ec 	bl	80078b8 <HAL_UART_Init>
 80024e0:	b970      	cbnz	r0, 8002500 <MX_LPUART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e2:	2100      	movs	r1, #0
 80024e4:	480c      	ldr	r0, [pc, #48]	@ (8002518 <MX_LPUART1_UART_Init+0x60>)
 80024e6:	f005 fbd8 	bl	8007c9a <HAL_UARTEx_SetTxFifoThreshold>
 80024ea:	b960      	cbnz	r0, 8002506 <MX_LPUART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024ec:	2100      	movs	r1, #0
 80024ee:	480a      	ldr	r0, [pc, #40]	@ (8002518 <MX_LPUART1_UART_Init+0x60>)
 80024f0:	f005 fbf8 	bl	8007ce4 <HAL_UARTEx_SetRxFifoThreshold>
 80024f4:	b950      	cbnz	r0, 800250c <MX_LPUART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80024f6:	4808      	ldr	r0, [pc, #32]	@ (8002518 <MX_LPUART1_UART_Init+0x60>)
 80024f8:	f005 fbb0 	bl	8007c5c <HAL_UARTEx_DisableFifoMode>
 80024fc:	b948      	cbnz	r0, 8002512 <MX_LPUART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80024fe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002500:	f7ff fb4a 	bl	8001b98 <Error_Handler>
 8002504:	e7ed      	b.n	80024e2 <MX_LPUART1_UART_Init+0x2a>
    Error_Handler();
 8002506:	f7ff fb47 	bl	8001b98 <Error_Handler>
 800250a:	e7ef      	b.n	80024ec <MX_LPUART1_UART_Init+0x34>
    Error_Handler();
 800250c:	f7ff fb44 	bl	8001b98 <Error_Handler>
 8002510:	e7f1      	b.n	80024f6 <MX_LPUART1_UART_Init+0x3e>
    Error_Handler();
 8002512:	f7ff fb41 	bl	8001b98 <Error_Handler>
}
 8002516:	e7f2      	b.n	80024fe <MX_LPUART1_UART_Init+0x46>
 8002518:	20000470 	.word	0x20000470
 800251c:	40008000 	.word	0x40008000

08002520 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002520:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002522:	4818      	ldr	r0, [pc, #96]	@ (8002584 <MX_USART1_UART_Init+0x64>)
 8002524:	4b18      	ldr	r3, [pc, #96]	@ (8002588 <MX_USART1_UART_Init+0x68>)
 8002526:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8002528:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800252c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800252e:	2100      	movs	r1, #0
 8002530:	6081      	str	r1, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002532:	60c1      	str	r1, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002534:	6101      	str	r1, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002536:	230c      	movs	r3, #12
 8002538:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	6181      	str	r1, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800253c:	61c1      	str	r1, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800253e:	6201      	str	r1, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002540:	6241      	str	r1, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002542:	6281      	str	r1, [r0, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002544:	460b      	mov	r3, r1
 8002546:	460a      	mov	r2, r1
 8002548:	f005 faec 	bl	8007b24 <HAL_RS485Ex_Init>
 800254c:	b970      	cbnz	r0, 800256c <MX_USART1_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800254e:	2100      	movs	r1, #0
 8002550:	480c      	ldr	r0, [pc, #48]	@ (8002584 <MX_USART1_UART_Init+0x64>)
 8002552:	f005 fba2 	bl	8007c9a <HAL_UARTEx_SetTxFifoThreshold>
 8002556:	b960      	cbnz	r0, 8002572 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002558:	2100      	movs	r1, #0
 800255a:	480a      	ldr	r0, [pc, #40]	@ (8002584 <MX_USART1_UART_Init+0x64>)
 800255c:	f005 fbc2 	bl	8007ce4 <HAL_UARTEx_SetRxFifoThreshold>
 8002560:	b950      	cbnz	r0, 8002578 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002562:	4808      	ldr	r0, [pc, #32]	@ (8002584 <MX_USART1_UART_Init+0x64>)
 8002564:	f005 fb7a 	bl	8007c5c <HAL_UARTEx_DisableFifoMode>
 8002568:	b948      	cbnz	r0, 800257e <MX_USART1_UART_Init+0x5e>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800256a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800256c:	f7ff fb14 	bl	8001b98 <Error_Handler>
 8002570:	e7ed      	b.n	800254e <MX_USART1_UART_Init+0x2e>
    Error_Handler();
 8002572:	f7ff fb11 	bl	8001b98 <Error_Handler>
 8002576:	e7ef      	b.n	8002558 <MX_USART1_UART_Init+0x38>
    Error_Handler();
 8002578:	f7ff fb0e 	bl	8001b98 <Error_Handler>
 800257c:	e7f1      	b.n	8002562 <MX_USART1_UART_Init+0x42>
    Error_Handler();
 800257e:	f7ff fb0b 	bl	8001b98 <Error_Handler>
}
 8002582:	e7f2      	b.n	800256a <MX_USART1_UART_Init+0x4a>
 8002584:	200003dc 	.word	0x200003dc
 8002588:	40013800 	.word	0x40013800

0800258c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800258c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800258e:	b099      	sub	sp, #100	@ 0x64
 8002590:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002592:	2100      	movs	r1, #0
 8002594:	9113      	str	r1, [sp, #76]	@ 0x4c
 8002596:	9114      	str	r1, [sp, #80]	@ 0x50
 8002598:	9115      	str	r1, [sp, #84]	@ 0x54
 800259a:	9116      	str	r1, [sp, #88]	@ 0x58
 800259c:	9117      	str	r1, [sp, #92]	@ 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800259e:	2238      	movs	r2, #56	@ 0x38
 80025a0:	a805      	add	r0, sp, #20
 80025a2:	f010 fad1 	bl	8012b48 <memset>
  if(uartHandle->Instance==LPUART1)
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	4a84      	ldr	r2, [pc, #528]	@ (80027bc <HAL_UART_MspInit+0x230>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d004      	beq.n	80025b8 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 80025ae:	4a84      	ldr	r2, [pc, #528]	@ (80027c0 <HAL_UART_MspInit+0x234>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d076      	beq.n	80026a2 <HAL_UART_MspInit+0x116>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80025b4:	b019      	add	sp, #100	@ 0x64
 80025b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80025b8:	2320      	movs	r3, #32
 80025ba:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025bc:	a805      	add	r0, sp, #20
 80025be:	f003 f9b9 	bl	8005934 <HAL_RCCEx_PeriphCLKConfig>
 80025c2:	2800      	cmp	r0, #0
 80025c4:	d15e      	bne.n	8002684 <HAL_UART_MspInit+0xf8>
  SET_BIT(RCC->APB1ENR2, Periphs);
 80025c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025cc:	f042 0201 	orr.w	r2, r2, #1
 80025d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80025d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025d4:	f002 0201 	and.w	r2, r2, #1
 80025d8:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80025da:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80025dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80025e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80025ec:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LoRa_VCOM_Rx_Pin|LoRa_VCOM_Tx_Pin;
 80025ee:	230c      	movs	r3, #12
 80025f0:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2500      	movs	r5, #0
 80025f8:	9515      	str	r5, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	9516      	str	r5, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80025fc:	2308      	movs	r3, #8
 80025fe:	9317      	str	r3, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002600:	a913      	add	r1, sp, #76	@ 0x4c
 8002602:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002606:	f002 f9f9 	bl	80049fc <HAL_GPIO_Init>
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 800260a:	486e      	ldr	r0, [pc, #440]	@ (80027c4 <HAL_UART_MspInit+0x238>)
 800260c:	4b6e      	ldr	r3, [pc, #440]	@ (80027c8 <HAL_UART_MspInit+0x23c>)
 800260e:	6003      	str	r3, [r0, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002610:	2315      	movs	r3, #21
 8002612:	6043      	str	r3, [r0, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002614:	6085      	str	r5, [r0, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002616:	60c5      	str	r5, [r0, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002618:	2380      	movs	r3, #128	@ 0x80
 800261a:	6103      	str	r3, [r0, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800261c:	6145      	str	r5, [r0, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800261e:	6185      	str	r5, [r0, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8002620:	61c5      	str	r5, [r0, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002622:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002624:	f001 fe7e 	bl	8004324 <HAL_DMA_Init>
 8002628:	2800      	cmp	r0, #0
 800262a:	d12e      	bne.n	800268a <HAL_UART_MspInit+0xfe>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800262c:	2110      	movs	r1, #16
 800262e:	4865      	ldr	r0, [pc, #404]	@ (80027c4 <HAL_UART_MspInit+0x238>)
 8002630:	f002 f878 	bl	8004724 <HAL_DMA_ConfigChannelAttributes>
 8002634:	bb60      	cbnz	r0, 8002690 <HAL_UART_MspInit+0x104>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002636:	4b63      	ldr	r3, [pc, #396]	@ (80027c4 <HAL_UART_MspInit+0x238>)
 8002638:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 800263c:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 800263e:	4863      	ldr	r0, [pc, #396]	@ (80027cc <HAL_UART_MspInit+0x240>)
 8002640:	4b63      	ldr	r3, [pc, #396]	@ (80027d0 <HAL_UART_MspInit+0x244>)
 8002642:	6003      	str	r3, [r0, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002644:	2316      	movs	r3, #22
 8002646:	6043      	str	r3, [r0, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002648:	2310      	movs	r3, #16
 800264a:	6083      	str	r3, [r0, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	60c3      	str	r3, [r0, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002650:	2280      	movs	r2, #128	@ 0x80
 8002652:	6102      	str	r2, [r0, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002654:	6143      	str	r3, [r0, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002656:	6183      	str	r3, [r0, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002658:	61c3      	str	r3, [r0, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800265a:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800265c:	f001 fe62 	bl	8004324 <HAL_DMA_Init>
 8002660:	b9c8      	cbnz	r0, 8002696 <HAL_UART_MspInit+0x10a>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002662:	2110      	movs	r1, #16
 8002664:	4859      	ldr	r0, [pc, #356]	@ (80027cc <HAL_UART_MspInit+0x240>)
 8002666:	f002 f85d 	bl	8004724 <HAL_DMA_ConfigChannelAttributes>
 800266a:	b9b8      	cbnz	r0, 800269c <HAL_UART_MspInit+0x110>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800266c:	4b57      	ldr	r3, [pc, #348]	@ (80027cc <HAL_UART_MspInit+0x240>)
 800266e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002670:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	4611      	mov	r1, r2
 8002676:	2026      	movs	r0, #38	@ 0x26
 8002678:	f001 fdcc 	bl	8004214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800267c:	2026      	movs	r0, #38	@ 0x26
 800267e:	f001 fdd9 	bl	8004234 <HAL_NVIC_EnableIRQ>
 8002682:	e797      	b.n	80025b4 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8002684:	f7ff fa88 	bl	8001b98 <Error_Handler>
 8002688:	e79d      	b.n	80025c6 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 800268a:	f7ff fa85 	bl	8001b98 <Error_Handler>
 800268e:	e7cd      	b.n	800262c <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8002690:	f7ff fa82 	bl	8001b98 <Error_Handler>
 8002694:	e7cf      	b.n	8002636 <HAL_UART_MspInit+0xaa>
      Error_Handler();
 8002696:	f7ff fa7f 	bl	8001b98 <Error_Handler>
 800269a:	e7e2      	b.n	8002662 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800269c:	f7ff fa7c 	bl	8001b98 <Error_Handler>
 80026a0:	e7e4      	b.n	800266c <HAL_UART_MspInit+0xe0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026a6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80026aa:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ac:	a805      	add	r0, sp, #20
 80026ae:	f003 f941 	bl	8005934 <HAL_RCCEx_PeriphCLKConfig>
 80026b2:	2800      	cmp	r0, #0
 80026b4:	d172      	bne.n	800279c <HAL_UART_MspInit+0x210>
  SET_BIT(RCC->APB2ENR, Periphs);
 80026b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026c0:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80026c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026c4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80026c8:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80026ca:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80026cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80026d6:	f002 0201 	and.w	r2, r2, #1
 80026da:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80026dc:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80026de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80026e0:	f042 0202 	orr.w	r2, r2, #2
 80026e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80026ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026f4:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2702      	movs	r7, #2
 80026f8:	9714      	str	r7, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2500      	movs	r5, #0
 80026fc:	9515      	str	r5, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	9516      	str	r5, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002700:	2607      	movs	r6, #7
 8002702:	9617      	str	r6, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002704:	a913      	add	r1, sp, #76	@ 0x4c
 8002706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800270a:	f002 f977 	bl	80049fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NPK_RX_Pin|NPK_TX_Pin;
 800270e:	23c0      	movs	r3, #192	@ 0xc0
 8002710:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	9714      	str	r7, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	9515      	str	r5, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	9516      	str	r5, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002718:	9617      	str	r6, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271a:	a913      	add	r1, sp, #76	@ 0x4c
 800271c:	482d      	ldr	r0, [pc, #180]	@ (80027d4 <HAL_UART_MspInit+0x248>)
 800271e:	f002 f96d 	bl	80049fc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8002722:	482d      	ldr	r0, [pc, #180]	@ (80027d8 <HAL_UART_MspInit+0x24c>)
 8002724:	4b2d      	ldr	r3, [pc, #180]	@ (80027dc <HAL_UART_MspInit+0x250>)
 8002726:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002728:	2311      	movs	r3, #17
 800272a:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800272c:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800272e:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002730:	2380      	movs	r3, #128	@ 0x80
 8002732:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002734:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002736:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002738:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800273a:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800273c:	f001 fdf2 	bl	8004324 <HAL_DMA_Init>
 8002740:	2800      	cmp	r0, #0
 8002742:	d12e      	bne.n	80027a2 <HAL_UART_MspInit+0x216>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002744:	2110      	movs	r1, #16
 8002746:	4824      	ldr	r0, [pc, #144]	@ (80027d8 <HAL_UART_MspInit+0x24c>)
 8002748:	f001 ffec 	bl	8004724 <HAL_DMA_ConfigChannelAttributes>
 800274c:	bb60      	cbnz	r0, 80027a8 <HAL_UART_MspInit+0x21c>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800274e:	4b22      	ldr	r3, [pc, #136]	@ (80027d8 <HAL_UART_MspInit+0x24c>)
 8002750:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8002754:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel5;
 8002756:	4822      	ldr	r0, [pc, #136]	@ (80027e0 <HAL_UART_MspInit+0x254>)
 8002758:	4b22      	ldr	r3, [pc, #136]	@ (80027e4 <HAL_UART_MspInit+0x258>)
 800275a:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800275c:	2312      	movs	r3, #18
 800275e:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002760:	2310      	movs	r3, #16
 8002762:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002768:	2280      	movs	r2, #128	@ 0x80
 800276a:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800276c:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800276e:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002770:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002772:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002774:	f001 fdd6 	bl	8004324 <HAL_DMA_Init>
 8002778:	b9c8      	cbnz	r0, 80027ae <HAL_UART_MspInit+0x222>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800277a:	2110      	movs	r1, #16
 800277c:	4818      	ldr	r0, [pc, #96]	@ (80027e0 <HAL_UART_MspInit+0x254>)
 800277e:	f001 ffd1 	bl	8004724 <HAL_DMA_ConfigChannelAttributes>
 8002782:	b9b8      	cbnz	r0, 80027b4 <HAL_UART_MspInit+0x228>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002784:	4b16      	ldr	r3, [pc, #88]	@ (80027e0 <HAL_UART_MspInit+0x254>)
 8002786:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002788:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800278a:	2200      	movs	r2, #0
 800278c:	4611      	mov	r1, r2
 800278e:	2024      	movs	r0, #36	@ 0x24
 8002790:	f001 fd40 	bl	8004214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002794:	2024      	movs	r0, #36	@ 0x24
 8002796:	f001 fd4d 	bl	8004234 <HAL_NVIC_EnableIRQ>
}
 800279a:	e70b      	b.n	80025b4 <HAL_UART_MspInit+0x28>
      Error_Handler();
 800279c:	f7ff f9fc 	bl	8001b98 <Error_Handler>
 80027a0:	e789      	b.n	80026b6 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 80027a2:	f7ff f9f9 	bl	8001b98 <Error_Handler>
 80027a6:	e7cd      	b.n	8002744 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80027a8:	f7ff f9f6 	bl	8001b98 <Error_Handler>
 80027ac:	e7cf      	b.n	800274e <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 80027ae:	f7ff f9f3 	bl	8001b98 <Error_Handler>
 80027b2:	e7e2      	b.n	800277a <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 80027b4:	f7ff f9f0 	bl	8001b98 <Error_Handler>
 80027b8:	e7e4      	b.n	8002784 <HAL_UART_MspInit+0x1f8>
 80027ba:	bf00      	nop
 80027bc:	40008000 	.word	0x40008000
 80027c0:	40013800 	.word	0x40013800
 80027c4:	2000037c 	.word	0x2000037c
 80027c8:	40020008 	.word	0x40020008
 80027cc:	2000031c 	.word	0x2000031c
 80027d0:	40020044 	.word	0x40020044
 80027d4:	48000400 	.word	0x48000400
 80027d8:	200002bc 	.word	0x200002bc
 80027dc:	4002001c 	.word	0x4002001c
 80027e0:	2000025c 	.word	0x2000025c
 80027e4:	40020058 	.word	0x40020058

080027e8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80027e8:	b510      	push	{r4, lr}
 80027ea:	4604      	mov	r4, r0

  if(uartHandle->Instance==LPUART1)
 80027ec:	6803      	ldr	r3, [r0, #0]
 80027ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002860 <HAL_UART_MspDeInit+0x78>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d003      	beq.n	80027fc <HAL_UART_MspDeInit+0x14>
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 80027f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002864 <HAL_UART_MspDeInit+0x7c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d016      	beq.n	8002828 <HAL_UART_MspDeInit+0x40>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80027fa:	bd10      	pop	{r4, pc}
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 80027fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002800:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8002802:	f023 0301 	bic.w	r3, r3, #1
 8002806:	65d3      	str	r3, [r2, #92]	@ 0x5c
    HAL_GPIO_DeInit(GPIOA, LoRa_VCOM_Rx_Pin|LoRa_VCOM_Tx_Pin);
 8002808:	210c      	movs	r1, #12
 800280a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800280e:	f002 f9c7 	bl	8004ba0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002812:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8002816:	f001 fdf5 	bl	8004404 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800281a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800281c:	f001 fdf2 	bl	8004404 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8002820:	2026      	movs	r0, #38	@ 0x26
 8002822:	f001 fd0b 	bl	800423c <HAL_NVIC_DisableIRQ>
 8002826:	e7e8      	b.n	80027fa <HAL_UART_MspDeInit+0x12>
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002828:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800282c:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800282e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002832:	6613      	str	r3, [r2, #96]	@ 0x60
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8002834:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800283c:	f002 f9b0 	bl	8004ba0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, NPK_RX_Pin|NPK_TX_Pin);
 8002840:	21c0      	movs	r1, #192	@ 0xc0
 8002842:	4809      	ldr	r0, [pc, #36]	@ (8002868 <HAL_UART_MspDeInit+0x80>)
 8002844:	f002 f9ac 	bl	8004ba0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002848:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800284c:	f001 fdda 	bl	8004404 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002850:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8002852:	f001 fdd7 	bl	8004404 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002856:	2024      	movs	r0, #36	@ 0x24
 8002858:	f001 fcf0 	bl	800423c <HAL_NVIC_DisableIRQ>
}
 800285c:	e7cd      	b.n	80027fa <HAL_UART_MspDeInit+0x12>
 800285e:	bf00      	nop
 8002860:	40008000 	.word	0x40008000
 8002864:	40013800 	.word	0x40013800
 8002868:	48000400 	.word	0x48000400

0800286c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800286c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800286e:	4b07      	ldr	r3, [pc, #28]	@ (800288c <vcom_Init+0x20>)
 8002870:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002872:	f7fe fecd 	bl	8001610 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002876:	f7ff fe1f 	bl	80024b8 <MX_LPUART1_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 800287a:	4a05      	ldr	r2, [pc, #20]	@ (8002890 <vcom_Init+0x24>)
 800287c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002884:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_28);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002888:	2000      	movs	r0, #0
 800288a:	bd08      	pop	{r3, pc}
 800288c:	20000508 	.word	0x20000508
 8002890:	58000800 	.word	0x58000800

08002894 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002894:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8002896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800289a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800289c:	f042 0201 	orr.w	r2, r2, #1
 80028a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 80028a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028a4:	f022 0201 	bic.w	r2, r2, #1
 80028a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_LPUART1_FORCE_RESET();
  __HAL_RCC_LPUART1_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&hlpuart1);
 80028aa:	4804      	ldr	r0, [pc, #16]	@ (80028bc <vcom_DeInit+0x28>)
 80028ac:	f7ff ff9c 	bl	80027e8 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80028b0:	200f      	movs	r0, #15
 80028b2:	f001 fcc3 	bl	800423c <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80028b6:	2000      	movs	r0, #0
 80028b8:	bd08      	pop	{r3, pc}
 80028ba:	bf00      	nop
 80028bc:	20000470 	.word	0x20000470

080028c0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80028c0:	b508      	push	{r3, lr}
 80028c2:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 80028c4:	4601      	mov	r1, r0
 80028c6:	4802      	ldr	r0, [pc, #8]	@ (80028d0 <vcom_Trace_DMA+0x10>)
 80028c8:	f003 ff8c 	bl	80067e4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80028cc:	2000      	movs	r0, #0
 80028ce:	bd08      	pop	{r3, pc}
 80028d0:	20000470 	.word	0x20000470

080028d4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80028d4:	b510      	push	{r4, lr}
 80028d6:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80028d8:	4b12      	ldr	r3, [pc, #72]	@ (8002924 <vcom_ReceiveInit+0x50>)
 80028da:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80028dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80028e0:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1, WakeUpSelection);
 80028e2:	ab02      	add	r3, sp, #8
 80028e4:	e913 0006 	ldmdb	r3, {r1, r2}
 80028e8:	480f      	ldr	r0, [pc, #60]	@ (8002928 <vcom_ReceiveInit+0x54>)
 80028ea:	f005 f95f 	bl	8007bac <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_BUSY) == SET);
 80028ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002928 <vcom_ReceiveInit+0x54>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69da      	ldr	r2, [r3, #28]
 80028f4:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80028f8:	d1f9      	bne.n	80028ee <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_REACK) == RESET);
 80028fa:	69da      	ldr	r2, [r3, #28]
 80028fc:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8002900:	d0fb      	beq.n	80028fa <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_WUF);
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002908:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&hlpuart1);
 800290a:	4c07      	ldr	r4, [pc, #28]	@ (8002928 <vcom_ReceiveInit+0x54>)
 800290c:	4620      	mov	r0, r4
 800290e:	f005 f98e 	bl	8007c2e <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&hlpuart1, &charRx, 1);
 8002912:	2201      	movs	r2, #1
 8002914:	4905      	ldr	r1, [pc, #20]	@ (800292c <vcom_ReceiveInit+0x58>)
 8002916:	4620      	mov	r0, r4
 8002918:	f005 f8a0 	bl	8007a5c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800291c:	2000      	movs	r0, #0
 800291e:	b002      	add	sp, #8
 8002920:	bd10      	pop	{r4, pc}
 8002922:	bf00      	nop
 8002924:	20000504 	.word	0x20000504
 8002928:	20000470 	.word	0x20000470
 800292c:	2000050c 	.word	0x2000050c

08002930 <vcom_Resume>:

void vcom_Resume(void)
{
 8002930:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002932:	4804      	ldr	r0, [pc, #16]	@ (8002944 <vcom_Resume+0x14>)
 8002934:	f001 fcf6 	bl	8004324 <HAL_DMA_Init>
 8002938:	b900      	cbnz	r0, 800293c <vcom_Resume+0xc>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800293a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800293c:	f7ff f92c 	bl	8001b98 <Error_Handler>
}
 8002940:	e7fb      	b.n	800293a <vcom_Resume+0xa>
 8002942:	bf00      	nop
 8002944:	2000031c 	.word	0x2000031c

08002948 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002948:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == LPUART1)
 800294a:	6802      	ldr	r2, [r0, #0]
 800294c:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <HAL_UART_TxCpltCallback+0x18>)
 800294e:	429a      	cmp	r2, r3
 8002950:	d000      	beq.n	8002954 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002952:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8002954:	4b03      	ldr	r3, [pc, #12]	@ (8002964 <HAL_UART_TxCpltCallback+0x1c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2000      	movs	r0, #0
 800295a:	4798      	blx	r3
}
 800295c:	e7f9      	b.n	8002952 <HAL_UART_TxCpltCallback+0xa>
 800295e:	bf00      	nop
 8002960:	40008000 	.word	0x40008000
 8002964:	20000508 	.word	0x20000508

08002968 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == LPUART1)
 8002968:	6802      	ldr	r2, [r0, #0]
 800296a:	4b0a      	ldr	r3, [pc, #40]	@ (8002994 <HAL_UART_RxCpltCallback+0x2c>)
 800296c:	429a      	cmp	r2, r3
 800296e:	d000      	beq.n	8002972 <HAL_UART_RxCpltCallback+0xa>
 8002970:	4770      	bx	lr
{
 8002972:	b510      	push	{r4, lr}
 8002974:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002976:	4b08      	ldr	r3, [pc, #32]	@ (8002998 <HAL_UART_RxCpltCallback+0x30>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	b12b      	cbz	r3, 8002988 <HAL_UART_RxCpltCallback+0x20>
 800297c:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
 8002980:	b912      	cbnz	r2, 8002988 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002982:	2101      	movs	r1, #1
 8002984:	4805      	ldr	r0, [pc, #20]	@ (800299c <HAL_UART_RxCpltCallback+0x34>)
 8002986:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002988:	2201      	movs	r2, #1
 800298a:	4904      	ldr	r1, [pc, #16]	@ (800299c <HAL_UART_RxCpltCallback+0x34>)
 800298c:	4620      	mov	r0, r4
 800298e:	f005 f865 	bl	8007a5c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002992:	bd10      	pop	{r4, pc}
 8002994:	40008000 	.word	0x40008000
 8002998:	20000504 	.word	0x20000504
 800299c:	2000050c 	.word	0x2000050c

080029a0 <SYS_GetNPK>:
/**
 * @brief Gets all 3 NPK values from the NPK sensor
 * @return void
 * @param Pointers of type uint16_t*.
 */
void SYS_GetNPK(uint16_t* N, uint16_t* P, uint16_t* K) {
 80029a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029a4:	b085      	sub	sp, #20
 80029a6:	4681      	mov	r9, r0
 80029a8:	4688      	mov	r8, r1
 80029aa:	4617      	mov	r7, r2
	const uint8_t CYCLE_LIMIT = 5;
	uint8_t in[11];
	uint8_t received = 0;

	*N=0;
 80029ac:	2400      	movs	r4, #0
 80029ae:	8004      	strh	r4, [r0, #0]
	*P=0;
 80029b0:	800c      	strh	r4, [r1, #0]
	*K=0;
 80029b2:	8014      	strh	r4, [r2, #0]

	while (received < CYCLE_LIMIT) {
 80029b4:	2c04      	cmp	r4, #4
 80029b6:	d840      	bhi.n	8002a3a <SYS_GetNPK+0x9a>
		// Request value from sensor
		HAL_UART_Transmit(&huart1, REQUEST_NPK, strlen(REQUEST_NPK), 1000);
 80029b8:	4e21      	ldr	r6, [pc, #132]	@ (8002a40 <SYS_GetNPK+0xa0>)
 80029ba:	4630      	mov	r0, r6
 80029bc:	f7fd fbdc 	bl	8000178 <strlen>
 80029c0:	4d20      	ldr	r5, [pc, #128]	@ (8002a44 <SYS_GetNPK+0xa4>)
 80029c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029c6:	b282      	uxth	r2, r0
 80029c8:	4631      	mov	r1, r6
 80029ca:	4628      	mov	r0, r5
 80029cc:	f004 fe4f 	bl	800766e <HAL_UART_Transmit>
		HAL_Delay(1000);
 80029d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029d4:	f7ff fb60 	bl	8002098 <HAL_Delay>
		// Receive data from UART
		HAL_UART_Receive(&huart1, in, 11, 1000);
 80029d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029dc:	220b      	movs	r2, #11
 80029de:	a901      	add	r1, sp, #4
 80029e0:	4628      	mov	r0, r5
 80029e2:	f004 fea6 	bl	8007732 <HAL_UART_Receive>
		if (in[10]!=0x53) {
 80029e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80029ea:	2b53      	cmp	r3, #83	@ 0x53
 80029ec:	d00c      	beq.n	8002a08 <SYS_GetNPK+0x68>
			received++;
 80029ee:	3401      	adds	r4, #1
 80029f0:	b2e4      	uxtb	r4, r4
			received = CYCLE_LIMIT + 1;
			*N = (uint16_t)in[3] | ((uint16_t)in[4]<<8);
			*P = (uint16_t)in[5] | ((uint16_t)in[6]<<8);
			*K = (uint16_t)in[7] | ((uint16_t)in[8]<<8);
		}
		if (received == CYCLE_LIMIT) {
 80029f2:	2c05      	cmp	r4, #5
 80029f4:	d1de      	bne.n	80029b4 <SYS_GetNPK+0x14>
			*N = 1;
 80029f6:	2301      	movs	r3, #1
 80029f8:	f8a9 3000 	strh.w	r3, [r9]
			*P = 2;
 80029fc:	2302      	movs	r3, #2
 80029fe:	f8a8 3000 	strh.w	r3, [r8]
			*K = 3;
 8002a02:	2303      	movs	r3, #3
 8002a04:	803b      	strh	r3, [r7, #0]
 8002a06:	e7d5      	b.n	80029b4 <SYS_GetNPK+0x14>
			*N = (uint16_t)in[3] | ((uint16_t)in[4]<<8);
 8002a08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002a0c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002a10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a14:	f8a9 3000 	strh.w	r3, [r9]
			*P = (uint16_t)in[5] | ((uint16_t)in[6]<<8);
 8002a18:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002a1c:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8002a20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a24:	f8a8 3000 	strh.w	r3, [r8]
			*K = (uint16_t)in[7] | ((uint16_t)in[8]<<8);
 8002a28:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002a2c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002a30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a34:	803b      	strh	r3, [r7, #0]
			received = CYCLE_LIMIT + 1;
 8002a36:	2406      	movs	r4, #6
 8002a38:	e7db      	b.n	80029f2 <SYS_GetNPK+0x52>
		}
	}
}
 8002a3a:	b005      	add	sp, #20
 8002a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a40:	20000000 	.word	0x20000000
 8002a44:	200003dc 	.word	0x200003dc

08002a48 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002a48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002a4a:	f7ff fa65 	bl	8001f18 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002a4e:	f000 fbbf 	bl	80031d0 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002a52:	bd08      	pop	{r3, pc}

08002a54 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002a54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002a56:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5a:	f00f fc6b 	bl	8012334 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002a5e:	bd08      	pop	{r3, pc}

08002a60 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a60:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002a64:	4905      	ldr	r1, [pc, #20]	@ (8002a7c <__NVIC_SystemReset+0x1c>)
 8002a66:	68ca      	ldr	r2, [r1, #12]
 8002a68:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002a6c:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <__NVIC_SystemReset+0x20>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60cb      	str	r3, [r1, #12]
 8002a72:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002a76:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002a78:	e7fd      	b.n	8002a76 <__NVIC_SystemReset+0x16>
 8002a7a:	bf00      	nop
 8002a7c:	e000ed00 	.word	0xe000ed00
 8002a80:	05fa0004 	.word	0x05fa0004

08002a84 <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 8002a84:	4770      	bx	lr
	...

08002a88 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8002a88:	4b01      	ldr	r3, [pc, #4]	@ (8002a90 <OnTxFrameCtrlChanged+0x8>)
 8002a8a:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000010 	.word	0x20000010

08002a94 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8002a94:	4b01      	ldr	r3, [pc, #4]	@ (8002a9c <OnPingSlotPeriodicityChanged+0x8>)
 8002a96:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000010 	.word	0x20000010

08002aa0 <OnBeaconStatusChange>:
  if (params != NULL)
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	d03f      	beq.n	8002b24 <OnBeaconStatusChange+0x84>
{
 8002aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aa8:	b08c      	sub	sp, #48	@ 0x30
 8002aaa:	4603      	mov	r3, r0
    switch (params->State)
 8002aac:	7842      	ldrb	r2, [r0, #1]
 8002aae:	2a02      	cmp	r2, #2
 8002ab0:	d00a      	beq.n	8002ac8 <OnBeaconStatusChange+0x28>
 8002ab2:	2a03      	cmp	r2, #3
 8002ab4:	d02f      	beq.n	8002b16 <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b28 <OnBeaconStatusChange+0x88>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	4611      	mov	r1, r2
 8002abc:	2002      	movs	r0, #2
 8002abe:	f00f fadb 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
}
 8002ac2:	b00c      	add	sp, #48	@ 0x30
 8002ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002ac8:	7c02      	ldrb	r2, [r0, #16]
 8002aca:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8002ace:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8002ad2:	7d9c      	ldrb	r4, [r3, #22]
 8002ad4:	7ddd      	ldrb	r5, [r3, #23]
 8002ad6:	7e1e      	ldrb	r6, [r3, #24]
 8002ad8:	7e5f      	ldrb	r7, [r3, #25]
 8002ada:	f893 c01a 	ldrb.w	ip, [r3, #26]
 8002ade:	f893 e01b 	ldrb.w	lr, [r3, #27]
 8002ae2:	f893 801c 	ldrb.w	r8, [r3, #28]
 8002ae6:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8002aea:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
 8002aee:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8002af2:	9708      	str	r7, [sp, #32]
 8002af4:	9607      	str	r6, [sp, #28]
 8002af6:	9506      	str	r5, [sp, #24]
 8002af8:	9405      	str	r4, [sp, #20]
 8002afa:	685c      	ldr	r4, [r3, #4]
 8002afc:	9404      	str	r4, [sp, #16]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	9303      	str	r3, [sp, #12]
 8002b02:	9002      	str	r0, [sp, #8]
 8002b04:	9101      	str	r1, [sp, #4]
 8002b06:	9200      	str	r2, [sp, #0]
 8002b08:	4b08      	ldr	r3, [pc, #32]	@ (8002b2c <OnBeaconStatusChange+0x8c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	2002      	movs	r0, #2
 8002b10:	f00f fab2 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8002b14:	e7d5      	b.n	8002ac2 <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8002b16:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <OnBeaconStatusChange+0x90>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	2002      	movs	r0, #2
 8002b1e:	f00f faab 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
}
 8002b22:	e7ce      	b.n	8002ac2 <OnBeaconStatusChange+0x22>
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	08012d88 	.word	0x08012d88
 8002b2c:	08012da0 	.word	0x08012da0
 8002b30:	08012e14 	.word	0x08012e14

08002b34 <OnClassChange>:
{
 8002b34:	b500      	push	{lr}
 8002b36:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8002b38:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <OnClassChange+0x1c>)
 8002b3a:	5c1b      	ldrb	r3, [r3, r0]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <OnClassChange+0x20>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	4611      	mov	r1, r2
 8002b44:	2002      	movs	r0, #2
 8002b46:	f00f fa97 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
}
 8002b4a:	b003      	add	sp, #12
 8002b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b50:	08012e50 	.word	0x08012e50
 8002b54:	08012e34 	.word	0x08012e34

08002b58 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8002b58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 8002b5a:	2801      	cmp	r0, #1
 8002b5c:	d006      	beq.n	8002b6c <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 8002b5e:	4b07      	ldr	r3, [pc, #28]	@ (8002b7c <OnNvmDataChange+0x24>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	4611      	mov	r1, r2
 8002b64:	2002      	movs	r0, #2
 8002b66:	f00f fa87 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 8002b6a:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8002b6c:	4b04      	ldr	r3, [pc, #16]	@ (8002b80 <OnNvmDataChange+0x28>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	4611      	mov	r1, r2
 8002b72:	2002      	movs	r0, #2
 8002b74:	f00f fa80 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
 8002b78:	e7f7      	b.n	8002b6a <OnNvmDataChange+0x12>
 8002b7a:	bf00      	nop
 8002b7c:	08012e68 	.word	0x08012e68
 8002b80:	08012e54 	.word	0x08012e54

08002b84 <OnTxTimerEvent>:
{
 8002b84:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8002b86:	2100      	movs	r1, #0
 8002b88:	2002      	movs	r0, #2
 8002b8a:	f00f fb9f 	bl	80122cc <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8002b8e:	4802      	ldr	r0, [pc, #8]	@ (8002b98 <OnTxTimerEvent+0x14>)
 8002b90:	f00f fdd2 	bl	8012738 <UTIL_TIMER_Start>
}
 8002b94:	bd08      	pop	{r3, pc}
 8002b96:	bf00      	nop
 8002b98:	2000066c 	.word	0x2000066c

08002b9c <OnMacProcessNotify>:
{
 8002b9c:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	f00f fb93 	bl	80122cc <UTIL_SEQ_SetTask>
}
 8002ba6:	bd08      	pop	{r3, pc}

08002ba8 <OnSystemReset>:
{
 8002ba8:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002baa:	f005 fd17 	bl	80085dc <LmHandlerHalt>
 8002bae:	b100      	cbz	r0, 8002bb2 <OnSystemReset+0xa>
}
 8002bb0:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002bb2:	f005 fa27 	bl	8008004 <LmHandlerJoinStatus>
 8002bb6:	2801      	cmp	r0, #1
 8002bb8:	d1fa      	bne.n	8002bb0 <OnSystemReset+0x8>
    NVIC_SystemReset();
 8002bba:	f7ff ff51 	bl	8002a60 <__NVIC_SystemReset>
	...

08002bc0 <OnTxPeriodicityChanged>:
{
 8002bc0:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002bc2:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <OnTxPeriodicityChanged+0x28>)
 8002bc4:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 8002bc6:	b908      	cbnz	r0, 8002bcc <OnTxPeriodicityChanged+0xc>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8002bcc:	4c07      	ldr	r4, [pc, #28]	@ (8002bec <OnTxPeriodicityChanged+0x2c>)
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f00f fd58 	bl	8012684 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8002bd4:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <OnTxPeriodicityChanged+0x28>)
 8002bd6:	6819      	ldr	r1, [r3, #0]
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f00f fdf3 	bl	80127c4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002bde:	4620      	mov	r0, r4
 8002be0:	f00f fdaa 	bl	8012738 <UTIL_TIMER_Start>
}
 8002be4:	bd10      	pop	{r4, pc}
 8002be6:	bf00      	nop
 8002be8:	20000668 	.word	0x20000668
 8002bec:	2000066c 	.word	0x2000066c

08002bf0 <OnTxData>:
  if ((params != NULL))
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	d042      	beq.n	8002c7a <OnTxData+0x8a>
{
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 8002bfa:	7803      	ldrb	r3, [r0, #0]
 8002bfc:	b90b      	cbnz	r3, 8002c02 <OnTxData+0x12>
}
 8002bfe:	b004      	add	sp, #16
 8002c00:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002c02:	2201      	movs	r2, #1
 8002c04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c08:	481c      	ldr	r0, [pc, #112]	@ (8002c7c <OnTxData+0x8c>)
 8002c0a:	f002 f847 	bl	8004c9c <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 8002c0e:	481c      	ldr	r0, [pc, #112]	@ (8002c80 <OnTxData+0x90>)
 8002c10:	f00f fd92 	bl	8012738 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8002c14:	4b1b      	ldr	r3, [pc, #108]	@ (8002c84 <OnTxData+0x94>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	4611      	mov	r1, r2
 8002c1a:	2002      	movs	r0, #2
 8002c1c:	f00f fa2c 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8002c20:	7c23      	ldrb	r3, [r4, #16]
 8002c22:	f994 200a 	ldrsb.w	r2, [r4, #10]
 8002c26:	f994 1018 	ldrsb.w	r1, [r4, #24]
 8002c2a:	9103      	str	r1, [sp, #12]
 8002c2c:	9202      	str	r2, [sp, #8]
 8002c2e:	9301      	str	r3, [sp, #4]
 8002c30:	68e3      	ldr	r3, [r4, #12]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	4b14      	ldr	r3, [pc, #80]	@ (8002c88 <OnTxData+0x98>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	4611      	mov	r1, r2
 8002c3a:	2003      	movs	r0, #3
 8002c3c:	f00f fa1c 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8002c40:	4b12      	ldr	r3, [pc, #72]	@ (8002c8c <OnTxData+0x9c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	4611      	mov	r1, r2
 8002c46:	2003      	movs	r0, #3
 8002c48:	f00f fa16 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8002c4c:	7a23      	ldrb	r3, [r4, #8]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d10c      	bne.n	8002c6c <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8002c52:	7a63      	ldrb	r3, [r4, #9]
 8002c54:	b143      	cbz	r3, 8002c68 <OnTxData+0x78>
 8002c56:	4b0e      	ldr	r3, [pc, #56]	@ (8002c90 <OnTxData+0xa0>)
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <OnTxData+0xa4>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	4611      	mov	r1, r2
 8002c60:	2003      	movs	r0, #3
 8002c62:	f00f fa09 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
 8002c66:	e7ca      	b.n	8002bfe <OnTxData+0xe>
 8002c68:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <OnTxData+0xa8>)
 8002c6a:	e7f5      	b.n	8002c58 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <OnTxData+0xac>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	4611      	mov	r1, r2
 8002c72:	2003      	movs	r0, #3
 8002c74:	f00f fa00 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
}
 8002c78:	e7c1      	b.n	8002bfe <OnTxData+0xe>
 8002c7a:	4770      	bx	lr
 8002c7c:	48000400 	.word	0x48000400
 8002c80:	20000540 	.word	0x20000540
 8002c84:	08012e88 	.word	0x08012e88
 8002c88:	08012ebc 	.word	0x08012ebc
 8002c8c:	08012ef0 	.word	0x08012ef0
 8002c90:	08012e7c 	.word	0x08012e7c
 8002c94:	08012f00 	.word	0x08012f00
 8002c98:	08012e80 	.word	0x08012e80
 8002c9c:	08012f14 	.word	0x08012f14

08002ca0 <OnJoinRequest>:
  if (joinParams != NULL)
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	d046      	beq.n	8002d32 <OnJoinRequest+0x92>
{
 8002ca4:	b510      	push	{r4, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8002caa:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8002cae:	b9fb      	cbnz	r3, 8002cf0 <OnJoinRequest+0x50>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002cb0:	4820      	ldr	r0, [pc, #128]	@ (8002d34 <OnJoinRequest+0x94>)
 8002cb2:	f00f fce7 	bl	8012684 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002cbc:	481e      	ldr	r0, [pc, #120]	@ (8002d38 <OnJoinRequest+0x98>)
 8002cbe:	f001 ffed 	bl	8004c9c <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d3c <OnJoinRequest+0x9c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	2002      	movs	r0, #2
 8002cca:	f00f f9d5 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8002cce:	79e3      	ldrb	r3, [r4, #7]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d006      	beq.n	8002ce2 <OnJoinRequest+0x42>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d40 <OnJoinRequest+0xa0>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	4611      	mov	r1, r2
 8002cda:	2002      	movs	r0, #2
 8002cdc:	f00f f9cc 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
 8002ce0:	e019      	b.n	8002d16 <OnJoinRequest+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002ce2:	4b18      	ldr	r3, [pc, #96]	@ (8002d44 <OnJoinRequest+0xa4>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	2002      	movs	r0, #2
 8002cea:	f00f f9c5 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
 8002cee:	e012      	b.n	8002d16 <OnJoinRequest+0x76>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n\r######DATA NOT SENT######\r\n");
 8002cf0:	4b15      	ldr	r3, [pc, #84]	@ (8002d48 <OnJoinRequest+0xa8>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	2002      	movs	r0, #2
 8002cf8:	f00f f9be 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_M, "\rDEV_ADDR:\t%d\r\n\rNEXT TX:\t%d ms\r\n",
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	4a0d      	ldr	r2, [pc, #52]	@ (8002d34 <OnJoinRequest+0x94>)
 8002d00:	6952      	ldr	r2, [r2, #20]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	9201      	str	r2, [sp, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	4b10      	ldr	r3, [pc, #64]	@ (8002d4c <OnJoinRequest+0xac>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4611      	mov	r1, r2
 8002d10:	2002      	movs	r0, #2
 8002d12:	f00f f9b1 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n",
 8002d16:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8002d1a:	f994 2005 	ldrsb.w	r2, [r4, #5]
 8002d1e:	9201      	str	r2, [sp, #4]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	4b0b      	ldr	r3, [pc, #44]	@ (8002d50 <OnJoinRequest+0xb0>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	4611      	mov	r1, r2
 8002d28:	2003      	movs	r0, #3
 8002d2a:	f00f f9a5 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
}
 8002d2e:	b002      	add	sp, #8
 8002d30:	bd10      	pop	{r4, pc}
 8002d32:	4770      	bx	lr
 8002d34:	20000510 	.word	0x20000510
 8002d38:	48000400 	.word	0x48000400
 8002d3c:	08012f24 	.word	0x08012f24
 8002d40:	08012f5c 	.word	0x08012f5c
 8002d44:	08012f3c 	.word	0x08012f3c
 8002d48:	08012f7c 	.word	0x08012f7c
 8002d4c:	08012fb4 	.word	0x08012fb4
 8002d50:	08012fd8 	.word	0x08012fd8

08002d54 <OnStopJoinTimerEvent>:
{
 8002d54:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 8002d56:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <OnStopJoinTimerEvent+0x3c>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d013      	beq.n	8002d86 <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002d5e:	4c0d      	ldr	r4, [pc, #52]	@ (8002d94 <OnStopJoinTimerEvent+0x40>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d66:	4620      	mov	r0, r4
 8002d68:	f001 ff98 	bl	8004c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d72:	4620      	mov	r0, r4
 8002d74:	f001 ff92 	bl	8004c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f001 ff8c 	bl	8004c9c <HAL_GPIO_WritePin>
}
 8002d84:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002d86:	2100      	movs	r1, #0
 8002d88:	2008      	movs	r0, #8
 8002d8a:	f00f fa9f 	bl	80122cc <UTIL_SEQ_SetTask>
 8002d8e:	e7e6      	b.n	8002d5e <OnStopJoinTimerEvent+0xa>
 8002d90:	20000074 	.word	0x20000074
 8002d94:	48000400 	.word	0x48000400

08002d98 <OnRxTimerLedEvent>:
{
 8002d98:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002da0:	4801      	ldr	r0, [pc, #4]	@ (8002da8 <OnRxTimerLedEvent+0x10>)
 8002da2:	f001 ff7b 	bl	8004c9c <HAL_GPIO_WritePin>
}
 8002da6:	bd08      	pop	{r3, pc}
 8002da8:	48000400 	.word	0x48000400

08002dac <OnTxTimerLedEvent>:
{
 8002dac:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002dae:	2200      	movs	r2, #0
 8002db0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002db4:	4801      	ldr	r0, [pc, #4]	@ (8002dbc <OnTxTimerLedEvent+0x10>)
 8002db6:	f001 ff71 	bl	8004c9c <HAL_GPIO_WritePin>
}
 8002dba:	bd08      	pop	{r3, pc}
 8002dbc:	48000400 	.word	0x48000400

08002dc0 <OnRxData>:
  if (params != NULL)
 8002dc0:	2900      	cmp	r1, #0
 8002dc2:	d06e      	beq.n	8002ea2 <OnRxData+0xe2>
{
 8002dc4:	b570      	push	{r4, r5, r6, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	4604      	mov	r4, r0
 8002dca:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dd2:	4834      	ldr	r0, [pc, #208]	@ (8002ea4 <OnRxData+0xe4>)
 8002dd4:	f001 ff62 	bl	8004c9c <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8002dd8:	4833      	ldr	r0, [pc, #204]	@ (8002ea8 <OnRxData+0xe8>)
 8002dda:	f00f fcad 	bl	8012738 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8002dde:	782e      	ldrb	r6, [r5, #0]
 8002de0:	2e00      	cmp	r6, #0
 8002de2:	d042      	beq.n	8002e6a <OnRxData+0xaa>
      if (appData != NULL)
 8002de4:	2c00      	cmp	r4, #0
 8002de6:	d03f      	beq.n	8002e68 <OnRxData+0xa8>
        RxPort = appData->Port;
 8002de8:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 8002dea:	6863      	ldr	r3, [r4, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d03c      	beq.n	8002e6a <OnRxData+0xaa>
          switch (appData->Port)
 8002df0:	2e02      	cmp	r6, #2
 8002df2:	d016      	beq.n	8002e22 <OnRxData+0x62>
 8002df4:	2e03      	cmp	r6, #3
 8002df6:	d138      	bne.n	8002e6a <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002df8:	7862      	ldrb	r2, [r4, #1]
 8002dfa:	2a01      	cmp	r2, #1
 8002dfc:	d135      	bne.n	8002e6a <OnRxData+0xaa>
                switch (appData->Buffer[0])
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d006      	beq.n	8002e12 <OnRxData+0x52>
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d008      	beq.n	8002e1a <OnRxData+0x5a>
 8002e08:	bb7b      	cbnz	r3, 8002e6a <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f005 f9cc 	bl	80081a8 <LmHandlerRequestClass>
                    break;
 8002e10:	e02b      	b.n	8002e6a <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 8002e12:	2001      	movs	r0, #1
 8002e14:	f005 f9c8 	bl	80081a8 <LmHandlerRequestClass>
                    break;
 8002e18:	e027      	b.n	8002e6a <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f005 f9c4 	bl	80081a8 <LmHandlerRequestClass>
                    break;
 8002e20:	e023      	b.n	8002e6a <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002e22:	7862      	ldrb	r2, [r4, #1]
 8002e24:	2a01      	cmp	r2, #1
 8002e26:	d120      	bne.n	8002e6a <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8002eac <OnRxData+0xec>)
 8002e30:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8002e32:	b963      	cbnz	r3, 8002e4e <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002e34:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb0 <OnRxData+0xf0>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	4611      	mov	r1, r2
 8002e3a:	2003      	movs	r0, #3
 8002e3c:	f00f f91c 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002e40:	2200      	movs	r2, #0
 8002e42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e46:	4817      	ldr	r0, [pc, #92]	@ (8002ea4 <OnRxData+0xe4>)
 8002e48:	f001 ff28 	bl	8004c9c <HAL_GPIO_WritePin>
 8002e4c:	e00d      	b.n	8002e6a <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002e4e:	4b19      	ldr	r3, [pc, #100]	@ (8002eb4 <OnRxData+0xf4>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	4611      	mov	r1, r2
 8002e54:	2003      	movs	r0, #3
 8002e56:	f00f f90f 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e60:	4810      	ldr	r0, [pc, #64]	@ (8002ea4 <OnRxData+0xe4>)
 8002e62:	f001 ff1b 	bl	8004c9c <HAL_GPIO_WritePin>
 8002e66:	e000      	b.n	8002e6a <OnRxData+0xaa>
  uint8_t RxPort = 0;
 8002e68:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 8002e6a:	7c2b      	ldrb	r3, [r5, #16]
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d901      	bls.n	8002e74 <OnRxData+0xb4>
}
 8002e70:	b006      	add	sp, #24
 8002e72:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8002e74:	f995 2008 	ldrsb.w	r2, [r5, #8]
 8002e78:	f995 1009 	ldrsb.w	r1, [r5, #9]
 8002e7c:	f995 000a 	ldrsb.w	r0, [r5, #10]
 8002e80:	9005      	str	r0, [sp, #20]
 8002e82:	9104      	str	r1, [sp, #16]
 8002e84:	490c      	ldr	r1, [pc, #48]	@ (8002eb8 <OnRxData+0xf8>)
 8002e86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e8a:	9303      	str	r3, [sp, #12]
 8002e8c:	9202      	str	r2, [sp, #8]
 8002e8e:	9601      	str	r6, [sp, #4]
 8002e90:	68eb      	ldr	r3, [r5, #12]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	4b09      	ldr	r3, [pc, #36]	@ (8002ebc <OnRxData+0xfc>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	4611      	mov	r1, r2
 8002e9a:	2003      	movs	r0, #3
 8002e9c:	f00f f8ec 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
}
 8002ea0:	e7e6      	b.n	8002e70 <OnRxData+0xb0>
 8002ea2:	4770      	bx	lr
 8002ea4:	48000400 	.word	0x48000400
 8002ea8:	20000528 	.word	0x20000528
 8002eac:	20000558 	.word	0x20000558
 8002eb0:	08013004 	.word	0x08013004
 8002eb4:	08013010 	.word	0x08013010
 8002eb8:	0801364c 	.word	0x0801364c
 8002ebc:	0801301c 	.word	0x0801301c

08002ec0 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002ec0:	b538      	push	{r3, r4, r5, lr}
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 8002ec6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002eca:	4805      	ldr	r0, [pc, #20]	@ (8002ee0 <OnStoreContextRequest+0x20>)
 8002ecc:	f7fe fd7a 	bl	80019c4 <FLASH_IF_Erase>
 8002ed0:	b100      	cbz	r0, 8002ed4 <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002ed2:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8002ed4:	462a      	mov	r2, r5
 8002ed6:	4621      	mov	r1, r4
 8002ed8:	4801      	ldr	r0, [pc, #4]	@ (8002ee0 <OnStoreContextRequest+0x20>)
 8002eda:	f7fe fd3b 	bl	8001954 <FLASH_IF_Write>
}
 8002ede:	e7f8      	b.n	8002ed2 <OnStoreContextRequest+0x12>
 8002ee0:	0803f000 	.word	0x0803f000

08002ee4 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002ee4:	b508      	push	{r3, lr}
 8002ee6:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8002ee8:	4901      	ldr	r1, [pc, #4]	@ (8002ef0 <OnRestoreContextRequest+0xc>)
 8002eea:	f7fe fd4f 	bl	800198c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002eee:	bd08      	pop	{r3, pc}
 8002ef0:	0803f000 	.word	0x0803f000

08002ef4 <StopJoin>:
{
 8002ef4:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002ef6:	4c1e      	ldr	r4, [pc, #120]	@ (8002f70 <StopJoin+0x7c>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002efe:	4620      	mov	r0, r4
 8002f00:	f001 fecc 	bl	8004c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002f04:	2201      	movs	r2, #1
 8002f06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f001 fec6 	bl	8004c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002f10:	2201      	movs	r2, #1
 8002f12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f16:	4620      	mov	r0, r4
 8002f18:	f001 fec0 	bl	8004c9c <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 8002f1c:	4815      	ldr	r0, [pc, #84]	@ (8002f74 <StopJoin+0x80>)
 8002f1e:	f00f fbb1 	bl	8012684 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8002f22:	f005 fb53 	bl	80085cc <LmHandlerStop>
 8002f26:	b148      	cbz	r0, 8002f3c <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8002f28:	4b13      	ldr	r3, [pc, #76]	@ (8002f78 <StopJoin+0x84>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	2002      	movs	r0, #2
 8002f30:	f00f f8a2 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 8002f34:	4811      	ldr	r0, [pc, #68]	@ (8002f7c <StopJoin+0x88>)
 8002f36:	f00f fbff 	bl	8012738 <UTIL_TIMER_Start>
}
 8002f3a:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 8002f3c:	4b10      	ldr	r3, [pc, #64]	@ (8002f80 <StopJoin+0x8c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	4611      	mov	r1, r2
 8002f42:	2002      	movs	r0, #2
 8002f44:	f00f f898 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 8002f48:	4c0e      	ldr	r4, [pc, #56]	@ (8002f84 <StopJoin+0x90>)
 8002f4a:	2501      	movs	r5, #1
 8002f4c:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f88 <StopJoin+0x94>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	4611      	mov	r1, r2
 8002f54:	2002      	movs	r0, #2
 8002f56:	f00f f88f 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 8002f5a:	480c      	ldr	r0, [pc, #48]	@ (8002f8c <StopJoin+0x98>)
 8002f5c:	f005 fa04 	bl	8008368 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8002f60:	4629      	mov	r1, r5
 8002f62:	7820      	ldrb	r0, [r4, #0]
 8002f64:	f004 ffc8 	bl	8007ef8 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8002f68:	4802      	ldr	r0, [pc, #8]	@ (8002f74 <StopJoin+0x80>)
 8002f6a:	f00f fbe5 	bl	8012738 <UTIL_TIMER_Start>
 8002f6e:	e7e1      	b.n	8002f34 <StopJoin+0x40>
 8002f70:	48000400 	.word	0x48000400
 8002f74:	2000066c 	.word	0x2000066c
 8002f78:	08013064 	.word	0x08013064
 8002f7c:	20000650 	.word	0x20000650
 8002f80:	08013084 	.word	0x08013084
 8002f84:	20000074 	.word	0x20000074
 8002f88:	08013098 	.word	0x08013098
 8002f8c:	20000010 	.word	0x20000010

08002f90 <StoreContext>:
{
 8002f90:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8002f92:	f005 fbad 	bl	80086f0 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 8002f96:	f110 0f08 	cmn.w	r0, #8
 8002f9a:	d003      	beq.n	8002fa4 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002f9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002fa0:	d007      	beq.n	8002fb2 <StoreContext+0x22>
}
 8002fa2:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8002fa4:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <StoreContext+0x30>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	4611      	mov	r1, r2
 8002faa:	2002      	movs	r0, #2
 8002fac:	f00f f864 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
 8002fb0:	e7f7      	b.n	8002fa2 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8002fb2:	4b04      	ldr	r3, [pc, #16]	@ (8002fc4 <StoreContext+0x34>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	2002      	movs	r0, #2
 8002fba:	f00f f85d 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
}
 8002fbe:	e7f0      	b.n	8002fa2 <StoreContext+0x12>
 8002fc0:	080130b8 	.word	0x080130b8
 8002fc4:	080130d0 	.word	0x080130d0

08002fc8 <SendTxData>:
{
 8002fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fca:	b08d      	sub	sp, #52	@ 0x34
  uint8_t batteryLevel = GetBatteryLevel();
 8002fcc:	f7fe ffd4 	bl	8001f78 <GetBatteryLevel>
 8002fd0:	4605      	mov	r5, r0
  if (LmHandlerIsBusy() == false)
 8002fd2:	f005 f829 	bl	8008028 <LmHandlerIsBusy>
 8002fd6:	b190      	cbz	r0, 8002ffe <SendTxData+0x36>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002fd8:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8002fda:	4c66      	ldr	r4, [pc, #408]	@ (8003174 <SendTxData+0x1ac>)
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f00f fb51 	bl	8012684 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002fe2:	4b65      	ldr	r3, [pc, #404]	@ (8003178 <SendTxData+0x1b0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	429d      	cmp	r5, r3
 8002fea:	bf38      	it	cc
 8002fec:	4619      	movcc	r1, r3
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f00f fbe8 	bl	80127c4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f00f fb9f 	bl	8012738 <UTIL_TIMER_Start>
}
 8002ffa:	b00d      	add	sp, #52	@ 0x34
 8002ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EnvSensors_Read(&sensor_data);
 8002ffe:	a802      	add	r0, sp, #8
 8003000:	f7ff f8e6 	bl	80021d0 <EnvSensors_Read>
    APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8003004:	9500      	str	r5, [sp, #0]
 8003006:	4b5d      	ldr	r3, [pc, #372]	@ (800317c <SendTxData+0x1b4>)
 8003008:	2201      	movs	r2, #1
 800300a:	2100      	movs	r1, #0
 800300c:	2002      	movs	r0, #2
 800300e:	f00f f833 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "Temp: %d\r\n", (int16_t)(sensor_data.temperature));
 8003012:	9803      	ldr	r0, [sp, #12]
 8003014:	f7fd fed6 	bl	8000dc4 <__aeabi_f2iz>
 8003018:	b200      	sxth	r0, r0
 800301a:	9000      	str	r0, [sp, #0]
 800301c:	4b58      	ldr	r3, [pc, #352]	@ (8003180 <SendTxData+0x1b8>)
 800301e:	2201      	movs	r2, #1
 8003020:	2100      	movs	r1, #0
 8003022:	2002      	movs	r0, #2
 8003024:	f00f f828 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "H2O: %d\r\n", (int16_t) sensor_data.h2o);		//DP: report h2o to console.
 8003028:	9808      	ldr	r0, [sp, #32]
 800302a:	f7fd fecb 	bl	8000dc4 <__aeabi_f2iz>
 800302e:	b200      	sxth	r0, r0
 8003030:	9000      	str	r0, [sp, #0]
 8003032:	4b54      	ldr	r3, [pc, #336]	@ (8003184 <SendTxData+0x1bc>)
 8003034:	2201      	movs	r2, #1
 8003036:	2100      	movs	r1, #0
 8003038:	2002      	movs	r0, #2
 800303a:	f00f f81d 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "N: %d\r\n", (int16_t) sensor_data.n);		//DP: report n to console.
 800303e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	4b50      	ldr	r3, [pc, #320]	@ (8003188 <SendTxData+0x1c0>)
 8003046:	2201      	movs	r2, #1
 8003048:	2100      	movs	r1, #0
 800304a:	2002      	movs	r0, #2
 800304c:	f00f f814 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "P: %d\r\n", (int16_t) sensor_data.p);		//DP: report p to console.
 8003050:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	4b4d      	ldr	r3, [pc, #308]	@ (800318c <SendTxData+0x1c4>)
 8003058:	2201      	movs	r2, #1
 800305a:	2100      	movs	r1, #0
 800305c:	2002      	movs	r0, #2
 800305e:	f00f f80b 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "K: %d\r\n", (int16_t) sensor_data.k);		//DP: report k to console.
 8003062:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	4b49      	ldr	r3, [pc, #292]	@ (8003190 <SendTxData+0x1c8>)
 800306a:	2201      	movs	r2, #1
 800306c:	2100      	movs	r1, #0
 800306e:	2002      	movs	r0, #2
 8003070:	f00f f802 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "EWPT_V: %d\r\n", (int16_t) sensor_data.EWPT_V);		//DP: report k to console.
 8003074:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	4b46      	ldr	r3, [pc, #280]	@ (8003194 <SendTxData+0x1cc>)
 800307c:	2201      	movs	r2, #1
 800307e:	2100      	movs	r1, #0
 8003080:	2002      	movs	r0, #2
 8003082:	f00e fff9 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
    AppData.Port = LORAWAN_USER_APP_PORT;
 8003086:	4c44      	ldr	r4, [pc, #272]	@ (8003198 <SendTxData+0x1d0>)
 8003088:	2302      	movs	r3, #2
 800308a:	7023      	strb	r3, [r4, #0]
    temperature = (int16_t)(sensor_data.temperature);
 800308c:	9803      	ldr	r0, [sp, #12]
 800308e:	f7fd fe99 	bl	8000dc4 <__aeabi_f2iz>
 8003092:	b206      	sxth	r6, r0
    h2o = (uint16_t)(sensor_data.h2o);			//DP: added - can do scaling here.
 8003094:	9808      	ldr	r0, [sp, #32]
 8003096:	f7fd febb 	bl	8000e10 <__aeabi_f2uiz>
    n = sensor_data.n;
 800309a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
    p = sensor_data.p;
 800309e:	f9bd c026 	ldrsh.w	ip, [sp, #38]	@ 0x26
    k = sensor_data.k;
 80030a2:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
    EWPT_V = sensor_data.EWPT_V;
 80030a6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
    AppData.Buffer[i++] = AppLedStateOn;
 80030aa:	4f3c      	ldr	r7, [pc, #240]	@ (800319c <SendTxData+0x1d4>)
 80030ac:	f897 e000 	ldrb.w	lr, [r7]
 80030b0:	6867      	ldr	r7, [r4, #4]
 80030b2:	f887 e000 	strb.w	lr, [r7]
    AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 80030b6:	6867      	ldr	r7, [r4, #4]
 80030b8:	707e      	strb	r6, [r7, #1]
    AppData.Buffer[i++] = (uint8_t)(batteryLevel);
 80030ba:	6866      	ldr	r6, [r4, #4]
 80030bc:	70b5      	strb	r5, [r6, #2]
    AppData.Buffer[i++] = (uint8_t)((h2o >> 8) & 0xFF);
 80030be:	6865      	ldr	r5, [r4, #4]
 80030c0:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80030c4:	70ee      	strb	r6, [r5, #3]
    AppData.Buffer[i++] = (uint8_t)(h2o & 0xFF);
 80030c6:	6865      	ldr	r5, [r4, #4]
 80030c8:	7128      	strb	r0, [r5, #4]
    AppData.Buffer[i++] = (uint8_t)((n >> 8) & 0xFF);
 80030ca:	6860      	ldr	r0, [r4, #4]
 80030cc:	f3c3 2507 	ubfx	r5, r3, #8, #8
 80030d0:	7145      	strb	r5, [r0, #5]
    AppData.Buffer[i++] = (uint8_t)(n & 0xFF);
 80030d2:	6860      	ldr	r0, [r4, #4]
 80030d4:	7183      	strb	r3, [r0, #6]
    AppData.Buffer[i++] = (uint8_t)((p >> 8) & 0xFF);
 80030d6:	6863      	ldr	r3, [r4, #4]
 80030d8:	f3cc 2007 	ubfx	r0, ip, #8, #8
 80030dc:	71d8      	strb	r0, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)(p & 0xFF);
 80030de:	6863      	ldr	r3, [r4, #4]
 80030e0:	f883 c008 	strb.w	ip, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)((k >> 8) & 0xFF);
 80030e4:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80030e8:	7258      	strb	r0, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)(k & 0xFF);
 80030ea:	7299      	strb	r1, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((EWPT_V >> 8) & 0xFF);
 80030ec:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80030f0:	72d9      	strb	r1, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(EWPT_V & 0xFF);
 80030f2:	731a      	strb	r2, [r3, #12]
    APP_LOG(TS_ON, VLEVEL_H, "Data Packet (bytes)\t | LED(1) | TEMP(1) | BAT(1) | H2O(2) | N(2) | P(2) | K(2) | EWPT(2)");
 80030f4:	4b2a      	ldr	r3, [pc, #168]	@ (80031a0 <SendTxData+0x1d8>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	2100      	movs	r1, #0
 80030fa:	2003      	movs	r0, #3
 80030fc:	f00e ffbc 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
    AppData.BufferSize = i;
 8003100:	230d      	movs	r3, #13
 8003102:	7063      	strb	r3, [r4, #1]
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8003104:	4b27      	ldr	r3, [pc, #156]	@ (80031a4 <SendTxData+0x1dc>)
 8003106:	7a5b      	ldrb	r3, [r3, #9]
 8003108:	b95b      	cbnz	r3, 8003122 <SendTxData+0x15a>
    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800310a:	2200      	movs	r2, #0
 800310c:	4b26      	ldr	r3, [pc, #152]	@ (80031a8 <SendTxData+0x1e0>)
 800310e:	78d9      	ldrb	r1, [r3, #3]
 8003110:	4821      	ldr	r0, [pc, #132]	@ (8003198 <SendTxData+0x1d0>)
 8003112:	f004 ff9f 	bl	8008054 <LmHandlerSend>
    if ((LORAMAC_HANDLER_SUCCESS == status))		//DP: ||(LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status))//DP: (LORAMAC_HANDLER_SUCCESS == status)
 8003116:	b190      	cbz	r0, 800313e <SendTxData+0x176>
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8003118:	f110 0f06 	cmn.w	r0, #6
 800311c:	d017      	beq.n	800314e <SendTxData+0x186>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800311e:	2500      	movs	r5, #0
 8003120:	e75b      	b.n	8002fda <SendTxData+0x12>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8003122:	f004 ff6f 	bl	8008004 <LmHandlerJoinStatus>
 8003126:	2801      	cmp	r0, #1
 8003128:	d1ef      	bne.n	800310a <SendTxData+0x142>
      UTIL_TIMER_Stop(&JoinLedTimer);
 800312a:	481e      	ldr	r0, [pc, #120]	@ (80031a4 <SendTxData+0x1dc>)
 800312c:	f00f faaa 	bl	8012684 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8003130:	2200      	movs	r2, #0
 8003132:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003136:	481d      	ldr	r0, [pc, #116]	@ (80031ac <SendTxData+0x1e4>)
 8003138:	f001 fdb0 	bl	8004c9c <HAL_GPIO_WritePin>
 800313c:	e7e5      	b.n	800310a <SendTxData+0x142>
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800313e:	4b1c      	ldr	r3, [pc, #112]	@ (80031b0 <SendTxData+0x1e8>)
 8003140:	2201      	movs	r2, #1
 8003142:	2100      	movs	r1, #0
 8003144:	4610      	mov	r0, r2
 8003146:	f00e ff97 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800314a:	2500      	movs	r5, #0
 800314c:	e745      	b.n	8002fda <SendTxData+0x12>
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800314e:	f004 ff53 	bl	8007ff8 <LmHandlerGetDutyCycleWaitTime>
      if (nextTxIn > 0)
 8003152:	4605      	mov	r5, r0
 8003154:	2800      	cmp	r0, #0
 8003156:	f43f af40 	beq.w	8002fda <SendTxData+0x12>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800315a:	4b16      	ldr	r3, [pc, #88]	@ (80031b4 <SendTxData+0x1ec>)
 800315c:	fba3 2300 	umull	r2, r3, r3, r0
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	4b14      	ldr	r3, [pc, #80]	@ (80031b8 <SendTxData+0x1f0>)
 8003166:	2201      	movs	r2, #1
 8003168:	2100      	movs	r1, #0
 800316a:	4610      	mov	r0, r2
 800316c:	f00e ff84 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
 8003170:	e733      	b.n	8002fda <SendTxData+0x12>
 8003172:	bf00      	nop
 8003174:	2000066c 	.word	0x2000066c
 8003178:	20000668 	.word	0x20000668
 800317c:	080130e8 	.word	0x080130e8
 8003180:	080130f4 	.word	0x080130f4
 8003184:	08013100 	.word	0x08013100
 8003188:	0801310c 	.word	0x0801310c
 800318c:	08013114 	.word	0x08013114
 8003190:	0801311c 	.word	0x0801311c
 8003194:	08013124 	.word	0x08013124
 8003198:	20000008 	.word	0x20000008
 800319c:	20000558 	.word	0x20000558
 80031a0:	08013134 	.word	0x08013134
 80031a4:	20000510 	.word	0x20000510
 80031a8:	20000010 	.word	0x20000010
 80031ac:	48000400 	.word	0x48000400
 80031b0:	08013190 	.word	0x08013190
 80031b4:	10624dd3 	.word	0x10624dd3
 80031b8:	080131a0 	.word	0x080131a0

080031bc <OnJoinTimerLedEvent>:
{
 80031bc:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 80031be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031c2:	4802      	ldr	r0, [pc, #8]	@ (80031cc <OnJoinTimerLedEvent+0x10>)
 80031c4:	f001 fd6f 	bl	8004ca6 <HAL_GPIO_TogglePin>
}
 80031c8:	bd08      	pop	{r3, pc}
 80031ca:	bf00      	nop
 80031cc:	48000400 	.word	0x48000400

080031d0 <LoRaWAN_Init>:
{
 80031d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d2:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 80031d4:	2400      	movs	r4, #0
 80031d6:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 80031d8:	2501      	movs	r5, #1
 80031da:	9502      	str	r5, [sp, #8]
 80031dc:	2703      	movs	r7, #3
 80031de:	9701      	str	r7, [sp, #4]
 80031e0:	9500      	str	r5, [sp, #0]
 80031e2:	4b4f      	ldr	r3, [pc, #316]	@ (8003320 <LoRaWAN_Init+0x150>)
 80031e4:	4622      	mov	r2, r4
 80031e6:	4621      	mov	r1, r4
 80031e8:	2002      	movs	r0, #2
 80031ea:	f00e ff45 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 80031ee:	9502      	str	r5, [sp, #8]
 80031f0:	2306      	movs	r3, #6
 80031f2:	9301      	str	r3, [sp, #4]
 80031f4:	2602      	movs	r6, #2
 80031f6:	9600      	str	r6, [sp, #0]
 80031f8:	4b4a      	ldr	r3, [pc, #296]	@ (8003324 <LoRaWAN_Init+0x154>)
 80031fa:	4622      	mov	r2, r4
 80031fc:	4621      	mov	r1, r4
 80031fe:	4630      	mov	r0, r6
 8003200:	f00e ff3a 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8003204:	9502      	str	r5, [sp, #8]
 8003206:	9701      	str	r7, [sp, #4]
 8003208:	9500      	str	r5, [sp, #0]
 800320a:	4b47      	ldr	r3, [pc, #284]	@ (8003328 <LoRaWAN_Init+0x158>)
 800320c:	4622      	mov	r2, r4
 800320e:	4621      	mov	r1, r4
 8003210:	4630      	mov	r0, r6
 8003212:	f00e ff31 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8003216:	a905      	add	r1, sp, #20
 8003218:	4620      	mov	r0, r4
 800321a:	f005 f9c1 	bl	80085a0 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800321e:	9b05      	ldr	r3, [sp, #20]
 8003220:	0e1a      	lsrs	r2, r3, #24
 8003222:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003226:	9102      	str	r1, [sp, #8]
 8003228:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	9200      	str	r2, [sp, #0]
 8003230:	4b3e      	ldr	r3, [pc, #248]	@ (800332c <LoRaWAN_Init+0x15c>)
 8003232:	4622      	mov	r2, r4
 8003234:	4621      	mov	r1, r4
 8003236:	4630      	mov	r0, r6
 8003238:	f00e ff1e 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800323c:	a905      	add	r1, sp, #20
 800323e:	4628      	mov	r0, r5
 8003240:	f005 f9ae 	bl	80085a0 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8003244:	9b05      	ldr	r3, [sp, #20]
 8003246:	0e1a      	lsrs	r2, r3, #24
 8003248:	b2d9      	uxtb	r1, r3
 800324a:	9103      	str	r1, [sp, #12]
 800324c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003250:	9102      	str	r1, [sp, #8]
 8003252:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	9200      	str	r2, [sp, #0]
 800325a:	4b35      	ldr	r3, [pc, #212]	@ (8003330 <LoRaWAN_Init+0x160>)
 800325c:	4622      	mov	r2, r4
 800325e:	4621      	mov	r1, r4
 8003260:	4630      	mov	r0, r6
 8003262:	f00e ff09 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8003266:	9400      	str	r4, [sp, #0]
 8003268:	4b32      	ldr	r3, [pc, #200]	@ (8003334 <LoRaWAN_Init+0x164>)
 800326a:	4622      	mov	r2, r4
 800326c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003270:	4831      	ldr	r0, [pc, #196]	@ (8003338 <LoRaWAN_Init+0x168>)
 8003272:	f00f f9a9 	bl	80125c8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8003276:	9400      	str	r4, [sp, #0]
 8003278:	4b30      	ldr	r3, [pc, #192]	@ (800333c <LoRaWAN_Init+0x16c>)
 800327a:	4622      	mov	r2, r4
 800327c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003280:	482f      	ldr	r0, [pc, #188]	@ (8003340 <LoRaWAN_Init+0x170>)
 8003282:	f00f f9a1 	bl	80125c8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8003286:	9400      	str	r4, [sp, #0]
 8003288:	4b2e      	ldr	r3, [pc, #184]	@ (8003344 <LoRaWAN_Init+0x174>)
 800328a:	462a      	mov	r2, r5
 800328c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003290:	482d      	ldr	r0, [pc, #180]	@ (8003348 <LoRaWAN_Init+0x178>)
 8003292:	f00f f999 	bl	80125c8 <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 8003296:	4620      	mov	r0, r4
 8003298:	f7fe fb56 	bl	8001948 <FLASH_IF_Init>
 800329c:	2800      	cmp	r0, #0
 800329e:	d13b      	bne.n	8003318 <LoRaWAN_Init+0x148>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 80032a0:	2400      	movs	r4, #0
 80032a2:	9400      	str	r4, [sp, #0]
 80032a4:	4b29      	ldr	r3, [pc, #164]	@ (800334c <LoRaWAN_Init+0x17c>)
 80032a6:	4622      	mov	r2, r4
 80032a8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80032ac:	4828      	ldr	r0, [pc, #160]	@ (8003350 <LoRaWAN_Init+0x180>)
 80032ae:	f00f f98b 	bl	80125c8 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80032b2:	4a28      	ldr	r2, [pc, #160]	@ (8003354 <LoRaWAN_Init+0x184>)
 80032b4:	4621      	mov	r1, r4
 80032b6:	2001      	movs	r0, #1
 80032b8:	f00f f8d2 	bl	8012460 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 80032bc:	4a26      	ldr	r2, [pc, #152]	@ (8003358 <LoRaWAN_Init+0x188>)
 80032be:	4621      	mov	r1, r4
 80032c0:	2002      	movs	r0, #2
 80032c2:	f00f f8cd 	bl	8012460 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 80032c6:	4a25      	ldr	r2, [pc, #148]	@ (800335c <LoRaWAN_Init+0x18c>)
 80032c8:	4621      	mov	r1, r4
 80032ca:	2004      	movs	r0, #4
 80032cc:	f00f f8c8 	bl	8012460 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 80032d0:	4a23      	ldr	r2, [pc, #140]	@ (8003360 <LoRaWAN_Init+0x190>)
 80032d2:	4621      	mov	r1, r4
 80032d4:	2008      	movs	r0, #8
 80032d6:	f00f f8c3 	bl	8012460 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 80032da:	f000 f861 	bl	80033a0 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80032de:	4921      	ldr	r1, [pc, #132]	@ (8003364 <LoRaWAN_Init+0x194>)
 80032e0:	4821      	ldr	r0, [pc, #132]	@ (8003368 <LoRaWAN_Init+0x198>)
 80032e2:	f005 f911 	bl	8008508 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 80032e6:	4821      	ldr	r0, [pc, #132]	@ (800336c <LoRaWAN_Init+0x19c>)
 80032e8:	f005 f83e 	bl	8008368 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 80032ec:	4816      	ldr	r0, [pc, #88]	@ (8003348 <LoRaWAN_Init+0x178>)
 80032ee:	f00f fa23 	bl	8012738 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 80032f2:	2101      	movs	r1, #1
 80032f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003370 <LoRaWAN_Init+0x1a0>)
 80032f6:	7818      	ldrb	r0, [r3, #0]
 80032f8:	f004 fdfe 	bl	8007ef8 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 80032fc:	4d1d      	ldr	r5, [pc, #116]	@ (8003374 <LoRaWAN_Init+0x1a4>)
 80032fe:	9400      	str	r4, [sp, #0]
 8003300:	4b1d      	ldr	r3, [pc, #116]	@ (8003378 <LoRaWAN_Init+0x1a8>)
 8003302:	4622      	mov	r2, r4
 8003304:	491d      	ldr	r1, [pc, #116]	@ (800337c <LoRaWAN_Init+0x1ac>)
 8003306:	6809      	ldr	r1, [r1, #0]
 8003308:	4628      	mov	r0, r5
 800330a:	f00f f95d 	bl	80125c8 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800330e:	4628      	mov	r0, r5
 8003310:	f00f fa12 	bl	8012738 <UTIL_TIMER_Start>
}
 8003314:	b007      	add	sp, #28
 8003316:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8003318:	f7fe fc3e 	bl	8001b98 <Error_Handler>
 800331c:	e7c0      	b.n	80032a0 <LoRaWAN_Init+0xd0>
 800331e:	bf00      	nop
 8003320:	080131c0 	.word	0x080131c0
 8003324:	080131e4 	.word	0x080131e4
 8003328:	08013208 	.word	0x08013208
 800332c:	0801322c 	.word	0x0801322c
 8003330:	08013250 	.word	0x08013250
 8003334:	08002dad 	.word	0x08002dad
 8003338:	20000540 	.word	0x20000540
 800333c:	08002d99 	.word	0x08002d99
 8003340:	20000528 	.word	0x20000528
 8003344:	080031bd 	.word	0x080031bd
 8003348:	20000510 	.word	0x20000510
 800334c:	08002d55 	.word	0x08002d55
 8003350:	20000650 	.word	0x20000650
 8003354:	08008161 	.word	0x08008161
 8003358:	08002fc9 	.word	0x08002fc9
 800335c:	08002f91 	.word	0x08002f91
 8003360:	08002ef5 	.word	0x08002ef5
 8003364:	01030100 	.word	0x01030100
 8003368:	20000028 	.word	0x20000028
 800336c:	20000010 	.word	0x20000010
 8003370:	20000074 	.word	0x20000074
 8003374:	2000066c 	.word	0x2000066c
 8003378:	08002b85 	.word	0x08002b85
 800337c:	20000668 	.word	0x20000668

08003380 <HAL_GPIO_EXTI_Callback>:
{
 8003380:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 8003382:	2802      	cmp	r0, #2
 8003384:	d002      	beq.n	800338c <HAL_GPIO_EXTI_Callback+0xc>
 8003386:	2840      	cmp	r0, #64	@ 0x40
 8003388:	d005      	beq.n	8003396 <HAL_GPIO_EXTI_Callback+0x16>
}
 800338a:	bd08      	pop	{r3, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800338c:	2100      	movs	r1, #0
 800338e:	2008      	movs	r0, #8
 8003390:	f00e ff9c 	bl	80122cc <UTIL_SEQ_SetTask>
      break;
 8003394:	e7f9      	b.n	800338a <HAL_GPIO_EXTI_Callback+0xa>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 8003396:	2100      	movs	r1, #0
 8003398:	2004      	movs	r0, #4
 800339a:	f00e ff97 	bl	80122cc <UTIL_SEQ_SetTask>
}
 800339e:	e7f4      	b.n	800338a <HAL_GPIO_EXTI_Callback+0xa>

080033a0 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 80033a0:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <LoraInfo_Init+0x18>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80033a6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80033a8:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80033aa:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN470 */
#ifdef  REGION_CN779
  loraInfo.Region |= (1 << LORAMAC_REGION_CN779);
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
 80033ac:	2210      	movs	r2, #16
 80033ae:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 80033b0:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80033b4:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80033b6:	4770      	bx	lr
 80033b8:	20000684 	.word	0x20000684

080033bc <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 80033bc:	4800      	ldr	r0, [pc, #0]	@ (80033c0 <LoraInfo_GetPtr+0x4>)
 80033be:	4770      	bx	lr
 80033c0:	20000684 	.word	0x20000684

080033c4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80033c4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80033c6:	f000 f83f 	bl	8003448 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80033ca:	bd08      	pop	{r3, pc}

080033cc <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80033cc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80033ce:	f000 f87d 	bl	80034cc <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80033d2:	bd08      	pop	{r3, pc}

080033d4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80033d4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80033d6:	f000 f8c7 	bl	8003568 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80033da:	bd08      	pop	{r3, pc}

080033dc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80033dc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 80033de:	f000 f8c5 	bl	800356c <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80033e2:	bd08      	pop	{r3, pc}

080033e4 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80033e4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80033e6:	f000 f8c3 	bl	8003570 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80033ea:	bd08      	pop	{r3, pc}

080033ec <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80033ec:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80033ee:	f000 f8c1 	bl	8003574 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80033f2:	bd08      	pop	{r3, pc}

080033f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033f4:	480d      	ldr	r0, [pc, #52]	@ (800342c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033f8:	f000 f8c1 	bl	800357e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033fc:	480c      	ldr	r0, [pc, #48]	@ (8003430 <LoopForever+0x6>)
  ldr r1, =_edata
 80033fe:	490d      	ldr	r1, [pc, #52]	@ (8003434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003400:	4a0d      	ldr	r2, [pc, #52]	@ (8003438 <LoopForever+0xe>)
  movs r3, #0
 8003402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003404:	e002      	b.n	800340c <LoopCopyDataInit>

08003406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800340a:	3304      	adds	r3, #4

0800340c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800340c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800340e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003410:	d3f9      	bcc.n	8003406 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003412:	4a0a      	ldr	r2, [pc, #40]	@ (800343c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003414:	4c0a      	ldr	r4, [pc, #40]	@ (8003440 <LoopForever+0x16>)
  movs r3, #0
 8003416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003418:	e001      	b.n	800341e <LoopFillZerobss>

0800341a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800341a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800341c:	3204      	adds	r2, #4

0800341e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800341e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003420:	d3fb      	bcc.n	800341a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003422:	f00f fb99 	bl	8012b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003426:	f7fe fc01 	bl	8001c2c <main>

0800342a <LoopForever>:

LoopForever:
    b LoopForever
 800342a:	e7fe      	b.n	800342a <LoopForever>
  ldr   r0, =_estack
 800342c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003434:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8003438:	08013d00 	.word	0x08013d00
  ldr r2, =_sbss
 800343c:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8003440:	20001e48 	.word	0x20001e48

08003444 <AES_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003444:	e7fe      	b.n	8003444 <AES_IRQHandler>
	...

08003448 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800344c:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800344e:	2400      	movs	r4, #0
 8003450:	9401      	str	r4, [sp, #4]
 8003452:	9402      	str	r4, [sp, #8]
 8003454:	9403      	str	r4, [sp, #12]
 8003456:	9404      	str	r4, [sp, #16]
 8003458:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800345a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800345e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003460:	f042 0204 	orr.w	r2, r2, #4
 8003464:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800346e:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003470:	2710      	movs	r7, #16
 8003472:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003474:	2301      	movs	r3, #1
 8003476:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003478:	2303      	movs	r3, #3
 800347a:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800347c:	4d12      	ldr	r5, [pc, #72]	@ (80034c8 <BSP_RADIO_Init+0x80>)
 800347e:	a901      	add	r1, sp, #4
 8003480:	4628      	mov	r0, r5
 8003482:	f001 fabb 	bl	80049fc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003486:	f04f 0820 	mov.w	r8, #32
 800348a:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800348e:	a901      	add	r1, sp, #4
 8003490:	4628      	mov	r0, r5
 8003492:	f001 fab3 	bl	80049fc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8003496:	2608      	movs	r6, #8
 8003498:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800349a:	a901      	add	r1, sp, #4
 800349c:	4628      	mov	r0, r5
 800349e:	f001 faad 	bl	80049fc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80034a2:	4622      	mov	r2, r4
 80034a4:	4641      	mov	r1, r8
 80034a6:	4628      	mov	r0, r5
 80034a8:	f001 fbf8 	bl	8004c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80034ac:	4622      	mov	r2, r4
 80034ae:	4639      	mov	r1, r7
 80034b0:	4628      	mov	r0, r5
 80034b2:	f001 fbf3 	bl	8004c9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80034b6:	4622      	mov	r2, r4
 80034b8:	4631      	mov	r1, r6
 80034ba:	4628      	mov	r0, r5
 80034bc:	f001 fbee 	bl	8004c9c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 80034c0:	4620      	mov	r0, r4
 80034c2:	b006      	add	sp, #24
 80034c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034c8:	48000800 	.word	0x48000800

080034cc <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80034cc:	b510      	push	{r4, lr}
  switch (Config)
 80034ce:	2803      	cmp	r0, #3
 80034d0:	d813      	bhi.n	80034fa <BSP_RADIO_ConfigRFSwitch+0x2e>
 80034d2:	e8df f000 	tbb	[pc, r0]
 80034d6:	1402      	.short	0x1402
 80034d8:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80034da:	4c22      	ldr	r4, [pc, #136]	@ (8003564 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80034dc:	2200      	movs	r2, #0
 80034de:	2108      	movs	r1, #8
 80034e0:	4620      	mov	r0, r4
 80034e2:	f001 fbdb 	bl	8004c9c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80034e6:	2200      	movs	r2, #0
 80034e8:	2110      	movs	r1, #16
 80034ea:	4620      	mov	r0, r4
 80034ec:	f001 fbd6 	bl	8004c9c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80034f0:	2200      	movs	r2, #0
 80034f2:	2120      	movs	r1, #32
 80034f4:	4620      	mov	r0, r4
 80034f6:	f001 fbd1 	bl	8004c9c <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 80034fa:	2000      	movs	r0, #0
 80034fc:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80034fe:	4c19      	ldr	r4, [pc, #100]	@ (8003564 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003500:	2201      	movs	r2, #1
 8003502:	2108      	movs	r1, #8
 8003504:	4620      	mov	r0, r4
 8003506:	f001 fbc9 	bl	8004c9c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800350a:	2201      	movs	r2, #1
 800350c:	2110      	movs	r1, #16
 800350e:	4620      	mov	r0, r4
 8003510:	f001 fbc4 	bl	8004c9c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003514:	2200      	movs	r2, #0
 8003516:	2120      	movs	r1, #32
 8003518:	4620      	mov	r0, r4
 800351a:	f001 fbbf 	bl	8004c9c <HAL_GPIO_WritePin>
      break;
 800351e:	e7ec      	b.n	80034fa <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003520:	4c10      	ldr	r4, [pc, #64]	@ (8003564 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003522:	2201      	movs	r2, #1
 8003524:	2108      	movs	r1, #8
 8003526:	4620      	mov	r0, r4
 8003528:	f001 fbb8 	bl	8004c9c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800352c:	2201      	movs	r2, #1
 800352e:	2110      	movs	r1, #16
 8003530:	4620      	mov	r0, r4
 8003532:	f001 fbb3 	bl	8004c9c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003536:	2201      	movs	r2, #1
 8003538:	2120      	movs	r1, #32
 800353a:	4620      	mov	r0, r4
 800353c:	f001 fbae 	bl	8004c9c <HAL_GPIO_WritePin>
      break;
 8003540:	e7db      	b.n	80034fa <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003542:	4c08      	ldr	r4, [pc, #32]	@ (8003564 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003544:	2201      	movs	r2, #1
 8003546:	2108      	movs	r1, #8
 8003548:	4620      	mov	r0, r4
 800354a:	f001 fba7 	bl	8004c9c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800354e:	2200      	movs	r2, #0
 8003550:	2110      	movs	r1, #16
 8003552:	4620      	mov	r0, r4
 8003554:	f001 fba2 	bl	8004c9c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003558:	2201      	movs	r2, #1
 800355a:	2120      	movs	r1, #32
 800355c:	4620      	mov	r0, r4
 800355e:	f001 fb9d 	bl	8004c9c <HAL_GPIO_WritePin>
      break;
 8003562:	e7ca      	b.n	80034fa <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003564:	48000800 	.word	0x48000800

08003568 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8003568:	2000      	movs	r0, #0
 800356a:	4770      	bx	lr

0800356c <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 800356c:	2001      	movs	r0, #1
 800356e:	4770      	bx	lr

08003570 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8003570:	2001      	movs	r0, #1
 8003572:	4770      	bx	lr

08003574 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003574:	b908      	cbnz	r0, 800357a <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003576:	200f      	movs	r0, #15
 8003578:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800357a:	2016      	movs	r0, #22
  }

  return ret;
}
 800357c:	4770      	bx	lr

0800357e <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800357e:	4770      	bx	lr

08003580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003580:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003582:	2003      	movs	r0, #3
 8003584:	f000 fe34 	bl	80041f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003588:	f001 fd2e 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 800358c:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <HAL_Init+0x28>)
 800358e:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003590:	200f      	movs	r0, #15
 8003592:	f7fe fd73 	bl	800207c <HAL_InitTick>
 8003596:	b110      	cbz	r0, 800359e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003598:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800359a:	4620      	mov	r0, r4
 800359c:	bd10      	pop	{r4, pc}
 800359e:	4604      	mov	r4, r0
    HAL_MspInit();
 80035a0:	f7fe fbfc 	bl	8001d9c <HAL_MspInit>
 80035a4:	e7f9      	b.n	800359a <HAL_Init+0x1a>
 80035a6:	bf00      	nop
 80035a8:	20000078 	.word	0x20000078

080035ac <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80035ac:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80035b0:	6913      	ldr	r3, [r2, #16]
 80035b2:	f023 0302 	bic.w	r3, r3, #2
 80035b6:	6113      	str	r3, [r2, #16]
}
 80035b8:	4770      	bx	lr

080035ba <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80035ba:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80035be:	6913      	ldr	r3, [r2, #16]
 80035c0:	f043 0302 	orr.w	r3, r3, #2
 80035c4:	6113      	str	r3, [r2, #16]
}
 80035c6:	4770      	bx	lr

080035c8 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 80035c8:	4b01      	ldr	r3, [pc, #4]	@ (80035d0 <HAL_GetUIDw0+0x8>)
 80035ca:	f8d3 0590 	ldr.w	r0, [r3, #1424]	@ 0x590
 80035ce:	4770      	bx	lr
 80035d0:	1fff7000 	.word	0x1fff7000

080035d4 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 80035d4:	4b01      	ldr	r3, [pc, #4]	@ (80035dc <HAL_GetUIDw1+0x8>)
 80035d6:	f8d3 0594 	ldr.w	r0, [r3, #1428]	@ 0x594
 80035da:	4770      	bx	lr
 80035dc:	1fff7000 	.word	0x1fff7000

080035e0 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 80035e0:	4b01      	ldr	r3, [pc, #4]	@ (80035e8 <HAL_GetUIDw2+0x8>)
 80035e2:	f8d3 0598 	ldr.w	r0, [r3, #1432]	@ 0x598
 80035e6:	4770      	bx	lr
 80035e8:	1fff7000 	.word	0x1fff7000

080035ec <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80035ec:	4a02      	ldr	r2, [pc, #8]	@ (80035f8 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80035ee:	6853      	ldr	r3, [r2, #4]
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 80035f6:	4770      	bx	lr
 80035f8:	e0042000 	.word	0xe0042000

080035fc <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80035fc:	4a02      	ldr	r2, [pc, #8]	@ (8003608 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80035fe:	6853      	ldr	r3, [r2, #4]
 8003600:	f043 0302 	orr.w	r3, r3, #2
 8003604:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8003606:	4770      	bx	lr
 8003608:	e0042000 	.word	0xe0042000

0800360c <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800360c:	4a02      	ldr	r2, [pc, #8]	@ (8003618 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 800360e:	6853      	ldr	r3, [r2, #4]
 8003610:	f043 0304 	orr.w	r3, r3, #4
 8003614:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8003616:	4770      	bx	lr
 8003618:	e0042000 	.word	0xe0042000

0800361c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800361c:	b530      	push	{r4, r5, lr}
 800361e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003620:	2300      	movs	r3, #0
 8003622:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003624:	2800      	cmp	r0, #0
 8003626:	f000 8106 	beq.w	8003836 <HAL_ADC_Init+0x21a>
 800362a:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800362c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800362e:	b1bb      	cbz	r3, 8003660 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003630:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003632:	6893      	ldr	r3, [r2, #8]
 8003634:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003638:	d11f      	bne.n	800367a <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 800363a:	6893      	ldr	r3, [r2, #8]
 800363c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003640:	f023 0317 	bic.w	r3, r3, #23
 8003644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003648:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800364a:	4b7c      	ldr	r3, [pc, #496]	@ (800383c <HAL_ADC_Init+0x220>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	099b      	lsrs	r3, r3, #6
 8003650:	4a7b      	ldr	r2, [pc, #492]	@ (8003840 <HAL_ADC_Init+0x224>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	099b      	lsrs	r3, r3, #6
 8003658:	3301      	adds	r3, #1
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800365e:	e009      	b.n	8003674 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8003660:	f7fd fdba 	bl	80011d8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003664:	2300      	movs	r3, #0
 8003666:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003668:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800366c:	e7e0      	b.n	8003630 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800366e:	9b01      	ldr	r3, [sp, #4]
 8003670:	3b01      	subs	r3, #1
 8003672:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003674:	9b01      	ldr	r3, [sp, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f9      	bne.n	800366e <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800367a:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800367c:	6893      	ldr	r3, [r2, #8]
 800367e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003682:	f040 809a 	bne.w	80037ba <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003686:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003688:	f043 0310 	orr.w	r3, r3, #16
 800368c:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003696:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003698:	6893      	ldr	r3, [r2, #8]
 800369a:	f013 0304 	ands.w	r3, r3, #4
 800369e:	d000      	beq.n	80036a2 <HAL_ADC_Init+0x86>
 80036a0:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036a2:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80036a4:	f011 0f10 	tst.w	r1, #16
 80036a8:	f040 80be 	bne.w	8003828 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f040 80bb 	bne.w	8003828 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80036b8:	f043 0302 	orr.w	r3, r3, #2
 80036bc:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036be:	6893      	ldr	r3, [r2, #8]
 80036c0:	f013 0f01 	tst.w	r3, #1
 80036c4:	d14f      	bne.n	8003766 <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80036c6:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80036c8:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80036ca:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80036ce:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80036d0:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80036d4:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80036d6:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80036da:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80036dc:	b109      	cbz	r1, 80036e2 <HAL_ADC_Init+0xc6>
 80036de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80036e2:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 80036e4:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80036e6:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80036e8:	6921      	ldr	r1, [r4, #16]
 80036ea:	2900      	cmp	r1, #0
 80036ec:	db67      	blt.n	80037be <HAL_ADC_Init+0x1a2>
 80036ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 80036f2:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036f4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80036f8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036fc:	f894 1020 	ldrb.w	r1, [r4, #32]
 8003700:	2901      	cmp	r1, #1
 8003702:	d05f      	beq.n	80037c4 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003704:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003706:	b121      	cbz	r1, 8003712 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003708:	f401 71e0 	and.w	r1, r1, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 800370c:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800370e:	4329      	orrs	r1, r5
 8003710:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003712:	68d1      	ldr	r1, [r2, #12]
 8003714:	f421 31fe 	bic.w	r1, r1, #130048	@ 0x1fc00
 8003718:	f421 71ff 	bic.w	r1, r1, #510	@ 0x1fe
 800371c:	4319      	orrs	r1, r3
 800371e:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003720:	6863      	ldr	r3, [r4, #4]
 8003722:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003726:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003728:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800372a:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 800372e:	2901      	cmp	r1, #1
 8003730:	d055      	beq.n	80037de <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003732:	6821      	ldr	r1, [r4, #0]
 8003734:	690d      	ldr	r5, [r1, #16]
 8003736:	4b43      	ldr	r3, [pc, #268]	@ (8003844 <HAL_ADC_Init+0x228>)
 8003738:	402b      	ands	r3, r5
 800373a:	4313      	orrs	r3, r2
 800373c:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800373e:	6863      	ldr	r3, [r4, #4]
 8003740:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003744:	d00f      	beq.n	8003766 <HAL_ADC_Init+0x14a>
 8003746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800374a:	d00c      	beq.n	8003766 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800374c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003750:	d009      	beq.n	8003766 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003752:	493d      	ldr	r1, [pc, #244]	@ (8003848 <HAL_ADC_Init+0x22c>)
 8003754:	f8d1 2708 	ldr.w	r2, [r1, #1800]	@ 0x708
 8003758:	f422 1270 	bic.w	r2, r2, #3932160	@ 0x3c0000
 800375c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3708 	str.w	r3, [r1, #1800]	@ 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003766:	6821      	ldr	r1, [r4, #0]
 8003768:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 800376a:	694a      	ldr	r2, [r1, #20]
 800376c:	f022 0207 	bic.w	r2, r2, #7
 8003770:	4313      	orrs	r3, r2
 8003772:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003774:	6822      	ldr	r2, [r4, #0]
 8003776:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003778:	6953      	ldr	r3, [r2, #20]
 800377a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800377e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003782:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003784:	6923      	ldr	r3, [r4, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d133      	bne.n	80037f2 <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800378a:	6822      	ldr	r2, [r4, #0]
 800378c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800378e:	f063 030f 	orn	r3, r3, #15
 8003792:	6293      	str	r3, [r2, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003794:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 800379c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800379e:	429a      	cmp	r2, r3
 80037a0:	d039      	beq.n	8003816 <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80037a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80037a4:	f023 0312 	bic.w	r3, r3, #18
 80037a8:	f043 0310 	orr.w	r3, r3, #16
 80037ac:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ae:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80037b6:	2001      	movs	r0, #1
 80037b8:	e03b      	b.n	8003832 <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ba:	2000      	movs	r0, #0
 80037bc:	e76c      	b.n	8003698 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80037be:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80037c2:	e796      	b.n	80036f2 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80037c4:	b915      	cbnz	r5, 80037cc <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80037c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ca:	e79b      	b.n	8003704 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037cc:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80037ce:	f041 0120 	orr.w	r1, r1, #32
 80037d2:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d4:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80037d6:	f041 0101 	orr.w	r1, r1, #1
 80037da:	65e1      	str	r1, [r4, #92]	@ 0x5c
 80037dc:	e792      	b.n	8003704 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 80037de:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037e0:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 80037e2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80037e4:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 80037e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80037e8:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80037ea:	431a      	orrs	r2, r3
 80037ec:	f042 0201 	orr.w	r2, r2, #1
 80037f0:	e79f      	b.n	8003732 <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037f6:	d1cd      	bne.n	8003794 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 80037f8:	6821      	ldr	r1, [r4, #0]
 80037fa:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80037fc:	69e3      	ldr	r3, [r4, #28]
 80037fe:	3b01      	subs	r3, #1
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	f003 031c 	and.w	r3, r3, #28
 8003806:	f06f 020f 	mvn.w	r2, #15
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8003810:	4313      	orrs	r3, r2
 8003812:	628b      	str	r3, [r1, #40]	@ 0x28
 8003814:	e7be      	b.n	8003794 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 8003816:	2300      	movs	r3, #0
 8003818:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800381a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800381c:	f023 0303 	bic.w	r3, r3, #3
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003826:	e004      	b.n	8003832 <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003828:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800382a:	f043 0310 	orr.w	r3, r3, #16
 800382e:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003830:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8003832:	b003      	add	sp, #12
 8003834:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003836:	2001      	movs	r0, #1
 8003838:	e7fb      	b.n	8003832 <HAL_ADC_Init+0x216>
 800383a:	bf00      	nop
 800383c:	20000078 	.word	0x20000078
 8003840:	053e2d63 	.word	0x053e2d63
 8003844:	1ffffc02 	.word	0x1ffffc02
 8003848:	40012000 	.word	0x40012000

0800384c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384e:	4604      	mov	r4, r0
 8003850:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003852:	6946      	ldr	r6, [r0, #20]
 8003854:	2e08      	cmp	r6, #8
 8003856:	d005      	beq.n	8003864 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003858:	6803      	ldr	r3, [r0, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f013 0f01 	tst.w	r3, #1
 8003860:	d11e      	bne.n	80038a0 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003862:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003864:	f7fe fc0c 	bl	8002080 <HAL_GetTick>
 8003868:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4232      	tst	r2, r6
 8003870:	d11c      	bne.n	80038ac <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003872:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003876:	d0f8      	beq.n	800386a <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003878:	f7fe fc02 	bl	8002080 <HAL_GetTick>
 800387c:	1bc3      	subs	r3, r0, r7
 800387e:	42ab      	cmp	r3, r5
 8003880:	d801      	bhi.n	8003886 <HAL_ADC_PollForConversion+0x3a>
 8003882:	2d00      	cmp	r5, #0
 8003884:	d1f1      	bne.n	800386a <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4233      	tst	r3, r6
 800388c:	d1ed      	bne.n	800386a <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800388e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	65a3      	str	r3, [r4, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003896:	2300      	movs	r3, #0
 8003898:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

          return HAL_TIMEOUT;
 800389c:	2003      	movs	r0, #3
 800389e:	e028      	b.n	80038f2 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038a0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80038a2:	f043 0320 	orr.w	r3, r3, #32
 80038a6:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 80038a8:	2001      	movs	r0, #1
 80038aa:	e022      	b.n	80038f2 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038ac:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80038ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b2:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80038ba:	d115      	bne.n	80038e8 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80038bc:	7ea2      	ldrb	r2, [r4, #26]
 80038be:	b99a      	cbnz	r2, 80038e8 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	f012 0f08 	tst.w	r2, #8
 80038c6:	d00f      	beq.n	80038e8 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	f012 0f04 	tst.w	r2, #4
 80038ce:	d111      	bne.n	80038f4 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	f022 020c 	bic.w	r2, r2, #12
 80038d6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80038d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80038da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	65a3      	str	r3, [r4, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80038e8:	7e20      	ldrb	r0, [r4, #24]
 80038ea:	b960      	cbnz	r0, 8003906 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	220c      	movs	r2, #12
 80038f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80038f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80038f6:	f043 0320 	orr.w	r3, r3, #32
 80038fa:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038fc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8003904:	e7f0      	b.n	80038e8 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8003906:	2000      	movs	r0, #0
 8003908:	e7f3      	b.n	80038f2 <HAL_ADC_PollForConversion+0xa6>

0800390a <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800390a:	6803      	ldr	r3, [r0, #0]
 800390c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 800390e:	4770      	bx	lr

08003910 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003910:	4770      	bx	lr

08003912 <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003912:	4770      	bx	lr

08003914 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003914:	4770      	bx	lr

08003916 <HAL_ADC_IRQHandler>:
{
 8003916:	b570      	push	{r4, r5, r6, lr}
 8003918:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 800391a:	6803      	ldr	r3, [r0, #0]
 800391c:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800391e:	685d      	ldr	r5, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003920:	f016 0f02 	tst.w	r6, #2
 8003924:	d010      	beq.n	8003948 <HAL_ADC_IRQHandler+0x32>
 8003926:	f015 0f02 	tst.w	r5, #2
 800392a:	d00d      	beq.n	8003948 <HAL_ADC_IRQHandler+0x32>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800392c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800392e:	f013 0f10 	tst.w	r3, #16
 8003932:	d103      	bne.n	800393c <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003934:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003936:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800393a:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800393c:	4620      	mov	r0, r4
 800393e:	f000 fc00 	bl	8004142 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	2202      	movs	r2, #2
 8003946:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003948:	f016 0f04 	tst.w	r6, #4
 800394c:	d002      	beq.n	8003954 <HAL_ADC_IRQHandler+0x3e>
 800394e:	f015 0f04 	tst.w	r5, #4
 8003952:	d105      	bne.n	8003960 <HAL_ADC_IRQHandler+0x4a>
 8003954:	f016 0f08 	tst.w	r6, #8
 8003958:	d02b      	beq.n	80039b2 <HAL_ADC_IRQHandler+0x9c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800395a:	f015 0f08 	tst.w	r5, #8
 800395e:	d028      	beq.n	80039b2 <HAL_ADC_IRQHandler+0x9c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003960:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003962:	f013 0f10 	tst.w	r3, #16
 8003966:	d103      	bne.n	8003970 <HAL_ADC_IRQHandler+0x5a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003968:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800396a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800396e:	65a3      	str	r3, [r4, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003970:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8003978:	d115      	bne.n	80039a6 <HAL_ADC_IRQHandler+0x90>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800397a:	7ea2      	ldrb	r2, [r4, #26]
 800397c:	b99a      	cbnz	r2, 80039a6 <HAL_ADC_IRQHandler+0x90>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	f012 0f08 	tst.w	r2, #8
 8003984:	d00f      	beq.n	80039a6 <HAL_ADC_IRQHandler+0x90>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	f012 0f04 	tst.w	r2, #4
 800398c:	d145      	bne.n	8003a1a <HAL_ADC_IRQHandler+0x104>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	f022 020c 	bic.w	r2, r2, #12
 8003994:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003996:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003998:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 80039a6:	4620      	mov	r0, r4
 80039a8:	f7ff ffb2 	bl	8003910 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	220c      	movs	r2, #12
 80039b0:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80039b2:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80039b6:	d002      	beq.n	80039be <HAL_ADC_IRQHandler+0xa8>
 80039b8:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80039bc:	d136      	bne.n	8003a2c <HAL_ADC_IRQHandler+0x116>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80039be:	f416 7f80 	tst.w	r6, #256	@ 0x100
 80039c2:	d002      	beq.n	80039ca <HAL_ADC_IRQHandler+0xb4>
 80039c4:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80039c8:	d13b      	bne.n	8003a42 <HAL_ADC_IRQHandler+0x12c>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80039ca:	f416 7f00 	tst.w	r6, #512	@ 0x200
 80039ce:	d002      	beq.n	80039d6 <HAL_ADC_IRQHandler+0xc0>
 80039d0:	f415 7f00 	tst.w	r5, #512	@ 0x200
 80039d4:	d141      	bne.n	8003a5a <HAL_ADC_IRQHandler+0x144>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80039d6:	f016 0f10 	tst.w	r6, #16
 80039da:	d017      	beq.n	8003a0c <HAL_ADC_IRQHandler+0xf6>
 80039dc:	f015 0f10 	tst.w	r5, #16
 80039e0:	d014      	beq.n	8003a0c <HAL_ADC_IRQHandler+0xf6>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80039e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80039e4:	b123      	cbz	r3, 80039f0 <HAL_ADC_IRQHandler+0xda>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80039e6:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f013 0f03 	tst.w	r3, #3
 80039ee:	d00a      	beq.n	8003a06 <HAL_ADC_IRQHandler+0xf0>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80039f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80039f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039f6:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80039f8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80039fa:	f043 0302 	orr.w	r3, r3, #2
 80039fe:	65e3      	str	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff ff87 	bl	8003914 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	2210      	movs	r2, #16
 8003a0a:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8003a0c:	f416 5f00 	tst.w	r6, #8192	@ 0x2000
 8003a10:	d002      	beq.n	8003a18 <HAL_ADC_IRQHandler+0x102>
 8003a12:	f415 5f00 	tst.w	r5, #8192	@ 0x2000
 8003a16:	d12c      	bne.n	8003a72 <HAL_ADC_IRQHandler+0x15c>
}
 8003a18:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a1c:	f043 0320 	orr.w	r3, r3, #32
 8003a20:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a22:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8003a2a:	e7bc      	b.n	80039a6 <HAL_ADC_IRQHandler+0x90>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a32:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a34:	4620      	mov	r0, r4
 8003a36:	f7ff ff6c 	bl	8003912 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	2280      	movs	r2, #128	@ 0x80
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e7bd      	b.n	80039be <HAL_ADC_IRQHandler+0xa8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003a42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a48:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f000 fb77 	bl	800413e <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	e7b7      	b.n	80039ca <HAL_ADC_IRQHandler+0xb4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003a5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a60:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003a62:	4620      	mov	r0, r4
 8003a64:	f000 fb6c 	bl	8004140 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e7b1      	b.n	80039d6 <HAL_ADC_IRQHandler+0xc0>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8003a72:	4620      	mov	r0, r4
 8003a74:	f000 fb66 	bl	8004144 <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a7e:	601a      	str	r2, [r3, #0]
}
 8003a80:	e7ca      	b.n	8003a18 <HAL_ADC_IRQHandler+0x102>
	...

08003a84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003a84:	b470      	push	{r4, r5, r6}
 8003a86:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a88:	2200      	movs	r2, #0
 8003a8a:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a8c:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003a8e:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8003a92:	2a01      	cmp	r2, #1
 8003a94:	f000 8103 	beq.w	8003c9e <HAL_ADC_ConfigChannel+0x21a>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003aa0:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003aa2:	6890      	ldr	r0, [r2, #8]
 8003aa4:	f010 0f04 	tst.w	r0, #4
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aaa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003aac:	f042 0220 	orr.w	r2, r2, #32
 8003ab0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003ab2:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
}
 8003aba:	b003      	add	sp, #12
 8003abc:	bc70      	pop	{r4, r5, r6}
 8003abe:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8003ac0:	6848      	ldr	r0, [r1, #4]
 8003ac2:	2802      	cmp	r0, #2
 8003ac4:	f000 809c 	beq.w	8003c00 <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ac8:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8003acc:	d027      	beq.n	8003b1e <HAL_ADC_ConfigChannel+0x9a>
 8003ace:	4d75      	ldr	r5, [pc, #468]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x220>)
 8003ad0:	42ac      	cmp	r4, r5
 8003ad2:	d024      	beq.n	8003b1e <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003ad4:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8003ad6:	f000 001f 	and.w	r0, r0, #31
 8003ada:	250f      	movs	r5, #15
 8003adc:	4085      	lsls	r5, r0
 8003ade:	ea24 0505 	bic.w	r5, r4, r5
 8003ae2:	680c      	ldr	r4, [r1, #0]
 8003ae4:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8003ae8:	2e00      	cmp	r6, #0
 8003aea:	d131      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0xcc>
 8003aec:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8003af0:	4084      	lsls	r4, r0
 8003af2:	432c      	orrs	r4, r5
 8003af4:	661c      	str	r4, [r3, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003af6:	684c      	ldr	r4, [r1, #4]
 8003af8:	08a0      	lsrs	r0, r4, #2
 8003afa:	3001      	adds	r0, #1
 8003afc:	69dd      	ldr	r5, [r3, #28]
 8003afe:	42a8      	cmp	r0, r5
 8003b00:	d813      	bhi.n	8003b2a <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003b02:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8003b04:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8003b06:	f004 041f 	and.w	r4, r4, #31
 8003b0a:	260f      	movs	r6, #15
 8003b0c:	40a6      	lsls	r6, r4
 8003b0e:	ea20 0006 	bic.w	r0, r0, r6
 8003b12:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8003b16:	40a5      	lsls	r5, r4
 8003b18:	4328      	orrs	r0, r5
 8003b1a:	6290      	str	r0, [r2, #40]	@ 0x28
}
 8003b1c:	e005      	b.n	8003b2a <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003b1e:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003b20:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8003b22:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003b26:	4320      	orrs	r0, r4
 8003b28:	6290      	str	r0, [r2, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b2a:	681c      	ldr	r4, [r3, #0]
 8003b2c:	680d      	ldr	r5, [r1, #0]
 8003b2e:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8003b30:	6960      	ldr	r0, [r4, #20]
 8003b32:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8003b36:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8003b3a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003b3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b42:	4302      	orrs	r2, r0
 8003b44:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b46:	680a      	ldr	r2, [r1, #0]
 8003b48:	2a00      	cmp	r2, #0
 8003b4a:	db09      	blt.n	8003b60 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	e7b1      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b54:	b114      	cbz	r4, 8003b5c <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003b56:	fab4 f484 	clz	r4, r4
 8003b5a:	e7c9      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8003b5c:	2420      	movs	r4, #32
 8003b5e:	e7c7      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b60:	4951      	ldr	r1, [pc, #324]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x224>)
 8003b62:	f8d1 0708 	ldr.w	r0, [r1, #1800]	@ 0x708
 8003b66:	f000 71e0 	and.w	r1, r0, #29360128	@ 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b6a:	4c50      	ldr	r4, [pc, #320]	@ (8003cac <HAL_ADC_ConfigChannel+0x228>)
 8003b6c:	42a2      	cmp	r2, r4
 8003b6e:	d007      	beq.n	8003b80 <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b70:	4c4f      	ldr	r4, [pc, #316]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x22c>)
 8003b72:	42a2      	cmp	r2, r4
 8003b74:	d026      	beq.n	8003bc4 <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b76:	4c4f      	ldr	r4, [pc, #316]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x230>)
 8003b78:	42a2      	cmp	r2, r4
 8003b7a:	d032      	beq.n	8003be2 <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	e799      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b80:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 8003b84:	d1f4      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b86:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b8a:	4847      	ldr	r0, [pc, #284]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x224>)
 8003b8c:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 8003b90:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003b94:	4311      	orrs	r1, r2
 8003b96:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b9a:	4a47      	ldr	r2, [pc, #284]	@ (8003cb8 <HAL_ADC_ConfigChannel+0x234>)
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	0992      	lsrs	r2, r2, #6
 8003ba0:	4946      	ldr	r1, [pc, #280]	@ (8003cbc <HAL_ADC_ConfigChannel+0x238>)
 8003ba2:	fba1 1202 	umull	r1, r2, r1, r2
 8003ba6:	0992      	lsrs	r2, r2, #6
 8003ba8:	3201      	adds	r2, #1
 8003baa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003bae:	0092      	lsls	r2, r2, #2
 8003bb0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003bb2:	e002      	b.n	8003bba <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 8003bb4:	9a01      	ldr	r2, [sp, #4]
 8003bb6:	3a01      	subs	r2, #1
 8003bb8:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003bba:	9a01      	ldr	r2, [sp, #4]
 8003bbc:	2a00      	cmp	r2, #0
 8003bbe:	d1f9      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	e777      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bc4:	f010 7f80 	tst.w	r0, #16777216	@ 0x1000000
 8003bc8:	d1d5      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bca:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8003bce:	4836      	ldr	r0, [pc, #216]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x224>)
 8003bd0:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 8003bd4:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003bd8:	4311      	orrs	r1, r2
 8003bda:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bde:	2000      	movs	r0, #0
}
 8003be0:	e768      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003be2:	f410 0f80 	tst.w	r0, #4194304	@ 0x400000
 8003be6:	d158      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003be8:	f441 0280 	orr.w	r2, r1, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003bec:	482e      	ldr	r0, [pc, #184]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x224>)
 8003bee:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 8003bf2:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bfc:	2000      	movs	r0, #0
}
 8003bfe:	e759      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c00:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8003c04:	d002      	beq.n	8003c0c <HAL_ADC_ConfigChannel+0x188>
 8003c06:	4827      	ldr	r0, [pc, #156]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x220>)
 8003c08:	4284      	cmp	r4, r0
 8003c0a:	d106      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003c0c:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003c0e:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8003c10:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003c14:	ea20 0004 	bic.w	r0, r0, r4
 8003c18:	6290      	str	r0, [r2, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c1a:	680a      	ldr	r2, [r1, #0]
 8003c1c:	2a00      	cmp	r2, #0
 8003c1e:	db01      	blt.n	8003c24 <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c20:	2000      	movs	r0, #0
 8003c22:	e747      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c24:	4920      	ldr	r1, [pc, #128]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x224>)
 8003c26:	f8d1 1708 	ldr.w	r1, [r1, #1800]	@ 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c2a:	4820      	ldr	r0, [pc, #128]	@ (8003cac <HAL_ADC_ConfigChannel+0x228>)
 8003c2c:	4282      	cmp	r2, r0
 8003c2e:	d007      	beq.n	8003c40 <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c30:	481f      	ldr	r0, [pc, #124]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x22c>)
 8003c32:	4282      	cmp	r2, r0
 8003c34:	d013      	beq.n	8003c5e <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c36:	481f      	ldr	r0, [pc, #124]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x230>)
 8003c38:	4282      	cmp	r2, r0
 8003c3a:	d01f      	beq.n	8003c7c <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	e739      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c40:	f001 71a0 	and.w	r1, r1, #20971520	@ 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c44:	f100 4010 	add.w	r0, r0, #2415919104	@ 0x90000000
 8003c48:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 8003c4c:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 8003c50:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003c54:	4311      	orrs	r1, r2
 8003c56:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c5a:	2000      	movs	r0, #0
}
 8003c5c:	e72a      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c5e:	f401 0240 	and.w	r2, r1, #12582912	@ 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c62:	f100 4008 	add.w	r0, r0, #2281701376	@ 0x88000000
 8003c66:	f500 4060 	add.w	r0, r0, #57344	@ 0xe000
 8003c6a:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 8003c6e:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8003c72:	430a      	orrs	r2, r1
 8003c74:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c78:	2000      	movs	r0, #0
}
 8003c7a:	e71b      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c7c:	f001 72c0 	and.w	r2, r1, #25165824	@ 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c80:	f100 400c 	add.w	r0, r0, #2348810240	@ 0x8c000000
 8003c84:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 8003c88:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 8003c8c:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8003c90:	430a      	orrs	r2, r1
 8003c92:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c96:	2000      	movs	r0, #0
}
 8003c98:	e70c      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x30>
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	e70a      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8003c9e:	2002      	movs	r0, #2
 8003ca0:	e70b      	b.n	8003aba <HAL_ADC_ConfigChannel+0x36>
 8003ca2:	bf00      	nop
 8003ca4:	80000004 	.word	0x80000004
 8003ca8:	40012000 	.word	0x40012000
 8003cac:	b0001000 	.word	0xb0001000
 8003cb0:	b8004000 	.word	0xb8004000
 8003cb4:	b4002000 	.word	0xb4002000
 8003cb8:	20000078 	.word	0x20000078
 8003cbc:	053e2d63 	.word	0x053e2d63

08003cc0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003cc0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003cc2:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	f012 0f04 	tst.w	r2, #4
 8003cca:	d02a      	beq.n	8003d22 <ADC_ConversionStop+0x62>
 8003ccc:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	f012 0f02 	tst.w	r2, #2
 8003cd4:	d107      	bne.n	8003ce6 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003cdc:	f022 0217 	bic.w	r2, r2, #23
 8003ce0:	f042 0210 	orr.w	r2, r2, #16
 8003ce4:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ce6:	f7fe f9cb 	bl	8002080 <HAL_GetTick>
 8003cea:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f013 0f04 	tst.w	r3, #4
 8003cf4:	d013      	beq.n	8003d1e <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003cf6:	f7fe f9c3 	bl	8002080 <HAL_GetTick>
 8003cfa:	1b43      	subs	r3, r0, r5
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d9f5      	bls.n	8003cec <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f013 0f04 	tst.w	r3, #4
 8003d08:	d0f0      	beq.n	8003cec <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d0c:	f043 0310 	orr.w	r3, r3, #16
 8003d10:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d12:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	e002      	b.n	8003d24 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003d1e:	2000      	movs	r0, #0
 8003d20:	e000      	b.n	8003d24 <ADC_ConversionStop+0x64>
 8003d22:	2000      	movs	r0, #0
}
 8003d24:	bd38      	pop	{r3, r4, r5, pc}
	...

08003d28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d28:	b530      	push	{r4, r5, lr}
 8003d2a:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d30:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	f012 0f01 	tst.w	r2, #1
 8003d38:	d15b      	bne.n	8003df2 <ADC_Enable+0xca>
 8003d3a:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d3c:	6899      	ldr	r1, [r3, #8]
 8003d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8003df8 <ADC_Enable+0xd0>)
 8003d40:	4211      	tst	r1, r2
 8003d42:	d117      	bne.n	8003d74 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d4a:	f022 0217 	bic.w	r2, r2, #23
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d54:	4b29      	ldr	r3, [pc, #164]	@ (8003dfc <ADC_Enable+0xd4>)
 8003d56:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003d5a:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8003d5e:	d019      	beq.n	8003d94 <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d60:	4b27      	ldr	r3, [pc, #156]	@ (8003e00 <ADC_Enable+0xd8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	099b      	lsrs	r3, r3, #6
 8003d66:	4a27      	ldr	r2, [pc, #156]	@ (8003e04 <ADC_Enable+0xdc>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	099b      	lsrs	r3, r3, #6
 8003d6e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003d70:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003d72:	e00c      	b.n	8003d8e <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d74:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003d76:	f043 0310 	orr.w	r3, r3, #16
 8003d7a:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d7c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 8003d84:	2001      	movs	r0, #1
 8003d86:	e035      	b.n	8003df4 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8003d88:	9b01      	ldr	r3, [sp, #4]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003d8e:	9b01      	ldr	r3, [sp, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f9      	bne.n	8003d88 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003d94:	7e63      	ldrb	r3, [r4, #25]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	e02a      	b.n	8003df4 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8003d9e:	f7fe f96f 	bl	8002080 <HAL_GetTick>
 8003da2:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	f012 0f01 	tst.w	r2, #1
 8003dac:	d11f      	bne.n	8003dee <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	f012 0f01 	tst.w	r2, #1
 8003db4:	d107      	bne.n	8003dc6 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003dbc:	f022 0217 	bic.w	r2, r2, #23
 8003dc0:	f042 0201 	orr.w	r2, r2, #1
 8003dc4:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dc6:	f7fe f95b 	bl	8002080 <HAL_GetTick>
 8003dca:	1b40      	subs	r0, r0, r5
 8003dcc:	2802      	cmp	r0, #2
 8003dce:	d9e9      	bls.n	8003da4 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f013 0f01 	tst.w	r3, #1
 8003dd8:	d1e4      	bne.n	8003da4 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ddc:	f043 0310 	orr.w	r3, r3, #16
 8003de0:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8003dea:	2001      	movs	r0, #1
 8003dec:	e002      	b.n	8003df4 <ADC_Enable+0xcc>
  return HAL_OK;
 8003dee:	2000      	movs	r0, #0
 8003df0:	e000      	b.n	8003df4 <ADC_Enable+0xcc>
 8003df2:	2000      	movs	r0, #0
}
 8003df4:	b003      	add	sp, #12
 8003df6:	bd30      	pop	{r4, r5, pc}
 8003df8:	80000017 	.word	0x80000017
 8003dfc:	40012000 	.word	0x40012000
 8003e00:	20000078 	.word	0x20000078
 8003e04:	053e2d63 	.word	0x053e2d63

08003e08 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e08:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f013 0f04 	tst.w	r3, #4
 8003e10:	d128      	bne.n	8003e64 <HAL_ADC_Start+0x5c>
{
 8003e12:	b510      	push	{r4, lr}
 8003e14:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8003e16:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d024      	beq.n	8003e68 <HAL_ADC_Start+0x60>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003e24:	f7ff ff80 	bl	8003d28 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003e28:	b9c0      	cbnz	r0, 8003e5c <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8003e2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e38:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	65e3      	str	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e3e:	6822      	ldr	r2, [r4, #0]
 8003e40:	211c      	movs	r1, #28
 8003e42:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003e44:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003e48:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003e4a:	6893      	ldr	r3, [r2, #8]
 8003e4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e50:	f023 0317 	bic.w	r3, r3, #23
 8003e54:	f043 0304 	orr.w	r3, r3, #4
 8003e58:	6093      	str	r3, [r2, #8]
}
 8003e5a:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8003e62:	e7fa      	b.n	8003e5a <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8003e64:	2002      	movs	r0, #2
}
 8003e66:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8003e68:	2002      	movs	r0, #2
 8003e6a:	e7f6      	b.n	8003e5a <HAL_ADC_Start+0x52>

08003e6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e70:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003e72:	6893      	ldr	r3, [r2, #8]
 8003e74:	f013 0302 	ands.w	r3, r3, #2
 8003e78:	d000      	beq.n	8003e7c <ADC_Disable+0x10>
 8003e7a:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e7c:	6891      	ldr	r1, [r2, #8]
 8003e7e:	f011 0f01 	tst.w	r1, #1
 8003e82:	d039      	beq.n	8003ef8 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d139      	bne.n	8003efc <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e88:	6893      	ldr	r3, [r2, #8]
 8003e8a:	f003 0305 	and.w	r3, r3, #5
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d009      	beq.n	8003ea6 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e94:	f043 0310 	orr.w	r3, r3, #16
 8003e98:	65a3      	str	r3, [r4, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e9a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	65e3      	str	r3, [r4, #92]	@ 0x5c

      return HAL_ERROR;
 8003ea2:	2001      	movs	r0, #1
 8003ea4:	e029      	b.n	8003efa <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8003ea6:	6893      	ldr	r3, [r2, #8]
 8003ea8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003eac:	f023 0317 	bic.w	r3, r3, #23
 8003eb0:	f043 0302 	orr.w	r3, r3, #2
 8003eb4:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	2203      	movs	r2, #3
 8003eba:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ebc:	f7fe f8e0 	bl	8002080 <HAL_GetTick>
 8003ec0:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f013 0f01 	tst.w	r3, #1
 8003eca:	d013      	beq.n	8003ef4 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ecc:	f7fe f8d8 	bl	8002080 <HAL_GetTick>
 8003ed0:	1b40      	subs	r0, r0, r5
 8003ed2:	2802      	cmp	r0, #2
 8003ed4:	d9f5      	bls.n	8003ec2 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f013 0f01 	tst.w	r3, #1
 8003ede:	d0f0      	beq.n	8003ec2 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ee2:	f043 0310 	orr.w	r3, r3, #16
 8003ee6:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	e002      	b.n	8003efa <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	e000      	b.n	8003efa <ADC_Disable+0x8e>
 8003ef8:	2000      	movs	r0, #0
}
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003efc:	2000      	movs	r0, #0
 8003efe:	e7fc      	b.n	8003efa <ADC_Disable+0x8e>

08003f00 <HAL_ADC_DeInit>:
{
 8003f00:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d056      	beq.n	8003fb4 <HAL_ADC_DeInit+0xb4>
 8003f06:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003f08:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003f0a:	f043 0302 	orr.w	r3, r3, #2
 8003f0e:	6583      	str	r3, [r0, #88]	@ 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003f10:	f7ff fed6 	bl	8003cc0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003f14:	4606      	mov	r6, r0
 8003f16:	2800      	cmp	r0, #0
 8003f18:	d03d      	beq.n	8003f96 <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003f1a:	6822      	ldr	r2, [r4, #0]
 8003f1c:	6853      	ldr	r3, [r2, #4]
 8003f1e:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003f22:	f023 0303 	bic.w	r3, r3, #3
 8003f26:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	f240 329f 	movw	r2, #927	@ 0x39f
 8003f2e:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003f30:	6822      	ldr	r2, [r4, #0]
 8003f32:	68d1      	ldr	r1, [r2, #12]
 8003f34:	4b20      	ldr	r3, [pc, #128]	@ (8003fb8 <HAL_ADC_DeInit+0xb8>)
 8003f36:	400b      	ands	r3, r1
 8003f38:	60d3      	str	r3, [r2, #12]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003f3a:	6822      	ldr	r2, [r4, #0]
 8003f3c:	6953      	ldr	r3, [r2, #20]
 8003f3e:	f023 0307 	bic.w	r3, r3, #7
 8003f42:	6153      	str	r3, [r2, #20]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f48:	2500      	movs	r5, #0
 8003f4a:	629d      	str	r5, [r3, #40]	@ 0x28
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003f4c:	6822      	ldr	r2, [r4, #0]
 8003f4e:	6a13      	ldr	r3, [r2, #32]
 8003f50:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8003f54:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003f56:	6822      	ldr	r2, [r4, #0]
 8003f58:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8003f5a:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8003f5e:	6253      	str	r3, [r2, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003f60:	6822      	ldr	r2, [r4, #0]
 8003f62:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003f64:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8003f68:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003f6a:	6822      	ldr	r2, [r4, #0]
 8003f6c:	6913      	ldr	r3, [r2, #16]
 8003f6e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003f72:	6113      	str	r3, [r2, #16]
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003f74:	4a11      	ldr	r2, [pc, #68]	@ (8003fbc <HAL_ADC_DeInit+0xbc>)
 8003f76:	f8d2 3708 	ldr.w	r3, [r2, #1800]	@ 0x708
 8003f7a:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003f7e:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708
  HAL_ADC_MspDeInit(hadc);
 8003f82:	4620      	mov	r0, r4
 8003f84:	f7fd f988 	bl	8001298 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003f88:	6625      	str	r5, [r4, #96]	@ 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8003f8a:	65e5      	str	r5, [r4, #92]	@ 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8003f8c:	65a5      	str	r5, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8003f8e:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 8003f92:	4630      	mov	r0, r6
 8003f94:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003f96:	4620      	mov	r0, r4
 8003f98:	f7ff ff68 	bl	8003e6c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003f9c:	4606      	mov	r6, r0
 8003f9e:	b908      	cbnz	r0, 8003fa4 <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	65a3      	str	r3, [r4, #88]	@ 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003fa4:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003fa6:	6893      	ldr	r3, [r2, #8]
 8003fa8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003fac:	f023 0317 	bic.w	r3, r3, #23
 8003fb0:	6093      	str	r3, [r2, #8]
}
 8003fb2:	e7b2      	b.n	8003f1a <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8003fb4:	2601      	movs	r6, #1
 8003fb6:	e7ec      	b.n	8003f92 <HAL_ADC_DeInit+0x92>
 8003fb8:	833e0200 	.word	0x833e0200
 8003fbc:	40012000 	.word	0x40012000

08003fc0 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003fc0:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d019      	beq.n	8003ffc <HAL_ADC_Stop+0x3c>
{
 8003fc8:	b510      	push	{r4, lr}
 8003fca:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003fd2:	f7ff fe75 	bl	8003cc0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003fd6:	b118      	cbz	r0, 8003fe0 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8003fde:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f7ff ff43 	bl	8003e6c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d1f6      	bne.n	8003fd8 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8003fea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003ffa:	e7ed      	b.n	8003fd8 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8003ffc:	2002      	movs	r0, #2
}
 8003ffe:	4770      	bx	lr

08004000 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004002:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004004:	2300      	movs	r3, #0
 8004006:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004008:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 800400c:	2b01      	cmp	r3, #1
 800400e:	f000 8094 	beq.w	800413a <HAL_ADCEx_Calibration_Start+0x13a>
 8004012:	4604      	mov	r4, r0
 8004014:	2301      	movs	r3, #1
 8004016:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800401a:	f7ff ff27 	bl	8003e6c <ADC_Disable>
 800401e:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004020:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	f012 0201 	ands.w	r2, r2, #1
 8004028:	d009      	beq.n	800403e <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800402c:	f043 0310 	orr.w	r3, r3, #16
 8004030:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004032:	2300      	movs	r3, #0
 8004034:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  return tmp_hal_status;
}
 8004038:	4628      	mov	r0, r5
 800403a:	b003      	add	sp, #12
 800403c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800403e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8004040:	f421 7181 	bic.w	r1, r1, #258	@ 0x102
 8004044:	f041 0102 	orr.w	r1, r1, #2
 8004048:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800404a:	68de      	ldr	r6, [r3, #12]
 800404c:	f426 46ff 	bic.w	r6, r6, #32640	@ 0x7f80
 8004050:	f026 067c 	bic.w	r6, r6, #124	@ 0x7c
 8004054:	0436      	lsls	r6, r6, #16
 8004056:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004058:	68d9      	ldr	r1, [r3, #12]
 800405a:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 800405e:	f021 0103 	bic.w	r1, r1, #3
 8004062:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8004064:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004066:	e005      	b.n	8004074 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004068:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800406c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004070:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004072:	3201      	adds	r2, #1
 8004074:	2a07      	cmp	r2, #7
 8004076:	d81e      	bhi.n	80040b6 <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8004078:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800407a:	688b      	ldr	r3, [r1, #8]
 800407c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004080:	f023 0317 	bic.w	r3, r3, #23
 8004084:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004088:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800408a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800408c:	6899      	ldr	r1, [r3, #8]
 800408e:	2900      	cmp	r1, #0
 8004090:	daea      	bge.n	8004068 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8004092:	9b01      	ldr	r3, [sp, #4]
 8004094:	3301      	adds	r3, #1
 8004096:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004098:	9b01      	ldr	r3, [sp, #4]
 800409a:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 800409e:	d3f4      	bcc.n	800408a <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 80040a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80040a2:	f023 0312 	bic.w	r3, r3, #18
 80040a6:	f043 0310 	orr.w	r3, r3, #16
 80040aa:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 80040ac:	2300      	movs	r3, #0
 80040ae:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
          return HAL_ERROR;
 80040b2:	2501      	movs	r5, #1
 80040b4:	e7c0      	b.n	8004038 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 80040b6:	fbb0 f0f2 	udiv	r0, r0, r2
    LL_ADC_Enable(hadc->Instance);
 80040ba:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80040bc:	6893      	ldr	r3, [r2, #8]
 80040be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040c2:	f023 0317 	bic.w	r3, r3, #23
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6093      	str	r3, [r2, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80040cc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 80040ce:	f8d2 30b4 	ldr.w	r3, [r2, #180]	@ 0xb4
 80040d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80040d6:	4318      	orrs	r0, r3
 80040d8:	f8c2 00b4 	str.w	r0, [r2, #180]	@ 0xb4
    LL_ADC_Disable(hadc->Instance);
 80040dc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80040de:	6893      	ldr	r3, [r2, #8]
 80040e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040e4:	f023 0317 	bic.w	r3, r3, #23
 80040e8:	f043 0302 	orr.w	r3, r3, #2
 80040ec:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80040ee:	f7fd ffc7 	bl	8002080 <HAL_GetTick>
 80040f2:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040f4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	f012 0f01 	tst.w	r2, #1
 80040fc:	d109      	bne.n	8004112 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	4332      	orrs	r2, r6
 8004102:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004104:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004106:	f023 0303 	bic.w	r3, r3, #3
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004110:	e78f      	b.n	8004032 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004112:	f7fd ffb5 	bl	8002080 <HAL_GetTick>
 8004116:	1bc3      	subs	r3, r0, r7
 8004118:	2b02      	cmp	r3, #2
 800411a:	d9eb      	bls.n	80040f4 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f013 0f01 	tst.w	r3, #1
 8004124:	d0e6      	beq.n	80040f4 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004126:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004128:	f043 0310 	orr.w	r3, r3, #16
 800412c:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800412e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8004136:	2501      	movs	r5, #1
 8004138:	e77e      	b.n	8004038 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 800413a:	2502      	movs	r5, #2
 800413c:	e77c      	b.n	8004038 <HAL_ADCEx_Calibration_Start+0x38>

0800413e <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800413e:	4770      	bx	lr

08004140 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004140:	4770      	bx	lr

08004142 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004142:	4770      	bx	lr

08004144 <HAL_ADCEx_ChannelConfigReadyCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8004144:	4770      	bx	lr
	...

08004148 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004148:	2800      	cmp	r0, #0
 800414a:	db07      	blt.n	800415c <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800414c:	f000 021f 	and.w	r2, r0, #31
 8004150:	0940      	lsrs	r0, r0, #5
 8004152:	2301      	movs	r3, #1
 8004154:	4093      	lsls	r3, r2
 8004156:	4a02      	ldr	r2, [pc, #8]	@ (8004160 <__NVIC_EnableIRQ+0x18>)
 8004158:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000e100 	.word	0xe000e100

08004164 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004164:	2800      	cmp	r0, #0
 8004166:	db0c      	blt.n	8004182 <__NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004168:	f000 021f 	and.w	r2, r0, #31
 800416c:	0940      	lsrs	r0, r0, #5
 800416e:	2301      	movs	r3, #1
 8004170:	4093      	lsls	r3, r2
 8004172:	3020      	adds	r0, #32
 8004174:	4a03      	ldr	r2, [pc, #12]	@ (8004184 <__NVIC_DisableIRQ+0x20>)
 8004176:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800417a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800417e:	f3bf 8f6f 	isb	sy
}
 8004182:	4770      	bx	lr
 8004184:	e000e100 	.word	0xe000e100

08004188 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8004188:	2800      	cmp	r0, #0
 800418a:	db08      	blt.n	800419e <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800418c:	0109      	lsls	r1, r1, #4
 800418e:	b2c9      	uxtb	r1, r1
 8004190:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004194:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004198:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 800419c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800419e:	f000 000f 	and.w	r0, r0, #15
 80041a2:	0109      	lsls	r1, r1, #4
 80041a4:	b2c9      	uxtb	r1, r1
 80041a6:	4b01      	ldr	r3, [pc, #4]	@ (80041ac <__NVIC_SetPriority+0x24>)
 80041a8:	5419      	strb	r1, [r3, r0]
}
 80041aa:	4770      	bx	lr
 80041ac:	e000ed14 	.word	0xe000ed14

080041b0 <NVIC_EncodePriority>:
{
 80041b0:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b2:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b6:	f1c0 0c07 	rsb	ip, r0, #7
 80041ba:	f1bc 0f04 	cmp.w	ip, #4
 80041be:	bf28      	it	cs
 80041c0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041c4:	1d03      	adds	r3, r0, #4
 80041c6:	2b06      	cmp	r3, #6
 80041c8:	d90f      	bls.n	80041ea <NVIC_EncodePriority+0x3a>
 80041ca:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041cc:	f04f 3eff 	mov.w	lr, #4294967295
 80041d0:	fa0e f00c 	lsl.w	r0, lr, ip
 80041d4:	ea21 0100 	bic.w	r1, r1, r0
 80041d8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041da:	fa0e fe03 	lsl.w	lr, lr, r3
 80041de:	ea22 020e 	bic.w	r2, r2, lr
}
 80041e2:	ea41 0002 	orr.w	r0, r1, r2
 80041e6:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ea:	2300      	movs	r3, #0
 80041ec:	e7ee      	b.n	80041cc <NVIC_EncodePriority+0x1c>
	...

080041f0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041f0:	4a07      	ldr	r2, [pc, #28]	@ (8004210 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80041f2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041f4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80041f8:	041b      	lsls	r3, r3, #16
 80041fa:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041fc:	0200      	lsls	r0, r0, #8
 80041fe:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004202:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004204:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800420c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800420e:	4770      	bx	lr
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004214:	b510      	push	{r4, lr}
 8004216:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004218:	4b05      	ldr	r3, [pc, #20]	@ (8004230 <HAL_NVIC_SetPriority+0x1c>)
 800421a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800421c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004220:	f7ff ffc6 	bl	80041b0 <NVIC_EncodePriority>
 8004224:	4601      	mov	r1, r0
 8004226:	4620      	mov	r0, r4
 8004228:	f7ff ffae 	bl	8004188 <__NVIC_SetPriority>
}
 800422c:	bd10      	pop	{r4, pc}
 800422e:	bf00      	nop
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004234:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004236:	f7ff ff87 	bl	8004148 <__NVIC_EnableIRQ>
}
 800423a:	bd08      	pop	{r3, pc}

0800423c <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800423c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800423e:	f7ff ff91 	bl	8004164 <__NVIC_DisableIRQ>
}
 8004242:	bd08      	pop	{r3, pc}

08004244 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004244:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004246:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8004248:	f8d0 c050 	ldr.w	ip, [r0, #80]	@ 0x50
 800424c:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004250:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8004252:	b124      	cbz	r4, 800425e <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004254:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8004256:	f8d0 c05c 	ldr.w	ip, [r0, #92]	@ 0x5c
 800425a:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800425e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004260:	f004 0c1c 	and.w	ip, r4, #28
 8004264:	2401      	movs	r4, #1
 8004266:	fa04 f40c 	lsl.w	r4, r4, ip
 800426a:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
 800426e:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004272:	6804      	ldr	r4, [r0, #0]
 8004274:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004276:	6883      	ldr	r3, [r0, #8]
 8004278:	2b10      	cmp	r3, #16
 800427a:	d005      	beq.n	8004288 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800427c:	6803      	ldr	r3, [r0, #0]
 800427e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004280:	6803      	ldr	r3, [r0, #0]
 8004282:	60da      	str	r2, [r3, #12]
  }
}
 8004284:	bc10      	pop	{r4}
 8004286:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8004288:	6803      	ldr	r3, [r0, #0]
 800428a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800428c:	6803      	ldr	r3, [r0, #0]
 800428e:	60d9      	str	r1, [r3, #12]
 8004290:	e7f8      	b.n	8004284 <DMA_SetConfig+0x40>
	...

08004294 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004294:	6803      	ldr	r3, [r0, #0]
 8004296:	4a14      	ldr	r2, [pc, #80]	@ (80042e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d816      	bhi.n	80042ca <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800429c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800429e:	f022 0203 	bic.w	r2, r2, #3
 80042a2:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80042a6:	f502 3202 	add.w	r2, r2, #133120	@ 0x20800
 80042aa:	6482      	str	r2, [r0, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	3b08      	subs	r3, #8
 80042b0:	4a0e      	ldr	r2, [pc, #56]	@ (80042ec <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042b8:	4a0d      	ldr	r2, [pc, #52]	@ (80042f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 80042ba:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2201      	movs	r2, #1
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	6503      	str	r3, [r0, #80]	@ 0x50
}
 80042c8:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80042ca:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80042cc:	f022 0103 	bic.w	r1, r2, #3
 80042d0:	4a08      	ldr	r2, [pc, #32]	@ (80042f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 80042d2:	440a      	add	r2, r1
 80042d4:	6482      	str	r2, [r0, #72]	@ 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	3b08      	subs	r3, #8
 80042da:	4a04      	ldr	r2, [pc, #16]	@ (80042ec <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	091b      	lsrs	r3, r3, #4
 80042e2:	3307      	adds	r3, #7
 80042e4:	e7e8      	b.n	80042b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 80042e6:	bf00      	nop
 80042e8:	40020407 	.word	0x40020407
 80042ec:	cccccccd 	.word	0xcccccccd
 80042f0:	40020880 	.word	0x40020880
 80042f4:	4002081c 	.word	0x4002081c

080042f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042f8:	6843      	ldr	r3, [r0, #4]
 80042fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042fe:	4a07      	ldr	r2, [pc, #28]	@ (800431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004300:	441a      	add	r2, r3
 8004302:	0092      	lsls	r2, r2, #2
 8004304:	6542      	str	r2, [r0, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004306:	4a06      	ldr	r2, [pc, #24]	@ (8004320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8004308:	6582      	str	r2, [r0, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800430a:	3b01      	subs	r3, #1
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	2201      	movs	r2, #1
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	1000823f 	.word	0x1000823f
 8004320:	40020940 	.word	0x40020940

08004324 <HAL_DMA_Init>:
  if (hdma == NULL)
 8004324:	2800      	cmp	r0, #0
 8004326:	d05e      	beq.n	80043e6 <HAL_DMA_Init+0xc2>
{
 8004328:	b510      	push	{r4, lr}
 800432a:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800432c:	6803      	ldr	r3, [r0, #0]
 800432e:	4a2f      	ldr	r2, [pc, #188]	@ (80043ec <HAL_DMA_Init+0xc8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d840      	bhi.n	80043b6 <HAL_DMA_Init+0x92>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004334:	4a2e      	ldr	r2, [pc, #184]	@ (80043f0 <HAL_DMA_Init+0xcc>)
 8004336:	441a      	add	r2, r3
 8004338:	492e      	ldr	r1, [pc, #184]	@ (80043f4 <HAL_DMA_Init+0xd0>)
 800433a:	fba1 1202 	umull	r1, r2, r1, r2
 800433e:	0912      	lsrs	r2, r2, #4
 8004340:	0092      	lsls	r2, r2, #2
 8004342:	6442      	str	r2, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004344:	4a2c      	ldr	r2, [pc, #176]	@ (80043f8 <HAL_DMA_Init+0xd4>)
 8004346:	6402      	str	r2, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004348:	2202      	movs	r2, #2
 800434a:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	f36f 120e 	bfc	r2, #4, #11
 8004354:	601a      	str	r2, [r3, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004356:	6821      	ldr	r1, [r4, #0]
 8004358:	680a      	ldr	r2, [r1, #0]
 800435a:	68a3      	ldr	r3, [r4, #8]
 800435c:	68e0      	ldr	r0, [r4, #12]
 800435e:	4303      	orrs	r3, r0
 8004360:	6920      	ldr	r0, [r4, #16]
 8004362:	4303      	orrs	r3, r0
 8004364:	6960      	ldr	r0, [r4, #20]
 8004366:	4303      	orrs	r3, r0
 8004368:	69a0      	ldr	r0, [r4, #24]
 800436a:	4303      	orrs	r3, r0
 800436c:	69e0      	ldr	r0, [r4, #28]
 800436e:	4303      	orrs	r3, r0
 8004370:	6a20      	ldr	r0, [r4, #32]
 8004372:	4303      	orrs	r3, r0
 8004374:	4313      	orrs	r3, r2
 8004376:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004378:	4620      	mov	r0, r4
 800437a:	f7ff ff8b 	bl	8004294 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800437e:	68a3      	ldr	r3, [r4, #8]
 8004380:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004384:	d022      	beq.n	80043cc <HAL_DMA_Init+0xa8>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004386:	6863      	ldr	r3, [r4, #4]
 8004388:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800438a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800438e:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004390:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004392:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004394:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004396:	6863      	ldr	r3, [r4, #4]
 8004398:	3b01      	subs	r3, #1
 800439a:	2b03      	cmp	r3, #3
 800439c:	d919      	bls.n	80043d2 <HAL_DMA_Init+0xae>
    hdma->DMAmuxRequestGen = NULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80043a2:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043a4:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043a6:	2000      	movs	r0, #0
 80043a8:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 80043b0:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 80043b4:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80043b6:	4a11      	ldr	r2, [pc, #68]	@ (80043fc <HAL_DMA_Init+0xd8>)
 80043b8:	441a      	add	r2, r3
 80043ba:	490e      	ldr	r1, [pc, #56]	@ (80043f4 <HAL_DMA_Init+0xd0>)
 80043bc:	fba1 1202 	umull	r1, r2, r1, r2
 80043c0:	0912      	lsrs	r2, r2, #4
 80043c2:	0092      	lsls	r2, r2, #2
 80043c4:	6442      	str	r2, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80043c6:	4a0e      	ldr	r2, [pc, #56]	@ (8004400 <HAL_DMA_Init+0xdc>)
 80043c8:	6402      	str	r2, [r0, #64]	@ 0x40
 80043ca:	e7bd      	b.n	8004348 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043cc:	2300      	movs	r3, #0
 80043ce:	6063      	str	r3, [r4, #4]
 80043d0:	e7d9      	b.n	8004386 <HAL_DMA_Init+0x62>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043d2:	4620      	mov	r0, r4
 80043d4:	f7ff ff90 	bl	80042f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80043e0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	e7df      	b.n	80043a6 <HAL_DMA_Init+0x82>
    return HAL_ERROR;
 80043e6:	2001      	movs	r0, #1
}
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40020407 	.word	0x40020407
 80043f0:	bffdfff8 	.word	0xbffdfff8
 80043f4:	cccccccd 	.word	0xcccccccd
 80043f8:	40020000 	.word	0x40020000
 80043fc:	bffdfbf8 	.word	0xbffdfbf8
 8004400:	40020400 	.word	0x40020400

08004404 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8004404:	2800      	cmp	r0, #0
 8004406:	d04b      	beq.n	80044a0 <HAL_DMA_DeInit+0x9c>
{
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800440c:	6802      	ldr	r2, [r0, #0]
 800440e:	6813      	ldr	r3, [r2, #0]
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004416:	6802      	ldr	r2, [r0, #0]
 8004418:	4b22      	ldr	r3, [pc, #136]	@ (80044a4 <HAL_DMA_DeInit+0xa0>)
 800441a:	429a      	cmp	r2, r3
 800441c:	d82c      	bhi.n	8004478 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800441e:	4b22      	ldr	r3, [pc, #136]	@ (80044a8 <HAL_DMA_DeInit+0xa4>)
 8004420:	4413      	add	r3, r2
 8004422:	4922      	ldr	r1, [pc, #136]	@ (80044ac <HAL_DMA_DeInit+0xa8>)
 8004424:	fba1 1303 	umull	r1, r3, r1, r3
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800442e:	4b20      	ldr	r3, [pc, #128]	@ (80044b0 <HAL_DMA_DeInit+0xac>)
 8004430:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 8004432:	2500      	movs	r5, #0
 8004434:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004436:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004438:	f003 021c 	and.w	r2, r3, #28
 800443c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800443e:	2301      	movs	r3, #1
 8004440:	4093      	lsls	r3, r2
 8004442:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004444:	4620      	mov	r0, r4
 8004446:	f7ff ff25 	bl	8004294 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800444a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800444c:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800444e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004450:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004452:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004454:	6863      	ldr	r3, [r4, #4]
 8004456:	3b01      	subs	r3, #1
 8004458:	2b03      	cmp	r3, #3
 800445a:	d918      	bls.n	800448e <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 800445c:	2000      	movs	r0, #0
 800445e:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004460:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004462:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hdma->XferCpltCallback = NULL;
 8004464:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004466:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004468:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800446a:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800446c:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800446e:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8004472:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8004476:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004478:	4b0e      	ldr	r3, [pc, #56]	@ (80044b4 <HAL_DMA_DeInit+0xb0>)
 800447a:	4413      	add	r3, r2
 800447c:	490b      	ldr	r1, [pc, #44]	@ (80044ac <HAL_DMA_DeInit+0xa8>)
 800447e:	fba1 1303 	umull	r1, r3, r1, r3
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004488:	4b0b      	ldr	r3, [pc, #44]	@ (80044b8 <HAL_DMA_DeInit+0xb4>)
 800448a:	6403      	str	r3, [r0, #64]	@ 0x40
 800448c:	e7d1      	b.n	8004432 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800448e:	4620      	mov	r0, r4
 8004490:	f7ff ff32 	bl	80042f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004494:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004496:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004498:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800449a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	e7dd      	b.n	800445c <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 80044a0:	2001      	movs	r0, #1
}
 80044a2:	4770      	bx	lr
 80044a4:	40020407 	.word	0x40020407
 80044a8:	bffdfff8 	.word	0xbffdfff8
 80044ac:	cccccccd 	.word	0xcccccccd
 80044b0:	40020000 	.word	0x40020000
 80044b4:	bffdfbf8 	.word	0xbffdfbf8
 80044b8:	40020400 	.word	0x40020400

080044bc <HAL_DMA_Start_IT>:
{
 80044bc:	b538      	push	{r3, r4, r5, lr}
 80044be:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80044c0:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 80044c4:	2801      	cmp	r0, #1
 80044c6:	d043      	beq.n	8004550 <HAL_DMA_Start_IT+0x94>
 80044c8:	2001      	movs	r0, #1
 80044ca:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 80044ce:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 80044d2:	b2c0      	uxtb	r0, r0
 80044d4:	2801      	cmp	r0, #1
 80044d6:	d006      	beq.n	80044e6 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044d8:	2380      	movs	r3, #128	@ 0x80
 80044da:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80044dc:	2300      	movs	r3, #0
 80044de:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_ERROR;
 80044e2:	2001      	movs	r0, #1
}
 80044e4:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80044e6:	2002      	movs	r0, #2
 80044e8:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044ec:	2000      	movs	r0, #0
 80044ee:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80044f0:	6825      	ldr	r5, [r4, #0]
 80044f2:	6828      	ldr	r0, [r5, #0]
 80044f4:	f020 0001 	bic.w	r0, r0, #1
 80044f8:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044fa:	4620      	mov	r0, r4
 80044fc:	f7ff fea2 	bl	8004244 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004500:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004502:	b1d3      	cbz	r3, 800453a <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004504:	6822      	ldr	r2, [r4, #0]
 8004506:	6813      	ldr	r3, [r2, #0]
 8004508:	f043 030e 	orr.w	r3, r3, #14
 800450c:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800450e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8004516:	d003      	beq.n	8004520 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800451e:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8004520:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004522:	b11b      	cbz	r3, 800452c <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800452a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800452c:	6822      	ldr	r2, [r4, #0]
 800452e:	6813      	ldr	r3, [r2, #0]
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004536:	2000      	movs	r0, #0
 8004538:	e7d4      	b.n	80044e4 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800453a:	6822      	ldr	r2, [r4, #0]
 800453c:	6813      	ldr	r3, [r2, #0]
 800453e:	f023 0304 	bic.w	r3, r3, #4
 8004542:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004544:	6822      	ldr	r2, [r4, #0]
 8004546:	6813      	ldr	r3, [r2, #0]
 8004548:	f043 030a 	orr.w	r3, r3, #10
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e7de      	b.n	800450e <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8004550:	2002      	movs	r0, #2
 8004552:	e7c7      	b.n	80044e4 <HAL_DMA_Start_IT+0x28>

08004554 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8004554:	4603      	mov	r3, r0
 8004556:	2800      	cmp	r0, #0
 8004558:	d034      	beq.n	80045c4 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800455a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	2a02      	cmp	r2, #2
 8004562:	d006      	beq.n	8004572 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004564:	2204      	movs	r2, #4
 8004566:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8004568:	2200      	movs	r2, #0
 800456a:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    return HAL_ERROR;
 800456e:	2001      	movs	r0, #1
 8004570:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004572:	6801      	ldr	r1, [r0, #0]
 8004574:	680a      	ldr	r2, [r1, #0]
 8004576:	f022 020e 	bic.w	r2, r2, #14
 800457a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800457c:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800457e:	680a      	ldr	r2, [r1, #0]
 8004580:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004584:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8004586:	6801      	ldr	r1, [r0, #0]
 8004588:	680a      	ldr	r2, [r1, #0]
 800458a:	f022 0201 	bic.w	r2, r2, #1
 800458e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004590:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004592:	f002 011c 	and.w	r1, r2, #28
 8004596:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8004598:	2201      	movs	r2, #1
 800459a:	408a      	lsls	r2, r1
 800459c:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800459e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80045a2:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 80045a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045a6:	b132      	cbz	r2, 80045b6 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045a8:	6811      	ldr	r1, [r2, #0]
 80045aa:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80045ae:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80045b2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80045b4:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80045bc:	2000      	movs	r0, #0
 80045be:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  return HAL_OK;
 80045c2:	4770      	bx	lr
    return HAL_ERROR;
 80045c4:	2001      	movs	r0, #1
}
 80045c6:	4770      	bx	lr

080045c8 <HAL_DMA_Abort_IT>:
{
 80045c8:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80045ca:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d003      	beq.n	80045dc <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d4:	2304      	movs	r3, #4
 80045d6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 80045d8:	2001      	movs	r0, #1
}
 80045da:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045dc:	6802      	ldr	r2, [r0, #0]
 80045de:	6813      	ldr	r3, [r2, #0]
 80045e0:	f023 030e 	bic.w	r3, r3, #14
 80045e4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80045e6:	6802      	ldr	r2, [r0, #0]
 80045e8:	6813      	ldr	r3, [r2, #0]
 80045ea:	f023 0301 	bic.w	r3, r3, #1
 80045ee:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045f0:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80045f2:	6813      	ldr	r3, [r2, #0]
 80045f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045f8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045fa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80045fc:	f003 021c 	and.w	r2, r3, #28
 8004600:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004602:	2301      	movs	r3, #1
 8004604:	4093      	lsls	r3, r2
 8004606:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004608:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800460a:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800460c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 800460e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004610:	b133      	cbz	r3, 8004620 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004618:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800461a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800461c:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800461e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004620:	2301      	movs	r3, #1
 8004622:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8004626:	2300      	movs	r3, #0
 8004628:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 800462c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800462e:	b113      	cbz	r3, 8004636 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8004630:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004632:	2000      	movs	r0, #0
 8004634:	e7d1      	b.n	80045da <HAL_DMA_Abort_IT+0x12>
 8004636:	2000      	movs	r0, #0
 8004638:	e7cf      	b.n	80045da <HAL_DMA_Abort_IT+0x12>
	...

0800463c <HAL_DMA_IRQHandler>:
{
 800463c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800463e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004640:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004642:	6804      	ldr	r4, [r0, #0]
 8004644:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004646:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004648:	f003 031c 	and.w	r3, r3, #28
 800464c:	2204      	movs	r2, #4
 800464e:	409a      	lsls	r2, r3
 8004650:	420a      	tst	r2, r1
 8004652:	d015      	beq.n	8004680 <HAL_DMA_IRQHandler+0x44>
 8004654:	f015 0f04 	tst.w	r5, #4
 8004658:	d012      	beq.n	8004680 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	f013 0f20 	tst.w	r3, #32
 8004660:	d103      	bne.n	800466a <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	f023 0304 	bic.w	r3, r3, #4
 8004668:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800466a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800466c:	f003 021c 	and.w	r2, r3, #28
 8004670:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004672:	2304      	movs	r3, #4
 8004674:	4093      	lsls	r3, r2
 8004676:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004678:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800467a:	b103      	cbz	r3, 800467e <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 800467c:	4798      	blx	r3
}
 800467e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004680:	2202      	movs	r2, #2
 8004682:	409a      	lsls	r2, r3
 8004684:	420a      	tst	r2, r1
 8004686:	d028      	beq.n	80046da <HAL_DMA_IRQHandler+0x9e>
 8004688:	f015 0f02 	tst.w	r5, #2
 800468c:	d025      	beq.n	80046da <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	f013 0f20 	tst.w	r3, #32
 8004694:	d106      	bne.n	80046a4 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	f023 030a 	bic.w	r3, r3, #10
 800469c:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800469e:	2301      	movs	r3, #1
 80046a0:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80046a4:	6802      	ldr	r2, [r0, #0]
 80046a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004718 <HAL_DMA_IRQHandler+0xdc>)
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d90e      	bls.n	80046ca <HAL_DMA_IRQHandler+0x8e>
 80046ac:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80046ae:	f003 021c 	and.w	r2, r3, #28
 80046b2:	2302      	movs	r3, #2
 80046b4:	4093      	lsls	r3, r2
 80046b6:	4a19      	ldr	r2, [pc, #100]	@ (800471c <HAL_DMA_IRQHandler+0xe0>)
 80046b8:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 80046ba:	2300      	movs	r3, #0
 80046bc:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
      if (hdma->XferCpltCallback != NULL)
 80046c0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0db      	beq.n	800467e <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 80046c6:	4798      	blx	r3
 80046c8:	e7d9      	b.n	800467e <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80046ca:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80046cc:	f003 021c 	and.w	r2, r3, #28
 80046d0:	2302      	movs	r3, #2
 80046d2:	4093      	lsls	r3, r2
 80046d4:	4a12      	ldr	r2, [pc, #72]	@ (8004720 <HAL_DMA_IRQHandler+0xe4>)
 80046d6:	6053      	str	r3, [r2, #4]
 80046d8:	e7ef      	b.n	80046ba <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80046da:	2208      	movs	r2, #8
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	420b      	tst	r3, r1
 80046e2:	d0cc      	beq.n	800467e <HAL_DMA_IRQHandler+0x42>
 80046e4:	f015 0f08 	tst.w	r5, #8
 80046e8:	d0c9      	beq.n	800467e <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	f023 030e 	bic.w	r3, r3, #14
 80046f0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046f2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80046f4:	f003 031c 	and.w	r3, r3, #28
 80046f8:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80046fa:	2201      	movs	r2, #1
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004702:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004704:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8004708:	2300      	movs	r3, #0
 800470a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 800470e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0b4      	beq.n	800467e <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004714:	4798      	blx	r3
  return;
 8004716:	e7b2      	b.n	800467e <HAL_DMA_IRQHandler+0x42>
 8004718:	40020080 	.word	0x40020080
 800471c:	40020400 	.word	0x40020400
 8004720:	40020000 	.word	0x40020000

08004724 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8004724:	b178      	cbz	r0, 8004746 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8004726:	6803      	ldr	r3, [r0, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800472a:	f011 0f10 	tst.w	r1, #16
 800472e:	d004      	beq.n	800473a <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004730:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004734:	d004      	beq.n	8004740 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004736:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 800473a:	601a      	str	r2, [r3, #0]
  return status;
 800473c:	2000      	movs	r0, #0
 800473e:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004740:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8004744:	e7f9      	b.n	800473a <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8004746:	2001      	movs	r0, #1
}
 8004748:	4770      	bx	lr
	...

0800474c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800474c:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800474e:	4c05      	ldr	r4, [pc, #20]	@ (8004764 <FLASH_Program_DoubleWord+0x18>)
 8004750:	6961      	ldr	r1, [r4, #20]
 8004752:	f041 0101 	orr.w	r1, r1, #1
 8004756:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004758:	6002      	str	r2, [r0, #0]
 800475a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800475e:	6043      	str	r3, [r0, #4]
}
 8004760:	bc10      	pop	{r4}
 8004762:	4770      	bx	lr
 8004764:	58004000 	.word	0x58004000

08004768 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004768:	4a0c      	ldr	r2, [pc, #48]	@ (800479c <FLASH_Program_Fast+0x34>)
 800476a:	6953      	ldr	r3, [r2, #20]
 800476c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004770:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004772:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004776:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004778:	2340      	movs	r3, #64	@ 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800477a:	f851 2b04 	ldr.w	r2, [r1], #4
 800477e:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8004782:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8004784:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8004788:	d1f7      	bne.n	800477a <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 800478a:	4b04      	ldr	r3, [pc, #16]	@ (800479c <FLASH_Program_Fast+0x34>)
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004792:	d1fa      	bne.n	800478a <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004794:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	58004000 	.word	0x58004000

080047a0 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80047a0:	4b09      	ldr	r3, [pc, #36]	@ (80047c8 <HAL_FLASH_Unlock+0x28>)
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	db01      	blt.n	80047ac <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80047a8:	2000      	movs	r0, #0
 80047aa:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80047ac:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <HAL_FLASH_Unlock+0x28>)
 80047ae:	4a07      	ldr	r2, [pc, #28]	@ (80047cc <HAL_FLASH_Unlock+0x2c>)
 80047b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80047b2:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 80047b6:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	db01      	blt.n	80047c2 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80047be:	2000      	movs	r0, #0
 80047c0:	4770      	bx	lr
      status = HAL_ERROR;
 80047c2:	2001      	movs	r0, #1
}
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	58004000 	.word	0x58004000
 80047cc:	45670123 	.word	0x45670123

080047d0 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80047d0:	4b05      	ldr	r3, [pc, #20]	@ (80047e8 <HAL_FLASH_Lock+0x18>)
 80047d2:	695a      	ldr	r2, [r3, #20]
 80047d4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80047d8:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	db01      	blt.n	80047e4 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 80047e0:	2001      	movs	r0, #1
}
 80047e2:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80047e4:	2000      	movs	r0, #0
 80047e6:	4770      	bx	lr
 80047e8:	58004000 	.word	0x58004000

080047ec <FLASH_WaitForLastOperation>:
{
 80047ec:	b538      	push	{r3, r4, r5, lr}
 80047ee:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80047f0:	f7fd fc46 	bl	8002080 <HAL_GetTick>
 80047f4:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80047f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004864 <FLASH_WaitForLastOperation+0x78>)
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80047fe:	d006      	beq.n	800480e <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004800:	f7fd fc3e 	bl	8002080 <HAL_GetTick>
 8004804:	1b00      	subs	r0, r0, r4
 8004806:	42a8      	cmp	r0, r5
 8004808:	d3f5      	bcc.n	80047f6 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 800480a:	2003      	movs	r0, #3
}
 800480c:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 800480e:	4b15      	ldr	r3, [pc, #84]	@ (8004864 <FLASH_WaitForLastOperation+0x78>)
 8004810:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004812:	f013 0f01 	tst.w	r3, #1
 8004816:	d115      	bne.n	8004844 <FLASH_WaitForLastOperation+0x58>
  error &= FLASH_FLAG_SR_ERRORS;
 8004818:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800481c:	f023 0305 	bic.w	r3, r3, #5
 8004820:	041b      	lsls	r3, r3, #16
 8004822:	0c1b      	lsrs	r3, r3, #16
  __HAL_FLASH_CLEAR_FLAG(error);
 8004824:	b10b      	cbz	r3, 800482a <FLASH_WaitForLastOperation+0x3e>
 8004826:	4a0f      	ldr	r2, [pc, #60]	@ (8004864 <FLASH_WaitForLastOperation+0x78>)
 8004828:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 800482a:	b9ab      	cbnz	r3, 8004858 <FLASH_WaitForLastOperation+0x6c>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800482c:	4b0d      	ldr	r3, [pc, #52]	@ (8004864 <FLASH_WaitForLastOperation+0x78>)
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8004834:	d014      	beq.n	8004860 <FLASH_WaitForLastOperation+0x74>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004836:	f7fd fc23 	bl	8002080 <HAL_GetTick>
 800483a:	1b00      	subs	r0, r0, r4
 800483c:	42a8      	cmp	r0, r5
 800483e:	d3f5      	bcc.n	800482c <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8004840:	2003      	movs	r0, #3
 8004842:	e7e3      	b.n	800480c <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004844:	4a07      	ldr	r2, [pc, #28]	@ (8004864 <FLASH_WaitForLastOperation+0x78>)
 8004846:	2101      	movs	r1, #1
 8004848:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 800484a:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800484e:	f023 0305 	bic.w	r3, r3, #5
 8004852:	041b      	lsls	r3, r3, #16
 8004854:	0c1b      	lsrs	r3, r3, #16
  __HAL_FLASH_CLEAR_FLAG(error);
 8004856:	e7e5      	b.n	8004824 <FLASH_WaitForLastOperation+0x38>
    pFlash.ErrorCode = error;
 8004858:	4a03      	ldr	r2, [pc, #12]	@ (8004868 <FLASH_WaitForLastOperation+0x7c>)
 800485a:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 800485c:	2001      	movs	r0, #1
 800485e:	e7d5      	b.n	800480c <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8004860:	2000      	movs	r0, #0
 8004862:	e7d3      	b.n	800480c <FLASH_WaitForLastOperation+0x20>
 8004864:	58004000 	.word	0x58004000
 8004868:	20000694 	.word	0x20000694

0800486c <HAL_FLASH_Program>:
{
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8004870:	4b15      	ldr	r3, [pc, #84]	@ (80048c8 <HAL_FLASH_Program+0x5c>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d025      	beq.n	80048c4 <HAL_FLASH_Program+0x58>
 8004878:	4604      	mov	r4, r0
 800487a:	460d      	mov	r5, r1
 800487c:	4616      	mov	r6, r2
 800487e:	4b12      	ldr	r3, [pc, #72]	@ (80048c8 <HAL_FLASH_Program+0x5c>)
 8004880:	2201      	movs	r2, #1
 8004882:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004884:	2200      	movs	r2, #0
 8004886:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004888:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800488c:	f7ff ffae 	bl	80047ec <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004890:	b970      	cbnz	r0, 80048b0 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004892:	2c01      	cmp	r4, #1
 8004894:	d010      	beq.n	80048b8 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004896:	4631      	mov	r1, r6
 8004898:	4628      	mov	r0, r5
 800489a:	f7ff ff65 	bl	8004768 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800489e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80048a2:	f7ff ffa3 	bl	80047ec <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80048a6:	4a09      	ldr	r2, [pc, #36]	@ (80048cc <HAL_FLASH_Program+0x60>)
 80048a8:	6953      	ldr	r3, [r2, #20]
 80048aa:	ea23 0304 	bic.w	r3, r3, r4
 80048ae:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 80048b0:	4b05      	ldr	r3, [pc, #20]	@ (80048c8 <HAL_FLASH_Program+0x5c>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
}
 80048b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 80048b8:	4632      	mov	r2, r6
 80048ba:	463b      	mov	r3, r7
 80048bc:	4628      	mov	r0, r5
 80048be:	f7ff ff45 	bl	800474c <FLASH_Program_DoubleWord>
 80048c2:	e7ec      	b.n	800489e <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 80048c4:	2002      	movs	r0, #2
 80048c6:	e7f6      	b.n	80048b6 <HAL_FLASH_Program+0x4a>
 80048c8:	20000694 	.word	0x20000694
 80048cc:	58004000 	.word	0x58004000

080048d0 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80048d0:	4a03      	ldr	r2, [pc, #12]	@ (80048e0 <FLASH_MassErase+0x10>)
 80048d2:	6953      	ldr	r3, [r2, #20]
 80048d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d8:	f043 0304 	orr.w	r3, r3, #4
 80048dc:	6153      	str	r3, [r2, #20]
#endif
}
 80048de:	4770      	bx	lr
 80048e0:	58004000 	.word	0x58004000

080048e4 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80048e4:	4b18      	ldr	r3, [pc, #96]	@ (8004948 <FLASH_FlushCaches+0x64>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d006      	beq.n	80048fe <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80048f0:	4b15      	ldr	r3, [pc, #84]	@ (8004948 <FLASH_FlushCaches+0x64>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d012      	beq.n	8004922 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 80048fc:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80048fe:	4b12      	ldr	r3, [pc, #72]	@ (8004948 <FLASH_FlushCaches+0x64>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004906:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004916:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e7e6      	b.n	80048f0 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004922:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <FLASH_FlushCaches+0x64>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800492a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800493a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004942:	601a      	str	r2, [r3, #0]
}
 8004944:	e7da      	b.n	80048fc <FLASH_FlushCaches+0x18>
 8004946:	bf00      	nop
 8004948:	58004000 	.word	0x58004000

0800494c <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800494c:	4a03      	ldr	r2, [pc, #12]	@ (800495c <FLASH_AcknowledgePageErase+0x10>)
 800494e:	6953      	ldr	r3, [r2, #20]
 8004950:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8004954:	f023 0302 	bic.w	r3, r3, #2
 8004958:	6153      	str	r3, [r2, #20]
#endif
}
 800495a:	4770      	bx	lr
 800495c:	58004000 	.word	0x58004000

08004960 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004960:	4a05      	ldr	r2, [pc, #20]	@ (8004978 <FLASH_PageErase+0x18>)
 8004962:	6953      	ldr	r3, [r2, #20]
 8004964:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8004968:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 800496c:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8004970:	f040 0002 	orr.w	r0, r0, #2
 8004974:	6150      	str	r0, [r2, #20]
}
 8004976:	4770      	bx	lr
 8004978:	58004000 	.word	0x58004000

0800497c <HAL_FLASHEx_Erase>:
{
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800497e:	4b1e      	ldr	r3, [pc, #120]	@ (80049f8 <HAL_FLASHEx_Erase+0x7c>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d035      	beq.n	80049f2 <HAL_FLASHEx_Erase+0x76>
 8004986:	4605      	mov	r5, r0
 8004988:	460f      	mov	r7, r1
 800498a:	4b1b      	ldr	r3, [pc, #108]	@ (80049f8 <HAL_FLASHEx_Erase+0x7c>)
 800498c:	2201      	movs	r2, #1
 800498e:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004990:	2200      	movs	r2, #0
 8004992:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004994:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004998:	f7ff ff28 	bl	80047ec <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800499c:	4606      	mov	r6, r0
 800499e:	bb18      	cbnz	r0, 80049e8 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d013      	beq.n	80049ce <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295
 80049aa:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80049ac:	686c      	ldr	r4, [r5, #4]
 80049ae:	686b      	ldr	r3, [r5, #4]
 80049b0:	68aa      	ldr	r2, [r5, #8]
 80049b2:	4413      	add	r3, r2
 80049b4:	42a3      	cmp	r3, r4
 80049b6:	d913      	bls.n	80049e0 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 80049b8:	4620      	mov	r0, r4
 80049ba:	f7ff ffd1 	bl	8004960 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80049c2:	f7ff ff13 	bl	80047ec <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 80049c6:	4606      	mov	r6, r0
 80049c8:	b948      	cbnz	r0, 80049de <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80049ca:	3401      	adds	r4, #1
 80049cc:	e7ef      	b.n	80049ae <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 80049ce:	f7ff ff7f 	bl	80048d0 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80049d6:	f7ff ff09 	bl	80047ec <FLASH_WaitForLastOperation>
 80049da:	4606      	mov	r6, r0
 80049dc:	e002      	b.n	80049e4 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 80049de:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 80049e0:	f7ff ffb4 	bl	800494c <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 80049e4:	f7ff ff7e 	bl	80048e4 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80049e8:	4b03      	ldr	r3, [pc, #12]	@ (80049f8 <HAL_FLASHEx_Erase+0x7c>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]
}
 80049ee:	4630      	mov	r0, r6
 80049f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80049f2:	2602      	movs	r6, #2
 80049f4:	e7fb      	b.n	80049ee <HAL_FLASHEx_Erase+0x72>
 80049f6:	bf00      	nop
 80049f8:	20000694 	.word	0x20000694

080049fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049fc:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 80049fe:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a00:	e069      	b.n	8004ad6 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a02:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a04:	005e      	lsls	r6, r3, #1
 8004a06:	2403      	movs	r4, #3
 8004a08:	40b4      	lsls	r4, r6
 8004a0a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a0e:	68cc      	ldr	r4, [r1, #12]
 8004a10:	40b4      	lsls	r4, r6
 8004a12:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004a14:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a16:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a18:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a1c:	684c      	ldr	r4, [r1, #4]
 8004a1e:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004a22:	409c      	lsls	r4, r3
 8004a24:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8004a26:	6044      	str	r4, [r0, #4]
 8004a28:	e066      	b.n	8004af8 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a2a:	08dd      	lsrs	r5, r3, #3
 8004a2c:	3508      	adds	r5, #8
 8004a2e:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a32:	f003 0c07 	and.w	ip, r3, #7
 8004a36:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004a3a:	f04f 0e0f 	mov.w	lr, #15
 8004a3e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004a42:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a46:	690c      	ldr	r4, [r1, #16]
 8004a48:	fa04 f40c 	lsl.w	r4, r4, ip
 8004a4c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004a50:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004a54:	e067      	b.n	8004b26 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a56:	2402      	movs	r4, #2
 8004a58:	e000      	b.n	8004a5c <HAL_GPIO_Init+0x60>
 8004a5a:	2400      	movs	r4, #0
 8004a5c:	fa04 f40e 	lsl.w	r4, r4, lr
 8004a60:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a62:	f10c 0c02 	add.w	ip, ip, #2
 8004a66:	4d4b      	ldr	r5, [pc, #300]	@ (8004b94 <HAL_GPIO_Init+0x198>)
 8004a68:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a6c:	4c4a      	ldr	r4, [pc, #296]	@ (8004b98 <HAL_GPIO_Init+0x19c>)
 8004a6e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004a70:	43d4      	mvns	r4, r2
 8004a72:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a76:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004a7a:	f41c 1f80 	tst.w	ip, #1048576	@ 0x100000
 8004a7e:	d001      	beq.n	8004a84 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004a80:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004a84:	4d44      	ldr	r5, [pc, #272]	@ (8004b98 <HAL_GPIO_Init+0x19c>)
 8004a86:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8004a88:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004a8a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a8e:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004a92:	f41c 1f00 	tst.w	ip, #2097152	@ 0x200000
 8004a96:	d001      	beq.n	8004a9c <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8004a98:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8004a9c:	4d3e      	ldr	r5, [pc, #248]	@ (8004b98 <HAL_GPIO_Init+0x19c>)
 8004a9e:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004aa0:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004aa4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004aa8:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004aac:	f41c 3f80 	tst.w	ip, #65536	@ 0x10000
 8004ab0:	d001      	beq.n	8004ab6 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8004ab2:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004ab6:	4d38      	ldr	r5, [pc, #224]	@ (8004b98 <HAL_GPIO_Init+0x19c>)
 8004ab8:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004abc:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004ac0:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ac2:	684e      	ldr	r6, [r1, #4]
 8004ac4:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8004ac8:	d001      	beq.n	8004ace <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8004aca:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004ace:	4a32      	ldr	r2, [pc, #200]	@ (8004b98 <HAL_GPIO_Init+0x19c>)
 8004ad0:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004ad4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ad6:	680a      	ldr	r2, [r1, #0]
 8004ad8:	fa32 f403 	lsrs.w	r4, r2, r3
 8004adc:	d058      	beq.n	8004b90 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ade:	f04f 0c01 	mov.w	ip, #1
 8004ae2:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004ae6:	ea1c 0202 	ands.w	r2, ip, r2
 8004aea:	d0f3      	beq.n	8004ad4 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004aec:	684c      	ldr	r4, [r1, #4]
 8004aee:	f004 0403 	and.w	r4, r4, #3
 8004af2:	3c01      	subs	r4, #1
 8004af4:	2c01      	cmp	r4, #1
 8004af6:	d984      	bls.n	8004a02 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004af8:	684c      	ldr	r4, [r1, #4]
 8004afa:	f004 0403 	and.w	r4, r4, #3
 8004afe:	2c03      	cmp	r4, #3
 8004b00:	d00c      	beq.n	8004b1c <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8004b02:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b04:	005d      	lsls	r5, r3, #1
 8004b06:	f04f 0c03 	mov.w	ip, #3
 8004b0a:	fa0c fc05 	lsl.w	ip, ip, r5
 8004b0e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b12:	688c      	ldr	r4, [r1, #8]
 8004b14:	40ac      	lsls	r4, r5
 8004b16:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004b1a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b1c:	684c      	ldr	r4, [r1, #4]
 8004b1e:	f004 0403 	and.w	r4, r4, #3
 8004b22:	2c02      	cmp	r4, #2
 8004b24:	d081      	beq.n	8004a2a <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8004b26:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b28:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004b2c:	f04f 0c03 	mov.w	ip, #3
 8004b30:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004b34:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b38:	684c      	ldr	r4, [r1, #4]
 8004b3a:	f004 0403 	and.w	r4, r4, #3
 8004b3e:	fa04 f40e 	lsl.w	r4, r4, lr
 8004b42:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004b46:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b48:	684c      	ldr	r4, [r1, #4]
 8004b4a:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8004b4e:	d0c1      	beq.n	8004ad4 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8004b50:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004b54:	f10c 0502 	add.w	r5, ip, #2
 8004b58:	4c0e      	ldr	r4, [pc, #56]	@ (8004b94 <HAL_GPIO_Init+0x198>)
 8004b5a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004b5e:	f003 0e03 	and.w	lr, r3, #3
 8004b62:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004b66:	2407      	movs	r4, #7
 8004b68:	fa04 f40e 	lsl.w	r4, r4, lr
 8004b6c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b70:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8004b74:	f43f af71 	beq.w	8004a5a <HAL_GPIO_Init+0x5e>
 8004b78:	4c08      	ldr	r4, [pc, #32]	@ (8004b9c <HAL_GPIO_Init+0x1a0>)
 8004b7a:	42a0      	cmp	r0, r4
 8004b7c:	d006      	beq.n	8004b8c <HAL_GPIO_Init+0x190>
 8004b7e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004b82:	42a0      	cmp	r0, r4
 8004b84:	f43f af67 	beq.w	8004a56 <HAL_GPIO_Init+0x5a>
 8004b88:	2407      	movs	r4, #7
 8004b8a:	e767      	b.n	8004a5c <HAL_GPIO_Init+0x60>
 8004b8c:	2401      	movs	r4, #1
 8004b8e:	e765      	b.n	8004a5c <HAL_GPIO_Init+0x60>
  }
}
 8004b90:	bd70      	pop	{r4, r5, r6, pc}
 8004b92:	bf00      	nop
 8004b94:	40010000 	.word	0x40010000
 8004b98:	58000800 	.word	0x58000800
 8004b9c:	48000400 	.word	0x48000400

08004ba0 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8004ba0:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004ba2:	fa31 f203 	lsrs.w	r2, r1, r3
 8004ba6:	d071      	beq.n	8004c8c <HAL_GPIO_DeInit+0xec>
{
 8004ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004baa:	e02e      	b.n	8004c0a <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004bac:	2502      	movs	r5, #2
 8004bae:	e000      	b.n	8004bb2 <HAL_GPIO_DeInit+0x12>
 8004bb0:	2500      	movs	r5, #0
 8004bb2:	fa05 f50c 	lsl.w	r5, r5, ip
 8004bb6:	42a5      	cmp	r5, r4
 8004bb8:	d049      	beq.n	8004c4e <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004bba:	6804      	ldr	r4, [r0, #0]
 8004bbc:	005d      	lsls	r5, r3, #1
 8004bbe:	f04f 0c03 	mov.w	ip, #3
 8004bc2:	fa0c fc05 	lsl.w	ip, ip, r5
 8004bc6:	ea44 040c 	orr.w	r4, r4, ip
 8004bca:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004bcc:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004bd0:	f10e 0e08 	add.w	lr, lr, #8
 8004bd4:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8004bd8:	f003 0607 	and.w	r6, r3, #7
 8004bdc:	00b6      	lsls	r6, r6, #2
 8004bde:	250f      	movs	r5, #15
 8004be0:	40b5      	lsls	r5, r6
 8004be2:	ea24 0405 	bic.w	r4, r4, r5
 8004be6:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bea:	6884      	ldr	r4, [r0, #8]
 8004bec:	ea24 040c 	bic.w	r4, r4, ip
 8004bf0:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bf2:	6844      	ldr	r4, [r0, #4]
 8004bf4:	ea24 0202 	bic.w	r2, r4, r2
 8004bf8:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bfa:	68c2      	ldr	r2, [r0, #12]
 8004bfc:	ea22 020c 	bic.w	r2, r2, ip
 8004c00:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8004c02:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004c04:	fa31 f203 	lsrs.w	r2, r1, r3
 8004c08:	d03f      	beq.n	8004c8a <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8004c0e:	ea12 0701 	ands.w	r7, r2, r1
 8004c12:	d0f6      	beq.n	8004c02 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004c14:	089e      	lsrs	r6, r3, #2
 8004c16:	1cb5      	adds	r5, r6, #2
 8004c18:	4c1d      	ldr	r4, [pc, #116]	@ (8004c90 <HAL_GPIO_DeInit+0xf0>)
 8004c1a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004c1e:	f003 0c03 	and.w	ip, r3, #3
 8004c22:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004c26:	f04f 0e07 	mov.w	lr, #7
 8004c2a:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004c2e:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004c32:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8004c36:	d0bb      	beq.n	8004bb0 <HAL_GPIO_DeInit+0x10>
 8004c38:	4d16      	ldr	r5, [pc, #88]	@ (8004c94 <HAL_GPIO_DeInit+0xf4>)
 8004c3a:	42a8      	cmp	r0, r5
 8004c3c:	d005      	beq.n	8004c4a <HAL_GPIO_DeInit+0xaa>
 8004c3e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004c42:	42a8      	cmp	r0, r5
 8004c44:	d0b2      	beq.n	8004bac <HAL_GPIO_DeInit+0xc>
 8004c46:	2507      	movs	r5, #7
 8004c48:	e7b3      	b.n	8004bb2 <HAL_GPIO_DeInit+0x12>
 8004c4a:	2501      	movs	r5, #1
 8004c4c:	e7b1      	b.n	8004bb2 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8004c4e:	4c12      	ldr	r4, [pc, #72]	@ (8004c98 <HAL_GPIO_DeInit+0xf8>)
 8004c50:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 8004c54:	ea25 0507 	bic.w	r5, r5, r7
 8004c58:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004c5c:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 8004c60:	ea25 0507 	bic.w	r5, r5, r7
 8004c64:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8004c68:	6825      	ldr	r5, [r4, #0]
 8004c6a:	ea25 0507 	bic.w	r5, r5, r7
 8004c6e:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004c70:	6865      	ldr	r5, [r4, #4]
 8004c72:	ea25 0507 	bic.w	r5, r5, r7
 8004c76:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004c78:	4d05      	ldr	r5, [pc, #20]	@ (8004c90 <HAL_GPIO_DeInit+0xf0>)
 8004c7a:	3602      	adds	r6, #2
 8004c7c:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8004c80:	ea24 040e 	bic.w	r4, r4, lr
 8004c84:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8004c88:	e797      	b.n	8004bba <HAL_GPIO_DeInit+0x1a>
  }
}
 8004c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40010000 	.word	0x40010000
 8004c94:	48000400 	.word	0x48000400
 8004c98:	58000800 	.word	0x58000800

08004c9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c9c:	b10a      	cbz	r2, 8004ca2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c9e:	6181      	str	r1, [r0, #24]
 8004ca0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ca2:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ca6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ca8:	ea01 0203 	and.w	r2, r1, r3
 8004cac:	ea21 0103 	bic.w	r1, r1, r3
 8004cb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004cb4:	6181      	str	r1, [r0, #24]
}
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cb8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004cba:	4b05      	ldr	r3, [pc, #20]	@ (8004cd0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	4203      	tst	r3, r0
 8004cc0:	d100      	bne.n	8004cc4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004cc2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cc4:	4b02      	ldr	r3, [pc, #8]	@ (8004cd0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004cc6:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cc8:	f7fe fb5a 	bl	8003380 <HAL_GPIO_EXTI_Callback>
}
 8004ccc:	e7f9      	b.n	8004cc2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004cce:	bf00      	nop
 8004cd0:	58000800 	.word	0x58000800

08004cd4 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cd4:	4a02      	ldr	r2, [pc, #8]	@ (8004ce0 <HAL_PWR_EnableBkUpAccess+0xc>)
 8004cd6:	6813      	ldr	r3, [r2, #0]
 8004cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cdc:	6013      	str	r3, [r2, #0]
}
 8004cde:	4770      	bx	lr
 8004ce0:	58000400 	.word	0x58000400

08004ce4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004ce8:	b9a0      	cbnz	r0, 8004d14 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004cea:	4b0f      	ldr	r3, [pc, #60]	@ (8004d28 <HAL_PWR_EnterSLEEPMode+0x44>)
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8004cf2:	d10a      	bne.n	8004d0a <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8004d2c <HAL_PWR_EnterSLEEPMode+0x48>)
 8004cf6:	6913      	ldr	r3, [r2, #16]
 8004cf8:	f023 0304 	bic.w	r3, r3, #4
 8004cfc:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004cfe:	2c01      	cmp	r4, #1
 8004d00:	d010      	beq.n	8004d24 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004d02:	bf40      	sev
    __WFE();
 8004d04:	bf20      	wfe
    __WFE();
 8004d06:	bf20      	wfe
  }
}
 8004d08:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004d0a:	f000 f821 	bl	8004d50 <HAL_PWREx_DisableLowPowerRunMode>
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d0f0      	beq.n	8004cf4 <HAL_PWR_EnterSLEEPMode+0x10>
 8004d12:	e7f9      	b.n	8004d08 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004d14:	4b04      	ldr	r3, [pc, #16]	@ (8004d28 <HAL_PWR_EnterSLEEPMode+0x44>)
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8004d1c:	d1ea      	bne.n	8004cf4 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8004d1e:	f000 f80f 	bl	8004d40 <HAL_PWREx_EnableLowPowerRunMode>
 8004d22:	e7e7      	b.n	8004cf4 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8004d24:	bf30      	wfi
 8004d26:	e7ef      	b.n	8004d08 <HAL_PWR_EnterSLEEPMode+0x24>
 8004d28:	58000400 	.word	0x58000400
 8004d2c:	e000ed00 	.word	0xe000ed00

08004d30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8004d30:	4b02      	ldr	r3, [pc, #8]	@ (8004d3c <HAL_PWREx_GetVoltageRange+0xc>)
 8004d32:	6818      	ldr	r0, [r3, #0]
}
 8004d34:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	58000400 	.word	0x58000400

08004d40 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004d40:	4a02      	ldr	r2, [pc, #8]	@ (8004d4c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8004d42:	6813      	ldr	r3, [r2, #0]
 8004d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d48:	6013      	str	r3, [r2, #0]
}
 8004d4a:	4770      	bx	lr
 8004d4c:	58000400 	.word	0x58000400

08004d50 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004d50:	4a0f      	ldr	r2, [pc, #60]	@ (8004d90 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004d52:	6813      	ldr	r3, [r2, #0]
 8004d54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d58:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d94 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2232      	movs	r2, #50	@ 0x32
 8004d60:	fb02 f303 	mul.w	r3, r2, r3
 8004d64:	4a0c      	ldr	r2, [pc, #48]	@ (8004d98 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8004d66:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6a:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004d6c:	e000      	b.n	8004d70 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8004d6e:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004d70:	4a07      	ldr	r2, [pc, #28]	@ (8004d90 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004d72:	6952      	ldr	r2, [r2, #20]
 8004d74:	f412 7f00 	tst.w	r2, #512	@ 0x200
 8004d78:	d001      	beq.n	8004d7e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f7      	bne.n	8004d6e <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004d7e:	4b04      	ldr	r3, [pc, #16]	@ (8004d90 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8004d86:	d101      	bne.n	8004d8c <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8004d88:	2000      	movs	r0, #0
 8004d8a:	4770      	bx	lr
    return HAL_TIMEOUT;
 8004d8c:	2003      	movs	r0, #3
}
 8004d8e:	4770      	bx	lr
 8004d90:	58000400 	.word	0x58000400
 8004d94:	20000078 	.word	0x20000078
 8004d98:	431bde83 	.word	0x431bde83

08004d9c <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd0 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8004d9e:	6813      	ldr	r3, [r2, #0]
 8004da0:	f023 0307 	bic.w	r3, r3, #7
 8004da4:	f043 0302 	orr.w	r3, r3, #2
 8004da8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004daa:	4a0a      	ldr	r2, [pc, #40]	@ (8004dd4 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8004dac:	6913      	ldr	r3, [r2, #16]
 8004dae:	f043 0304 	orr.w	r3, r3, #4
 8004db2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004db4:	2801      	cmp	r0, #1
 8004db6:	d008      	beq.n	8004dca <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004db8:	bf40      	sev
    __WFE();
 8004dba:	bf20      	wfe
    __WFE();
 8004dbc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004dbe:	4a05      	ldr	r2, [pc, #20]	@ (8004dd4 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8004dc0:	6913      	ldr	r3, [r2, #16]
 8004dc2:	f023 0304 	bic.w	r3, r3, #4
 8004dc6:	6113      	str	r3, [r2, #16]
}
 8004dc8:	4770      	bx	lr
    __WFI();
 8004dca:	bf30      	wfi
 8004dcc:	e7f7      	b.n	8004dbe <HAL_PWREx_EnterSTOP2Mode+0x22>
 8004dce:	bf00      	nop
 8004dd0:	58000400 	.word	0x58000400
 8004dd4:	e000ed00 	.word	0xe000ed00

08004dd8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004dd8:	b530      	push	{r4, r5, lr}
 8004dda:	b089      	sub	sp, #36	@ 0x24
 8004ddc:	4604      	mov	r4, r0
 8004dde:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004de0:	4b2a      	ldr	r3, [pc, #168]	@ (8004e8c <RCC_SetFlashLatency+0xb4>)
 8004de2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004de6:	9006      	str	r0, [sp, #24]
 8004de8:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004dec:	f103 0208 	add.w	r2, r3, #8
 8004df0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004df4:	9004      	str	r0, [sp, #16]
 8004df6:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004dfa:	ad01      	add	r5, sp, #4
 8004dfc:	3310      	adds	r3, #16
 8004dfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e02:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e06:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 8004e0a:	d007      	beq.n	8004e1c <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	e014      	b.n	8004e3a <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8004e10:	aa08      	add	r2, sp, #32
 8004e12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004e16:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004e1a:	e01e      	b.n	8004e5a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d808      	bhi.n	8004e34 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004e22:	aa08      	add	r2, sp, #32
 8004e24:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004e28:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8004e2c:	42a2      	cmp	r2, r4
 8004e2e:	d2ef      	bcs.n	8004e10 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004e30:	3301      	adds	r3, #1
 8004e32:	e7f4      	b.n	8004e1e <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004e34:	2500      	movs	r5, #0
 8004e36:	e010      	b.n	8004e5a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e38:	3301      	adds	r3, #1
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d80c      	bhi.n	8004e58 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004e3e:	aa08      	add	r2, sp, #32
 8004e40:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004e44:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8004e48:	42a2      	cmp	r2, r4
 8004e4a:	d3f5      	bcc.n	8004e38 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e4c:	aa08      	add	r2, sp, #32
 8004e4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004e52:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004e56:	e000      	b.n	8004e5a <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004e58:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8004e90 <RCC_SetFlashLatency+0xb8>)
 8004e5c:	6813      	ldr	r3, [r2, #0]
 8004e5e:	f023 0307 	bic.w	r3, r3, #7
 8004e62:	432b      	orrs	r3, r5
 8004e64:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e66:	f7fd f90b 	bl	8002080 <HAL_GetTick>
 8004e6a:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e6c:	4b08      	ldr	r3, [pc, #32]	@ (8004e90 <RCC_SetFlashLatency+0xb8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	42ab      	cmp	r3, r5
 8004e76:	d006      	beq.n	8004e86 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e78:	f7fd f902 	bl	8002080 <HAL_GetTick>
 8004e7c:	1b00      	subs	r0, r0, r4
 8004e7e:	2802      	cmp	r0, #2
 8004e80:	d9f4      	bls.n	8004e6c <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8004e82:	2003      	movs	r0, #3
 8004e84:	e000      	b.n	8004e88 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8004e86:	2000      	movs	r0, #0
}
 8004e88:	b009      	add	sp, #36	@ 0x24
 8004e8a:	bd30      	pop	{r4, r5, pc}
 8004e8c:	08012cb8 	.word	0x08012cb8
 8004e90:	58004000 	.word	0x58004000

08004e94 <RCC_SetFlashLatencyFromMSIRange>:
{
 8004e94:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004e96:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8004e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004ecc <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8004e9c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ea4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	4a08      	ldr	r2, [pc, #32]	@ (8004ed0 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8004eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb2:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004eb6:	f7ff ff3b 	bl	8004d30 <HAL_PWREx_GetVoltageRange>
 8004eba:	4601      	mov	r1, r0
 8004ebc:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8004ebe:	fba3 3404 	umull	r3, r4, r3, r4
 8004ec2:	0ca0      	lsrs	r0, r4, #18
 8004ec4:	f7ff ff88 	bl	8004dd8 <RCC_SetFlashLatency>
}
 8004ec8:	bd10      	pop	{r4, pc}
 8004eca:	bf00      	nop
 8004ecc:	08013664 	.word	0x08013664
 8004ed0:	080136c4 	.word	0x080136c4
 8004ed4:	431bde83 	.word	0x431bde83

08004ed8 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004edc:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004ee4:	f011 010c 	ands.w	r1, r1, #12
 8004ee8:	d00a      	beq.n	8004f00 <HAL_RCC_GetSysClockFreq+0x28>
 8004eea:	290c      	cmp	r1, #12
 8004eec:	d006      	beq.n	8004efc <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004eee:	2904      	cmp	r1, #4
 8004ef0:	d047      	beq.n	8004f82 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ef2:	2908      	cmp	r1, #8
 8004ef4:	d03b      	beq.n	8004f6e <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8004ef6:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8004ef8:	4610      	mov	r0, r2
 8004efa:	e026      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d1f6      	bne.n	8004eee <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f013 0308 	ands.w	r3, r3, #8
 8004f0a:	d00d      	beq.n	8004f28 <HAL_RCC_GetSysClockFreq+0x50>
 8004f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f013 0308 	ands.w	r3, r3, #8
 8004f16:	d124      	bne.n	8004f62 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004f18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f1c:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004f20:	4a2e      	ldr	r2, [pc, #184]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x104>)
 8004f22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f26:	e00e      	b.n	8004f46 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004f28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	f012 0f08 	tst.w	r2, #8
 8004f32:	d112      	bne.n	8004f5a <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f3c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004f40:	4a26      	ldr	r2, [pc, #152]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x104>)
 8004f42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f46:	b1d1      	cbz	r1, 8004f7e <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8004f48:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f54:	2b0c      	cmp	r3, #12
 8004f56:	d01a      	beq.n	8004f8e <HAL_RCC_GetSysClockFreq+0xb6>
}
 8004f58:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004f5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	e7ee      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x68>
 8004f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f66:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004f68:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004f6c:	e7d8      	b.n	8004f20 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	f412 1280 	ands.w	r2, r2, #1048576	@ 0x100000
 8004f78:	d106      	bne.n	8004f88 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8004f7a:	4819      	ldr	r0, [pc, #100]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f7c:	e7e5      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8004f7e:	4610      	mov	r0, r2
 8004f80:	e7e3      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004f82:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8004f84:	4817      	ldr	r0, [pc, #92]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f86:	e7e0      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004f88:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8004f8a:	4816      	ldr	r0, [pc, #88]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f8c:	e7dd      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004f8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d009      	beq.n	8004fb0 <HAL_RCC_GetSysClockFreq+0xd8>
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d108      	bne.n	8004fb2 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004fa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8004faa:	d115      	bne.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004fac:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fae:	e000      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8004fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004fb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fb6:	68cb      	ldr	r3, [r1, #12]
 8004fb8:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004fbc:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004fc0:	68cb      	ldr	r3, [r1, #12]
 8004fc2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004fcc:	68c8      	ldr	r0, [r1, #12]
 8004fce:	0f40      	lsrs	r0, r0, #29
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8004fd6:	e7bf      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8004fd8:	4a02      	ldr	r2, [pc, #8]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fda:	e7ea      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0xda>
 8004fdc:	08013664 	.word	0x08013664
 8004fe0:	01e84800 	.word	0x01e84800
 8004fe4:	00f42400 	.word	0x00f42400

08004fe8 <HAL_RCC_GetHCLKFreq>:
{
 8004fe8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004fea:	f7ff ff75 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ff8:	4a02      	ldr	r2, [pc, #8]	@ (8005004 <HAL_RCC_GetHCLKFreq+0x1c>)
 8004ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004ffe:	fbb0 f0f3 	udiv	r0, r0, r3
 8005002:	bd08      	pop	{r3, pc}
 8005004:	080136c4 	.word	0x080136c4

08005008 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005008:	2800      	cmp	r0, #0
 800500a:	f000 8311 	beq.w	8005630 <HAL_RCC_OscConfig+0x628>
{
 800500e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005010:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005016:	689d      	ldr	r5, [r3, #8]
 8005018:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800501c:	68de      	ldr	r6, [r3, #12]
 800501e:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005022:	6803      	ldr	r3, [r0, #0]
 8005024:	f013 0f20 	tst.w	r3, #32
 8005028:	d02a      	beq.n	8005080 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800502a:	2d00      	cmp	r5, #0
 800502c:	d065      	beq.n	80050fa <HAL_RCC_OscConfig+0xf2>
 800502e:	2d0c      	cmp	r5, #12
 8005030:	d061      	beq.n	80050f6 <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005032:	6a23      	ldr	r3, [r4, #32]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 80bf 	beq.w	80051b8 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800503a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800503e:	6813      	ldr	r3, [r2, #0]
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005046:	f7fd f81b 	bl	8002080 <HAL_GetTick>
 800504a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800504c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f013 0f02 	tst.w	r3, #2
 8005056:	f000 80a7 	beq.w	80051a8 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800505a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	f042 0208 	orr.w	r2, r2, #8
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800506c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800506e:	430a      	orrs	r2, r1
 8005070:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005072:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800507a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800507e:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	f013 0f01 	tst.w	r3, #1
 8005086:	f000 80b5 	beq.w	80051f4 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800508a:	2d08      	cmp	r5, #8
 800508c:	f000 80ae 	beq.w	80051ec <HAL_RCC_OscConfig+0x1e4>
 8005090:	2d0c      	cmp	r5, #12
 8005092:	f000 80a8 	beq.w	80051e6 <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005096:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800509a:	6813      	ldr	r3, [r2, #0]
 800509c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80050a0:	68a1      	ldr	r1, [r4, #8]
 80050a2:	430b      	orrs	r3, r1
 80050a4:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050a6:	6863      	ldr	r3, [r4, #4]
 80050a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ac:	f000 80c4 	beq.w	8005238 <HAL_RCC_OscConfig+0x230>
 80050b0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80050b4:	f000 80c5 	beq.w	8005242 <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80050b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80050c2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80050ca:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050cc:	6863      	ldr	r3, [r4, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 80c2 	beq.w	8005258 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 80050d4:	f7fc ffd4 	bl	8002080 <HAL_GetTick>
 80050d8:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80050da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80050e4:	f040 8086 	bne.w	80051f4 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e8:	f7fc ffca 	bl	8002080 <HAL_GetTick>
 80050ec:	1bc0      	subs	r0, r0, r7
 80050ee:	2864      	cmp	r0, #100	@ 0x64
 80050f0:	d9f3      	bls.n	80050da <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 80050f2:	2003      	movs	r0, #3
 80050f4:	e2a9      	b.n	800564a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80050f6:	2e01      	cmp	r6, #1
 80050f8:	d19b      	bne.n	8005032 <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80050fa:	6a23      	ldr	r3, [r4, #32]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 8299 	beq.w	8005634 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005102:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f013 0f08 	tst.w	r3, #8
 800510e:	d029      	beq.n	8005164 <HAL_RCC_OscConfig+0x15c>
 8005110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800511a:	4298      	cmp	r0, r3
 800511c:	d92a      	bls.n	8005174 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800511e:	f7ff feb9 	bl	8004e94 <RCC_SetFlashLatencyFromMSIRange>
 8005122:	2800      	cmp	r0, #0
 8005124:	f040 8288 	bne.w	8005638 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	f042 0208 	orr.w	r2, r2, #8
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800513a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800513c:	430a      	orrs	r2, r1
 800513e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005140:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005148:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800514c:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800514e:	f7ff ff4b 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 8005152:	4bba      	ldr	r3, [pc, #744]	@ (800543c <HAL_RCC_OscConfig+0x434>)
 8005154:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005156:	4bba      	ldr	r3, [pc, #744]	@ (8005440 <HAL_RCC_OscConfig+0x438>)
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	f7fc ff8f 	bl	800207c <HAL_InitTick>
        if (status != HAL_OK)
 800515e:	2800      	cmp	r0, #0
 8005160:	d08e      	beq.n	8005080 <HAL_RCC_OscConfig+0x78>
 8005162:	e272      	b.n	800564a <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005168:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005172:	e7d2      	b.n	800511a <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	f042 0208 	orr.w	r2, r2, #8
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005186:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005188:	430a      	orrs	r2, r1
 800518a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800518c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005194:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005198:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800519a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800519c:	f7ff fe7a 	bl	8004e94 <RCC_SetFlashLatencyFromMSIRange>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d0d4      	beq.n	800514e <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 80051a4:	2001      	movs	r0, #1
 80051a6:	e250      	b.n	800564a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051a8:	f7fc ff6a 	bl	8002080 <HAL_GetTick>
 80051ac:	1bc0      	subs	r0, r0, r7
 80051ae:	2802      	cmp	r0, #2
 80051b0:	f67f af4c 	bls.w	800504c <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 80051b4:	2003      	movs	r0, #3
 80051b6:	e248      	b.n	800564a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80051b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051bc:	6813      	ldr	r3, [r2, #0]
 80051be:	f023 0301 	bic.w	r3, r3, #1
 80051c2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80051c4:	f7fc ff5c 	bl	8002080 <HAL_GetTick>
 80051c8:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80051ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f013 0f02 	tst.w	r3, #2
 80051d4:	f43f af54 	beq.w	8005080 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051d8:	f7fc ff52 	bl	8002080 <HAL_GetTick>
 80051dc:	1bc0      	subs	r0, r0, r7
 80051de:	2802      	cmp	r0, #2
 80051e0:	d9f3      	bls.n	80051ca <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 80051e2:	2003      	movs	r0, #3
 80051e4:	e231      	b.n	800564a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80051e6:	2e03      	cmp	r6, #3
 80051e8:	f47f af55 	bne.w	8005096 <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80051ec:	6863      	ldr	r3, [r4, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 8224 	beq.w	800563c <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	f013 0f02 	tst.w	r3, #2
 80051fa:	d056      	beq.n	80052aa <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80051fc:	2d04      	cmp	r5, #4
 80051fe:	d03d      	beq.n	800527c <HAL_RCC_OscConfig+0x274>
 8005200:	2d0c      	cmp	r5, #12
 8005202:	d039      	beq.n	8005278 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005204:	6923      	ldr	r3, [r4, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 808a 	beq.w	8005320 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800520c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005210:	6813      	ldr	r3, [r2, #0]
 8005212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005216:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005218:	f7fc ff32 	bl	8002080 <HAL_GetTick>
 800521c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800521e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005228:	d136      	bne.n	8005298 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800522a:	f7fc ff29 	bl	8002080 <HAL_GetTick>
 800522e:	1b80      	subs	r0, r0, r6
 8005230:	2802      	cmp	r0, #2
 8005232:	d9f4      	bls.n	800521e <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8005234:	2003      	movs	r0, #3
 8005236:	e208      	b.n	800564a <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005238:	6813      	ldr	r3, [r2, #0]
 800523a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800523e:	6013      	str	r3, [r2, #0]
}
 8005240:	e744      	b.n	80050cc <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800524c:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005254:	601a      	str	r2, [r3, #0]
}
 8005256:	e739      	b.n	80050cc <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8005258:	f7fc ff12 	bl	8002080 <HAL_GetTick>
 800525c:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800525e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005268:	d0c4      	beq.n	80051f4 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800526a:	f7fc ff09 	bl	8002080 <HAL_GetTick>
 800526e:	1bc0      	subs	r0, r0, r7
 8005270:	2864      	cmp	r0, #100	@ 0x64
 8005272:	d9f4      	bls.n	800525e <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8005274:	2003      	movs	r0, #3
 8005276:	e1e8      	b.n	800564a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005278:	2e02      	cmp	r6, #2
 800527a:	d1c3      	bne.n	8005204 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800527c:	6923      	ldr	r3, [r4, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 81de 	beq.w	8005640 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005284:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005286:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800528a:	6853      	ldr	r3, [r2, #4]
 800528c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005290:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005294:	6053      	str	r3, [r2, #4]
}
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005298:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800529a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800529e:	6853      	ldr	r3, [r2, #4]
 80052a0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80052a4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80052a8:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	f013 0f08 	tst.w	r3, #8
 80052b0:	d07e      	beq.n	80053b0 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052b2:	69a3      	ldr	r3, [r4, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d062      	beq.n	800537e <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 80052b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80052c0:	69e1      	ldr	r1, [r4, #28]
 80052c2:	f003 0210 	and.w	r2, r3, #16
 80052c6:	4291      	cmp	r1, r2
 80052c8:	d011      	beq.n	80052ee <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80052ca:	f003 0203 	and.w	r2, r3, #3
 80052ce:	2a02      	cmp	r2, #2
 80052d0:	f000 81b8 	beq.w	8005644 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80052d4:	f013 0f01 	tst.w	r3, #1
 80052d8:	d138      	bne.n	800534c <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80052da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052de:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80052e2:	f023 0310 	bic.w	r3, r3, #16
 80052e6:	69e1      	ldr	r1, [r4, #28]
 80052e8:	430b      	orrs	r3, r1
 80052ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80052ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052f2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80052f6:	f043 0301 	orr.w	r3, r3, #1
 80052fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80052fe:	f7fc febf 	bl	8002080 <HAL_GetTick>
 8005302:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005308:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800530c:	f013 0f02 	tst.w	r3, #2
 8005310:	d14e      	bne.n	80053b0 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005312:	f7fc feb5 	bl	8002080 <HAL_GetTick>
 8005316:	1b80      	subs	r0, r0, r6
 8005318:	2811      	cmp	r0, #17
 800531a:	d9f3      	bls.n	8005304 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 800531c:	2003      	movs	r0, #3
 800531e:	e194      	b.n	800564a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005320:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005324:	6813      	ldr	r3, [r2, #0]
 8005326:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800532a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800532c:	f7fc fea8 	bl	8002080 <HAL_GetTick>
 8005330:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800533c:	d0b5      	beq.n	80052aa <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800533e:	f7fc fe9f 	bl	8002080 <HAL_GetTick>
 8005342:	1b80      	subs	r0, r0, r6
 8005344:	2802      	cmp	r0, #2
 8005346:	d9f4      	bls.n	8005332 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8005348:	2003      	movs	r0, #3
 800534a:	e17e      	b.n	800564a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800534c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005350:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
          tickstart = HAL_GetTick();
 800535c:	f7fc fe90 	bl	8002080 <HAL_GetTick>
 8005360:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800536a:	f013 0f02 	tst.w	r3, #2
 800536e:	d0b4      	beq.n	80052da <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005370:	f7fc fe86 	bl	8002080 <HAL_GetTick>
 8005374:	1b80      	subs	r0, r0, r6
 8005376:	2811      	cmp	r0, #17
 8005378:	d9f3      	bls.n	8005362 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 800537a:	2003      	movs	r0, #3
 800537c:	e165      	b.n	800564a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800537e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005382:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005386:	f023 0301 	bic.w	r3, r3, #1
 800538a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800538e:	f7fc fe77 	bl	8002080 <HAL_GetTick>
 8005392:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005398:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800539c:	f013 0f02 	tst.w	r3, #2
 80053a0:	d006      	beq.n	80053b0 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053a2:	f7fc fe6d 	bl	8002080 <HAL_GetTick>
 80053a6:	1b80      	subs	r0, r0, r6
 80053a8:	2811      	cmp	r0, #17
 80053aa:	d9f3      	bls.n	8005394 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 80053ac:	2003      	movs	r0, #3
 80053ae:	e14c      	b.n	800564a <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	f013 0f04 	tst.w	r3, #4
 80053b6:	f000 80b8 	beq.w	800552a <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80053ba:	4b22      	ldr	r3, [pc, #136]	@ (8005444 <HAL_RCC_OscConfig+0x43c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80053c2:	d110      	bne.n	80053e6 <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 80053c4:	f7ff fc86 	bl	8004cd4 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80053c8:	f7fc fe5a 	bl	8002080 <HAL_GetTick>
 80053cc:	4606      	mov	r6, r0
 80053ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005444 <HAL_RCC_OscConfig+0x43c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80053d6:	d106      	bne.n	80053e6 <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d8:	f7fc fe52 	bl	8002080 <HAL_GetTick>
 80053dc:	1b80      	subs	r0, r0, r6
 80053de:	2802      	cmp	r0, #2
 80053e0:	d9f5      	bls.n	80053ce <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 80053e2:	2003      	movs	r0, #3
 80053e4:	e131      	b.n	800564a <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053e6:	68e3      	ldr	r3, [r4, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d068      	beq.n	80054be <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80053ec:	2b85      	cmp	r3, #133	@ 0x85
 80053ee:	d001      	beq.n	80053f4 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80053f0:	2b05      	cmp	r3, #5
 80053f2:	d107      	bne.n	8005404 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80053f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053f8:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80053fc:	f043 0304 	orr.w	r3, r3, #4
 8005400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8005404:	f7fc fe3c 	bl	8002080 <HAL_GetTick>
 8005408:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800540a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800540e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800541a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005422:	f013 0f02 	tst.w	r3, #2
 8005426:	d10f      	bne.n	8005448 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005428:	f7fc fe2a 	bl	8002080 <HAL_GetTick>
 800542c:	1b80      	subs	r0, r0, r6
 800542e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005432:	4298      	cmp	r0, r3
 8005434:	d9f1      	bls.n	800541a <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 8005436:	2003      	movs	r0, #3
 8005438:	e107      	b.n	800564a <HAL_RCC_OscConfig+0x642>
 800543a:	bf00      	nop
 800543c:	20000078 	.word	0x20000078
 8005440:	2000007c 	.word	0x2000007c
 8005444:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005448:	68e3      	ldr	r3, [r4, #12]
 800544a:	2b81      	cmp	r3, #129	@ 0x81
 800544c:	d001      	beq.n	8005452 <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800544e:	2b85      	cmp	r3, #133	@ 0x85
 8005450:	d11a      	bne.n	8005488 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8005452:	f7fc fe15 	bl	8002080 <HAL_GetTick>
 8005456:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005458:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800545c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005468:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005470:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8005474:	d159      	bne.n	800552a <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005476:	f7fc fe03 	bl	8002080 <HAL_GetTick>
 800547a:	1b80      	subs	r0, r0, r6
 800547c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005480:	4298      	cmp	r0, r3
 8005482:	d9f1      	bls.n	8005468 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8005484:	2003      	movs	r0, #3
 8005486:	e0e0      	b.n	800564a <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 8005488:	f7fc fdfa 	bl	8002080 <HAL_GetTick>
 800548c:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800548e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005492:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800549a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800549e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a6:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80054aa:	d03e      	beq.n	800552a <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ac:	f7fc fde8 	bl	8002080 <HAL_GetTick>
 80054b0:	1b80      	subs	r0, r0, r6
 80054b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80054b6:	4298      	cmp	r0, r3
 80054b8:	d9f1      	bls.n	800549e <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 80054ba:	2003      	movs	r0, #3
 80054bc:	e0c5      	b.n	800564a <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80054be:	f7fc fddf 	bl	8002080 <HAL_GetTick>
 80054c2:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80054c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054c8:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80054cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80054d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054dc:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80054e0:	d008      	beq.n	80054f4 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e2:	f7fc fdcd 	bl	8002080 <HAL_GetTick>
 80054e6:	1b80      	subs	r0, r0, r6
 80054e8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80054ec:	4298      	cmp	r0, r3
 80054ee:	d9f1      	bls.n	80054d4 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 80054f0:	2003      	movs	r0, #3
 80054f2:	e0aa      	b.n	800564a <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80054f4:	f7fc fdc4 	bl	8002080 <HAL_GetTick>
 80054f8:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80054fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800550a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005512:	f013 0f02 	tst.w	r3, #2
 8005516:	d008      	beq.n	800552a <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005518:	f7fc fdb2 	bl	8002080 <HAL_GetTick>
 800551c:	1b80      	subs	r0, r0, r6
 800551e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005522:	4298      	cmp	r0, r3
 8005524:	d9f1      	bls.n	800550a <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 8005526:	2003      	movs	r0, #3
 8005528:	e08f      	b.n	800564a <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800552a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 808b 	beq.w	8005648 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005532:	2d0c      	cmp	r5, #12
 8005534:	d060      	beq.n	80055f8 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005536:	2b02      	cmp	r3, #2
 8005538:	d016      	beq.n	8005568 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800553a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800553e:	6813      	ldr	r3, [r2, #0]
 8005540:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005544:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005546:	f7fc fd9b 	bl	8002080 <HAL_GetTick>
 800554a:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800554c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005556:	d148      	bne.n	80055ea <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005558:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800555c:	68d1      	ldr	r1, [r2, #12]
 800555e:	4b41      	ldr	r3, [pc, #260]	@ (8005664 <HAL_RCC_OscConfig+0x65c>)
 8005560:	400b      	ands	r3, r1
 8005562:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8005564:	2000      	movs	r0, #0
 8005566:	e070      	b.n	800564a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005568:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800556c:	6813      	ldr	r3, [r2, #0]
 800556e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005572:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005574:	f7fc fd84 	bl	8002080 <HAL_GetTick>
 8005578:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800557a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005584:	d12a      	bne.n	80055dc <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005586:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800558a:	68d3      	ldr	r3, [r2, #12]
 800558c:	4936      	ldr	r1, [pc, #216]	@ (8005668 <HAL_RCC_OscConfig+0x660>)
 800558e:	4019      	ands	r1, r3
 8005590:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005592:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8005594:	4303      	orrs	r3, r0
 8005596:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005598:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800559c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800559e:	4303      	orrs	r3, r0
 80055a0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80055a2:	4303      	orrs	r3, r0
 80055a4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80055a6:	4303      	orrs	r3, r0
 80055a8:	4319      	orrs	r1, r3
 80055aa:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80055ac:	6813      	ldr	r3, [r2, #0]
 80055ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055b2:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055b4:	68d3      	ldr	r3, [r2, #12]
 80055b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ba:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80055bc:	f7fc fd60 	bl	8002080 <HAL_GetTick>
 80055c0:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80055c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80055cc:	d13e      	bne.n	800564c <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ce:	f7fc fd57 	bl	8002080 <HAL_GetTick>
 80055d2:	1b00      	subs	r0, r0, r4
 80055d4:	280a      	cmp	r0, #10
 80055d6:	d9f4      	bls.n	80055c2 <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 80055d8:	2003      	movs	r0, #3
 80055da:	e036      	b.n	800564a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055dc:	f7fc fd50 	bl	8002080 <HAL_GetTick>
 80055e0:	1b40      	subs	r0, r0, r5
 80055e2:	280a      	cmp	r0, #10
 80055e4:	d9c9      	bls.n	800557a <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 80055e6:	2003      	movs	r0, #3
 80055e8:	e02f      	b.n	800564a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ea:	f7fc fd49 	bl	8002080 <HAL_GetTick>
 80055ee:	1b00      	subs	r0, r0, r4
 80055f0:	280a      	cmp	r0, #10
 80055f2:	d9ab      	bls.n	800554c <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 80055f4:	2003      	movs	r0, #3
 80055f6:	e028      	b.n	800564a <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d029      	beq.n	8005650 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 80055fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005600:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005602:	f003 0103 	and.w	r1, r3, #3
 8005606:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005608:	4291      	cmp	r1, r2
 800560a:	d123      	bne.n	8005654 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800560c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005610:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005612:	428a      	cmp	r2, r1
 8005614:	d120      	bne.n	8005658 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005616:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800561a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800561c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005620:	d11c      	bne.n	800565c <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005622:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8005626:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005628:	4293      	cmp	r3, r2
 800562a:	d119      	bne.n	8005660 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 800562c:	2000      	movs	r0, #0
 800562e:	e00c      	b.n	800564a <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8005630:	2001      	movs	r0, #1
}
 8005632:	4770      	bx	lr
        return HAL_ERROR;
 8005634:	2001      	movs	r0, #1
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8005638:	2001      	movs	r0, #1
 800563a:	e006      	b.n	800564a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 800563c:	2001      	movs	r0, #1
 800563e:	e004      	b.n	800564a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005640:	2001      	movs	r0, #1
 8005642:	e002      	b.n	800564a <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8005644:	2001      	movs	r0, #1
 8005646:	e000      	b.n	800564a <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8005648:	2000      	movs	r0, #0
}
 800564a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800564c:	2000      	movs	r0, #0
 800564e:	e7fc      	b.n	800564a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005650:	2001      	movs	r0, #1
 8005652:	e7fa      	b.n	800564a <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8005654:	2001      	movs	r0, #1
 8005656:	e7f8      	b.n	800564a <HAL_RCC_OscConfig+0x642>
 8005658:	2001      	movs	r0, #1
 800565a:	e7f6      	b.n	800564a <HAL_RCC_OscConfig+0x642>
 800565c:	2001      	movs	r0, #1
 800565e:	e7f4      	b.n	800564a <HAL_RCC_OscConfig+0x642>
 8005660:	2001      	movs	r0, #1
 8005662:	e7f2      	b.n	800564a <HAL_RCC_OscConfig+0x642>
 8005664:	eefefffc 	.word	0xeefefffc
 8005668:	11c1808c 	.word	0x11c1808c

0800566c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800566c:	2800      	cmp	r0, #0
 800566e:	f000 8127 	beq.w	80058c0 <HAL_RCC_ClockConfig+0x254>
{
 8005672:	b570      	push	{r4, r5, r6, lr}
 8005674:	460c      	mov	r4, r1
 8005676:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005678:	4b93      	ldr	r3, [pc, #588]	@ (80058c8 <HAL_RCC_ClockConfig+0x25c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	428b      	cmp	r3, r1
 8005682:	d32d      	bcc.n	80056e0 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	f013 0f02 	tst.w	r3, #2
 800568a:	d13f      	bne.n	800570c <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800568c:	682b      	ldr	r3, [r5, #0]
 800568e:	f013 0f20 	tst.w	r3, #32
 8005692:	d153      	bne.n	800573c <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800569a:	d16a      	bne.n	8005772 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	f013 0f04 	tst.w	r3, #4
 80056a2:	f040 8083 	bne.w	80057ac <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a6:	682b      	ldr	r3, [r5, #0]
 80056a8:	f013 0f08 	tst.w	r3, #8
 80056ac:	f040 8097 	bne.w	80057de <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	f013 0f01 	tst.w	r3, #1
 80056b6:	f000 80de 	beq.w	8005876 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ba:	686b      	ldr	r3, [r5, #4]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	f000 80a8 	beq.w	8005812 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	f000 80ad 	beq.w	8005822 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f040 80b2 	bne.w	8005832 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80056ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	f012 0f02 	tst.w	r2, #2
 80056d8:	f040 80b1 	bne.w	800583e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80056dc:	2001      	movs	r0, #1
 80056de:	e0ee      	b.n	80058be <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056e0:	4a79      	ldr	r2, [pc, #484]	@ (80058c8 <HAL_RCC_ClockConfig+0x25c>)
 80056e2:	6813      	ldr	r3, [r2, #0]
 80056e4:	f023 0307 	bic.w	r3, r3, #7
 80056e8:	430b      	orrs	r3, r1
 80056ea:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80056ec:	f7fc fcc8 	bl	8002080 <HAL_GetTick>
 80056f0:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f2:	4b75      	ldr	r3, [pc, #468]	@ (80058c8 <HAL_RCC_ClockConfig+0x25c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	42a3      	cmp	r3, r4
 80056fc:	d0c2      	beq.n	8005684 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80056fe:	f7fc fcbf 	bl	8002080 <HAL_GetTick>
 8005702:	1b80      	subs	r0, r0, r6
 8005704:	2802      	cmp	r0, #2
 8005706:	d9f4      	bls.n	80056f2 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8005708:	2003      	movs	r0, #3
 800570a:	e0d8      	b.n	80058be <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800570c:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800570e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005712:	688a      	ldr	r2, [r1, #8]
 8005714:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005718:	4313      	orrs	r3, r2
 800571a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800571c:	f7fc fcb0 	bl	8002080 <HAL_GetTick>
 8005720:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800572c:	d1ae      	bne.n	800568c <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800572e:	f7fc fca7 	bl	8002080 <HAL_GetTick>
 8005732:	1b80      	subs	r0, r0, r6
 8005734:	2802      	cmp	r0, #2
 8005736:	d9f4      	bls.n	8005722 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8005738:	2003      	movs	r0, #3
 800573a:	e0c0      	b.n	80058be <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800573c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800573e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005742:	f8d1 2108 	ldr.w	r2, [r1, #264]	@ 0x108
 8005746:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8005750:	f7fc fc96 	bl	8002080 <HAL_GetTick>
 8005754:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800575a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800575e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005762:	d197      	bne.n	8005694 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005764:	f7fc fc8c 	bl	8002080 <HAL_GetTick>
 8005768:	1b80      	subs	r0, r0, r6
 800576a:	2802      	cmp	r0, #2
 800576c:	d9f3      	bls.n	8005756 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 800576e:	2003      	movs	r0, #3
 8005770:	e0a5      	b.n	80058be <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005772:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005774:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005778:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
 800577c:	f023 030f 	bic.w	r3, r3, #15
 8005780:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8005784:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8005788:	f7fc fc7a 	bl	8002080 <HAL_GetTick>
 800578c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800578e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005792:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005796:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800579a:	f47f af7f 	bne.w	800569c <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800579e:	f7fc fc6f 	bl	8002080 <HAL_GetTick>
 80057a2:	1b80      	subs	r0, r0, r6
 80057a4:	2802      	cmp	r0, #2
 80057a6:	d9f2      	bls.n	800578e <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80057a8:	2003      	movs	r0, #3
 80057aa:	e088      	b.n	80058be <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80057ac:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80057ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057b2:	688a      	ldr	r2, [r1, #8]
 80057b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80057b8:	4313      	orrs	r3, r2
 80057ba:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80057bc:	f7fc fc60 	bl	8002080 <HAL_GetTick>
 80057c0:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80057c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80057cc:	f47f af6b 	bne.w	80056a6 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057d0:	f7fc fc56 	bl	8002080 <HAL_GetTick>
 80057d4:	1b80      	subs	r0, r0, r6
 80057d6:	2802      	cmp	r0, #2
 80057d8:	d9f3      	bls.n	80057c2 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 80057da:	2003      	movs	r0, #3
 80057dc:	e06f      	b.n	80058be <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80057de:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80057e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057e4:	6893      	ldr	r3, [r2, #8]
 80057e6:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80057ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80057ee:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80057f0:	f7fc fc46 	bl	8002080 <HAL_GetTick>
 80057f4:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80057f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8005800:	f47f af56 	bne.w	80056b0 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005804:	f7fc fc3c 	bl	8002080 <HAL_GetTick>
 8005808:	1b80      	subs	r0, r0, r6
 800580a:	2802      	cmp	r0, #2
 800580c:	d9f3      	bls.n	80057f6 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 800580e:	2003      	movs	r0, #3
 8005810:	e055      	b.n	80058be <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005812:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800581c:	d10f      	bne.n	800583e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800581e:	2001      	movs	r0, #1
 8005820:	e04d      	b.n	80058be <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005822:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005826:	6812      	ldr	r2, [r2, #0]
 8005828:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800582c:	d107      	bne.n	800583e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800582e:	2001      	movs	r0, #1
 8005830:	e045      	b.n	80058be <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005832:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005836:	6812      	ldr	r2, [r2, #0]
 8005838:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800583c:	d042      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800583e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005842:	688a      	ldr	r2, [r1, #8]
 8005844:	f022 0203 	bic.w	r2, r2, #3
 8005848:	4313      	orrs	r3, r2
 800584a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800584c:	f7fc fc18 	bl	8002080 <HAL_GetTick>
 8005850:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585c:	686a      	ldr	r2, [r5, #4]
 800585e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005862:	d008      	beq.n	8005876 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005864:	f7fc fc0c 	bl	8002080 <HAL_GetTick>
 8005868:	1b80      	subs	r0, r0, r6
 800586a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800586e:	4298      	cmp	r0, r3
 8005870:	d9ef      	bls.n	8005852 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8005872:	2003      	movs	r0, #3
 8005874:	e023      	b.n	80058be <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005876:	4b14      	ldr	r3, [pc, #80]	@ (80058c8 <HAL_RCC_ClockConfig+0x25c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	42a3      	cmp	r3, r4
 8005880:	d915      	bls.n	80058ae <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005882:	4a11      	ldr	r2, [pc, #68]	@ (80058c8 <HAL_RCC_ClockConfig+0x25c>)
 8005884:	6813      	ldr	r3, [r2, #0]
 8005886:	f023 0307 	bic.w	r3, r3, #7
 800588a:	4323      	orrs	r3, r4
 800588c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800588e:	f7fc fbf7 	bl	8002080 <HAL_GetTick>
 8005892:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005894:	4b0c      	ldr	r3, [pc, #48]	@ (80058c8 <HAL_RCC_ClockConfig+0x25c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	42a3      	cmp	r3, r4
 800589e:	d006      	beq.n	80058ae <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80058a0:	f7fc fbee 	bl	8002080 <HAL_GetTick>
 80058a4:	1b40      	subs	r0, r0, r5
 80058a6:	2802      	cmp	r0, #2
 80058a8:	d9f4      	bls.n	8005894 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80058aa:	2003      	movs	r0, #3
 80058ac:	e007      	b.n	80058be <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058ae:	f7ff fb9b 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 80058b2:	4b06      	ldr	r3, [pc, #24]	@ (80058cc <HAL_RCC_ClockConfig+0x260>)
 80058b4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80058b6:	4b06      	ldr	r3, [pc, #24]	@ (80058d0 <HAL_RCC_ClockConfig+0x264>)
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	f7fc fbdf 	bl	800207c <HAL_InitTick>
}
 80058be:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80058c0:	2001      	movs	r0, #1
}
 80058c2:	4770      	bx	lr
        return HAL_ERROR;
 80058c4:	2001      	movs	r0, #1
 80058c6:	e7fa      	b.n	80058be <HAL_RCC_ClockConfig+0x252>
 80058c8:	58004000 	.word	0x58004000
 80058cc:	20000078 	.word	0x20000078
 80058d0:	2000007c 	.word	0x2000007c

080058d4 <HAL_RCC_GetPCLK1Freq>:
{
 80058d4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80058d6:	f7ff fb87 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80058da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80058e4:	4a02      	ldr	r2, [pc, #8]	@ (80058f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80058e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80058ea:	40d8      	lsrs	r0, r3
 80058ec:	bd08      	pop	{r3, pc}
 80058ee:	bf00      	nop
 80058f0:	080136a4 	.word	0x080136a4

080058f4 <HAL_RCC_GetPCLK2Freq>:
{
 80058f4:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80058f6:	f7ff fb77 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80058fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005904:	4a02      	ldr	r2, [pc, #8]	@ (8005910 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800590a:	40d8      	lsrs	r0, r3
 800590c:	bd08      	pop	{r3, pc}
 800590e:	bf00      	nop
 8005910:	080136a4 	.word	0x080136a4

08005914 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005914:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005918:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800591c:	0902      	lsrs	r2, r0, #4
 800591e:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 8005922:	ea23 0302 	bic.w	r3, r3, r2
 8005926:	0100      	lsls	r0, r0, #4
 8005928:	f400 207f 	and.w	r0, r0, #1044480	@ 0xff000
 800592c:	4303      	orrs	r3, r0
 800592e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005932:	4770      	bx	lr

08005934 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005938:	6803      	ldr	r3, [r0, #0]
 800593a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800593e:	f040 80aa 	bne.w	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x162>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005942:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	f013 0f01 	tst.w	r3, #1
 800594a:	d00a      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800594c:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800594e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005952:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8005956:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800595a:	b292      	uxth	r2, r2
 800595c:	4313      	orrs	r3, r2
 800595e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	f013 0f02 	tst.w	r3, #2
 8005968:	d00a      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800596a:	68a2      	ldr	r2, [r4, #8]
 800596c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005970:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8005974:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8005978:	b292      	uxth	r2, r2
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	f013 0f20 	tst.w	r3, #32
 8005986:	d009      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005988:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800598a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800598e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005992:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80059a2:	d00c      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059a4:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80059a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80059ae:	0c08      	lsrs	r0, r1, #16
 80059b0:	0400      	lsls	r0, r0, #16
 80059b2:	ea23 0300 	bic.w	r3, r3, r0
 80059b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80059ba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80059c4:	d00c      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059c6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80059c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80059d0:	0c08      	lsrs	r0, r1, #16
 80059d2:	0400      	lsls	r0, r0, #16
 80059d4:	ea23 0300 	bic.w	r3, r3, r0
 80059d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80059dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80059e6:	d00c      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80059e8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80059ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80059f2:	0c08      	lsrs	r0, r1, #16
 80059f4:	0400      	lsls	r0, r0, #16
 80059f6:	ea23 0300 	bic.w	r3, r3, r0
 80059fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80059fe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005a08:	f040 809b 	bne.w	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a12:	f040 809a 	bne.w	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x216>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005a1c:	f040 8099 	bne.w	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	f013 0f10 	tst.w	r3, #16
 8005a26:	d00e      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005a28:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005a2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a2e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005a32:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005a3c:	68e3      	ldr	r3, [r4, #12]
 8005a3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a42:	f000 808a 	beq.w	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x226>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8005a4c:	d00f      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005a50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a54:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005a58:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005a64:	b91b      	cbnz	r3, 8005a6e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005a66:	68cb      	ldr	r3, [r1, #12]
 8005a68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a6c:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8005a74:	d00d      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a76:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005a78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a7c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005a80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005a8a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a90:	d068      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x230>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8005a92:	4628      	mov	r0, r5
 8005a94:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8005a96:	f7ff f91d 	bl	8004cd4 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8005a9a:	f7fc faf1 	bl	8002080 <HAL_GetTick>
 8005a9e:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005aa0:	4b33      	ldr	r3, [pc, #204]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005aa8:	d106      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aaa:	f7fc fae9 	bl	8002080 <HAL_GetTick>
 8005aae:	1b40      	subs	r0, r0, r5
 8005ab0:	2802      	cmp	r0, #2
 8005ab2:	d9f5      	bls.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        ret = HAL_TIMEOUT;
 8005ab4:	2503      	movs	r5, #3
 8005ab6:	e000      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x186>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005ab8:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8005aba:	2d00      	cmp	r5, #0
 8005abc:	f47f af42 	bne.w	8005944 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005acc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d016      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ad6:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8005ada:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005ade:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005ae2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005ae6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005aea:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005aee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005af2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8005af6:	f8c3 0090 	str.w	r0, [r3, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005afa:	f011 0f02 	tst.w	r1, #2
 8005afe:	d10d      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      if (ret == HAL_OK)
 8005b00:	2d00      	cmp	r5, #0
 8005b02:	f47f af1f 	bne.w	8005944 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b06:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005b08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b0c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005b10:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005b1a:	e713      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x10>
        tickstart = HAL_GetTick();
 8005b1c:	f7fc fab0 	bl	8002080 <HAL_GetTick>
 8005b20:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b2a:	f013 0f02 	tst.w	r3, #2
 8005b2e:	d1e7      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b30:	f7fc faa6 	bl	8002080 <HAL_GetTick>
 8005b34:	1b83      	subs	r3, r0, r6
 8005b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d9f1      	bls.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
            ret = HAL_TIMEOUT;
 8005b3e:	2503      	movs	r5, #3
 8005b40:	e7de      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b42:	6960      	ldr	r0, [r4, #20]
 8005b44:	f7ff fee6 	bl	8005914 <LL_RCC_SetI2CClockSource>
 8005b48:	e760      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b4a:	69a0      	ldr	r0, [r4, #24]
 8005b4c:	f7ff fee2 	bl	8005914 <LL_RCC_SetI2CClockSource>
 8005b50:	e761      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b52:	69e0      	ldr	r0, [r4, #28]
 8005b54:	f7ff fede 	bl	8005914 <LL_RCC_SetI2CClockSource>
 8005b58:	e762      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005b5a:	68cb      	ldr	r3, [r1, #12]
 8005b5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b60:	60cb      	str	r3, [r1, #12]
 8005b62:	e770      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b64:	68cb      	ldr	r3, [r1, #12]
 8005b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b6a:	60cb      	str	r3, [r1, #12]
 8005b6c:	e791      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005b6e:	bf00      	nop
 8005b70:	58000400 	.word	0x58000400

08005b74 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005b74:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b76:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8005b7a:	2a01      	cmp	r2, #1
 8005b7c:	d035      	beq.n	8005bea <HAL_RTC_DeactivateAlarm+0x76>
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b84:	2202      	movs	r2, #2
 8005b86:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b8a:	4a19      	ldr	r2, [pc, #100]	@ (8005bf0 <HAL_RTC_DeactivateAlarm+0x7c>)
 8005b8c:	20ca      	movs	r0, #202	@ 0xca
 8005b8e:	6250      	str	r0, [r2, #36]	@ 0x24
 8005b90:	2053      	movs	r0, #83	@ 0x53
 8005b92:	6250      	str	r0, [r2, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8005b94:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8005b98:	d018      	beq.n	8005bcc <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005b9a:	4a15      	ldr	r2, [pc, #84]	@ (8005bf0 <HAL_RTC_DeactivateAlarm+0x7c>)
 8005b9c:	6991      	ldr	r1, [r2, #24]
 8005b9e:	f421 5108 	bic.w	r1, r1, #8704	@ 0x2200
 8005ba2:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8005ba4:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 8005ba6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8005baa:	64d1      	str	r1, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005bac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005bae:	f021 0102 	bic.w	r1, r1, #2
 8005bb2:	6319      	str	r1, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005bb4:	2102      	movs	r1, #2
 8005bb6:	65d1      	str	r1, [r2, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8005bf0 <HAL_RTC_DeactivateAlarm+0x7c>)
 8005bba:	21ff      	movs	r1, #255	@ 0xff
 8005bbc:	6251      	str	r1, [r2, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	f883 002c 	strb.w	r0, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005bca:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005bcc:	6991      	ldr	r1, [r2, #24]
 8005bce:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 8005bd2:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005bd4:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005bd6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8005bda:	6451      	str	r1, [r2, #68]	@ 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005bdc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005bde:	f021 0101 	bic.w	r1, r1, #1
 8005be2:	6319      	str	r1, [r3, #48]	@ 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005be4:	2101      	movs	r1, #1
 8005be6:	65d1      	str	r1, [r2, #92]	@ 0x5c
 8005be8:	e7e6      	b.n	8005bb8 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 8005bea:	2002      	movs	r0, #2
}
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40002800 	.word	0x40002800

08005bf4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8005bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005bfa:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 8005bfc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005bfe:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8005c00:	f015 0f01 	tst.w	r5, #1
 8005c04:	d106      	bne.n	8005c14 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8005c06:	f015 0f02 	tst.w	r5, #2
 8005c0a:	d109      	bne.n	8005c20 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8005c12:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005c14:	4b06      	ldr	r3, [pc, #24]	@ (8005c30 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005c16:	2201      	movs	r2, #1
 8005c18:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8005c1a:	f7fc fc41 	bl	80024a0 <HAL_RTC_AlarmAEventCallback>
 8005c1e:	e7f2      	b.n	8005c06 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005c20:	4b03      	ldr	r3, [pc, #12]	@ (8005c30 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005c22:	2202      	movs	r2, #2
 8005c24:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005c26:	4620      	mov	r0, r4
 8005c28:	f000 f9ee 	bl	8006008 <HAL_RTCEx_AlarmBEventCallback>
 8005c2c:	e7ee      	b.n	8005c0c <HAL_RTC_AlarmIRQHandler+0x18>
 8005c2e:	bf00      	nop
 8005c30:	40002800 	.word	0x40002800

08005c34 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c34:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005c36:	4a0b      	ldr	r2, [pc, #44]	@ (8005c64 <HAL_RTC_WaitForSynchro+0x30>)
 8005c38:	68d3      	ldr	r3, [r2, #12]
 8005c3a:	f023 0320 	bic.w	r3, r3, #32
 8005c3e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005c40:	f7fc fa1e 	bl	8002080 <HAL_GetTick>
 8005c44:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005c46:	4b07      	ldr	r3, [pc, #28]	@ (8005c64 <HAL_RTC_WaitForSynchro+0x30>)
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f013 0f20 	tst.w	r3, #32
 8005c4e:	d107      	bne.n	8005c60 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c50:	f7fc fa16 	bl	8002080 <HAL_GetTick>
 8005c54:	1b00      	subs	r0, r0, r4
 8005c56:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005c5a:	d9f4      	bls.n	8005c46 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8005c5c:	2003      	movs	r0, #3
 8005c5e:	e000      	b.n	8005c62 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005c60:	2000      	movs	r0, #0
}
 8005c62:	bd10      	pop	{r4, pc}
 8005c64:	40002800 	.word	0x40002800

08005c68 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c68:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005c6a:	4b11      	ldr	r3, [pc, #68]	@ (8005cb0 <RTC_EnterInitMode+0x48>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005c72:	d002      	beq.n	8005c7a <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8005c74:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8005c76:	4620      	mov	r0, r4
 8005c78:	bd70      	pop	{r4, r5, r6, pc}
 8005c7a:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005c7c:	4a0c      	ldr	r2, [pc, #48]	@ (8005cb0 <RTC_EnterInitMode+0x48>)
 8005c7e:	68d3      	ldr	r3, [r2, #12]
 8005c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c84:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8005c86:	f7fc f9fb 	bl	8002080 <HAL_GetTick>
 8005c8a:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8005c8c:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005c8e:	4b08      	ldr	r3, [pc, #32]	@ (8005cb0 <RTC_EnterInitMode+0x48>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005c96:	d1ee      	bne.n	8005c76 <RTC_EnterInitMode+0xe>
 8005c98:	2c03      	cmp	r4, #3
 8005c9a:	d0ec      	beq.n	8005c76 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005c9c:	f7fc f9f0 	bl	8002080 <HAL_GetTick>
 8005ca0:	1b43      	subs	r3, r0, r5
 8005ca2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ca6:	d9f2      	bls.n	8005c8e <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ca8:	2403      	movs	r4, #3
 8005caa:	f886 402d 	strb.w	r4, [r6, #45]	@ 0x2d
 8005cae:	e7ee      	b.n	8005c8e <RTC_EnterInitMode+0x26>
 8005cb0:	40002800 	.word	0x40002800

08005cb4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cb4:	b510      	push	{r4, lr}
 8005cb6:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005cb8:	4b10      	ldr	r3, [pc, #64]	@ (8005cfc <RTC_ExitInitMode+0x48>)
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cc0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	f013 0f20 	tst.w	r3, #32
 8005cc8:	d106      	bne.n	8005cd8 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cca:	f7ff ffb3 	bl	8005c34 <HAL_RTC_WaitForSynchro>
 8005cce:	b198      	cbz	r0, 8005cf8 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cd0:	2003      	movs	r0, #3
 8005cd2:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005cd6:	e00f      	b.n	8005cf8 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005cd8:	4a08      	ldr	r2, [pc, #32]	@ (8005cfc <RTC_ExitInitMode+0x48>)
 8005cda:	6993      	ldr	r3, [r2, #24]
 8005cdc:	f023 0320 	bic.w	r3, r3, #32
 8005ce0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ce2:	f7ff ffa7 	bl	8005c34 <HAL_RTC_WaitForSynchro>
 8005ce6:	b110      	cbz	r0, 8005cee <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ce8:	2003      	movs	r0, #3
 8005cea:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005cee:	4a03      	ldr	r2, [pc, #12]	@ (8005cfc <RTC_ExitInitMode+0x48>)
 8005cf0:	6993      	ldr	r3, [r2, #24]
 8005cf2:	f043 0320 	orr.w	r3, r3, #32
 8005cf6:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8005cf8:	bd10      	pop	{r4, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40002800 	.word	0x40002800

08005d00 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8005d00:	2800      	cmp	r0, #0
 8005d02:	d055      	beq.n	8005db0 <HAL_RTC_Init+0xb0>
{
 8005d04:	b510      	push	{r4, lr}
 8005d06:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d08:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8005d0c:	b163      	cbz	r3, 8005d28 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005d0e:	2302      	movs	r3, #2
 8005d10:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005d14:	4b27      	ldr	r3, [pc, #156]	@ (8005db4 <HAL_RTC_Init+0xb4>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f013 0f10 	tst.w	r3, #16
 8005d1c:	d009      	beq.n	8005d32 <HAL_RTC_Init+0x32>
      hrtc->State = HAL_RTC_STATE_READY;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8005d24:	2000      	movs	r0, #0
}
 8005d26:	bd10      	pop	{r4, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8005d28:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
      HAL_RTC_MspInit(hrtc);
 8005d2c:	f7fb ffd6 	bl	8001cdc <HAL_RTC_MspInit>
 8005d30:	e7ed      	b.n	8005d0e <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d32:	4b20      	ldr	r3, [pc, #128]	@ (8005db4 <HAL_RTC_Init+0xb4>)
 8005d34:	22ca      	movs	r2, #202	@ 0xca
 8005d36:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d38:	2253      	movs	r2, #83	@ 0x53
 8005d3a:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f7ff ff93 	bl	8005c68 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8005d42:	b118      	cbz	r0, 8005d4c <HAL_RTC_Init+0x4c>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d44:	4b1b      	ldr	r3, [pc, #108]	@ (8005db4 <HAL_RTC_Init+0xb4>)
 8005d46:	22ff      	movs	r2, #255	@ 0xff
 8005d48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8005d4a:	e7ec      	b.n	8005d26 <HAL_RTC_Init+0x26>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005d4c:	4b19      	ldr	r3, [pc, #100]	@ (8005db4 <HAL_RTC_Init+0xb4>)
 8005d4e:	699a      	ldr	r2, [r3, #24]
 8005d50:	f022 628e 	bic.w	r2, r2, #74448896	@ 0x4700000
 8005d54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d58:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005d5a:	6999      	ldr	r1, [r3, #24]
 8005d5c:	6862      	ldr	r2, [r4, #4]
 8005d5e:	6920      	ldr	r0, [r4, #16]
 8005d60:	4302      	orrs	r2, r0
 8005d62:	69a0      	ldr	r0, [r4, #24]
 8005d64:	4302      	orrs	r2, r0
 8005d66:	430a      	orrs	r2, r1
 8005d68:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005d6a:	68e2      	ldr	r2, [r4, #12]
 8005d6c:	68a1      	ldr	r1, [r4, #8]
 8005d6e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005d72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8005d7a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005d7c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005d7e:	4301      	orrs	r1, r0
 8005d80:	430a      	orrs	r2, r1
 8005d82:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8005d84:	4620      	mov	r0, r4
 8005d86:	f7ff ff95 	bl	8005cb4 <RTC_ExitInitMode>
        if (status == HAL_OK)
 8005d8a:	b118      	cbz	r0, 8005d94 <HAL_RTC_Init+0x94>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d8c:	4b09      	ldr	r3, [pc, #36]	@ (8005db4 <HAL_RTC_Init+0xb4>)
 8005d8e:	22ff      	movs	r2, #255	@ 0xff
 8005d90:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8005d92:	e7c8      	b.n	8005d26 <HAL_RTC_Init+0x26>
          MODIFY_REG(RTC->CR, \
 8005d94:	4907      	ldr	r1, [pc, #28]	@ (8005db4 <HAL_RTC_Init+0xb4>)
 8005d96:	698b      	ldr	r3, [r1, #24]
 8005d98:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8005d9c:	6a22      	ldr	r2, [r4, #32]
 8005d9e:	69e0      	ldr	r0, [r4, #28]
 8005da0:	4302      	orrs	r2, r0
 8005da2:	6960      	ldr	r0, [r4, #20]
 8005da4:	4302      	orrs	r2, r0
 8005da6:	4313      	orrs	r3, r2
 8005da8:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005daa:	23ff      	movs	r3, #255	@ 0xff
 8005dac:	624b      	str	r3, [r1, #36]	@ 0x24
    if (status == HAL_OK)
 8005dae:	e7b6      	b.n	8005d1e <HAL_RTC_Init+0x1e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8005db0:	2001      	movs	r0, #1
}
 8005db2:	4770      	bx	lr
 8005db4:	40002800 	.word	0x40002800

08005db8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8005db8:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8005dba:	e002      	b.n	8005dc2 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8005dbc:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8005dbe:	380a      	subs	r0, #10
 8005dc0:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8005dc2:	2809      	cmp	r0, #9
 8005dc4:	d8fa      	bhi.n	8005dbc <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	b2db      	uxtb	r3, r3
}
 8005dca:	4318      	orrs	r0, r3
 8005dcc:	4770      	bx	lr
	...

08005dd0 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8005dd0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	f000 80b0 	beq.w	8005f3a <HAL_RTC_SetAlarm_IT+0x16a>
{
 8005dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dde:	4605      	mov	r5, r0
 8005de0:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8005de2:	2301      	movs	r3, #1
 8005de4:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005de8:	2302      	movs	r3, #2
 8005dea:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005dee:	4b54      	ldr	r3, [pc, #336]	@ (8005f40 <HAL_RTC_SetAlarm_IT+0x170>)
 8005df0:	68de      	ldr	r6, [r3, #12]
 8005df2:	f406 7640 	and.w	r6, r6, #768	@ 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8005df6:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8005dfa:	d043      	beq.n	8005e84 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8005dfc:	bb12      	cbnz	r2, 8005e44 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005e04:	d101      	bne.n	8005e0a <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8005e0a:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005e0e:	7820      	ldrb	r0, [r4, #0]
 8005e10:	f7ff ffd2 	bl	8005db8 <RTC_ByteToBcd2>
 8005e14:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005e16:	7860      	ldrb	r0, [r4, #1]
 8005e18:	f7ff ffce 	bl	8005db8 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005e1c:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005e20:	78a0      	ldrb	r0, [r4, #2]
 8005e22:	f7ff ffc9 	bl	8005db8 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005e26:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005e28:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005e2a:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005e2e:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8005e32:	f7ff ffc1 	bl	8005db8 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005e36:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005e3a:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005e3c:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005e3e:	ea48 0000 	orr.w	r0, r8, r0
 8005e42:	e020      	b.n	8005e86 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8005e44:	6948      	ldr	r0, [r1, #20]
 8005e46:	f1b0 3f80 	cmp.w	r0, #2155905152	@ 0x80808080
 8005e4a:	d009      	beq.n	8005e60 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005e4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8005e50:	d006      	beq.n	8005e60 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005e52:	4b3b      	ldr	r3, [pc, #236]	@ (8005f40 <HAL_RTC_SetAlarm_IT+0x170>)
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005e5a:	d101      	bne.n	8005e60 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005e60:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005e62:	7863      	ldrb	r3, [r4, #1]
 8005e64:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005e6a:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005e6c:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005e6e:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005e70:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005e74:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005e78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005e7c:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005e7e:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005e80:	4318      	orrs	r0, r3
 8005e82:	e000      	b.n	8005e86 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8005e84:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e86:	4b2e      	ldr	r3, [pc, #184]	@ (8005f40 <HAL_RTC_SetAlarm_IT+0x170>)
 8005e88:	22ca      	movs	r2, #202	@ 0xca
 8005e8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e8c:	2253      	movs	r2, #83	@ 0x53
 8005e8e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005e90:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005e92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e96:	d02a      	beq.n	8005eee <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005e98:	4b29      	ldr	r3, [pc, #164]	@ (8005f40 <HAL_RTC_SetAlarm_IT+0x170>)
 8005e9a:	699a      	ldr	r2, [r3, #24]
 8005e9c:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 8005ea0:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005ea6:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8005eaa:	d040      	beq.n	8005f2e <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8005eac:	4b24      	ldr	r3, [pc, #144]	@ (8005f40 <HAL_RTC_SetAlarm_IT+0x170>)
 8005eae:	6498      	str	r0, [r3, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8005eb0:	69a2      	ldr	r2, [r4, #24]
 8005eb2:	64da      	str	r2, [r3, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8005eb4:	6862      	ldr	r2, [r4, #4]
 8005eb6:	4b22      	ldr	r3, [pc, #136]	@ (8005f40 <HAL_RTC_SetAlarm_IT+0x170>)
 8005eb8:	675a      	str	r2, [r3, #116]	@ 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005eba:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8005ebc:	f042 0202 	orr.w	r2, r2, #2
 8005ec0:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005ec2:	699a      	ldr	r2, [r3, #24]
 8005ec4:	f442 5208 	orr.w	r2, r2, #8704	@ 0x2200
 8005ec8:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005eca:	4a1e      	ldr	r2, [pc, #120]	@ (8005f44 <HAL_RTC_SetAlarm_IT+0x174>)
 8005ecc:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8005ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ed4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ed8:	4b19      	ldr	r3, [pc, #100]	@ (8005f40 <HAL_RTC_SetAlarm_IT+0x170>)
 8005eda:	22ff      	movs	r2, #255	@ 0xff
 8005edc:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
}
 8005eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005eee:	4b14      	ldr	r3, [pc, #80]	@ (8005f40 <HAL_RTC_SetAlarm_IT+0x170>)
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8005ef6:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005ef8:	2201      	movs	r2, #1
 8005efa:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005efc:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8005f00:	d00f      	beq.n	8005f22 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005f02:	4b0f      	ldr	r3, [pc, #60]	@ (8005f40 <HAL_RTC_SetAlarm_IT+0x170>)
 8005f04:	6418      	str	r0, [r3, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8005f06:	69a2      	ldr	r2, [r4, #24]
 8005f08:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005f0a:	6862      	ldr	r2, [r4, #4]
 8005f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f40 <HAL_RTC_SetAlarm_IT+0x170>)
 8005f0e:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005f10:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8005f12:	f042 0201 	orr.w	r2, r2, #1
 8005f16:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005f18:	699a      	ldr	r2, [r3, #24]
 8005f1a:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8005f1e:	619a      	str	r2, [r3, #24]
 8005f20:	e7d3      	b.n	8005eca <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005f22:	69a3      	ldr	r3, [r4, #24]
 8005f24:	69e2      	ldr	r2, [r4, #28]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	4a05      	ldr	r2, [pc, #20]	@ (8005f40 <HAL_RTC_SetAlarm_IT+0x170>)
 8005f2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f2c:	e7ed      	b.n	8005f0a <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005f2e:	69a3      	ldr	r3, [r4, #24]
 8005f30:	69e2      	ldr	r2, [r4, #28]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	4a02      	ldr	r2, [pc, #8]	@ (8005f40 <HAL_RTC_SetAlarm_IT+0x170>)
 8005f36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f38:	e7bc      	b.n	8005eb4 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8005f3a:	2002      	movs	r0, #2
}
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	40002800 	.word	0x40002800
 8005f44:	58000800 	.word	0x58000800

08005f48 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f48:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d017      	beq.n	8005f80 <HAL_RTCEx_EnableBypassShadow+0x38>
 8005f50:	2101      	movs	r1, #1
 8005f52:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f56:	2302      	movs	r3, #2
 8005f58:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f5c:	4b09      	ldr	r3, [pc, #36]	@ (8005f84 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8005f5e:	22ca      	movs	r2, #202	@ 0xca
 8005f60:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f62:	2253      	movs	r2, #83	@ 0x53
 8005f64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f66:	699a      	ldr	r2, [r3, #24]
 8005f68:	f042 0220 	orr.w	r2, r2, #32
 8005f6c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f6e:	22ff      	movs	r2, #255	@ 0xff
 8005f70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005f72:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f76:	2300      	movs	r3, #0
 8005f78:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005f80:	2002      	movs	r0, #2
}
 8005f82:	4770      	bx	lr
 8005f84:	40002800 	.word	0x40002800

08005f88 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f88:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d020      	beq.n	8005fd2 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8005f90:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8005f92:	2101      	movs	r1, #1
 8005f94:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f98:	2302      	movs	r3, #2
 8005f9a:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005fd8 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8005fa0:	22ca      	movs	r2, #202	@ 0xca
 8005fa2:	625a      	str	r2, [r3, #36]	@ 0x24
 8005fa4:	2253      	movs	r2, #83	@ 0x53
 8005fa6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8005fa8:	699a      	ldr	r2, [r3, #24]
 8005faa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005fae:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8005fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8005fdc <HAL_RTCEx_SetSSRU_IT+0x54>)
 8005fb2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8005fb6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005fba:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fbe:	22ff      	movs	r2, #255	@ 0xff
 8005fc0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005fc2:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 8005fcc:	4618      	mov	r0, r3
}
 8005fce:	bc10      	pop	{r4}
 8005fd0:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005fd2:	2002      	movs	r0, #2
}
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40002800 	.word	0x40002800
 8005fdc:	58000800 	.word	0x58000800

08005fe0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005fe0:	b510      	push	{r4, lr}
 8005fe2:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8005fe4:	4b07      	ldr	r3, [pc, #28]	@ (8006004 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005fec:	d103      	bne.n	8005ff6 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8005ff4:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8005ff6:	4b03      	ldr	r3, [pc, #12]	@ (8006004 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005ff8:	2240      	movs	r2, #64	@ 0x40
 8005ffa:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005ffc:	f7fc fa54 	bl	80024a8 <HAL_RTCEx_SSRUEventCallback>
 8006000:	e7f5      	b.n	8005fee <HAL_RTCEx_SSRUIRQHandler+0xe>
 8006002:	bf00      	nop
 8006004:	40002800 	.word	0x40002800

08006008 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006008:	4770      	bx	lr

0800600a <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800600a:	0089      	lsls	r1, r1, #2
 800600c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8006010:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006014:	600a      	str	r2, [r1, #0]
}
 8006016:	4770      	bx	lr

08006018 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006018:	0089      	lsls	r1, r1, #2
 800601a:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800601e:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006022:	6808      	ldr	r0, [r1, #0]
}
 8006024:	4770      	bx	lr
	...

08006028 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006028:	4b07      	ldr	r3, [pc, #28]	@ (8006048 <SUBGHZSPI_Init+0x20>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006030:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006032:	f440 7041 	orr.w	r0, r0, #772	@ 0x304
 8006036:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006038:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 800603c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006044:	601a      	str	r2, [r3, #0]
}
 8006046:	4770      	bx	lr
 8006048:	58010000 	.word	0x58010000

0800604c <HAL_SUBGHZ_Init>:
{
 800604c:	b530      	push	{r4, r5, lr}
 800604e:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8006050:	2800      	cmp	r0, #0
 8006052:	d05d      	beq.n	8006110 <HAL_SUBGHZ_Init+0xc4>
 8006054:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8006056:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006058:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 800605c:	b10b      	cbz	r3, 8006062 <HAL_SUBGHZ_Init+0x16>
 800605e:	2d03      	cmp	r5, #3
 8006060:	d10b      	bne.n	800607a <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 8006062:	2300      	movs	r3, #0
 8006064:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8006066:	4620      	mov	r0, r4
 8006068:	f7fb ff18 	bl	8001e9c <HAL_SUBGHZ_MspInit>
  SET_BIT(EXTI->IMR2, ExtiLine);
 800606c:	4a29      	ldr	r2, [pc, #164]	@ (8006114 <HAL_SUBGHZ_Init+0xc8>)
 800606e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006072:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006076:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800607a:	b185      	cbz	r5, 800609e <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800607c:	4b26      	ldr	r3, [pc, #152]	@ (8006118 <HAL_SUBGHZ_Init+0xcc>)
 800607e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006082:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8006084:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006086:	6820      	ldr	r0, [r4, #0]
 8006088:	f7ff ffce 	bl	8006028 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800608c:	2301      	movs	r3, #1
 800608e:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006090:	2300      	movs	r3, #0
 8006092:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006094:	2301      	movs	r3, #1
 8006096:	71a3      	strb	r3, [r4, #6]
}
 8006098:	4628      	mov	r0, r5
 800609a:	b003      	add	sp, #12
 800609c:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800609e:	2302      	movs	r3, #2
 80060a0:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80060a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060a6:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80060aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80060b2:	4b1a      	ldr	r3, [pc, #104]	@ (800611c <HAL_SUBGHZ_Init+0xd0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80060ba:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80060be:	2264      	movs	r2, #100	@ 0x64
 80060c0:	fb02 f303 	mul.w	r3, r2, r3
 80060c4:	9301      	str	r3, [sp, #4]
 80060c6:	e014      	b.n	80060f2 <HAL_SUBGHZ_Init+0xa6>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80060c8:	2501      	movs	r5, #1
 80060ca:	60a5      	str	r5, [r4, #8]
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80060cc:	4b12      	ldr	r3, [pc, #72]	@ (8006118 <HAL_SUBGHZ_Init+0xcc>)
 80060ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80060d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060e0:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80060e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80060e6:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 80060e8:	2d00      	cmp	r5, #0
 80060ea:	d1d3      	bne.n	8006094 <HAL_SUBGHZ_Init+0x48>
 80060ec:	e7cb      	b.n	8006086 <HAL_SUBGHZ_Init+0x3a>
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0ec      	beq.n	80060cc <HAL_SUBGHZ_Init+0x80>
      if (count == 0U)
 80060f2:	9b01      	ldr	r3, [sp, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0e7      	beq.n	80060c8 <HAL_SUBGHZ_Init+0x7c>
      count--;
 80060f8:	9b01      	ldr	r3, [sp, #4]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80060fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006106:	f413 4380 	ands.w	r3, r3, #16384	@ 0x4000
 800610a:	d0f0      	beq.n	80060ee <HAL_SUBGHZ_Init+0xa2>
 800610c:	2301      	movs	r3, #1
 800610e:	e7ee      	b.n	80060ee <HAL_SUBGHZ_Init+0xa2>
    return status;
 8006110:	2501      	movs	r5, #1
 8006112:	e7c1      	b.n	8006098 <HAL_SUBGHZ_Init+0x4c>
 8006114:	58000800 	.word	0x58000800
 8006118:	58000400 	.word	0x58000400
 800611c:	20000078 	.word	0x20000078

08006120 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006120:	b082      	sub	sp, #8
 8006122:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006124:	4b1a      	ldr	r3, [pc, #104]	@ (8006190 <SUBGHZSPI_Transmit+0x70>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800612c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006130:	2064      	movs	r0, #100	@ 0x64
 8006132:	fb00 f303 	mul.w	r3, r0, r3
 8006136:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006138:	9b01      	ldr	r3, [sp, #4]
 800613a:	b14b      	cbz	r3, 8006150 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800613c:	9b01      	ldr	r3, [sp, #4]
 800613e:	3b01      	subs	r3, #1
 8006140:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006142:	4b14      	ldr	r3, [pc, #80]	@ (8006194 <SUBGHZSPI_Transmit+0x74>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f013 0f02 	tst.w	r3, #2
 800614a:	d0f5      	beq.n	8006138 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800614c:	2000      	movs	r0, #0
 800614e:	e001      	b.n	8006154 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006150:	2001      	movs	r0, #1
 8006152:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006154:	4b0f      	ldr	r3, [pc, #60]	@ (8006194 <SUBGHZSPI_Transmit+0x74>)
 8006156:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006158:	4b0d      	ldr	r3, [pc, #52]	@ (8006190 <SUBGHZSPI_Transmit+0x70>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006160:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006164:	2164      	movs	r1, #100	@ 0x64
 8006166:	fb01 f303 	mul.w	r3, r1, r3
 800616a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800616c:	9b01      	ldr	r3, [sp, #4]
 800616e:	b143      	cbz	r3, 8006182 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006170:	9b01      	ldr	r3, [sp, #4]
 8006172:	3b01      	subs	r3, #1
 8006174:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006176:	4b07      	ldr	r3, [pc, #28]	@ (8006194 <SUBGHZSPI_Transmit+0x74>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f013 0f01 	tst.w	r3, #1
 800617e:	d0f5      	beq.n	800616c <SUBGHZSPI_Transmit+0x4c>
 8006180:	e001      	b.n	8006186 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006182:	2001      	movs	r0, #1
 8006184:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006186:	4b03      	ldr	r3, [pc, #12]	@ (8006194 <SUBGHZSPI_Transmit+0x74>)
 8006188:	68db      	ldr	r3, [r3, #12]

  return status;
}
 800618a:	b002      	add	sp, #8
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20000078 	.word	0x20000078
 8006194:	58010000 	.word	0x58010000

08006198 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006198:	b082      	sub	sp, #8
 800619a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800619c:	4b1c      	ldr	r3, [pc, #112]	@ (8006210 <SUBGHZSPI_Receive+0x78>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80061a4:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80061a8:	2064      	movs	r0, #100	@ 0x64
 80061aa:	fb00 f303 	mul.w	r3, r0, r3
 80061ae:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80061b0:	9b01      	ldr	r3, [sp, #4]
 80061b2:	b14b      	cbz	r3, 80061c8 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80061b4:	9b01      	ldr	r3, [sp, #4]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80061ba:	4b16      	ldr	r3, [pc, #88]	@ (8006214 <SUBGHZSPI_Receive+0x7c>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f013 0f02 	tst.w	r3, #2
 80061c2:	d0f5      	beq.n	80061b0 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80061c4:	2000      	movs	r0, #0
 80061c6:	e001      	b.n	80061cc <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80061c8:	2001      	movs	r0, #1
 80061ca:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 80061cc:	4b11      	ldr	r3, [pc, #68]	@ (8006214 <SUBGHZSPI_Receive+0x7c>)
 80061ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80061d2:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80061d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006210 <SUBGHZSPI_Receive+0x78>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80061de:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80061e2:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 80061e6:	fb0c f303 	mul.w	r3, ip, r3
 80061ea:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80061ec:	9b01      	ldr	r3, [sp, #4]
 80061ee:	b143      	cbz	r3, 8006202 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80061f0:	9b01      	ldr	r3, [sp, #4]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80061f6:	4b07      	ldr	r3, [pc, #28]	@ (8006214 <SUBGHZSPI_Receive+0x7c>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f013 0f01 	tst.w	r3, #1
 80061fe:	d0f5      	beq.n	80061ec <SUBGHZSPI_Receive+0x54>
 8006200:	e001      	b.n	8006206 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006202:	2001      	movs	r0, #1
 8006204:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006206:	4b03      	ldr	r3, [pc, #12]	@ (8006214 <SUBGHZSPI_Receive+0x7c>)
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	700b      	strb	r3, [r1, #0]

  return status;
}
 800620c:	b002      	add	sp, #8
 800620e:	4770      	bx	lr
 8006210:	20000078 	.word	0x20000078
 8006214:	58010000 	.word	0x58010000

08006218 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006218:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800621a:	4b13      	ldr	r3, [pc, #76]	@ (8006268 <SUBGHZ_WaitOnBusy+0x50>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006222:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8006226:	2264      	movs	r2, #100	@ 0x64
 8006228:	fb02 f303 	mul.w	r3, r2, r3
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	e006      	b.n	800623e <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006230:	2302      	movs	r3, #2
 8006232:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8006234:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8006236:	b002      	add	sp, #8
 8006238:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800623a:	4213      	tst	r3, r2
 800623c:	d012      	beq.n	8006264 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800623e:	4b0b      	ldr	r3, [pc, #44]	@ (800626c <SUBGHZ_WaitOnBusy+0x54>)
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	f013 0304 	ands.w	r3, r3, #4
 8006246:	d000      	beq.n	800624a <SUBGHZ_WaitOnBusy+0x32>
 8006248:	2301      	movs	r3, #1
    if (count == 0U)
 800624a:	9a01      	ldr	r2, [sp, #4]
 800624c:	2a00      	cmp	r2, #0
 800624e:	d0ef      	beq.n	8006230 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8006250:	9a01      	ldr	r2, [sp, #4]
 8006252:	3a01      	subs	r2, #1
 8006254:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006256:	4a05      	ldr	r2, [pc, #20]	@ (800626c <SUBGHZ_WaitOnBusy+0x54>)
 8006258:	6952      	ldr	r2, [r2, #20]
 800625a:	f012 0202 	ands.w	r2, r2, #2
 800625e:	d0ec      	beq.n	800623a <SUBGHZ_WaitOnBusy+0x22>
 8006260:	2201      	movs	r2, #1
 8006262:	e7ea      	b.n	800623a <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8006264:	2000      	movs	r0, #0
 8006266:	e7e6      	b.n	8006236 <SUBGHZ_WaitOnBusy+0x1e>
 8006268:	20000078 	.word	0x20000078
 800626c:	58000400 	.word	0x58000400

08006270 <SUBGHZ_CheckDeviceReady>:
{
 8006270:	b500      	push	{lr}
 8006272:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006274:	7903      	ldrb	r3, [r0, #4]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d004      	beq.n	8006284 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800627a:	f7ff ffcd 	bl	8006218 <SUBGHZ_WaitOnBusy>
}
 800627e:	b003      	add	sp, #12
 8006280:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006284:	4b0d      	ldr	r3, [pc, #52]	@ (80062bc <SUBGHZ_CheckDeviceReady+0x4c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800628c:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8006290:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006292:	4a0b      	ldr	r2, [pc, #44]	@ (80062c0 <SUBGHZ_CheckDeviceReady+0x50>)
 8006294:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006298:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800629c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      count--;
 80062a0:	9b01      	ldr	r3, [sp, #4]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 80062a6:	9b01      	ldr	r3, [sp, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1f9      	bne.n	80062a0 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80062ac:	4a04      	ldr	r2, [pc, #16]	@ (80062c0 <SUBGHZ_CheckDeviceReady+0x50>)
 80062ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80062b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80062ba:	e7de      	b.n	800627a <SUBGHZ_CheckDeviceReady+0xa>
 80062bc:	20000078 	.word	0x20000078
 80062c0:	58000400 	.word	0x58000400

080062c4 <HAL_SUBGHZ_WriteRegisters>:
{
 80062c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c8:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80062ca:	7980      	ldrb	r0, [r0, #6]
 80062cc:	fa5f f880 	uxtb.w	r8, r0
 80062d0:	f1b8 0f01 	cmp.w	r8, #1
 80062d4:	d13e      	bne.n	8006354 <HAL_SUBGHZ_WriteRegisters+0x90>
 80062d6:	460c      	mov	r4, r1
 80062d8:	4617      	mov	r7, r2
 80062da:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80062dc:	796b      	ldrb	r3, [r5, #5]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d03b      	beq.n	800635a <HAL_SUBGHZ_WriteRegisters+0x96>
 80062e2:	2301      	movs	r3, #1
 80062e4:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80062e6:	2302      	movs	r3, #2
 80062e8:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80062ea:	4628      	mov	r0, r5
 80062ec:	f7ff ffc0 	bl	8006270 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80062f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006360 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80062f2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80062f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80062fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80062fe:	210d      	movs	r1, #13
 8006300:	4628      	mov	r0, r5
 8006302:	f7ff ff0d 	bl	8006120 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006306:	0a21      	lsrs	r1, r4, #8
 8006308:	4628      	mov	r0, r5
 800630a:	f7ff ff09 	bl	8006120 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800630e:	b2e1      	uxtb	r1, r4
 8006310:	4628      	mov	r0, r5
 8006312:	f7ff ff05 	bl	8006120 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006316:	2400      	movs	r4, #0
 8006318:	e005      	b.n	8006326 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800631a:	5d39      	ldrb	r1, [r7, r4]
 800631c:	4628      	mov	r0, r5
 800631e:	f7ff feff 	bl	8006120 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006322:	3401      	adds	r4, #1
 8006324:	b2a4      	uxth	r4, r4
 8006326:	42b4      	cmp	r4, r6
 8006328:	d3f7      	bcc.n	800631a <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800632a:	4a0d      	ldr	r2, [pc, #52]	@ (8006360 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800632c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006330:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006338:	4628      	mov	r0, r5
 800633a:	f7ff ff6d 	bl	8006218 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800633e:	68ab      	ldr	r3, [r5, #8]
 8006340:	b90b      	cbnz	r3, 8006346 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8006342:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006346:	2301      	movs	r3, #1
 8006348:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800634a:	2300      	movs	r3, #0
 800634c:	716b      	strb	r3, [r5, #5]
}
 800634e:	4640      	mov	r0, r8
 8006350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006354:	f04f 0802 	mov.w	r8, #2
 8006358:	e7f9      	b.n	800634e <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 800635a:	f04f 0802 	mov.w	r8, #2
 800635e:	e7f6      	b.n	800634e <HAL_SUBGHZ_WriteRegisters+0x8a>
 8006360:	58000400 	.word	0x58000400

08006364 <HAL_SUBGHZ_ReadRegisters>:
{
 8006364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006368:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800636a:	7980      	ldrb	r0, [r0, #6]
 800636c:	fa5f f880 	uxtb.w	r8, r0
 8006370:	f1b8 0f01 	cmp.w	r8, #1
 8006374:	d141      	bne.n	80063fa <HAL_SUBGHZ_ReadRegisters+0x96>
 8006376:	460c      	mov	r4, r1
 8006378:	4615      	mov	r5, r2
 800637a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800637c:	7973      	ldrb	r3, [r6, #5]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d03e      	beq.n	8006400 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8006382:	2301      	movs	r3, #1
 8006384:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006386:	4630      	mov	r0, r6
 8006388:	f7ff ff72 	bl	8006270 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800638c:	4a1e      	ldr	r2, [pc, #120]	@ (8006408 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800638e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006392:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006396:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800639a:	211d      	movs	r1, #29
 800639c:	4630      	mov	r0, r6
 800639e:	f7ff febf 	bl	8006120 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80063a2:	0a21      	lsrs	r1, r4, #8
 80063a4:	4630      	mov	r0, r6
 80063a6:	f7ff febb 	bl	8006120 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80063aa:	b2e1      	uxtb	r1, r4
 80063ac:	4630      	mov	r0, r6
 80063ae:	f7ff feb7 	bl	8006120 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80063b2:	2100      	movs	r1, #0
 80063b4:	4630      	mov	r0, r6
 80063b6:	f7ff feb3 	bl	8006120 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80063ba:	2400      	movs	r4, #0
 80063bc:	e006      	b.n	80063cc <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80063be:	4629      	mov	r1, r5
 80063c0:	4630      	mov	r0, r6
 80063c2:	f7ff fee9 	bl	8006198 <SUBGHZSPI_Receive>
      pData++;
 80063c6:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80063c8:	3401      	adds	r4, #1
 80063ca:	b2a4      	uxth	r4, r4
 80063cc:	42bc      	cmp	r4, r7
 80063ce:	d3f6      	bcc.n	80063be <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80063d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006408 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80063d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80063d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80063de:	4630      	mov	r0, r6
 80063e0:	f7ff ff1a 	bl	8006218 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80063e4:	68b3      	ldr	r3, [r6, #8]
 80063e6:	b90b      	cbnz	r3, 80063ec <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 80063e8:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80063ec:	2301      	movs	r3, #1
 80063ee:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80063f0:	2300      	movs	r3, #0
 80063f2:	7173      	strb	r3, [r6, #5]
}
 80063f4:	4640      	mov	r0, r8
 80063f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80063fa:	f04f 0802 	mov.w	r8, #2
 80063fe:	e7f9      	b.n	80063f4 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8006400:	f04f 0802 	mov.w	r8, #2
 8006404:	e7f6      	b.n	80063f4 <HAL_SUBGHZ_ReadRegisters+0x90>
 8006406:	bf00      	nop
 8006408:	58000400 	.word	0x58000400

0800640c <HAL_SUBGHZ_ExecSetCmd>:
{
 800640c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006410:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006412:	7980      	ldrb	r0, [r0, #6]
 8006414:	fa5f f980 	uxtb.w	r9, r0
 8006418:	f1b9 0f01 	cmp.w	r9, #1
 800641c:	d143      	bne.n	80064a6 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 800641e:	4688      	mov	r8, r1
 8006420:	4617      	mov	r7, r2
 8006422:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006424:	796b      	ldrb	r3, [r5, #5]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d040      	beq.n	80064ac <HAL_SUBGHZ_ExecSetCmd+0xa0>
 800642a:	2301      	movs	r3, #1
 800642c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800642e:	4628      	mov	r0, r5
 8006430:	f7ff ff1e 	bl	8006270 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006434:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8006438:	d005      	beq.n	8006446 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 800643a:	f1b8 0f94 	cmp.w	r8, #148	@ 0x94
 800643e:	d002      	beq.n	8006446 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006440:	2300      	movs	r3, #0
 8006442:	712b      	strb	r3, [r5, #4]
 8006444:	e001      	b.n	800644a <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006446:	2301      	movs	r3, #1
 8006448:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800644a:	4a1a      	ldr	r2, [pc, #104]	@ (80064b4 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800644c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006450:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006458:	4641      	mov	r1, r8
 800645a:	4628      	mov	r0, r5
 800645c:	f7ff fe60 	bl	8006120 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006460:	2400      	movs	r4, #0
 8006462:	e005      	b.n	8006470 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006464:	5d39      	ldrb	r1, [r7, r4]
 8006466:	4628      	mov	r0, r5
 8006468:	f7ff fe5a 	bl	8006120 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800646c:	3401      	adds	r4, #1
 800646e:	b2a4      	uxth	r4, r4
 8006470:	42b4      	cmp	r4, r6
 8006472:	d3f7      	bcc.n	8006464 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006474:	4a0f      	ldr	r2, [pc, #60]	@ (80064b4 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006476:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800647a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800647e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    if (Command != RADIO_SET_SLEEP)
 8006482:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8006486:	d10a      	bne.n	800649e <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006488:	68ab      	ldr	r3, [r5, #8]
 800648a:	b90b      	cbnz	r3, 8006490 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 800648c:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006490:	2301      	movs	r3, #1
 8006492:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006494:	2300      	movs	r3, #0
 8006496:	716b      	strb	r3, [r5, #5]
}
 8006498:	4648      	mov	r0, r9
 800649a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800649e:	4628      	mov	r0, r5
 80064a0:	f7ff feba 	bl	8006218 <SUBGHZ_WaitOnBusy>
 80064a4:	e7f0      	b.n	8006488 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 80064a6:	f04f 0902 	mov.w	r9, #2
 80064aa:	e7f5      	b.n	8006498 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 80064ac:	f04f 0902 	mov.w	r9, #2
 80064b0:	e7f2      	b.n	8006498 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 80064b2:	bf00      	nop
 80064b4:	58000400 	.word	0x58000400

080064b8 <HAL_SUBGHZ_ExecGetCmd>:
{
 80064b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064bc:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80064be:	7980      	ldrb	r0, [r0, #6]
 80064c0:	fa5f f880 	uxtb.w	r8, r0
 80064c4:	f1b8 0f01 	cmp.w	r8, #1
 80064c8:	d139      	bne.n	800653e <HAL_SUBGHZ_ExecGetCmd+0x86>
 80064ca:	460c      	mov	r4, r1
 80064cc:	4615      	mov	r5, r2
 80064ce:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80064d0:	7973      	ldrb	r3, [r6, #5]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d036      	beq.n	8006544 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 80064d6:	2301      	movs	r3, #1
 80064d8:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80064da:	4630      	mov	r0, r6
 80064dc:	f7ff fec8 	bl	8006270 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80064e0:	4a1a      	ldr	r2, [pc, #104]	@ (800654c <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80064e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80064e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80064ee:	4621      	mov	r1, r4
 80064f0:	4630      	mov	r0, r6
 80064f2:	f7ff fe15 	bl	8006120 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80064f6:	2100      	movs	r1, #0
 80064f8:	4630      	mov	r0, r6
 80064fa:	f7ff fe11 	bl	8006120 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80064fe:	2400      	movs	r4, #0
 8006500:	e006      	b.n	8006510 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006502:	4629      	mov	r1, r5
 8006504:	4630      	mov	r0, r6
 8006506:	f7ff fe47 	bl	8006198 <SUBGHZSPI_Receive>
      pData++;
 800650a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 800650c:	3401      	adds	r4, #1
 800650e:	b2a4      	uxth	r4, r4
 8006510:	42bc      	cmp	r4, r7
 8006512:	d3f6      	bcc.n	8006502 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006514:	4a0d      	ldr	r2, [pc, #52]	@ (800654c <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006516:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800651a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800651e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006522:	4630      	mov	r0, r6
 8006524:	f7ff fe78 	bl	8006218 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006528:	68b3      	ldr	r3, [r6, #8]
 800652a:	b90b      	cbnz	r3, 8006530 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 800652c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006530:	2301      	movs	r3, #1
 8006532:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006534:	2300      	movs	r3, #0
 8006536:	7173      	strb	r3, [r6, #5]
}
 8006538:	4640      	mov	r0, r8
 800653a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800653e:	f04f 0802 	mov.w	r8, #2
 8006542:	e7f9      	b.n	8006538 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8006544:	f04f 0802 	mov.w	r8, #2
 8006548:	e7f6      	b.n	8006538 <HAL_SUBGHZ_ExecGetCmd+0x80>
 800654a:	bf00      	nop
 800654c:	58000400 	.word	0x58000400

08006550 <HAL_SUBGHZ_IRQHandler>:
{
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8006556:	2300      	movs	r3, #0
 8006558:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800655c:	2302      	movs	r3, #2
 800655e:	aa01      	add	r2, sp, #4
 8006560:	2112      	movs	r1, #18
 8006562:	f7ff ffa9 	bl	80064b8 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8006566:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 800656a:	f89d 4005 	ldrb.w	r4, [sp, #5]
 800656e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8006572:	b226      	sxth	r6, r4
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006574:	2302      	movs	r3, #2
 8006576:	aa01      	add	r2, sp, #4
 8006578:	4619      	mov	r1, r3
 800657a:	4628      	mov	r0, r5
 800657c:	f7ff ff46 	bl	800640c <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006580:	f016 0f01 	tst.w	r6, #1
 8006584:	d126      	bne.n	80065d4 <HAL_SUBGHZ_IRQHandler+0x84>
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8006586:	f014 0f02 	tst.w	r4, #2
 800658a:	d002      	beq.n	8006592 <HAL_SUBGHZ_IRQHandler+0x42>
 800658c:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8006590:	d024      	beq.n	80065dc <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006592:	f014 0f04 	tst.w	r4, #4
 8006596:	d125      	bne.n	80065e4 <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006598:	f014 0f08 	tst.w	r4, #8
 800659c:	d126      	bne.n	80065ec <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800659e:	f014 0f10 	tst.w	r4, #16
 80065a2:	d127      	bne.n	80065f4 <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80065a4:	f014 0f20 	tst.w	r4, #32
 80065a8:	d128      	bne.n	80065fc <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80065aa:	f014 0f40 	tst.w	r4, #64	@ 0x40
 80065ae:	d129      	bne.n	8006604 <HAL_SUBGHZ_IRQHandler+0xb4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80065b0:	f014 0f80 	tst.w	r4, #128	@ 0x80
 80065b4:	d006      	beq.n	80065c4 <HAL_SUBGHZ_IRQHandler+0x74>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80065b6:	f414 7f80 	tst.w	r4, #256	@ 0x100
 80065ba:	d027      	beq.n	800660c <HAL_SUBGHZ_IRQHandler+0xbc>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80065bc:	2101      	movs	r1, #1
 80065be:	4628      	mov	r0, r5
 80065c0:	f00b fbca 	bl	8011d58 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80065c4:	f414 7f00 	tst.w	r4, #512	@ 0x200
 80065c8:	d125      	bne.n	8006616 <HAL_SUBGHZ_IRQHandler+0xc6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80065ca:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 80065ce:	d126      	bne.n	800661e <HAL_SUBGHZ_IRQHandler+0xce>
}
 80065d0:	b002      	add	sp, #8
 80065d2:	bd70      	pop	{r4, r5, r6, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80065d4:	4628      	mov	r0, r5
 80065d6:	f00b fba7 	bl	8011d28 <HAL_SUBGHZ_TxCpltCallback>
 80065da:	e7d4      	b.n	8006586 <HAL_SUBGHZ_IRQHandler+0x36>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80065dc:	4628      	mov	r0, r5
 80065de:	f00b fbab 	bl	8011d38 <HAL_SUBGHZ_RxCpltCallback>
 80065e2:	e7d6      	b.n	8006592 <HAL_SUBGHZ_IRQHandler+0x42>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80065e4:	4628      	mov	r0, r5
 80065e6:	f00b fbdb 	bl	8011da0 <HAL_SUBGHZ_PreambleDetectedCallback>
 80065ea:	e7d5      	b.n	8006598 <HAL_SUBGHZ_IRQHandler+0x48>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80065ec:	4628      	mov	r0, r5
 80065ee:	f00b fbdf 	bl	8011db0 <HAL_SUBGHZ_SyncWordValidCallback>
 80065f2:	e7d4      	b.n	800659e <HAL_SUBGHZ_IRQHandler+0x4e>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80065f4:	4628      	mov	r0, r5
 80065f6:	f00b fbe3 	bl	8011dc0 <HAL_SUBGHZ_HeaderValidCallback>
 80065fa:	e7d3      	b.n	80065a4 <HAL_SUBGHZ_IRQHandler+0x54>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80065fc:	4628      	mov	r0, r5
 80065fe:	f00b fbc7 	bl	8011d90 <HAL_SUBGHZ_HeaderErrorCallback>
 8006602:	e7d2      	b.n	80065aa <HAL_SUBGHZ_IRQHandler+0x5a>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006604:	4628      	mov	r0, r5
 8006606:	f00b fb9f 	bl	8011d48 <HAL_SUBGHZ_CRCErrorCallback>
 800660a:	e7d1      	b.n	80065b0 <HAL_SUBGHZ_IRQHandler+0x60>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800660c:	2100      	movs	r1, #0
 800660e:	4628      	mov	r0, r5
 8006610:	f00b fba2 	bl	8011d58 <HAL_SUBGHZ_CADStatusCallback>
 8006614:	e7d6      	b.n	80065c4 <HAL_SUBGHZ_IRQHandler+0x74>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006616:	4628      	mov	r0, r5
 8006618:	f00b fbb0 	bl	8011d7c <HAL_SUBGHZ_RxTxTimeoutCallback>
 800661c:	e7d5      	b.n	80065ca <HAL_SUBGHZ_IRQHandler+0x7a>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800661e:	4628      	mov	r0, r5
 8006620:	f00b fbd6 	bl	8011dd0 <HAL_SUBGHZ_LrFhssHopCallback>
}
 8006624:	e7d4      	b.n	80065d0 <HAL_SUBGHZ_IRQHandler+0x80>
	...

08006628 <HAL_SUBGHZ_WriteBuffer>:
{
 8006628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800662c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800662e:	7980      	ldrb	r0, [r0, #6]
 8006630:	fa5f f880 	uxtb.w	r8, r0
 8006634:	f1b8 0f01 	cmp.w	r8, #1
 8006638:	d138      	bne.n	80066ac <HAL_SUBGHZ_WriteBuffer+0x84>
 800663a:	460c      	mov	r4, r1
 800663c:	4617      	mov	r7, r2
 800663e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006640:	796b      	ldrb	r3, [r5, #5]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d035      	beq.n	80066b2 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8006646:	2301      	movs	r3, #1
 8006648:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800664a:	4628      	mov	r0, r5
 800664c:	f7ff fe10 	bl	8006270 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006650:	4a19      	ldr	r2, [pc, #100]	@ (80066b8 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8006652:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006656:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800665a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800665e:	210e      	movs	r1, #14
 8006660:	4628      	mov	r0, r5
 8006662:	f7ff fd5d 	bl	8006120 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006666:	4621      	mov	r1, r4
 8006668:	4628      	mov	r0, r5
 800666a:	f7ff fd59 	bl	8006120 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800666e:	2400      	movs	r4, #0
 8006670:	e005      	b.n	800667e <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006672:	5d39      	ldrb	r1, [r7, r4]
 8006674:	4628      	mov	r0, r5
 8006676:	f7ff fd53 	bl	8006120 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800667a:	3401      	adds	r4, #1
 800667c:	b2a4      	uxth	r4, r4
 800667e:	42b4      	cmp	r4, r6
 8006680:	d3f7      	bcc.n	8006672 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006682:	4a0d      	ldr	r2, [pc, #52]	@ (80066b8 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8006684:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006688:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800668c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006690:	4628      	mov	r0, r5
 8006692:	f7ff fdc1 	bl	8006218 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006696:	68ab      	ldr	r3, [r5, #8]
 8006698:	b90b      	cbnz	r3, 800669e <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 800669a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800669e:	2301      	movs	r3, #1
 80066a0:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80066a2:	2300      	movs	r3, #0
 80066a4:	716b      	strb	r3, [r5, #5]
}
 80066a6:	4640      	mov	r0, r8
 80066a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80066ac:	f04f 0802 	mov.w	r8, #2
 80066b0:	e7f9      	b.n	80066a6 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 80066b2:	f04f 0802 	mov.w	r8, #2
 80066b6:	e7f6      	b.n	80066a6 <HAL_SUBGHZ_WriteBuffer+0x7e>
 80066b8:	58000400 	.word	0x58000400

080066bc <HAL_SUBGHZ_ReadBuffer>:
{
 80066bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80066c2:	7980      	ldrb	r0, [r0, #6]
 80066c4:	fa5f f880 	uxtb.w	r8, r0
 80066c8:	f1b8 0f01 	cmp.w	r8, #1
 80066cc:	d13d      	bne.n	800674a <HAL_SUBGHZ_ReadBuffer+0x8e>
 80066ce:	460c      	mov	r4, r1
 80066d0:	4615      	mov	r5, r2
 80066d2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80066d4:	7973      	ldrb	r3, [r6, #5]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d03a      	beq.n	8006750 <HAL_SUBGHZ_ReadBuffer+0x94>
 80066da:	2301      	movs	r3, #1
 80066dc:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80066de:	4630      	mov	r0, r6
 80066e0:	f7ff fdc6 	bl	8006270 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80066e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006758 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80066e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80066ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80066f2:	211e      	movs	r1, #30
 80066f4:	4630      	mov	r0, r6
 80066f6:	f7ff fd13 	bl	8006120 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80066fa:	4621      	mov	r1, r4
 80066fc:	4630      	mov	r0, r6
 80066fe:	f7ff fd0f 	bl	8006120 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006702:	2100      	movs	r1, #0
 8006704:	4630      	mov	r0, r6
 8006706:	f7ff fd0b 	bl	8006120 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800670a:	2400      	movs	r4, #0
 800670c:	e006      	b.n	800671c <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800670e:	4629      	mov	r1, r5
 8006710:	4630      	mov	r0, r6
 8006712:	f7ff fd41 	bl	8006198 <SUBGHZSPI_Receive>
      pData++;
 8006716:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006718:	3401      	adds	r4, #1
 800671a:	b2a4      	uxth	r4, r4
 800671c:	42bc      	cmp	r4, r7
 800671e:	d3f6      	bcc.n	800670e <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006720:	4a0d      	ldr	r2, [pc, #52]	@ (8006758 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8006722:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800672a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800672e:	4630      	mov	r0, r6
 8006730:	f7ff fd72 	bl	8006218 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006734:	68b3      	ldr	r3, [r6, #8]
 8006736:	b90b      	cbnz	r3, 800673c <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8006738:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800673c:	2301      	movs	r3, #1
 800673e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006740:	2300      	movs	r3, #0
 8006742:	7173      	strb	r3, [r6, #5]
}
 8006744:	4640      	mov	r0, r8
 8006746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800674a:	f04f 0802 	mov.w	r8, #2
 800674e:	e7f9      	b.n	8006744 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8006750:	f04f 0802 	mov.w	r8, #2
 8006754:	e7f6      	b.n	8006744 <HAL_SUBGHZ_ReadBuffer+0x88>
 8006756:	bf00      	nop
 8006758:	58000400 	.word	0x58000400

0800675c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800675c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	e852 3f00 	ldrex	r3, [r2]
 8006762:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	e842 3100 	strex	r1, r3, [r2]
 800676a:	2900      	cmp	r1, #0
 800676c:	d1f6      	bne.n	800675c <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800676e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	f102 0308 	add.w	r3, r2, #8
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677c:	3208      	adds	r2, #8
 800677e:	e842 3100 	strex	r1, r3, [r2]
 8006782:	2900      	cmp	r1, #0
 8006784:	d1f3      	bne.n	800676e <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006786:	2320      	movs	r3, #32
 8006788:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 800678c:	4770      	bx	lr

0800678e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800678e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	e852 3f00 	ldrex	r3, [r2]
 8006794:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	e842 3100 	strex	r1, r3, [r2]
 800679c:	2900      	cmp	r1, #0
 800679e:	d1f6      	bne.n	800678e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067a0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	f102 0308 	add.w	r3, r2, #8
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067ae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	3208      	adds	r2, #8
 80067b4:	e842 3100 	strex	r1, r3, [r2]
 80067b8:	2900      	cmp	r1, #0
 80067ba:	d1f1      	bne.n	80067a0 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067bc:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d006      	beq.n	80067d0 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067c2:	2320      	movs	r3, #32
 80067c4:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c8:	2300      	movs	r3, #0
 80067ca:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067cc:	6743      	str	r3, [r0, #116]	@ 0x74
}
 80067ce:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d2:	e852 3f00 	ldrex	r3, [r2]
 80067d6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	e842 3100 	strex	r1, r3, [r2]
 80067de:	2900      	cmp	r1, #0
 80067e0:	d1f6      	bne.n	80067d0 <UART_EndRxTransfer+0x42>
 80067e2:	e7ee      	b.n	80067c2 <UART_EndRxTransfer+0x34>

080067e4 <HAL_UART_Transmit_DMA>:
{
 80067e4:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80067e6:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 80067ea:	2a20      	cmp	r2, #32
 80067ec:	d13d      	bne.n	800686a <HAL_UART_Transmit_DMA+0x86>
{
 80067ee:	b510      	push	{r4, lr}
 80067f0:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80067f2:	2900      	cmp	r1, #0
 80067f4:	d03b      	beq.n	800686e <HAL_UART_Transmit_DMA+0x8a>
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d03b      	beq.n	8006872 <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 80067fa:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80067fc:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006800:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006804:	2200      	movs	r2, #0
 8006806:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800680a:	2221      	movs	r2, #33	@ 0x21
 800680c:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 8006810:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8006812:	b1ca      	cbz	r2, 8006848 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006814:	4918      	ldr	r1, [pc, #96]	@ (8006878 <HAL_UART_Transmit_DMA+0x94>)
 8006816:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006818:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800681a:	4918      	ldr	r1, [pc, #96]	@ (800687c <HAL_UART_Transmit_DMA+0x98>)
 800681c:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800681e:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8006820:	4917      	ldr	r1, [pc, #92]	@ (8006880 <HAL_UART_Transmit_DMA+0x9c>)
 8006822:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8006824:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8006826:	2100      	movs	r1, #0
 8006828:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800682a:	6802      	ldr	r2, [r0, #0]
 800682c:	3228      	adds	r2, #40	@ 0x28
 800682e:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8006830:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8006832:	f7fd fe43 	bl	80044bc <HAL_DMA_Start_IT>
 8006836:	b138      	cbz	r0, 8006848 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006838:	2310      	movs	r3, #16
 800683a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 800683e:	2320      	movs	r3, #32
 8006840:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_ERROR;
 8006844:	2001      	movs	r0, #1
 8006846:	e00f      	b.n	8006868 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	2240      	movs	r2, #64	@ 0x40
 800684c:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800684e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	f102 0308 	add.w	r3, r2, #8
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685c:	3208      	adds	r2, #8
 800685e:	e842 3100 	strex	r1, r3, [r2]
 8006862:	2900      	cmp	r1, #0
 8006864:	d1f3      	bne.n	800684e <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 8006866:	2000      	movs	r0, #0
}
 8006868:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800686a:	2002      	movs	r0, #2
}
 800686c:	4770      	bx	lr
      return HAL_ERROR;
 800686e:	2001      	movs	r0, #1
 8006870:	e7fa      	b.n	8006868 <HAL_UART_Transmit_DMA+0x84>
 8006872:	2001      	movs	r0, #1
 8006874:	e7f8      	b.n	8006868 <HAL_UART_Transmit_DMA+0x84>
 8006876:	bf00      	nop
 8006878:	08006885 	.word	0x08006885
 800687c:	080068f3 	.word	0x080068f3
 8006880:	080068ff 	.word	0x080068ff

08006884 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006884:	b508      	push	{r3, lr}
 8006886:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006888:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f013 0f20 	tst.w	r3, #32
 8006892:	d118      	bne.n	80068c6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800689a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	f102 0308 	add.w	r3, r2, #8
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a8:	3208      	adds	r2, #8
 80068aa:	e842 3100 	strex	r1, r3, [r2]
 80068ae:	2900      	cmp	r1, #0
 80068b0:	d1f3      	bne.n	800689a <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068b2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	e852 3f00 	ldrex	r3, [r2]
 80068b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	e842 3100 	strex	r1, r3, [r2]
 80068c0:	2900      	cmp	r1, #0
 80068c2:	d1f6      	bne.n	80068b2 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068c4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80068c6:	f7fc f83f 	bl	8002948 <HAL_UART_TxCpltCallback>
}
 80068ca:	e7fb      	b.n	80068c4 <UART_DMATransmitCplt+0x40>

080068cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068cc:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068ce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	e852 3f00 	ldrex	r3, [r2]
 80068d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	e842 3100 	strex	r1, r3, [r2]
 80068dc:	2900      	cmp	r1, #0
 80068de:	d1f6      	bne.n	80068ce <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068e0:	2320      	movs	r3, #32
 80068e2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068ea:	f7fc f82d 	bl	8002948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ee:	bd08      	pop	{r3, pc}

080068f0 <HAL_UART_TxHalfCpltCallback>:
}
 80068f0:	4770      	bx	lr

080068f2 <UART_DMATxHalfCplt>:
{
 80068f2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80068f4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80068f6:	f7ff fffb 	bl	80068f0 <HAL_UART_TxHalfCpltCallback>
}
 80068fa:	bd08      	pop	{r3, pc}

080068fc <HAL_UART_ErrorCallback>:
}
 80068fc:	4770      	bx	lr

080068fe <UART_DMAError>:
{
 80068fe:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006900:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006902:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006906:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006912:	d001      	beq.n	8006918 <UART_DMAError+0x1a>
 8006914:	2a21      	cmp	r2, #33	@ 0x21
 8006916:	d010      	beq.n	800693a <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006920:	d001      	beq.n	8006926 <UART_DMAError+0x28>
 8006922:	2d22      	cmp	r5, #34	@ 0x22
 8006924:	d010      	beq.n	8006948 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006926:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800692a:	f043 0310 	orr.w	r3, r3, #16
 800692e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  HAL_UART_ErrorCallback(huart);
 8006932:	4620      	mov	r0, r4
 8006934:	f7ff ffe2 	bl	80068fc <HAL_UART_ErrorCallback>
}
 8006938:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006940:	4620      	mov	r0, r4
 8006942:	f7ff ff0b 	bl	800675c <UART_EndTxTransfer>
 8006946:	e7e7      	b.n	8006918 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800694e:	4620      	mov	r0, r4
 8006950:	f7ff ff1d 	bl	800678e <UART_EndRxTransfer>
 8006954:	e7e7      	b.n	8006926 <UART_DMAError+0x28>

08006956 <UART_DMAAbortOnError>:
{
 8006956:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006958:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006960:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 8006964:	f7ff ffca 	bl	80068fc <HAL_UART_ErrorCallback>
}
 8006968:	bd08      	pop	{r3, pc}

0800696a <HAL_UARTEx_RxEventCallback>:
}
 800696a:	4770      	bx	lr

0800696c <HAL_UART_IRQHandler>:
{
 800696c:	b570      	push	{r4, r5, r6, lr}
 800696e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006970:	6802      	ldr	r2, [r0, #0]
 8006972:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006974:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006976:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8006978:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 800697c:	ea13 0f0c 	tst.w	r3, ip
 8006980:	d10d      	bne.n	800699e <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006982:	f013 0f20 	tst.w	r3, #32
 8006986:	d010      	beq.n	80069aa <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006988:	f010 0f20 	tst.w	r0, #32
 800698c:	d102      	bne.n	8006994 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800698e:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8006992:	d00a      	beq.n	80069aa <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 8006994:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8006996:	b393      	cbz	r3, 80069fe <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 8006998:	4620      	mov	r0, r4
 800699a:	4798      	blx	r3
      return;
 800699c:	e02f      	b.n	80069fe <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800699e:	4db4      	ldr	r5, [pc, #720]	@ (8006c70 <HAL_UART_IRQHandler+0x304>)
 80069a0:	400d      	ands	r5, r1
 80069a2:	d12d      	bne.n	8006a00 <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80069a4:	4eb3      	ldr	r6, [pc, #716]	@ (8006c74 <HAL_UART_IRQHandler+0x308>)
 80069a6:	4230      	tst	r0, r6
 80069a8:	d12a      	bne.n	8006a00 <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069aa:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 80069ac:	2d01      	cmp	r5, #1
 80069ae:	f000 80c0 	beq.w	8006b32 <HAL_UART_IRQHandler+0x1c6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069b2:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80069b6:	d003      	beq.n	80069c0 <HAL_UART_IRQHandler+0x54>
 80069b8:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 80069bc:	f040 815e 	bne.w	8006c7c <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80069c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80069c4:	d007      	beq.n	80069d6 <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80069c6:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80069ca:	f040 815e 	bne.w	8006c8a <HAL_UART_IRQHandler+0x31e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80069ce:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 80069d2:	f040 815a 	bne.w	8006c8a <HAL_UART_IRQHandler+0x31e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069d6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80069da:	d003      	beq.n	80069e4 <HAL_UART_IRQHandler+0x78>
 80069dc:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80069e0:	f040 815a 	bne.w	8006c98 <HAL_UART_IRQHandler+0x32c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80069e4:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80069e8:	d003      	beq.n	80069f2 <HAL_UART_IRQHandler+0x86>
 80069ea:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 80069ee:	f040 8157 	bne.w	8006ca0 <HAL_UART_IRQHandler+0x334>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80069f2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80069f6:	d002      	beq.n	80069fe <HAL_UART_IRQHandler+0x92>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	f2c0 8155 	blt.w	8006ca8 <HAL_UART_IRQHandler+0x33c>
}
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a00:	f013 0f01 	tst.w	r3, #1
 8006a04:	d009      	beq.n	8006a1a <HAL_UART_IRQHandler+0xae>
 8006a06:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8006a0a:	d006      	beq.n	8006a1a <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a0c:	2601      	movs	r6, #1
 8006a0e:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a10:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8006a14:	4332      	orrs	r2, r6
 8006a16:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a1a:	f013 0f02 	tst.w	r3, #2
 8006a1e:	d00b      	beq.n	8006a38 <HAL_UART_IRQHandler+0xcc>
 8006a20:	f011 0f01 	tst.w	r1, #1
 8006a24:	d008      	beq.n	8006a38 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a26:	6822      	ldr	r2, [r4, #0]
 8006a28:	2602      	movs	r6, #2
 8006a2a:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a2c:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8006a30:	f042 0204 	orr.w	r2, r2, #4
 8006a34:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a38:	f013 0f04 	tst.w	r3, #4
 8006a3c:	d00b      	beq.n	8006a56 <HAL_UART_IRQHandler+0xea>
 8006a3e:	f011 0f01 	tst.w	r1, #1
 8006a42:	d008      	beq.n	8006a56 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a44:	6822      	ldr	r2, [r4, #0]
 8006a46:	2604      	movs	r6, #4
 8006a48:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a4a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8006a4e:	f042 0202 	orr.w	r2, r2, #2
 8006a52:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a56:	f013 0f08 	tst.w	r3, #8
 8006a5a:	d00b      	beq.n	8006a74 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a5c:	f010 0f20 	tst.w	r0, #32
 8006a60:	d100      	bne.n	8006a64 <HAL_UART_IRQHandler+0xf8>
 8006a62:	b13d      	cbz	r5, 8006a74 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a64:	6822      	ldr	r2, [r4, #0]
 8006a66:	2508      	movs	r5, #8
 8006a68:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a6a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8006a6e:	432a      	orrs	r2, r5
 8006a70:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a74:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8006a78:	d00c      	beq.n	8006a94 <HAL_UART_IRQHandler+0x128>
 8006a7a:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 8006a7e:	d009      	beq.n	8006a94 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a80:	6822      	ldr	r2, [r4, #0]
 8006a82:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8006a86:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a88:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8006a8c:	f042 0220 	orr.w	r2, r2, #32
 8006a90:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a94:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8006a98:	2a00      	cmp	r2, #0
 8006a9a:	d0b0      	beq.n	80069fe <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a9c:	f013 0f20 	tst.w	r3, #32
 8006aa0:	d009      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006aa2:	f010 0f20 	tst.w	r0, #32
 8006aa6:	d102      	bne.n	8006aae <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006aa8:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8006aac:	d003      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 8006aae:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8006ab0:	b10b      	cbz	r3, 8006ab6 <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8006ab6:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006ac2:	d102      	bne.n	8006aca <HAL_UART_IRQHandler+0x15e>
 8006ac4:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8006ac8:	d02c      	beq.n	8006b24 <HAL_UART_IRQHandler+0x1b8>
        UART_EndRxTransfer(huart);
 8006aca:	4620      	mov	r0, r4
 8006acc:	f7ff fe5f 	bl	800678e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006ad8:	d020      	beq.n	8006b1c <HAL_UART_IRQHandler+0x1b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ada:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	f102 0308 	add.w	r3, r2, #8
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	3208      	adds	r2, #8
 8006aea:	e842 3100 	strex	r1, r3, [r2]
 8006aee:	2900      	cmp	r1, #0
 8006af0:	d1f3      	bne.n	8006ada <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 8006af2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8006af6:	b16b      	cbz	r3, 8006b14 <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006af8:	4a5f      	ldr	r2, [pc, #380]	@ (8006c78 <HAL_UART_IRQHandler+0x30c>)
 8006afa:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006afc:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8006b00:	f7fd fd62 	bl	80045c8 <HAL_DMA_Abort_IT>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	f43f af7a 	beq.w	80069fe <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b0a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8006b0e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006b10:	4798      	blx	r3
 8006b12:	e774      	b.n	80069fe <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 8006b14:	4620      	mov	r0, r4
 8006b16:	f7ff fef1 	bl	80068fc <HAL_UART_ErrorCallback>
 8006b1a:	e770      	b.n	80069fe <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f7ff feed 	bl	80068fc <HAL_UART_ErrorCallback>
 8006b22:	e76c      	b.n	80069fe <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 8006b24:	4620      	mov	r0, r4
 8006b26:	f7ff fee9 	bl	80068fc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    return;
 8006b30:	e765      	b.n	80069fe <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b32:	f013 0f10 	tst.w	r3, #16
 8006b36:	f43f af3c 	beq.w	80069b2 <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b3a:	f010 0f10 	tst.w	r0, #16
 8006b3e:	f43f af38 	beq.w	80069b2 <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b42:	2310      	movs	r3, #16
 8006b44:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006b4e:	d053      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b50:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8006b54:	6813      	ldr	r3, [r2, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f43f af4f 	beq.w	80069fe <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b60:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8006b64:	4299      	cmp	r1, r3
 8006b66:	f67f af4a 	bls.w	80069fe <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 8006b6a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b6e:	6813      	ldr	r3, [r2, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f013 0f20 	tst.w	r3, #32
 8006b76:	d132      	bne.n	8006bde <HAL_UART_IRQHandler+0x272>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b78:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	e852 3f00 	ldrex	r3, [r2]
 8006b7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	e842 3100 	strex	r1, r3, [r2]
 8006b86:	2900      	cmp	r1, #0
 8006b88:	d1f6      	bne.n	8006b78 <HAL_UART_IRQHandler+0x20c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	f102 0308 	add.w	r3, r2, #8
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	3208      	adds	r2, #8
 8006b9a:	e842 3100 	strex	r1, r3, [r2]
 8006b9e:	2900      	cmp	r1, #0
 8006ba0:	d1f3      	bne.n	8006b8a <HAL_UART_IRQHandler+0x21e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba4:	f102 0308 	add.w	r3, r2, #8
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	3208      	adds	r2, #8
 8006bb2:	e842 3100 	strex	r1, r3, [r2]
 8006bb6:	2900      	cmp	r1, #0
 8006bb8:	d1f3      	bne.n	8006ba2 <HAL_UART_IRQHandler+0x236>
          huart->RxState = HAL_UART_STATE_READY;
 8006bba:	2320      	movs	r3, #32
 8006bbc:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	e852 3f00 	ldrex	r3, [r2]
 8006bca:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	e842 3100 	strex	r1, r3, [r2]
 8006bd2:	2900      	cmp	r1, #0
 8006bd4:	d1f6      	bne.n	8006bc4 <HAL_UART_IRQHandler+0x258>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bd6:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8006bda:	f7fd fcbb 	bl	8004554 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bde:	2302      	movs	r3, #2
 8006be0:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006be2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8006be6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	1ac9      	subs	r1, r1, r3
 8006bee:	b289      	uxth	r1, r1
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f7ff feba 	bl	800696a <HAL_UARTEx_RxEventCallback>
      return;
 8006bf6:	e702      	b.n	80069fe <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bf8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8006bfc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	1ac9      	subs	r1, r1, r3
 8006c04:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8006c06:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f43f aef6 	beq.w	80069fe <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 8006c12:	2900      	cmp	r1, #0
 8006c14:	f43f aef3 	beq.w	80069fe <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c18:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	e852 3f00 	ldrex	r3, [r2]
 8006c1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	e842 3000 	strex	r0, r3, [r2]
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d1f6      	bne.n	8006c18 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c2a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	f102 0308 	add.w	r3, r2, #8
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c38:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	3208      	adds	r2, #8
 8006c3e:	e842 3000 	strex	r0, r3, [r2]
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d1f1      	bne.n	8006c2a <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8006c46:	2320      	movs	r3, #32
 8006c48:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8006c50:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c52:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	e852 3f00 	ldrex	r3, [r2]
 8006c58:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	e842 3000 	strex	r0, r3, [r2]
 8006c60:	2800      	cmp	r0, #0
 8006c62:	d1f6      	bne.n	8006c52 <HAL_UART_IRQHandler+0x2e6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c64:	2302      	movs	r3, #2
 8006c66:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f7ff fe7e 	bl	800696a <HAL_UARTEx_RxEventCallback>
      return;
 8006c6e:	e6c6      	b.n	80069fe <HAL_UART_IRQHandler+0x92>
 8006c70:	10000001 	.word	0x10000001
 8006c74:	04000120 	.word	0x04000120
 8006c78:	08006957 	.word	0x08006957
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c7c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006c80:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 ff8f 	bl	8007ba6 <HAL_UARTEx_WakeupCallback>
    return;
 8006c88:	e6b9      	b.n	80069fe <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 8006c8a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f43f aeb6 	beq.w	80069fe <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 8006c92:	4620      	mov	r0, r4
 8006c94:	4798      	blx	r3
    return;
 8006c96:	e6b2      	b.n	80069fe <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f7ff fe17 	bl	80068cc <UART_EndTransmit_IT>
    return;
 8006c9e:	e6ae      	b.n	80069fe <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f000 ff82 	bl	8007baa <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8006ca6:	e6aa      	b.n	80069fe <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f000 ff7d 	bl	8007ba8 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8006cae:	e6a6      	b.n	80069fe <HAL_UART_IRQHandler+0x92>

08006cb0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cb0:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8006cb2:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cb6:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8006cba:	2a22      	cmp	r2, #34	@ 0x22
 8006cbc:	d005      	beq.n	8006cca <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cbe:	6802      	ldr	r2, [r0, #0]
 8006cc0:	6993      	ldr	r3, [r2, #24]
 8006cc2:	f043 0308 	orr.w	r3, r3, #8
 8006cc6:	6193      	str	r3, [r2, #24]
  }
}
 8006cc8:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cca:	6802      	ldr	r2, [r0, #0]
 8006ccc:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8006cd2:	400b      	ands	r3, r1
 8006cd4:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8006cd6:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8006cd8:	3301      	adds	r3, #1
 8006cda:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8006cdc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8006cea:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e9      	bne.n	8006cc8 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cf4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	e852 3f00 	ldrex	r3, [r2]
 8006cfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	e842 3100 	strex	r1, r3, [r2]
 8006d02:	2900      	cmp	r1, #0
 8006d04:	d1f6      	bne.n	8006cf4 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d06:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	f102 0308 	add.w	r3, r2, #8
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	3208      	adds	r2, #8
 8006d16:	e842 3100 	strex	r1, r3, [r2]
 8006d1a:	2900      	cmp	r1, #0
 8006d1c:	d1f3      	bne.n	8006d06 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8006d1e:	2320      	movs	r3, #32
 8006d20:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 8006d24:	2300      	movs	r3, #0
 8006d26:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d28:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d2a:	6803      	ldr	r3, [r0, #0]
 8006d2c:	4a16      	ldr	r2, [pc, #88]	@ (8006d88 <UART_RxISR_8BIT+0xd8>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00c      	beq.n	8006d4c <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006d38:	d008      	beq.n	8006d4c <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d3a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	e852 3f00 	ldrex	r3, [r2]
 8006d40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	e842 3100 	strex	r1, r3, [r2]
 8006d48:	2900      	cmp	r1, #0
 8006d4a:	d1f6      	bne.n	8006d3a <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d4c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d116      	bne.n	8006d80 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d52:	2300      	movs	r3, #0
 8006d54:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d56:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d58:	e852 3f00 	ldrex	r3, [r2]
 8006d5c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	e842 3100 	strex	r1, r3, [r2]
 8006d64:	2900      	cmp	r1, #0
 8006d66:	d1f6      	bne.n	8006d56 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d68:	6803      	ldr	r3, [r0, #0]
 8006d6a:	69da      	ldr	r2, [r3, #28]
 8006d6c:	f012 0f10 	tst.w	r2, #16
 8006d70:	d001      	beq.n	8006d76 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d72:	2210      	movs	r2, #16
 8006d74:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d76:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8006d7a:	f7ff fdf6 	bl	800696a <HAL_UARTEx_RxEventCallback>
 8006d7e:	e7a3      	b.n	8006cc8 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006d80:	f7fb fdf2 	bl	8002968 <HAL_UART_RxCpltCallback>
 8006d84:	e7a0      	b.n	8006cc8 <UART_RxISR_8BIT+0x18>
 8006d86:	bf00      	nop
 8006d88:	40008000 	.word	0x40008000

08006d8c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d8c:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d8e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d92:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8006d96:	2b22      	cmp	r3, #34	@ 0x22
 8006d98:	d005      	beq.n	8006da6 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d9a:	6802      	ldr	r2, [r0, #0]
 8006d9c:	6993      	ldr	r3, [r2, #24]
 8006d9e:	f043 0308 	orr.w	r3, r3, #8
 8006da2:	6193      	str	r3, [r2, #24]
  }
}
 8006da4:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006da6:	6803      	ldr	r3, [r0, #0]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006daa:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8006dac:	4013      	ands	r3, r2
 8006dae:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8006db0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8006db2:	3302      	adds	r3, #2
 8006db4:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8006db6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8006dc4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1ea      	bne.n	8006da4 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	e852 3f00 	ldrex	r3, [r2]
 8006dd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	e842 3100 	strex	r1, r3, [r2]
 8006ddc:	2900      	cmp	r1, #0
 8006dde:	d1f6      	bne.n	8006dce <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	f102 0308 	add.w	r3, r2, #8
 8006de6:	e853 3f00 	ldrex	r3, [r3]
 8006dea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	3208      	adds	r2, #8
 8006df0:	e842 3100 	strex	r1, r3, [r2]
 8006df4:	2900      	cmp	r1, #0
 8006df6:	d1f3      	bne.n	8006de0 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8006df8:	2320      	movs	r3, #32
 8006dfa:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e02:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e04:	6803      	ldr	r3, [r0, #0]
 8006e06:	4a16      	ldr	r2, [pc, #88]	@ (8006e60 <UART_RxISR_16BIT+0xd4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00c      	beq.n	8006e26 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006e12:	d008      	beq.n	8006e26 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e14:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	e852 3f00 	ldrex	r3, [r2]
 8006e1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	e842 3100 	strex	r1, r3, [r2]
 8006e22:	2900      	cmp	r1, #0
 8006e24:	d1f6      	bne.n	8006e14 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e26:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d116      	bne.n	8006e5a <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e30:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e32:	e852 3f00 	ldrex	r3, [r2]
 8006e36:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	e842 3100 	strex	r1, r3, [r2]
 8006e3e:	2900      	cmp	r1, #0
 8006e40:	d1f6      	bne.n	8006e30 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e42:	6803      	ldr	r3, [r0, #0]
 8006e44:	69da      	ldr	r2, [r3, #28]
 8006e46:	f012 0f10 	tst.w	r2, #16
 8006e4a:	d001      	beq.n	8006e50 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e4c:	2210      	movs	r2, #16
 8006e4e:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e50:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8006e54:	f7ff fd89 	bl	800696a <HAL_UARTEx_RxEventCallback>
 8006e58:	e7a4      	b.n	8006da4 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006e5a:	f7fb fd85 	bl	8002968 <HAL_UART_RxCpltCallback>
 8006e5e:	e7a1      	b.n	8006da4 <UART_RxISR_16BIT+0x18>
 8006e60:	40008000 	.word	0x40008000

08006e64 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8006e68:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e6c:	6803      	ldr	r3, [r0, #0]
 8006e6e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006e70:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006e74:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e78:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8006e7c:	2a22      	cmp	r2, #34	@ 0x22
 8006e7e:	d005      	beq.n	8006e8c <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e80:	699a      	ldr	r2, [r3, #24]
 8006e82:	f042 0208 	orr.w	r2, r2, #8
 8006e86:	619a      	str	r2, [r3, #24]
  }
}
 8006e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e8c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8006e8e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e92:	e008      	b.n	8006ea6 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e94:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d14c      	bne.n	8006f36 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8006e9c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d04e      	beq.n	8006f44 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ea6:	2f00      	cmp	r7, #0
 8006ea8:	f000 809a 	beq.w	8006fe0 <UART_RxISR_8BIT_FIFOEN+0x17c>
 8006eac:	f015 0f20 	tst.w	r5, #32
 8006eb0:	f000 8096 	beq.w	8006fe0 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006eb8:	b2f3      	uxtb	r3, r6
 8006eba:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006ebc:	400b      	ands	r3, r1
 8006ebe:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8006ec0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8006ec6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006ed8:	f015 0f07 	tst.w	r5, #7
 8006edc:	d0de      	beq.n	8006e9c <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ede:	f015 0f01 	tst.w	r5, #1
 8006ee2:	d009      	beq.n	8006ef8 <UART_RxISR_8BIT_FIFOEN+0x94>
 8006ee4:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8006ee8:	d006      	beq.n	8006ef8 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006eea:	2201      	movs	r2, #1
 8006eec:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006eee:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ef8:	f015 0f02 	tst.w	r5, #2
 8006efc:	d00b      	beq.n	8006f16 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8006efe:	f018 0f01 	tst.w	r8, #1
 8006f02:	d008      	beq.n	8006f16 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	2202      	movs	r2, #2
 8006f08:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f0a:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006f0e:	f043 0304 	orr.w	r3, r3, #4
 8006f12:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f16:	f015 0f04 	tst.w	r5, #4
 8006f1a:	d0bb      	beq.n	8006e94 <UART_RxISR_8BIT_FIFOEN+0x30>
 8006f1c:	f018 0f01 	tst.w	r8, #1
 8006f20:	d0b8      	beq.n	8006e94 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	2204      	movs	r2, #4
 8006f26:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f28:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006f2c:	f043 0302 	orr.w	r3, r3, #2
 8006f30:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8006f34:	e7ae      	b.n	8006e94 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006f36:	4620      	mov	r0, r4
 8006f38:	f7ff fce0 	bl	80068fc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8006f42:	e7ab      	b.n	8006e9c <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f44:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	e852 3f00 	ldrex	r3, [r2]
 8006f4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	e842 3100 	strex	r1, r3, [r2]
 8006f52:	2900      	cmp	r1, #0
 8006f54:	d1f6      	bne.n	8006f44 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f56:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	f102 0308 	add.w	r3, r2, #8
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f64:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	3208      	adds	r2, #8
 8006f6a:	e842 3100 	strex	r1, r3, [r2]
 8006f6e:	2900      	cmp	r1, #0
 8006f70:	d1f1      	bne.n	8006f56 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8006f72:	2320      	movs	r3, #32
 8006f74:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f7c:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	4a29      	ldr	r2, [pc, #164]	@ (8007028 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d003      	beq.n	8006f8e <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006f8c:	d106      	bne.n	8006f9c <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f8e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d00d      	beq.n	8006fb0 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8006f94:	4620      	mov	r0, r4
 8006f96:	f7fb fce7 	bl	8002968 <HAL_UART_RxCpltCallback>
 8006f9a:	e784      	b.n	8006ea6 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f9c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	e852 3f00 	ldrex	r3, [r2]
 8006fa2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa6:	e842 3100 	strex	r1, r3, [r2]
 8006faa:	2900      	cmp	r1, #0
 8006fac:	d1f6      	bne.n	8006f9c <UART_RxISR_8BIT_FIFOEN+0x138>
 8006fae:	e7ee      	b.n	8006f8e <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	e852 3f00 	ldrex	r3, [r2]
 8006fba:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	e842 3100 	strex	r1, r3, [r2]
 8006fc2:	2900      	cmp	r1, #0
 8006fc4:	d1f6      	bne.n	8006fb4 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	69da      	ldr	r2, [r3, #28]
 8006fca:	f012 0f10 	tst.w	r2, #16
 8006fce:	d001      	beq.n	8006fd4 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fd0:	2210      	movs	r2, #16
 8006fd2:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fd4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f7ff fcc6 	bl	800696a <HAL_UARTEx_RxEventCallback>
 8006fde:	e762      	b.n	8006ea6 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8006fe0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006fe4:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f43f af4e 	beq.w	8006e88 <UART_RxISR_8BIT_FIFOEN+0x24>
 8006fec:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	f67f af49 	bls.w	8006e88 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ff6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff8:	f102 0308 	add.w	r3, r2, #8
 8006ffc:	e853 3f00 	ldrex	r3, [r3]
 8007000:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007004:	3208      	adds	r2, #8
 8007006:	e842 3100 	strex	r1, r3, [r2]
 800700a:	2900      	cmp	r1, #0
 800700c:	d1f3      	bne.n	8006ff6 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 800700e:	4b07      	ldr	r3, [pc, #28]	@ (800702c <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8007010:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007012:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	e852 3f00 	ldrex	r3, [r2]
 8007018:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701c:	e842 3100 	strex	r1, r3, [r2]
 8007020:	2900      	cmp	r1, #0
 8007022:	d1f6      	bne.n	8007012 <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8007024:	e730      	b.n	8006e88 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007026:	bf00      	nop
 8007028:	40008000 	.word	0x40008000
 800702c:	08006cb1 	.word	0x08006cb1

08007030 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007034:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007038:	6803      	ldr	r3, [r0, #0]
 800703a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800703c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007040:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007044:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8007048:	2a22      	cmp	r2, #34	@ 0x22
 800704a:	d005      	beq.n	8007058 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800704c:	699a      	ldr	r2, [r3, #24]
 800704e:	f042 0208 	orr.w	r2, r2, #8
 8007052:	619a      	str	r2, [r3, #24]
  }
}
 8007054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007058:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800705a:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800705e:	e008      	b.n	8007072 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007060:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007064:	2b00      	cmp	r3, #0
 8007066:	d14b      	bne.n	8007100 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8007068:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800706c:	b29b      	uxth	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d04d      	beq.n	800710e <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007072:	2f00      	cmp	r7, #0
 8007074:	f000 8099 	beq.w	80071aa <UART_RxISR_16BIT_FIFOEN+0x17a>
 8007078:	f015 0f20 	tst.w	r5, #32
 800707c:	f000 8095 	beq.w	80071aa <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007084:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8007086:	4033      	ands	r3, r6
 8007088:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800708a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800708c:	3302      	adds	r3, #2
 800708e:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8007090:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007094:	b29b      	uxth	r3, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	b29b      	uxth	r3, r3
 800709a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80070a2:	f015 0f07 	tst.w	r5, #7
 80070a6:	d0df      	beq.n	8007068 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070a8:	f015 0f01 	tst.w	r5, #1
 80070ac:	d009      	beq.n	80070c2 <UART_RxISR_16BIT_FIFOEN+0x92>
 80070ae:	f419 7f80 	tst.w	r9, #256	@ 0x100
 80070b2:	d006      	beq.n	80070c2 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070b4:	2201      	movs	r2, #1
 80070b6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070b8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80070bc:	4313      	orrs	r3, r2
 80070be:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070c2:	f015 0f02 	tst.w	r5, #2
 80070c6:	d00b      	beq.n	80070e0 <UART_RxISR_16BIT_FIFOEN+0xb0>
 80070c8:	f018 0f01 	tst.w	r8, #1
 80070cc:	d008      	beq.n	80070e0 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	2202      	movs	r2, #2
 80070d2:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070d4:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80070d8:	f043 0304 	orr.w	r3, r3, #4
 80070dc:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070e0:	f015 0f04 	tst.w	r5, #4
 80070e4:	d0bc      	beq.n	8007060 <UART_RxISR_16BIT_FIFOEN+0x30>
 80070e6:	f018 0f01 	tst.w	r8, #1
 80070ea:	d0b9      	beq.n	8007060 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	2204      	movs	r2, #4
 80070f0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070f2:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80070f6:	f043 0302 	orr.w	r3, r3, #2
 80070fa:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 80070fe:	e7af      	b.n	8007060 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007100:	4620      	mov	r0, r4
 8007102:	f7ff fbfb 	bl	80068fc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007106:	2300      	movs	r3, #0
 8007108:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800710c:	e7ac      	b.n	8007068 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800710e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	e852 3f00 	ldrex	r3, [r2]
 8007114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007118:	e842 3100 	strex	r1, r3, [r2]
 800711c:	2900      	cmp	r1, #0
 800711e:	d1f6      	bne.n	800710e <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007120:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	f102 0308 	add.w	r3, r2, #8
 8007126:	e853 3f00 	ldrex	r3, [r3]
 800712a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800712e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	3208      	adds	r2, #8
 8007134:	e842 3100 	strex	r1, r3, [r2]
 8007138:	2900      	cmp	r1, #0
 800713a:	d1f1      	bne.n	8007120 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 800713c:	2320      	movs	r3, #32
 800713e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8007142:	2300      	movs	r3, #0
 8007144:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007146:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	4a29      	ldr	r2, [pc, #164]	@ (80071f0 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d003      	beq.n	8007158 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8007156:	d106      	bne.n	8007166 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007158:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800715a:	2b01      	cmp	r3, #1
 800715c:	d00d      	beq.n	800717a <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 800715e:	4620      	mov	r0, r4
 8007160:	f7fb fc02 	bl	8002968 <HAL_UART_RxCpltCallback>
 8007164:	e785      	b.n	8007072 <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007166:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007168:	e852 3f00 	ldrex	r3, [r2]
 800716c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	e842 3100 	strex	r1, r3, [r2]
 8007174:	2900      	cmp	r1, #0
 8007176:	d1f6      	bne.n	8007166 <UART_RxISR_16BIT_FIFOEN+0x136>
 8007178:	e7ee      	b.n	8007158 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717a:	2300      	movs	r3, #0
 800717c:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	e852 3f00 	ldrex	r3, [r2]
 8007184:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	e842 3100 	strex	r1, r3, [r2]
 800718c:	2900      	cmp	r1, #0
 800718e:	d1f6      	bne.n	800717e <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	69da      	ldr	r2, [r3, #28]
 8007194:	f012 0f10 	tst.w	r2, #16
 8007198:	d001      	beq.n	800719e <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800719a:	2210      	movs	r2, #16
 800719c:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800719e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80071a2:	4620      	mov	r0, r4
 80071a4:	f7ff fbe1 	bl	800696a <HAL_UARTEx_RxEventCallback>
 80071a8:	e763      	b.n	8007072 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80071aa:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80071ae:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f43f af4f 	beq.w	8007054 <UART_RxISR_16BIT_FIFOEN+0x24>
 80071b6:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 80071ba:	429a      	cmp	r2, r3
 80071bc:	f67f af4a 	bls.w	8007054 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071c0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c2:	f102 0308 	add.w	r3, r2, #8
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	3208      	adds	r2, #8
 80071d0:	e842 3100 	strex	r1, r3, [r2]
 80071d4:	2900      	cmp	r1, #0
 80071d6:	d1f3      	bne.n	80071c0 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 80071d8:	4b06      	ldr	r3, [pc, #24]	@ (80071f4 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 80071da:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80071dc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	e852 3f00 	ldrex	r3, [r2]
 80071e2:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	e842 3100 	strex	r1, r3, [r2]
 80071ea:	2900      	cmp	r1, #0
 80071ec:	d1f6      	bne.n	80071dc <UART_RxISR_16BIT_FIFOEN+0x1ac>
 80071ee:	e731      	b.n	8007054 <UART_RxISR_16BIT_FIFOEN+0x24>
 80071f0:	40008000 	.word	0x40008000
 80071f4:	08006d8d 	.word	0x08006d8d

080071f8 <UART_SetConfig>:
{
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071fc:	6883      	ldr	r3, [r0, #8]
 80071fe:	6902      	ldr	r2, [r0, #16]
 8007200:	4313      	orrs	r3, r2
 8007202:	6942      	ldr	r2, [r0, #20]
 8007204:	4313      	orrs	r3, r2
 8007206:	69c2      	ldr	r2, [r0, #28]
 8007208:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800720a:	6801      	ldr	r1, [r0, #0]
 800720c:	6808      	ldr	r0, [r1, #0]
 800720e:	4a9d      	ldr	r2, [pc, #628]	@ (8007484 <UART_SetConfig+0x28c>)
 8007210:	4002      	ands	r2, r0
 8007212:	431a      	orrs	r2, r3
 8007214:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007216:	6822      	ldr	r2, [r4, #0]
 8007218:	6853      	ldr	r3, [r2, #4]
 800721a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800721e:	68e1      	ldr	r1, [r4, #12]
 8007220:	430b      	orrs	r3, r1
 8007222:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007224:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007226:	6822      	ldr	r2, [r4, #0]
 8007228:	4b97      	ldr	r3, [pc, #604]	@ (8007488 <UART_SetConfig+0x290>)
 800722a:	429a      	cmp	r2, r3
 800722c:	d001      	beq.n	8007232 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800722e:	6a23      	ldr	r3, [r4, #32]
 8007230:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007232:	6893      	ldr	r3, [r2, #8]
 8007234:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007238:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800723c:	430b      	orrs	r3, r1
 800723e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007240:	6822      	ldr	r2, [r4, #0]
 8007242:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007244:	f023 030f 	bic.w	r3, r3, #15
 8007248:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800724a:	430b      	orrs	r3, r1
 800724c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	4a8e      	ldr	r2, [pc, #568]	@ (800748c <UART_SetConfig+0x294>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d01c      	beq.n	8007290 <UART_SetConfig+0x98>
 8007256:	4a8e      	ldr	r2, [pc, #568]	@ (8007490 <UART_SetConfig+0x298>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d031      	beq.n	80072c0 <UART_SetConfig+0xc8>
 800725c:	4a8a      	ldr	r2, [pc, #552]	@ (8007488 <UART_SetConfig+0x290>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d04b      	beq.n	80072fa <UART_SetConfig+0x102>
 8007262:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8007264:	4988      	ldr	r1, [pc, #544]	@ (8007488 <UART_SetConfig+0x290>)
 8007266:	428b      	cmp	r3, r1
 8007268:	d068      	beq.n	800733c <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800726a:	69e0      	ldr	r0, [r4, #28]
 800726c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007270:	f000 80a5 	beq.w	80073be <UART_SetConfig+0x1c6>
    switch (clocksource)
 8007274:	2a08      	cmp	r2, #8
 8007276:	f200 811f 	bhi.w	80074b8 <UART_SetConfig+0x2c0>
 800727a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800727e:	00d3      	.short	0x00d3
 8007280:	00d100f5 	.word	0x00d100f5
 8007284:	00f8011d 	.word	0x00f8011d
 8007288:	011d011d 	.word	0x011d011d
 800728c:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007290:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007294:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8007298:	f002 0203 	and.w	r2, r2, #3
 800729c:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072a0:	f5a2 3240 	sub.w	r2, r2, #196608	@ 0x30000
 80072a4:	2a03      	cmp	r2, #3
 80072a6:	d809      	bhi.n	80072bc <UART_SetConfig+0xc4>
 80072a8:	e8df f002 	tbb	[pc, r2]
 80072ac:	063c0402 	.word	0x063c0402
 80072b0:	2201      	movs	r2, #1
 80072b2:	e7d7      	b.n	8007264 <UART_SetConfig+0x6c>
 80072b4:	2204      	movs	r2, #4
 80072b6:	e7d5      	b.n	8007264 <UART_SetConfig+0x6c>
 80072b8:	2208      	movs	r2, #8
 80072ba:	e7d3      	b.n	8007264 <UART_SetConfig+0x6c>
 80072bc:	2210      	movs	r2, #16
 80072be:	e7d1      	b.n	8007264 <UART_SetConfig+0x6c>
 80072c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072c4:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80072c8:	f002 020c 	and.w	r2, r2, #12
 80072cc:	f442 2240 	orr.w	r2, r2, #786432	@ 0xc0000
 80072d0:	f5a2 2240 	sub.w	r2, r2, #786432	@ 0xc0000
 80072d4:	2a0c      	cmp	r2, #12
 80072d6:	d80e      	bhi.n	80072f6 <UART_SetConfig+0xfe>
 80072d8:	e8df f002 	tbb	[pc, r2]
 80072dc:	0d0d0d07 	.word	0x0d0d0d07
 80072e0:	0d0d0d09 	.word	0x0d0d0d09
 80072e4:	0d0d0d26 	.word	0x0d0d0d26
 80072e8:	0b          	.byte	0x0b
 80072e9:	00          	.byte	0x00
 80072ea:	2200      	movs	r2, #0
 80072ec:	e7ba      	b.n	8007264 <UART_SetConfig+0x6c>
 80072ee:	2204      	movs	r2, #4
 80072f0:	e7b8      	b.n	8007264 <UART_SetConfig+0x6c>
 80072f2:	2208      	movs	r2, #8
 80072f4:	e7b6      	b.n	8007264 <UART_SetConfig+0x6c>
 80072f6:	2210      	movs	r2, #16
 80072f8:	e7b4      	b.n	8007264 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80072fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072fe:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8007302:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8007306:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800730a:	d00f      	beq.n	800732c <UART_SetConfig+0x134>
 800730c:	d805      	bhi.n	800731a <UART_SetConfig+0x122>
 800730e:	b17a      	cbz	r2, 8007330 <UART_SetConfig+0x138>
 8007310:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8007314:	d10e      	bne.n	8007334 <UART_SetConfig+0x13c>
 8007316:	2204      	movs	r2, #4
 8007318:	e7a4      	b.n	8007264 <UART_SetConfig+0x6c>
 800731a:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 800731e:	d10b      	bne.n	8007338 <UART_SetConfig+0x140>
 8007320:	2208      	movs	r2, #8
 8007322:	e79f      	b.n	8007264 <UART_SetConfig+0x6c>
 8007324:	2202      	movs	r2, #2
 8007326:	e79d      	b.n	8007264 <UART_SetConfig+0x6c>
 8007328:	2202      	movs	r2, #2
 800732a:	e79b      	b.n	8007264 <UART_SetConfig+0x6c>
 800732c:	2202      	movs	r2, #2
 800732e:	e799      	b.n	8007264 <UART_SetConfig+0x6c>
 8007330:	2200      	movs	r2, #0
 8007332:	e797      	b.n	8007264 <UART_SetConfig+0x6c>
 8007334:	2210      	movs	r2, #16
 8007336:	e795      	b.n	8007264 <UART_SetConfig+0x6c>
 8007338:	2210      	movs	r2, #16
 800733a:	e793      	b.n	8007264 <UART_SetConfig+0x6c>
    switch (clocksource)
 800733c:	2a08      	cmp	r2, #8
 800733e:	f200 809c 	bhi.w	800747a <UART_SetConfig+0x282>
 8007342:	e8df f002 	tbb	[pc, r2]
 8007346:	9a08      	.short	0x9a08
 8007348:	9a379a3a 	.word	0x9a379a3a
 800734c:	9a9a      	.short	0x9a9a
 800734e:	05          	.byte	0x05
 800734f:	00          	.byte	0x00
 8007350:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007354:	e004      	b.n	8007360 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007356:	f7fe fabd 	bl	80058d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800735a:	2800      	cmp	r0, #0
 800735c:	f000 808f 	beq.w	800747e <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007360:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007362:	4b4c      	ldr	r3, [pc, #304]	@ (8007494 <UART_SetConfig+0x29c>)
 8007364:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007368:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800736c:	6865      	ldr	r5, [r4, #4]
 800736e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007372:	4299      	cmp	r1, r3
 8007374:	f200 8094 	bhi.w	80074a0 <UART_SetConfig+0x2a8>
 8007378:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800737c:	f200 8092 	bhi.w	80074a4 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007380:	2600      	movs	r6, #0
 8007382:	4633      	mov	r3, r6
 8007384:	4631      	mov	r1, r6
 8007386:	f7f9 fd63 	bl	8000e50 <__aeabi_uldivmod>
 800738a:	0209      	lsls	r1, r1, #8
 800738c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007390:	0200      	lsls	r0, r0, #8
 8007392:	086b      	lsrs	r3, r5, #1
 8007394:	18c0      	adds	r0, r0, r3
 8007396:	462a      	mov	r2, r5
 8007398:	4633      	mov	r3, r6
 800739a:	f141 0100 	adc.w	r1, r1, #0
 800739e:	f7f9 fd57 	bl	8000e50 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073a2:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80073a6:	4b3c      	ldr	r3, [pc, #240]	@ (8007498 <UART_SetConfig+0x2a0>)
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d87d      	bhi.n	80074a8 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	60d8      	str	r0, [r3, #12]
 80073b0:	4630      	mov	r0, r6
 80073b2:	e050      	b.n	8007456 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 80073b4:	f7fd fd90 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
        break;
 80073b8:	e7cf      	b.n	800735a <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 80073ba:	4838      	ldr	r0, [pc, #224]	@ (800749c <UART_SetConfig+0x2a4>)
 80073bc:	e7d0      	b.n	8007360 <UART_SetConfig+0x168>
    switch (clocksource)
 80073be:	2a08      	cmp	r2, #8
 80073c0:	d874      	bhi.n	80074ac <UART_SetConfig+0x2b4>
 80073c2:	e8df f002 	tbb	[pc, r2]
 80073c6:	2707      	.short	0x2707
 80073c8:	732a7305 	.word	0x732a7305
 80073cc:	7373      	.short	0x7373
 80073ce:	0b          	.byte	0x0b
 80073cf:	00          	.byte	0x00
 80073d0:	4832      	ldr	r0, [pc, #200]	@ (800749c <UART_SetConfig+0x2a4>)
 80073d2:	e003      	b.n	80073dc <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d4:	f7fe fa7e 	bl	80058d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80073d8:	2800      	cmp	r0, #0
 80073da:	d069      	beq.n	80074b0 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073dc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80073de:	4b2d      	ldr	r3, [pc, #180]	@ (8007494 <UART_SetConfig+0x29c>)
 80073e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80073e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80073e8:	6862      	ldr	r2, [r4, #4]
 80073ea:	0853      	lsrs	r3, r2, #1
 80073ec:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80073f0:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073f4:	f1a3 0110 	sub.w	r1, r3, #16
 80073f8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80073fc:	4291      	cmp	r1, r2
 80073fe:	d859      	bhi.n	80074b4 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007400:	b29a      	uxth	r2, r3
 8007402:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007406:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800740a:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800740c:	6822      	ldr	r2, [r4, #0]
 800740e:	60d3      	str	r3, [r2, #12]
 8007410:	2000      	movs	r0, #0
 8007412:	e020      	b.n	8007456 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007414:	f7fe fa6e 	bl	80058f4 <HAL_RCC_GetPCLK2Freq>
        break;
 8007418:	e7de      	b.n	80073d8 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 800741a:	f7fd fd5d 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
        break;
 800741e:	e7db      	b.n	80073d8 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8007420:	481e      	ldr	r0, [pc, #120]	@ (800749c <UART_SetConfig+0x2a4>)
 8007422:	e003      	b.n	800742c <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007424:	f7fe fa56 	bl	80058d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007428:	2800      	cmp	r0, #0
 800742a:	d047      	beq.n	80074bc <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800742c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800742e:	4b19      	ldr	r3, [pc, #100]	@ (8007494 <UART_SetConfig+0x29c>)
 8007430:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007434:	fbb0 f0f3 	udiv	r0, r0, r3
 8007438:	6863      	ldr	r3, [r4, #4]
 800743a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800743e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007442:	f1a0 0210 	sub.w	r2, r0, #16
 8007446:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800744a:	429a      	cmp	r2, r3
 800744c:	d838      	bhi.n	80074c0 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	b280      	uxth	r0, r0
 8007452:	60d8      	str	r0, [r3, #12]
 8007454:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8007456:	2301      	movs	r3, #1
 8007458:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800745c:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8007460:	2300      	movs	r3, #0
 8007462:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8007464:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8007466:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007468:	f7fe fa44 	bl	80058f4 <HAL_RCC_GetPCLK2Freq>
        break;
 800746c:	e7dc      	b.n	8007428 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 800746e:	f7fd fd33 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
        break;
 8007472:	e7d9      	b.n	8007428 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8007474:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007478:	e7d8      	b.n	800742c <UART_SetConfig+0x234>
    switch (clocksource)
 800747a:	2001      	movs	r0, #1
 800747c:	e7eb      	b.n	8007456 <UART_SetConfig+0x25e>
 800747e:	2000      	movs	r0, #0
 8007480:	e7e9      	b.n	8007456 <UART_SetConfig+0x25e>
 8007482:	bf00      	nop
 8007484:	cfff69f3 	.word	0xcfff69f3
 8007488:	40008000 	.word	0x40008000
 800748c:	40013800 	.word	0x40013800
 8007490:	40004400 	.word	0x40004400
 8007494:	08013704 	.word	0x08013704
 8007498:	000ffcff 	.word	0x000ffcff
 800749c:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 80074a0:	2001      	movs	r0, #1
 80074a2:	e7d8      	b.n	8007456 <UART_SetConfig+0x25e>
 80074a4:	2001      	movs	r0, #1
 80074a6:	e7d6      	b.n	8007456 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 80074a8:	2001      	movs	r0, #1
 80074aa:	e7d4      	b.n	8007456 <UART_SetConfig+0x25e>
    switch (clocksource)
 80074ac:	2001      	movs	r0, #1
 80074ae:	e7d2      	b.n	8007456 <UART_SetConfig+0x25e>
 80074b0:	2000      	movs	r0, #0
 80074b2:	e7d0      	b.n	8007456 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80074b4:	2001      	movs	r0, #1
 80074b6:	e7ce      	b.n	8007456 <UART_SetConfig+0x25e>
    switch (clocksource)
 80074b8:	2001      	movs	r0, #1
 80074ba:	e7cc      	b.n	8007456 <UART_SetConfig+0x25e>
 80074bc:	2000      	movs	r0, #0
 80074be:	e7ca      	b.n	8007456 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80074c0:	2001      	movs	r0, #1
 80074c2:	e7c8      	b.n	8007456 <UART_SetConfig+0x25e>

080074c4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074c4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80074c6:	f013 0f08 	tst.w	r3, #8
 80074ca:	d006      	beq.n	80074da <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074cc:	6802      	ldr	r2, [r0, #0]
 80074ce:	6853      	ldr	r3, [r2, #4]
 80074d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80074d4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80074d6:	430b      	orrs	r3, r1
 80074d8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074da:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80074dc:	f013 0f01 	tst.w	r3, #1
 80074e0:	d006      	beq.n	80074f0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074e2:	6802      	ldr	r2, [r0, #0]
 80074e4:	6853      	ldr	r3, [r2, #4]
 80074e6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80074ea:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80074ec:	430b      	orrs	r3, r1
 80074ee:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074f0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80074f2:	f013 0f02 	tst.w	r3, #2
 80074f6:	d006      	beq.n	8007506 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074f8:	6802      	ldr	r2, [r0, #0]
 80074fa:	6853      	ldr	r3, [r2, #4]
 80074fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007500:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8007502:	430b      	orrs	r3, r1
 8007504:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007506:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007508:	f013 0f04 	tst.w	r3, #4
 800750c:	d006      	beq.n	800751c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800750e:	6802      	ldr	r2, [r0, #0]
 8007510:	6853      	ldr	r3, [r2, #4]
 8007512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007516:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8007518:	430b      	orrs	r3, r1
 800751a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800751c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800751e:	f013 0f10 	tst.w	r3, #16
 8007522:	d006      	beq.n	8007532 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007524:	6802      	ldr	r2, [r0, #0]
 8007526:	6893      	ldr	r3, [r2, #8]
 8007528:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800752c:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800752e:	430b      	orrs	r3, r1
 8007530:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007532:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007534:	f013 0f20 	tst.w	r3, #32
 8007538:	d006      	beq.n	8007548 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800753a:	6802      	ldr	r2, [r0, #0]
 800753c:	6893      	ldr	r3, [r2, #8]
 800753e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007542:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8007544:	430b      	orrs	r3, r1
 8007546:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007548:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800754a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800754e:	d00a      	beq.n	8007566 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007550:	6802      	ldr	r2, [r0, #0]
 8007552:	6853      	ldr	r3, [r2, #4]
 8007554:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007558:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800755a:	430b      	orrs	r3, r1
 800755c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800755e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007560:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007564:	d00b      	beq.n	800757e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007566:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007568:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800756c:	d006      	beq.n	800757c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800756e:	6802      	ldr	r2, [r0, #0]
 8007570:	6853      	ldr	r3, [r2, #4]
 8007572:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8007576:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8007578:	430b      	orrs	r3, r1
 800757a:	6053      	str	r3, [r2, #4]
}
 800757c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800757e:	6802      	ldr	r2, [r0, #0]
 8007580:	6853      	ldr	r3, [r2, #4]
 8007582:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007586:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8007588:	430b      	orrs	r3, r1
 800758a:	6053      	str	r3, [r2, #4]
 800758c:	e7eb      	b.n	8007566 <UART_AdvFeatureConfig+0xa2>

0800758e <UART_WaitOnFlagUntilTimeout>:
{
 800758e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007592:	4605      	mov	r5, r0
 8007594:	460e      	mov	r6, r1
 8007596:	4617      	mov	r7, r2
 8007598:	4699      	mov	r9, r3
 800759a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800759e:	682b      	ldr	r3, [r5, #0]
 80075a0:	69dc      	ldr	r4, [r3, #28]
 80075a2:	ea36 0404 	bics.w	r4, r6, r4
 80075a6:	bf0c      	ite	eq
 80075a8:	2401      	moveq	r4, #1
 80075aa:	2400      	movne	r4, #0
 80075ac:	42bc      	cmp	r4, r7
 80075ae:	d15b      	bne.n	8007668 <UART_WaitOnFlagUntilTimeout+0xda>
    if (Timeout != HAL_MAX_DELAY)
 80075b0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80075b4:	d0f3      	beq.n	800759e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075b6:	f7fa fd63 	bl	8002080 <HAL_GetTick>
 80075ba:	eba0 0009 	sub.w	r0, r0, r9
 80075be:	4540      	cmp	r0, r8
 80075c0:	d833      	bhi.n	800762a <UART_WaitOnFlagUntilTimeout+0x9c>
 80075c2:	f1b8 0f00 	cmp.w	r8, #0
 80075c6:	d030      	beq.n	800762a <UART_WaitOnFlagUntilTimeout+0x9c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	f012 0f04 	tst.w	r2, #4
 80075d0:	d0e5      	beq.n	800759e <UART_WaitOnFlagUntilTimeout+0x10>
 80075d2:	2e80      	cmp	r6, #128	@ 0x80
 80075d4:	d0e3      	beq.n	800759e <UART_WaitOnFlagUntilTimeout+0x10>
 80075d6:	2e40      	cmp	r6, #64	@ 0x40
 80075d8:	d0e1      	beq.n	800759e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075da:	69da      	ldr	r2, [r3, #28]
 80075dc:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80075e0:	d0dd      	beq.n	800759e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075e6:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80075e8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	e852 3f00 	ldrex	r3, [r2]
 80075ee:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f2:	e842 3100 	strex	r1, r3, [r2]
 80075f6:	2900      	cmp	r1, #0
 80075f8:	d1f6      	bne.n	80075e8 <UART_WaitOnFlagUntilTimeout+0x5a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fa:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fc:	f102 0308 	add.w	r3, r2, #8
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	3208      	adds	r2, #8
 800760a:	e842 3100 	strex	r1, r3, [r2]
 800760e:	2900      	cmp	r1, #0
 8007610:	d1f3      	bne.n	80075fa <UART_WaitOnFlagUntilTimeout+0x6c>
          huart->gState = HAL_UART_STATE_READY;
 8007612:	2320      	movs	r3, #32
 8007614:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007618:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800761c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8007620:	2300      	movs	r3, #0
 8007622:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 8007626:	2003      	movs	r0, #3
 8007628:	e01f      	b.n	800766a <UART_WaitOnFlagUntilTimeout+0xdc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800762a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762c:	e852 3f00 	ldrex	r3, [r2]
 8007630:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	e842 3100 	strex	r1, r3, [r2]
 8007638:	2900      	cmp	r1, #0
 800763a:	d1f6      	bne.n	800762a <UART_WaitOnFlagUntilTimeout+0x9c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800763c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763e:	f102 0308 	add.w	r3, r2, #8
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764a:	3208      	adds	r2, #8
 800764c:	e842 3100 	strex	r1, r3, [r2]
 8007650:	2900      	cmp	r1, #0
 8007652:	d1f3      	bne.n	800763c <UART_WaitOnFlagUntilTimeout+0xae>
        huart->gState = HAL_UART_STATE_READY;
 8007654:	2320      	movs	r3, #32
 8007656:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800765a:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 800765e:	2300      	movs	r3, #0
 8007660:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
        return HAL_TIMEOUT;
 8007664:	2003      	movs	r0, #3
 8007666:	e000      	b.n	800766a <UART_WaitOnFlagUntilTimeout+0xdc>
  return HAL_OK;
 8007668:	2000      	movs	r0, #0
}
 800766a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800766e <HAL_UART_Transmit>:
{
 800766e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007676:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800767a:	2b20      	cmp	r3, #32
 800767c:	d14f      	bne.n	800771e <HAL_UART_Transmit+0xb0>
 800767e:	4604      	mov	r4, r0
 8007680:	460d      	mov	r5, r1
 8007682:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8007684:	2900      	cmp	r1, #0
 8007686:	d04e      	beq.n	8007726 <HAL_UART_Transmit+0xb8>
 8007688:	b90a      	cbnz	r2, 800768e <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 800768a:	2001      	movs	r0, #1
 800768c:	e048      	b.n	8007720 <HAL_UART_Transmit+0xb2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800768e:	2300      	movs	r3, #0
 8007690:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007694:	2321      	movs	r3, #33	@ 0x21
 8007696:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 800769a:	f7fa fcf1 	bl	8002080 <HAL_GetTick>
 800769e:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80076a0:	f8a4 8054 	strh.w	r8, [r4, #84]	@ 0x54
    huart->TxXferCount = Size;
 80076a4:	f8a4 8056 	strh.w	r8, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a8:	68a3      	ldr	r3, [r4, #8]
 80076aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076ae:	d002      	beq.n	80076b6 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 80076b0:	f04f 0800 	mov.w	r8, #0
 80076b4:	e011      	b.n	80076da <HAL_UART_Transmit+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b6:	6923      	ldr	r3, [r4, #16]
 80076b8:	b313      	cbz	r3, 8007700 <HAL_UART_Transmit+0x92>
      pdata16bits = NULL;
 80076ba:	f04f 0800 	mov.w	r8, #0
 80076be:	e00c      	b.n	80076da <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076c0:	f838 3b02 	ldrh.w	r3, [r8], #2
 80076c4:	6822      	ldr	r2, [r4, #0]
 80076c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ca:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80076cc:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 80076d0:	b292      	uxth	r2, r2
 80076d2:	3a01      	subs	r2, #1
 80076d4:	b292      	uxth	r2, r2
 80076d6:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80076da:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 80076de:	b29b      	uxth	r3, r3
 80076e0:	b18b      	cbz	r3, 8007706 <HAL_UART_Transmit+0x98>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076e2:	9600      	str	r6, [sp, #0]
 80076e4:	463b      	mov	r3, r7
 80076e6:	2200      	movs	r2, #0
 80076e8:	2180      	movs	r1, #128	@ 0x80
 80076ea:	4620      	mov	r0, r4
 80076ec:	f7ff ff4f 	bl	800758e <UART_WaitOnFlagUntilTimeout>
 80076f0:	b9d8      	cbnz	r0, 800772a <HAL_UART_Transmit+0xbc>
      if (pdata8bits == NULL)
 80076f2:	2d00      	cmp	r5, #0
 80076f4:	d0e4      	beq.n	80076c0 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076f6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80076fe:	e7e5      	b.n	80076cc <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 8007700:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8007702:	2500      	movs	r5, #0
 8007704:	e7e9      	b.n	80076da <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007706:	9600      	str	r6, [sp, #0]
 8007708:	463b      	mov	r3, r7
 800770a:	2200      	movs	r2, #0
 800770c:	2140      	movs	r1, #64	@ 0x40
 800770e:	4620      	mov	r0, r4
 8007710:	f7ff ff3d 	bl	800758e <UART_WaitOnFlagUntilTimeout>
 8007714:	b958      	cbnz	r0, 800772e <HAL_UART_Transmit+0xc0>
    huart->gState = HAL_UART_STATE_READY;
 8007716:	2320      	movs	r3, #32
 8007718:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 800771c:	e000      	b.n	8007720 <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 800771e:	2002      	movs	r0, #2
}
 8007720:	b002      	add	sp, #8
 8007722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8007726:	2001      	movs	r0, #1
 8007728:	e7fa      	b.n	8007720 <HAL_UART_Transmit+0xb2>
        return HAL_TIMEOUT;
 800772a:	2003      	movs	r0, #3
 800772c:	e7f8      	b.n	8007720 <HAL_UART_Transmit+0xb2>
      return HAL_TIMEOUT;
 800772e:	2003      	movs	r0, #3
 8007730:	e7f6      	b.n	8007720 <HAL_UART_Transmit+0xb2>

08007732 <HAL_UART_Receive>:
{
 8007732:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007736:	b083      	sub	sp, #12
 8007738:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800773a:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800773e:	2b20      	cmp	r3, #32
 8007740:	d177      	bne.n	8007832 <HAL_UART_Receive+0x100>
 8007742:	4604      	mov	r4, r0
 8007744:	460d      	mov	r5, r1
 8007746:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8007748:	2900      	cmp	r1, #0
 800774a:	d076      	beq.n	800783a <HAL_UART_Receive+0x108>
 800774c:	b90a      	cbnz	r2, 8007752 <HAL_UART_Receive+0x20>
      return  HAL_ERROR;
 800774e:	2001      	movs	r0, #1
 8007750:	e070      	b.n	8007834 <HAL_UART_Receive+0x102>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007752:	2300      	movs	r3, #0
 8007754:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007758:	2222      	movs	r2, #34	@ 0x22
 800775a:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775e:	66c3      	str	r3, [r0, #108]	@ 0x6c
    tickstart = HAL_GetTick();
 8007760:	f7fa fc8e 	bl	8002080 <HAL_GetTick>
 8007764:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8007766:	f8a4 805c 	strh.w	r8, [r4, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800776a:	f8a4 805e 	strh.w	r8, [r4, #94]	@ 0x5e
    UART_MASK_COMPUTATION(huart);
 800776e:	68a3      	ldr	r3, [r4, #8]
 8007770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007774:	d006      	beq.n	8007784 <HAL_UART_Receive+0x52>
 8007776:	b9a3      	cbnz	r3, 80077a2 <HAL_UART_Receive+0x70>
 8007778:	6922      	ldr	r2, [r4, #16]
 800777a:	b972      	cbnz	r2, 800779a <HAL_UART_Receive+0x68>
 800777c:	22ff      	movs	r2, #255	@ 0xff
 800777e:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8007782:	e014      	b.n	80077ae <HAL_UART_Receive+0x7c>
 8007784:	6922      	ldr	r2, [r4, #16]
 8007786:	b922      	cbnz	r2, 8007792 <HAL_UART_Receive+0x60>
 8007788:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800778c:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8007790:	e00d      	b.n	80077ae <HAL_UART_Receive+0x7c>
 8007792:	22ff      	movs	r2, #255	@ 0xff
 8007794:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8007798:	e009      	b.n	80077ae <HAL_UART_Receive+0x7c>
 800779a:	227f      	movs	r2, #127	@ 0x7f
 800779c:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 80077a0:	e005      	b.n	80077ae <HAL_UART_Receive+0x7c>
 80077a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077a6:	d00a      	beq.n	80077be <HAL_UART_Receive+0x8c>
 80077a8:	2200      	movs	r2, #0
 80077aa:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
    uhMask = huart->Mask;
 80077ae:	f8b4 8060 	ldrh.w	r8, [r4, #96]	@ 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077b6:	d00c      	beq.n	80077d2 <HAL_UART_Receive+0xa0>
      pdata16bits = NULL;
 80077b8:	f04f 0900 	mov.w	r9, #0
 80077bc:	e01e      	b.n	80077fc <HAL_UART_Receive+0xca>
    UART_MASK_COMPUTATION(huart);
 80077be:	6922      	ldr	r2, [r4, #16]
 80077c0:	b91a      	cbnz	r2, 80077ca <HAL_UART_Receive+0x98>
 80077c2:	227f      	movs	r2, #127	@ 0x7f
 80077c4:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 80077c8:	e7f1      	b.n	80077ae <HAL_UART_Receive+0x7c>
 80077ca:	223f      	movs	r2, #63	@ 0x3f
 80077cc:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 80077d0:	e7ed      	b.n	80077ae <HAL_UART_Receive+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	b113      	cbz	r3, 80077dc <HAL_UART_Receive+0xaa>
      pdata16bits = NULL;
 80077d6:	f04f 0900 	mov.w	r9, #0
 80077da:	e00f      	b.n	80077fc <HAL_UART_Receive+0xca>
      pdata16bits = (uint16_t *) pData;
 80077dc:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80077de:	2500      	movs	r5, #0
 80077e0:	e00c      	b.n	80077fc <HAL_UART_Receive+0xca>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e6:	ea08 0303 	and.w	r3, r8, r3
 80077ea:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 80077ee:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 80077f2:	b292      	uxth	r2, r2
 80077f4:	3a01      	subs	r2, #1
 80077f6:	b292      	uxth	r2, r2
 80077f8:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80077fc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007800:	b29b      	uxth	r3, r3
 8007802:	b18b      	cbz	r3, 8007828 <HAL_UART_Receive+0xf6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007804:	9600      	str	r6, [sp, #0]
 8007806:	463b      	mov	r3, r7
 8007808:	2200      	movs	r2, #0
 800780a:	2120      	movs	r1, #32
 800780c:	4620      	mov	r0, r4
 800780e:	f7ff febe 	bl	800758e <UART_WaitOnFlagUntilTimeout>
 8007812:	b9a0      	cbnz	r0, 800783e <HAL_UART_Receive+0x10c>
      if (pdata8bits == NULL)
 8007814:	2d00      	cmp	r5, #0
 8007816:	d0e4      	beq.n	80077e2 <HAL_UART_Receive+0xb0>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800781c:	fa5f f388 	uxtb.w	r3, r8
 8007820:	4013      	ands	r3, r2
 8007822:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8007826:	e7e2      	b.n	80077ee <HAL_UART_Receive+0xbc>
    huart->RxState = HAL_UART_STATE_READY;
 8007828:	2320      	movs	r3, #32
 800782a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    return HAL_OK;
 800782e:	2000      	movs	r0, #0
 8007830:	e000      	b.n	8007834 <HAL_UART_Receive+0x102>
    return HAL_BUSY;
 8007832:	2002      	movs	r0, #2
}
 8007834:	b003      	add	sp, #12
 8007836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800783a:	2001      	movs	r0, #1
 800783c:	e7fa      	b.n	8007834 <HAL_UART_Receive+0x102>
        return HAL_TIMEOUT;
 800783e:	2003      	movs	r0, #3
 8007840:	e7f8      	b.n	8007834 <HAL_UART_Receive+0x102>

08007842 <UART_CheckIdleState>:
{
 8007842:	b530      	push	{r4, r5, lr}
 8007844:	b083      	sub	sp, #12
 8007846:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007848:	2300      	movs	r3, #0
 800784a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800784e:	f7fa fc17 	bl	8002080 <HAL_GetTick>
 8007852:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007854:	6822      	ldr	r2, [r4, #0]
 8007856:	6812      	ldr	r2, [r2, #0]
 8007858:	f012 0f08 	tst.w	r2, #8
 800785c:	d110      	bne.n	8007880 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f013 0f04 	tst.w	r3, #4
 8007866:	d119      	bne.n	800789c <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8007868:	2320      	movs	r3, #32
 800786a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800786e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007872:	2000      	movs	r0, #0
 8007874:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007876:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8007878:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800787c:	b003      	add	sp, #12
 800787e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007880:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	4603      	mov	r3, r0
 8007888:	2200      	movs	r2, #0
 800788a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800788e:	4620      	mov	r0, r4
 8007890:	f7ff fe7d 	bl	800758e <UART_WaitOnFlagUntilTimeout>
 8007894:	2800      	cmp	r0, #0
 8007896:	d0e2      	beq.n	800785e <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8007898:	2003      	movs	r0, #3
 800789a:	e7ef      	b.n	800787c <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800789c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	462b      	mov	r3, r5
 80078a4:	2200      	movs	r2, #0
 80078a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80078aa:	4620      	mov	r0, r4
 80078ac:	f7ff fe6f 	bl	800758e <UART_WaitOnFlagUntilTimeout>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d0d9      	beq.n	8007868 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80078b4:	2003      	movs	r0, #3
 80078b6:	e7e1      	b.n	800787c <UART_CheckIdleState+0x3a>

080078b8 <HAL_UART_Init>:
  if (huart == NULL)
 80078b8:	b378      	cbz	r0, 800791a <HAL_UART_Init+0x62>
{
 80078ba:	b510      	push	{r4, lr}
 80078bc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80078be:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80078c2:	b30b      	cbz	r3, 8007908 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80078c4:	2324      	movs	r3, #36	@ 0x24
 80078c6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80078ca:	6822      	ldr	r2, [r4, #0]
 80078cc:	6813      	ldr	r3, [r2, #0]
 80078ce:	f023 0301 	bic.w	r3, r3, #1
 80078d2:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80078d6:	b9e3      	cbnz	r3, 8007912 <HAL_UART_Init+0x5a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078d8:	4620      	mov	r0, r4
 80078da:	f7ff fc8d 	bl	80071f8 <UART_SetConfig>
 80078de:	2801      	cmp	r0, #1
 80078e0:	d011      	beq.n	8007906 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	6853      	ldr	r3, [r2, #4]
 80078e6:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80078ea:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078ec:	6822      	ldr	r2, [r4, #0]
 80078ee:	6893      	ldr	r3, [r2, #8]
 80078f0:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80078f4:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80078f6:	6822      	ldr	r2, [r4, #0]
 80078f8:	6813      	ldr	r3, [r2, #0]
 80078fa:	f043 0301 	orr.w	r3, r3, #1
 80078fe:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007900:	4620      	mov	r0, r4
 8007902:	f7ff ff9e 	bl	8007842 <UART_CheckIdleState>
}
 8007906:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007908:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800790c:	f7fa fe3e 	bl	800258c <HAL_UART_MspInit>
 8007910:	e7d8      	b.n	80078c4 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8007912:	4620      	mov	r0, r4
 8007914:	f7ff fdd6 	bl	80074c4 <UART_AdvFeatureConfig>
 8007918:	e7de      	b.n	80078d8 <HAL_UART_Init+0x20>
    return HAL_ERROR;
 800791a:	2001      	movs	r0, #1
}
 800791c:	4770      	bx	lr
	...

08007920 <UART_Start_Receive_IT>:
{
 8007920:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8007922:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007924:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007928:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800792c:	2300      	movs	r3, #0
 800792e:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8007930:	6883      	ldr	r3, [r0, #8]
 8007932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007936:	d006      	beq.n	8007946 <UART_Start_Receive_IT+0x26>
 8007938:	b9a3      	cbnz	r3, 8007964 <UART_Start_Receive_IT+0x44>
 800793a:	6903      	ldr	r3, [r0, #16]
 800793c:	b973      	cbnz	r3, 800795c <UART_Start_Receive_IT+0x3c>
 800793e:	23ff      	movs	r3, #255	@ 0xff
 8007940:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8007944:	e014      	b.n	8007970 <UART_Start_Receive_IT+0x50>
 8007946:	6903      	ldr	r3, [r0, #16]
 8007948:	b923      	cbnz	r3, 8007954 <UART_Start_Receive_IT+0x34>
 800794a:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800794e:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8007952:	e00d      	b.n	8007970 <UART_Start_Receive_IT+0x50>
 8007954:	23ff      	movs	r3, #255	@ 0xff
 8007956:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800795a:	e009      	b.n	8007970 <UART_Start_Receive_IT+0x50>
 800795c:	237f      	movs	r3, #127	@ 0x7f
 800795e:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8007962:	e005      	b.n	8007970 <UART_Start_Receive_IT+0x50>
 8007964:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007968:	d02d      	beq.n	80079c6 <UART_Start_Receive_IT+0xa6>
 800796a:	2300      	movs	r3, #0
 800796c:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007970:	2300      	movs	r3, #0
 8007972:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007976:	2322      	movs	r3, #34	@ 0x22
 8007978:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800797c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797e:	f101 0308 	add.w	r3, r1, #8
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	3108      	adds	r1, #8
 800798c:	e841 3400 	strex	r4, r3, [r1]
 8007990:	2c00      	cmp	r4, #0
 8007992:	d1f3      	bne.n	800797c <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007994:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8007996:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800799a:	d01e      	beq.n	80079da <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800799c:	6883      	ldr	r3, [r0, #8]
 800799e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079a2:	d042      	beq.n	8007a2a <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 80079a4:	4b29      	ldr	r3, [pc, #164]	@ (8007a4c <UART_Start_Receive_IT+0x12c>)
 80079a6:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80079a8:	6903      	ldr	r3, [r0, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d043      	beq.n	8007a36 <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80079ae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b0:	e852 3f00 	ldrex	r3, [r2]
 80079b4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b8:	e842 3100 	strex	r1, r3, [r2]
 80079bc:	2900      	cmp	r1, #0
 80079be:	d1f6      	bne.n	80079ae <UART_Start_Receive_IT+0x8e>
}
 80079c0:	2000      	movs	r0, #0
 80079c2:	bc10      	pop	{r4}
 80079c4:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80079c6:	6903      	ldr	r3, [r0, #16]
 80079c8:	b91b      	cbnz	r3, 80079d2 <UART_Start_Receive_IT+0xb2>
 80079ca:	237f      	movs	r3, #127	@ 0x7f
 80079cc:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 80079d0:	e7ce      	b.n	8007970 <UART_Start_Receive_IT+0x50>
 80079d2:	233f      	movs	r3, #63	@ 0x3f
 80079d4:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 80079d8:	e7ca      	b.n	8007970 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80079da:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 80079de:	4293      	cmp	r3, r2
 80079e0:	d8dc      	bhi.n	800799c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079e2:	6883      	ldr	r3, [r0, #8]
 80079e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079e8:	d019      	beq.n	8007a1e <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80079ea:	4b19      	ldr	r3, [pc, #100]	@ (8007a50 <UART_Start_Receive_IT+0x130>)
 80079ec:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80079ee:	6903      	ldr	r3, [r0, #16]
 80079f0:	b143      	cbz	r3, 8007a04 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079f2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	e852 3f00 	ldrex	r3, [r2]
 80079f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	e842 3100 	strex	r1, r3, [r2]
 8007a00:	2900      	cmp	r1, #0
 8007a02:	d1f6      	bne.n	80079f2 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a04:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	f102 0308 	add.w	r3, r2, #8
 8007a0a:	e853 3f00 	ldrex	r3, [r3]
 8007a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	3208      	adds	r2, #8
 8007a14:	e842 3100 	strex	r1, r3, [r2]
 8007a18:	2900      	cmp	r1, #0
 8007a1a:	d1f3      	bne.n	8007a04 <UART_Start_Receive_IT+0xe4>
 8007a1c:	e7d0      	b.n	80079c0 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a1e:	6903      	ldr	r3, [r0, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e2      	bne.n	80079ea <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007a24:	4b0b      	ldr	r3, [pc, #44]	@ (8007a54 <UART_Start_Receive_IT+0x134>)
 8007a26:	6743      	str	r3, [r0, #116]	@ 0x74
 8007a28:	e7e1      	b.n	80079ee <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a2a:	6903      	ldr	r3, [r0, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1b9      	bne.n	80079a4 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8007a30:	4b09      	ldr	r3, [pc, #36]	@ (8007a58 <UART_Start_Receive_IT+0x138>)
 8007a32:	6743      	str	r3, [r0, #116]	@ 0x74
 8007a34:	e7b8      	b.n	80079a8 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a36:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	e852 3f00 	ldrex	r3, [r2]
 8007a3c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	e842 3100 	strex	r1, r3, [r2]
 8007a44:	2900      	cmp	r1, #0
 8007a46:	d1f6      	bne.n	8007a36 <UART_Start_Receive_IT+0x116>
 8007a48:	e7ba      	b.n	80079c0 <UART_Start_Receive_IT+0xa0>
 8007a4a:	bf00      	nop
 8007a4c:	08006cb1 	.word	0x08006cb1
 8007a50:	08006e65 	.word	0x08006e65
 8007a54:	08007031 	.word	0x08007031
 8007a58:	08006d8d 	.word	0x08006d8d

08007a5c <HAL_UART_Receive_IT>:
{
 8007a5c:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a5e:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8007a62:	2b20      	cmp	r3, #32
 8007a64:	d117      	bne.n	8007a96 <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8007a66:	b1c1      	cbz	r1, 8007a9a <HAL_UART_Receive_IT+0x3e>
 8007a68:	b1ca      	cbz	r2, 8007a9e <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a6e:	6803      	ldr	r3, [r0, #0]
 8007a70:	4c0c      	ldr	r4, [pc, #48]	@ (8007aa4 <HAL_UART_Receive_IT+0x48>)
 8007a72:	42a3      	cmp	r3, r4
 8007a74:	d00c      	beq.n	8007a90 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8007a7c:	d008      	beq.n	8007a90 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a7e:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	e854 3f00 	ldrex	r3, [r4]
 8007a84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	e844 3500 	strex	r5, r3, [r4]
 8007a8c:	2d00      	cmp	r5, #0
 8007a8e:	d1f6      	bne.n	8007a7e <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a90:	f7ff ff46 	bl	8007920 <UART_Start_Receive_IT>
 8007a94:	e000      	b.n	8007a98 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8007a96:	2002      	movs	r0, #2
}
 8007a98:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007a9a:	2001      	movs	r0, #1
 8007a9c:	e7fc      	b.n	8007a98 <HAL_UART_Receive_IT+0x3c>
 8007a9e:	2001      	movs	r0, #1
 8007aa0:	e7fa      	b.n	8007a98 <HAL_UART_Receive_IT+0x3c>
 8007aa2:	bf00      	nop
 8007aa4:	40008000 	.word	0x40008000

08007aa8 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	ab02      	add	r3, sp, #8
 8007aac:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007ab0:	6802      	ldr	r2, [r0, #0]
 8007ab2:	6853      	ldr	r3, [r2, #4]
 8007ab4:	f023 0310 	bic.w	r3, r3, #16
 8007ab8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8007abc:	430b      	orrs	r3, r1
 8007abe:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007ac0:	6802      	ldr	r2, [r0, #0]
 8007ac2:	6853      	ldr	r3, [r2, #4]
 8007ac4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007ac8:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8007acc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007ad0:	6053      	str	r3, [r2, #4]
}
 8007ad2:	b002      	add	sp, #8
 8007ad4:	4770      	bx	lr
	...

08007ad8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ad8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8007ada:	b92b      	cbnz	r3, 8007ae8 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8007adc:	2301      	movs	r3, #1
 8007ade:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ae2:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 8007ae6:	4770      	bx	lr
{
 8007ae8:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007aea:	6803      	ldr	r3, [r0, #0]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007af2:	6899      	ldr	r1, [r3, #8]
 8007af4:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007af6:	4d09      	ldr	r5, [pc, #36]	@ (8007b1c <UARTEx_SetNbDataToProcess+0x44>)
 8007af8:	5c6b      	ldrb	r3, [r5, r1]
 8007afa:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007afc:	4c08      	ldr	r4, [pc, #32]	@ (8007b20 <UARTEx_SetNbDataToProcess+0x48>)
 8007afe:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b00:	fb93 f3f1 	sdiv	r3, r3, r1
 8007b04:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b08:	5cab      	ldrb	r3, [r5, r2]
 8007b0a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b0c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b12:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 8007b16:	bc30      	pop	{r4, r5}
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	08013724 	.word	0x08013724
 8007b20:	0801371c 	.word	0x0801371c

08007b24 <HAL_RS485Ex_Init>:
  if (huart == NULL)
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d03c      	beq.n	8007ba2 <HAL_RS485Ex_Init+0x7e>
{
 8007b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2a:	460f      	mov	r7, r1
 8007b2c:	4616      	mov	r6, r2
 8007b2e:	461d      	mov	r5, r3
 8007b30:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007b32:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8007b36:	b35b      	cbz	r3, 8007b90 <HAL_RS485Ex_Init+0x6c>
  huart->gState = HAL_UART_STATE_BUSY;
 8007b38:	2324      	movs	r3, #36	@ 0x24
 8007b3a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8007b3e:	6822      	ldr	r2, [r4, #0]
 8007b40:	6813      	ldr	r3, [r2, #0]
 8007b42:	f023 0301 	bic.w	r3, r3, #1
 8007b46:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b48:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007b4a:	bb33      	cbnz	r3, 8007b9a <HAL_RS485Ex_Init+0x76>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f7ff fb53 	bl	80071f8 <UART_SetConfig>
 8007b52:	2801      	cmp	r0, #1
 8007b54:	d01b      	beq.n	8007b8e <HAL_RS485Ex_Init+0x6a>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8007b56:	6822      	ldr	r2, [r4, #0]
 8007b58:	6893      	ldr	r3, [r2, #8]
 8007b5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b5e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8007b60:	6822      	ldr	r2, [r4, #0]
 8007b62:	6893      	ldr	r3, [r2, #8]
 8007b64:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b68:	433b      	orrs	r3, r7
 8007b6a:	6093      	str	r3, [r2, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007b6c:	042d      	lsls	r5, r5, #16
 8007b6e:	ea45 5246 	orr.w	r2, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007b72:	6821      	ldr	r1, [r4, #0]
 8007b74:	680b      	ldr	r3, [r1, #0]
 8007b76:	f36f 4319 	bfc	r3, #16, #10
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	600b      	str	r3, [r1, #0]
  __HAL_UART_ENABLE(huart);
 8007b7e:	6822      	ldr	r2, [r4, #0]
 8007b80:	6813      	ldr	r3, [r2, #0]
 8007b82:	f043 0301 	orr.w	r3, r3, #1
 8007b86:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f7ff fe5a 	bl	8007842 <UART_CheckIdleState>
}
 8007b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8007b90:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8007b94:	f7fa fcfa 	bl	800258c <HAL_UART_MspInit>
 8007b98:	e7ce      	b.n	8007b38 <HAL_RS485Ex_Init+0x14>
    UART_AdvFeatureConfig(huart);
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f7ff fc92 	bl	80074c4 <UART_AdvFeatureConfig>
 8007ba0:	e7d4      	b.n	8007b4c <HAL_RS485Ex_Init+0x28>
    return HAL_ERROR;
 8007ba2:	2001      	movs	r0, #1
}
 8007ba4:	4770      	bx	lr

08007ba6 <HAL_UARTEx_WakeupCallback>:
}
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_UARTEx_RxFifoFullCallback>:
}
 8007ba8:	4770      	bx	lr

08007baa <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8007baa:	4770      	bx	lr

08007bac <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8007bac:	b510      	push	{r4, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	ab04      	add	r3, sp, #16
 8007bb2:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8007bb6:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d035      	beq.n	8007c2a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007bc6:	2324      	movs	r3, #36	@ 0x24
 8007bc8:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8007bcc:	6802      	ldr	r2, [r0, #0]
 8007bce:	6813      	ldr	r3, [r2, #0]
 8007bd0:	f023 0301 	bic.w	r3, r3, #1
 8007bd4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007bd6:	6801      	ldr	r1, [r0, #0]
 8007bd8:	688b      	ldr	r3, [r1, #8]
 8007bda:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007bde:	9a02      	ldr	r2, [sp, #8]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007be4:	b1aa      	cbz	r2, 8007c12 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8007be6:	6822      	ldr	r2, [r4, #0]
 8007be8:	6813      	ldr	r3, [r2, #0]
 8007bea:	f043 0301 	orr.w	r3, r3, #1
 8007bee:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8007bf0:	f7fa fa46 	bl	8002080 <HAL_GetTick>
 8007bf4:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bf6:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 8007bfa:	9200      	str	r2, [sp, #0]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007c02:	4620      	mov	r0, r4
 8007c04:	f7ff fcc3 	bl	800758e <UART_WaitOnFlagUntilTimeout>
 8007c08:	b948      	cbnz	r0, 8007c1e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8007c0a:	2320      	movs	r3, #32
 8007c0c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8007c10:	e006      	b.n	8007c20 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007c12:	ab04      	add	r3, sp, #16
 8007c14:	e913 0006 	ldmdb	r3, {r1, r2}
 8007c18:	f7ff ff46 	bl	8007aa8 <UARTEx_Wakeup_AddressConfig>
 8007c1c:	e7e3      	b.n	8007be6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8007c1e:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8007c20:	2300      	movs	r3, #0
 8007c22:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8007c26:	b004      	add	sp, #16
 8007c28:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8007c2a:	2002      	movs	r0, #2
 8007c2c:	e7fb      	b.n	8007c26 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08007c2e <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8007c2e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d010      	beq.n	8007c58 <HAL_UARTEx_EnableStopMode+0x2a>
 8007c36:	2301      	movs	r3, #1
 8007c38:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007c3c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3e:	e852 3f00 	ldrex	r3, [r2]
 8007c42:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	e842 3100 	strex	r1, r3, [r2]
 8007c4a:	2900      	cmp	r1, #0
 8007c4c:	d1f6      	bne.n	8007c3c <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8007c54:	4618      	mov	r0, r3
 8007c56:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007c58:	2002      	movs	r0, #2
}
 8007c5a:	4770      	bx	lr

08007c5c <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8007c5c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d018      	beq.n	8007c96 <HAL_UARTEx_DisableFifoMode+0x3a>
 8007c64:	2301      	movs	r3, #1
 8007c66:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007c6a:	2324      	movs	r3, #36	@ 0x24
 8007c6c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c70:	6803      	ldr	r3, [r0, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007c74:	6819      	ldr	r1, [r3, #0]
 8007c76:	f021 0101 	bic.w	r1, r1, #1
 8007c7a:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c7c:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c80:	2300      	movs	r3, #0
 8007c82:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c84:	6801      	ldr	r1, [r0, #0]
 8007c86:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007c88:	2220      	movs	r2, #32
 8007c8a:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8007c8e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8007c92:	4618      	mov	r0, r3
 8007c94:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007c96:	2002      	movs	r0, #2
}
 8007c98:	4770      	bx	lr

08007c9a <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007c9a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007c9c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d01d      	beq.n	8007ce0 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007cac:	2324      	movs	r3, #36	@ 0x24
 8007cae:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cb2:	6803      	ldr	r3, [r0, #0]
 8007cb4:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	f022 0201 	bic.w	r2, r2, #1
 8007cbc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007cbe:	6802      	ldr	r2, [r0, #0]
 8007cc0:	6893      	ldr	r3, [r2, #8]
 8007cc2:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8007cc6:	4319      	orrs	r1, r3
 8007cc8:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007cca:	f7ff ff05 	bl	8007ad8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007cd2:	2320      	movs	r3, #32
 8007cd4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8007cd8:	2000      	movs	r0, #0
 8007cda:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007ce0:	2002      	movs	r0, #2
 8007ce2:	e7fc      	b.n	8007cde <HAL_UARTEx_SetTxFifoThreshold+0x44>

08007ce4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007ce4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007ce6:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d01d      	beq.n	8007d2a <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007cee:	4604      	mov	r4, r0
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007cf6:	2324      	movs	r3, #36	@ 0x24
 8007cf8:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cfc:	6803      	ldr	r3, [r0, #0]
 8007cfe:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	f022 0201 	bic.w	r2, r2, #1
 8007d06:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d08:	6802      	ldr	r2, [r0, #0]
 8007d0a:	6893      	ldr	r3, [r2, #8]
 8007d0c:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8007d10:	4319      	orrs	r1, r3
 8007d12:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007d14:	f7ff fee0 	bl	8007ad8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007d1c:	2320      	movs	r3, #32
 8007d1e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8007d22:	2000      	movs	r0, #0
 8007d24:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8007d28:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007d2a:	2002      	movs	r0, #2
 8007d2c:	e7fc      	b.n	8007d28 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08007d30 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8007d30:	2804      	cmp	r0, #4
 8007d32:	d807      	bhi.n	8007d44 <LmHandlerPackageIsInitialized+0x14>
{
 8007d34:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8007d36:	4b05      	ldr	r3, [pc, #20]	@ (8007d4c <LmHandlerPackageIsInitialized+0x1c>)
 8007d38:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	b11b      	cbz	r3, 8007d48 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8007d40:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8007d42:	bd08      	pop	{r3, pc}
        return false;
 8007d44:	2000      	movs	r0, #0
}
 8007d46:	4770      	bx	lr
        return false;
 8007d48:	2000      	movs	r0, #0
 8007d4a:	e7fa      	b.n	8007d42 <LmHandlerPackageIsInitialized+0x12>
 8007d4c:	200007e8 	.word	0x200007e8

08007d50 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	4605      	mov	r5, r0
 8007d54:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007d56:	2400      	movs	r4, #0
 8007d58:	e005      	b.n	8007d66 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	b10b      	cbz	r3, 8007d62 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8007d5e:	4630      	mov	r0, r6
 8007d60:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007d62:	3401      	adds	r4, #1
 8007d64:	b264      	sxtb	r4, r4
 8007d66:	2c04      	cmp	r4, #4
 8007d68:	dc24      	bgt.n	8007db4 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8007d6a:	4b13      	ldr	r3, [pc, #76]	@ (8007db8 <LmHandlerPackagesNotify+0x68>)
 8007d6c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0f6      	beq.n	8007d62 <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8007d74:	2d03      	cmp	r5, #3
 8007d76:	d8f4      	bhi.n	8007d62 <LmHandlerPackagesNotify+0x12>
 8007d78:	a201      	add	r2, pc, #4	@ (adr r2, 8007d80 <LmHandlerPackagesNotify+0x30>)
 8007d7a:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007d5b 	.word	0x08007d5b
 8007d84:	08007d91 	.word	0x08007d91
 8007d88:	08007d9d 	.word	0x08007d9d
 8007d8c:	08007da9 	.word	0x08007da9
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0e5      	beq.n	8007d62 <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 8007d96:	4630      	mov	r0, r6
 8007d98:	4798      	blx	r3
 8007d9a:	e7e2      	b.n	8007d62 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0df      	beq.n	8007d62 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 8007da2:	4630      	mov	r0, r6
 8007da4:	4798      	blx	r3
 8007da6:	e7dc      	b.n	8007d62 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8007da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0d9      	beq.n	8007d62 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8007dae:	4630      	mov	r0, r6
 8007db0:	4798      	blx	r3
 8007db2:	e7d6      	b.n	8007d62 <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 8007db4:	bd70      	pop	{r4, r5, r6, pc}
 8007db6:	bf00      	nop
 8007db8:	200007e8 	.word	0x200007e8

08007dbc <MlmeIndication>:
{
 8007dbc:	b510      	push	{r4, lr}
 8007dbe:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8007dc0:	4b11      	ldr	r3, [pc, #68]	@ (8007e08 <MlmeIndication+0x4c>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8007dc6:	7842      	ldrb	r2, [r0, #1]
 8007dc8:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8007dca:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8007dce:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8007dd0:	f9b1 2000 	ldrsh.w	r2, [r1]
 8007dd4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8007dd6:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8007dda:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8007ddc:	78ca      	ldrb	r2, [r1, #3]
 8007dde:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8007de0:	6842      	ldr	r2, [r0, #4]
 8007de2:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 8007de4:	4b09      	ldr	r3, [pc, #36]	@ (8007e0c <MlmeIndication+0x50>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dea:	b13b      	cbz	r3, 8007dfc <MlmeIndication+0x40>
 8007dec:	7802      	ldrb	r2, [r0, #0]
 8007dee:	2a0a      	cmp	r2, #10
 8007df0:	d004      	beq.n	8007dfc <MlmeIndication+0x40>
 8007df2:	2a0e      	cmp	r2, #14
 8007df4:	d002      	beq.n	8007dfc <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8007df6:	4904      	ldr	r1, [pc, #16]	@ (8007e08 <MlmeIndication+0x4c>)
 8007df8:	2000      	movs	r0, #0
 8007dfa:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	2003      	movs	r0, #3
 8007e00:	f7ff ffa6 	bl	8007d50 <LmHandlerPackagesNotify>
}
 8007e04:	bd10      	pop	{r4, pc}
 8007e06:	bf00      	nop
 8007e08:	20000080 	.word	0x20000080
 8007e0c:	200007cc 	.word	0x200007cc

08007e10 <McpsConfirm>:
{
 8007e10:	b510      	push	{r4, lr}
 8007e12:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8007e14:	4b0d      	ldr	r3, [pc, #52]	@ (8007e4c <McpsConfirm+0x3c>)
 8007e16:	2201      	movs	r2, #1
 8007e18:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8007e1a:	7842      	ldrb	r2, [r0, #1]
 8007e1c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8007e1e:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8007e22:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8007e24:	68c2      	ldr	r2, [r0, #12]
 8007e26:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8007e28:	f990 2003 	ldrsb.w	r2, [r0, #3]
 8007e2c:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8007e2e:	6902      	ldr	r2, [r0, #16]
 8007e30:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8007e32:	7902      	ldrb	r2, [r0, #4]
 8007e34:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8007e36:	4b06      	ldr	r3, [pc, #24]	@ (8007e50 <McpsConfirm+0x40>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3c:	b10b      	cbz	r3, 8007e42 <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 8007e3e:	4803      	ldr	r0, [pc, #12]	@ (8007e4c <McpsConfirm+0x3c>)
 8007e40:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8007e42:	4621      	mov	r1, r4
 8007e44:	2000      	movs	r0, #0
 8007e46:	f7ff ff83 	bl	8007d50 <LmHandlerPackagesNotify>
}
 8007e4a:	bd10      	pop	{r4, pc}
 8007e4c:	20000094 	.word	0x20000094
 8007e50:	200007cc 	.word	0x200007cc

08007e54 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8007e54:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007e56:	2400      	movs	r4, #0
 8007e58:	e001      	b.n	8007e5e <LmHandlerPackageIsTxPending+0xa>
 8007e5a:	3401      	adds	r4, #1
 8007e5c:	b264      	sxtb	r4, r4
 8007e5e:	2c04      	cmp	r4, #4
 8007e60:	dc0a      	bgt.n	8007e78 <LmHandlerPackageIsTxPending+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 8007e62:	4b07      	ldr	r3, [pc, #28]	@ (8007e80 <LmHandlerPackageIsTxPending+0x2c>)
 8007e64:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d0f6      	beq.n	8007e5a <LmHandlerPackageIsTxPending+0x6>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	4798      	blx	r3
 8007e70:	4603      	mov	r3, r0
 8007e72:	2800      	cmp	r0, #0
 8007e74:	d0f1      	beq.n	8007e5a <LmHandlerPackageIsTxPending+0x6>
 8007e76:	e000      	b.n	8007e7a <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	bd10      	pop	{r4, pc}
 8007e7e:	bf00      	nop
 8007e80:	200007e8 	.word	0x200007e8

08007e84 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8007e84:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007e86:	2400      	movs	r4, #0
 8007e88:	e001      	b.n	8007e8e <LmHandlerPackagesProcess+0xa>
 8007e8a:	3401      	adds	r4, #1
 8007e8c:	b264      	sxtb	r4, r4
 8007e8e:	2c04      	cmp	r4, #4
 8007e90:	dc12      	bgt.n	8007eb8 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8007e92:	4b0a      	ldr	r3, [pc, #40]	@ (8007ebc <LmHandlerPackagesProcess+0x38>)
 8007e94:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0f6      	beq.n	8007e8a <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007e9c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0f3      	beq.n	8007e8a <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8007ea2:	b2e0      	uxtb	r0, r4
 8007ea4:	f7ff ff44 	bl	8007d30 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d0ee      	beq.n	8007e8a <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8007eac:	4b03      	ldr	r3, [pc, #12]	@ (8007ebc <LmHandlerPackagesProcess+0x38>)
 8007eae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	4798      	blx	r3
 8007eb6:	e7e8      	b.n	8007e8a <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8007eb8:	bd38      	pop	{r3, r4, r5, pc}
 8007eba:	bf00      	nop
 8007ebc:	200007e8 	.word	0x200007e8

08007ec0 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 8007ec0:	b508      	push	{r3, lr}
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8007ec2:	4b04      	ldr	r3, [pc, #16]	@ (8007ed4 <LmHandlerOnTxFrameCtrlChanged+0x14>)
 8007ec4:	70d8      	strb	r0, [r3, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 8007ec6:	4b04      	ldr	r3, [pc, #16]	@ (8007ed8 <LmHandlerOnTxFrameCtrlChanged+0x18>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ecc:	b103      	cbz	r3, 8007ed0 <LmHandlerOnTxFrameCtrlChanged+0x10>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 8007ece:	4798      	blx	r3
    }
}
 8007ed0:	bd08      	pop	{r3, pc}
 8007ed2:	bf00      	nop
 8007ed4:	200007d0 	.word	0x200007d0
 8007ed8:	200007cc 	.word	0x200007cc

08007edc <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 8007edc:	b508      	push	{r3, lr}
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8007ede:	4b04      	ldr	r3, [pc, #16]	@ (8007ef0 <LmHandlerOnPingSlotPeriodicityChanged+0x14>)
 8007ee0:	7418      	strb	r0, [r3, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 8007ee2:	4b04      	ldr	r3, [pc, #16]	@ (8007ef4 <LmHandlerOnPingSlotPeriodicityChanged+0x18>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ee8:	b103      	cbz	r3, 8007eec <LmHandlerOnPingSlotPeriodicityChanged+0x10>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 8007eea:	4798      	blx	r3
    }
}
 8007eec:	bd08      	pop	{r3, pc}
 8007eee:	bf00      	nop
 8007ef0:	200007d0 	.word	0x200007d0
 8007ef4:	200007cc 	.word	0x200007cc

08007ef8 <LmHandlerJoin>:
{
 8007ef8:	b530      	push	{r4, r5, lr}
 8007efa:	b091      	sub	sp, #68	@ 0x44
    mlmeReq.Type = MLME_JOIN;
 8007efc:	2301      	movs	r3, #1
 8007efe:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007f02:	4b2f      	ldr	r3, [pc, #188]	@ (8007fc0 <LmHandlerJoin+0xc8>)
 8007f04:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8007f08:	f88d 2031 	strb.w	r2, [sp, #49]	@ 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 8007f0c:	f993 5005 	ldrsb.w	r5, [r3, #5]
 8007f10:	f88d 5032 	strb.w	r5, [sp, #50]	@ 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 8007f14:	2802      	cmp	r0, #2
 8007f16:	d049      	beq.n	8007fac <LmHandlerJoin+0xb4>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8007f18:	2401      	movs	r4, #1
 8007f1a:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8007f1e:	4b29      	ldr	r3, [pc, #164]	@ (8007fc4 <LmHandlerJoin+0xcc>)
 8007f20:	71dc      	strb	r4, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8007f22:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 8007f24:	715d      	strb	r5, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007f26:	2000      	movs	r0, #0
 8007f28:	7198      	strb	r0, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8007f2a:	7219      	strb	r1, [r3, #8]
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8007f2c:	231f      	movs	r3, #31
 8007f2e:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8007f32:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007f36:	a801      	add	r0, sp, #4
 8007f38:	f003 fc82 	bl	800b840 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8007f3c:	2320      	movs	r3, #32
 8007f3e:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8007f42:	4d1f      	ldr	r5, [pc, #124]	@ (8007fc0 <LmHandlerJoin+0xc8>)
 8007f44:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8007f48:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007f4c:	a801      	add	r0, sp, #4
 8007f4e:	f003 fc77 	bl	800b840 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8007f52:	2322      	movs	r3, #34	@ 0x22
 8007f54:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 8007f58:	f995 3005 	ldrsb.w	r3, [r5, #5]
 8007f5c:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007f60:	a801      	add	r0, sp, #4
 8007f62:	f003 fc6d 	bl	800b840 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 8007f66:	2321      	movs	r3, #33	@ 0x21
 8007f68:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 8007f6c:	f995 3005 	ldrsb.w	r3, [r5, #5]
 8007f70:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007f74:	a801      	add	r0, sp, #4
 8007f76:	f003 fc63 	bl	800b840 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8007f7a:	2329      	movs	r3, #41	@ 0x29
 8007f7c:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8007f80:	4b11      	ldr	r3, [pc, #68]	@ (8007fc8 <LmHandlerJoin+0xd0>)
 8007f82:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007f84:	a801      	add	r0, sp, #4
 8007f86:	f003 fc5b 	bl	800b840 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 8007f8a:	f003 fa2f 	bl	800b3ec <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007f8e:	f88d 4004 	strb.w	r4, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8007f92:	f88d 4008 	strb.w	r4, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007f96:	a801      	add	r0, sp, #4
 8007f98:	f003 fc52 	bl	800b840 <LoRaMacMibSetRequestConfirm>
        LoRaMacMlmeRequest( &mlmeReq );
 8007f9c:	a80b      	add	r0, sp, #44	@ 0x2c
 8007f9e:	f003 ff25 	bl	800bdec <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8007fa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007fa4:	4b09      	ldr	r3, [pc, #36]	@ (8007fcc <LmHandlerJoin+0xd4>)
 8007fa6:	601a      	str	r2, [r3, #0]
}
 8007fa8:	b011      	add	sp, #68	@ 0x44
 8007faa:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8007fac:	2202      	movs	r2, #2
 8007fae:	f88d 2030 	strb.w	r2, [sp, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8007fb2:	4b04      	ldr	r3, [pc, #16]	@ (8007fc4 <LmHandlerJoin+0xcc>)
 8007fb4:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 8007fb6:	7219      	strb	r1, [r3, #8]
        LoRaMacStart();
 8007fb8:	f003 fa18 	bl	800b3ec <LoRaMacStart>
 8007fbc:	e7ee      	b.n	8007f9c <LmHandlerJoin+0xa4>
 8007fbe:	bf00      	nop
 8007fc0:	200007d0 	.word	0x200007d0
 8007fc4:	200000b0 	.word	0x200000b0
 8007fc8:	01000400 	.word	0x01000400
 8007fcc:	200007a0 	.word	0x200007a0

08007fd0 <LmHandlerDeviceTimeReq>:
{
 8007fd0:	b500      	push	{lr}
 8007fd2:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8007fd4:	2309      	movs	r3, #9
 8007fd6:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8007fda:	a801      	add	r0, sp, #4
 8007fdc:	f003 ff06 	bl	800bdec <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8007fe0:	9a05      	ldr	r2, [sp, #20]
 8007fe2:	4b04      	ldr	r3, [pc, #16]	@ (8007ff4 <LmHandlerDeviceTimeReq+0x24>)
 8007fe4:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 8007fe6:	b910      	cbnz	r0, 8007fee <LmHandlerDeviceTimeReq+0x1e>
}
 8007fe8:	b007      	add	sp, #28
 8007fea:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8007fee:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff2:	e7f9      	b.n	8007fe8 <LmHandlerDeviceTimeReq+0x18>
 8007ff4:	200007a0 	.word	0x200007a0

08007ff8 <LmHandlerGetDutyCycleWaitTime>:
}
 8007ff8:	4b01      	ldr	r3, [pc, #4]	@ (8008000 <LmHandlerGetDutyCycleWaitTime+0x8>)
 8007ffa:	6818      	ldr	r0, [r3, #0]
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	200007a0 	.word	0x200007a0

08008004 <LmHandlerJoinStatus>:
{
 8008004:	b500      	push	{lr}
 8008006:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008008:	2301      	movs	r3, #1
 800800a:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800800e:	4668      	mov	r0, sp
 8008010:	f003 faa6 	bl	800b560 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8008014:	b920      	cbnz	r0, 8008020 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008016:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800801a:	b110      	cbz	r0, 8008022 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 800801c:	2001      	movs	r0, #1
 800801e:	e000      	b.n	8008022 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8008020:	2000      	movs	r0, #0
}
 8008022:	b00b      	add	sp, #44	@ 0x2c
 8008024:	f85d fb04 	ldr.w	pc, [sp], #4

08008028 <LmHandlerIsBusy>:
{
 8008028:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 800802a:	f002 ff8d 	bl	800af48 <LoRaMacIsBusy>
 800802e:	b100      	cbz	r0, 8008032 <LmHandlerIsBusy+0xa>
}
 8008030:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8008032:	f7ff ffe7 	bl	8008004 <LmHandlerJoinStatus>
 8008036:	2801      	cmp	r0, #1
 8008038:	d006      	beq.n	8008048 <LmHandlerIsBusy+0x20>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800803a:	4b05      	ldr	r3, [pc, #20]	@ (8008050 <LmHandlerIsBusy+0x28>)
 800803c:	7a19      	ldrb	r1, [r3, #8]
 800803e:	79d8      	ldrb	r0, [r3, #7]
 8008040:	f7ff ff5a 	bl	8007ef8 <LmHandlerJoin>
        return true;
 8008044:	2001      	movs	r0, #1
 8008046:	e7f3      	b.n	8008030 <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 8008048:	f7ff ff04 	bl	8007e54 <LmHandlerPackageIsTxPending>
 800804c:	e7f0      	b.n	8008030 <LmHandlerIsBusy+0x8>
 800804e:	bf00      	nop
 8008050:	200000b0 	.word	0x200000b0

08008054 <LmHandlerSend>:
{
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	4604      	mov	r4, r0
 800805a:	460d      	mov	r5, r1
 800805c:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 800805e:	f002 ff73 	bl	800af48 <LoRaMacIsBusy>
 8008062:	2800      	cmp	r0, #0
 8008064:	d168      	bne.n	8008138 <LmHandlerSend+0xe4>
    if( LoRaMacIsStopped() == true )
 8008066:	f002 ff8d 	bl	800af84 <LoRaMacIsStopped>
 800806a:	2800      	cmp	r0, #0
 800806c:	d167      	bne.n	800813e <LmHandlerSend+0xea>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800806e:	f7ff ffc9 	bl	8008004 <LmHandlerJoinStatus>
 8008072:	2801      	cmp	r0, #1
 8008074:	d137      	bne.n	80080e6 <LmHandlerSend+0x92>
    TxParams.MsgType = isTxConfirmed;
 8008076:	4b35      	ldr	r3, [pc, #212]	@ (800814c <LmHandlerSend+0xf8>)
 8008078:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800807a:	3d00      	subs	r5, #0
 800807c:	bf18      	it	ne
 800807e:	2501      	movne	r5, #1
 8008080:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8008084:	4b32      	ldr	r3, [pc, #200]	@ (8008150 <LmHandlerSend+0xfc>)
 8008086:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800808a:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800808e:	4669      	mov	r1, sp
 8008090:	7860      	ldrb	r0, [r4, #1]
 8008092:	f003 f9fb 	bl	800b48c <LoRaMacQueryTxPossible>
 8008096:	b370      	cbz	r0, 80080f6 <LmHandlerSend+0xa2>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8008098:	2300      	movs	r3, #0
 800809a:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800809e:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80080a0:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 80080a4:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 80080a8:	4b28      	ldr	r3, [pc, #160]	@ (800814c <LmHandlerSend+0xf8>)
 80080aa:	f103 0c10 	add.w	ip, r3, #16
 80080ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80080b2:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 80080b6:	4a26      	ldr	r2, [pc, #152]	@ (8008150 <LmHandlerSend+0xfc>)
 80080b8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80080bc:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 80080be:	4631      	mov	r1, r6
 80080c0:	a801      	add	r0, sp, #4
 80080c2:	f003 ff9f 	bl	800c004 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 80080c6:	9a05      	ldr	r2, [sp, #20]
 80080c8:	4b22      	ldr	r3, [pc, #136]	@ (8008154 <LmHandlerSend+0x100>)
 80080ca:	601a      	str	r2, [r3, #0]
    switch( status )
 80080cc:	2811      	cmp	r0, #17
 80080ce:	d830      	bhi.n	8008132 <LmHandlerSend+0xde>
 80080d0:	e8df f000 	tbb	[pc, r0]
 80080d4:	2f2f1c21 	.word	0x2f2f1c21
 80080d8:	382f2f2f 	.word	0x382f2f2f
 80080dc:	2c2f2f2f 	.word	0x2c2f2f2f
 80080e0:	1c1c2f2f 	.word	0x1c1c2f2f
 80080e4:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 80080e6:	4b1c      	ldr	r3, [pc, #112]	@ (8008158 <LmHandlerSend+0x104>)
 80080e8:	7a19      	ldrb	r1, [r3, #8]
 80080ea:	79d8      	ldrb	r0, [r3, #7]
 80080ec:	f7ff ff04 	bl	8007ef8 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80080f0:	f06f 0502 	mvn.w	r5, #2
 80080f4:	e00c      	b.n	8008110 <LmHandlerSend+0xbc>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80080f6:	7823      	ldrb	r3, [r4, #0]
 80080f8:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80080fc:	7863      	ldrb	r3, [r4, #1]
 80080fe:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8008102:	6863      	ldr	r3, [r4, #4]
 8008104:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8008106:	f04f 35ff 	mov.w	r5, #4294967295
 800810a:	e7cd      	b.n	80080a8 <LmHandlerSend+0x54>
    switch( status )
 800810c:	f06f 0501 	mvn.w	r5, #1
}
 8008110:	4628      	mov	r0, r5
 8008112:	b006      	add	sp, #24
 8008114:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 8008116:	4b11      	ldr	r3, [pc, #68]	@ (800815c <LmHandlerSend+0x108>)
 8008118:	2200      	movs	r2, #0
 800811a:	701a      	strb	r2, [r3, #0]
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800811c:	f115 0f07 	cmn.w	r5, #7
 8008120:	d0f6      	beq.n	8008110 <LmHandlerSend+0xbc>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8008122:	2500      	movs	r5, #0
 8008124:	e7f4      	b.n	8008110 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8008126:	f06f 0504 	mvn.w	r5, #4
            break;
 800812a:	e7f1      	b.n	8008110 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800812c:	f06f 0505 	mvn.w	r5, #5
            break;
 8008130:	e7ee      	b.n	8008110 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8008132:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 8008136:	e7eb      	b.n	8008110 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008138:	f06f 0501 	mvn.w	r5, #1
 800813c:	e7e8      	b.n	8008110 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800813e:	f06f 0502 	mvn.w	r5, #2
 8008142:	e7e5      	b.n	8008110 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008144:	f06f 0502 	mvn.w	r5, #2
 8008148:	e7e2      	b.n	8008110 <LmHandlerSend+0xbc>
 800814a:	bf00      	nop
 800814c:	20000094 	.word	0x20000094
 8008150:	200007d0 	.word	0x200007d0
 8008154:	200007a0 	.word	0x200007a0
 8008158:	200000b0 	.word	0x200000b0
 800815c:	2000079e 	.word	0x2000079e

08008160 <LmHandlerProcess>:
{
 8008160:	b500      	push	{lr}
 8008162:	b083      	sub	sp, #12
    LoRaMacProcess( );
 8008164:	f002 ff1a 	bl	800af9c <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8008168:	f7ff fe8c 	bl	8007e84 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 800816c:	f7ff fe72 	bl	8007e54 <LmHandlerPackageIsTxPending>
 8008170:	b910      	cbnz	r0, 8008178 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 8008172:	4b0b      	ldr	r3, [pc, #44]	@ (80081a0 <LmHandlerProcess+0x40>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	b913      	cbnz	r3, 800817e <LmHandlerProcess+0x1e>
}
 8008178:	b003      	add	sp, #12
 800817a:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 800817e:	2200      	movs	r2, #0
 8008180:	f88d 2000 	strb.w	r2, [sp]
 8008184:	f88d 2001 	strb.w	r2, [sp, #1]
 8008188:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800818a:	4b06      	ldr	r3, [pc, #24]	@ (80081a4 <LmHandlerProcess+0x44>)
 800818c:	78d9      	ldrb	r1, [r3, #3]
 800818e:	4668      	mov	r0, sp
 8008190:	f7ff ff60 	bl	8008054 <LmHandlerSend>
 8008194:	2800      	cmp	r0, #0
 8008196:	d1ef      	bne.n	8008178 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 8008198:	4b01      	ldr	r3, [pc, #4]	@ (80081a0 <LmHandlerProcess+0x40>)
 800819a:	2200      	movs	r2, #0
 800819c:	701a      	strb	r2, [r3, #0]
 800819e:	e7eb      	b.n	8008178 <LmHandlerProcess+0x18>
 80081a0:	2000079e 	.word	0x2000079e
 80081a4:	200007d0 	.word	0x200007d0

080081a8 <LmHandlerRequestClass>:
{
 80081a8:	b510      	push	{r4, lr}
 80081aa:	b08a      	sub	sp, #40	@ 0x28
 80081ac:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 80081ae:	f002 fecb 	bl	800af48 <LoRaMacIsBusy>
 80081b2:	bb98      	cbnz	r0, 800821c <LmHandlerRequestClass+0x74>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 80081b4:	f7ff ff26 	bl	8008004 <LmHandlerJoinStatus>
 80081b8:	2801      	cmp	r0, #1
 80081ba:	d132      	bne.n	8008222 <LmHandlerRequestClass+0x7a>
    mibReq.Type = MIB_DEVICE_CLASS;
 80081bc:	2300      	movs	r3, #0
 80081be:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80081c2:	4668      	mov	r0, sp
 80081c4:	f003 f9cc 	bl	800b560 <LoRaMacMibGetRequestConfirm>
 80081c8:	bb70      	cbnz	r0, 8008228 <LmHandlerRequestClass+0x80>
    currentClass = mibReq.Param.Class;
 80081ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 80081ce:	42a3      	cmp	r3, r4
 80081d0:	d02d      	beq.n	800822e <LmHandlerRequestClass+0x86>
        switch( newClass )
 80081d2:	2c01      	cmp	r4, #1
 80081d4:	d02e      	beq.n	8008234 <LmHandlerRequestClass+0x8c>
 80081d6:	2c02      	cmp	r4, #2
 80081d8:	d011      	beq.n	80081fe <LmHandlerRequestClass+0x56>
 80081da:	bb74      	cbnz	r4, 800823a <LmHandlerRequestClass+0x92>
                    if( currentClass != CLASS_A )
 80081dc:	b90b      	cbnz	r3, 80081e2 <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80081de:	2000      	movs	r0, #0
 80081e0:	e026      	b.n	8008230 <LmHandlerRequestClass+0x88>
                        mibReq.Param.Class = newClass;
 80081e2:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80081e6:	4668      	mov	r0, sp
 80081e8:	f003 fb2a 	bl	800b840 <LoRaMacMibSetRequestConfirm>
 80081ec:	bb38      	cbnz	r0, 800823e <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 80081ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008258 <LmHandlerRequestClass+0xb0>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f4:	b333      	cbz	r3, 8008244 <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 80081f6:	4620      	mov	r0, r4
 80081f8:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80081fa:	2000      	movs	r0, #0
 80081fc:	e018      	b.n	8008230 <LmHandlerRequestClass+0x88>
                    if( currentClass != CLASS_A )
 80081fe:	bb1b      	cbnz	r3, 8008248 <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 8008200:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008204:	4668      	mov	r0, sp
 8008206:	f003 fb1b 	bl	800b840 <LoRaMacMibSetRequestConfirm>
 800820a:	bb00      	cbnz	r0, 800824e <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800820c:	4b12      	ldr	r3, [pc, #72]	@ (8008258 <LmHandlerRequestClass+0xb0>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008212:	b1fb      	cbz	r3, 8008254 <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8008214:	4620      	mov	r0, r4
 8008216:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008218:	2000      	movs	r0, #0
 800821a:	e009      	b.n	8008230 <LmHandlerRequestClass+0x88>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800821c:	f06f 0001 	mvn.w	r0, #1
 8008220:	e006      	b.n	8008230 <LmHandlerRequestClass+0x88>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008222:	f06f 0002 	mvn.w	r0, #2
 8008226:	e003      	b.n	8008230 <LmHandlerRequestClass+0x88>
        return LORAMAC_HANDLER_ERROR;
 8008228:	f04f 30ff 	mov.w	r0, #4294967295
 800822c:	e000      	b.n	8008230 <LmHandlerRequestClass+0x88>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800822e:	2000      	movs	r0, #0
}
 8008230:	b00a      	add	sp, #40	@ 0x28
 8008232:	bd10      	pop	{r4, pc}
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	e7fa      	b.n	8008230 <LmHandlerRequestClass+0x88>
        switch( newClass )
 800823a:	2000      	movs	r0, #0
 800823c:	e7f8      	b.n	8008230 <LmHandlerRequestClass+0x88>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800823e:	f04f 30ff 	mov.w	r0, #4294967295
 8008242:	e7f5      	b.n	8008230 <LmHandlerRequestClass+0x88>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008244:	2000      	movs	r0, #0
 8008246:	e7f3      	b.n	8008230 <LmHandlerRequestClass+0x88>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8008248:	f04f 30ff 	mov.w	r0, #4294967295
 800824c:	e7f0      	b.n	8008230 <LmHandlerRequestClass+0x88>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800824e:	f04f 30ff 	mov.w	r0, #4294967295
 8008252:	e7ed      	b.n	8008230 <LmHandlerRequestClass+0x88>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008254:	2000      	movs	r0, #0
 8008256:	e7eb      	b.n	8008230 <LmHandlerRequestClass+0x88>
 8008258:	200007cc 	.word	0x200007cc

0800825c <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 800825c:	b170      	cbz	r0, 800827c <LmHandlerGetCurrentClass+0x20>
{
 800825e:	b510      	push	{r4, lr}
 8008260:	b08a      	sub	sp, #40	@ 0x28
 8008262:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8008264:	2300      	movs	r3, #0
 8008266:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800826a:	4668      	mov	r0, sp
 800826c:	f003 f978 	bl	800b560 <LoRaMacMibGetRequestConfirm>
 8008270:	b938      	cbnz	r0, 8008282 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8008272:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008276:	7023      	strb	r3, [r4, #0]
}
 8008278:	b00a      	add	sp, #40	@ 0x28
 800827a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800827c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008280:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008282:	f04f 30ff 	mov.w	r0, #4294967295
 8008286:	e7f7      	b.n	8008278 <LmHandlerGetCurrentClass+0x1c>

08008288 <McpsIndication>:
{
 8008288:	b510      	push	{r4, lr}
 800828a:	b084      	sub	sp, #16
    DeviceClass_t deviceClass = CLASS_A;
 800828c:	2300      	movs	r3, #0
 800828e:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 8008292:	4a1d      	ldr	r2, [pc, #116]	@ (8008308 <McpsIndication+0x80>)
 8008294:	2301      	movs	r3, #1
 8008296:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 8008298:	7843      	ldrb	r3, [r0, #1]
 800829a:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800829c:	2b00      	cmp	r3, #0
 800829e:	d131      	bne.n	8008304 <McpsIndication+0x7c>
 80082a0:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 80082a2:	f990 2004 	ldrsb.w	r2, [r0, #4]
 80082a6:	4b18      	ldr	r3, [pc, #96]	@ (8008308 <McpsIndication+0x80>)
 80082a8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80082aa:	f9b1 2000 	ldrsh.w	r2, [r1]
 80082ae:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80082b0:	f991 2002 	ldrsb.w	r2, [r1, #2]
 80082b4:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80082b6:	78ca      	ldrb	r2, [r1, #3]
 80082b8:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80082ba:	6902      	ldr	r2, [r0, #16]
 80082bc:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 80082be:	78c3      	ldrb	r3, [r0, #3]
 80082c0:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 80082c4:	7b03      	ldrb	r3, [r0, #12]
 80082c6:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 80082ca:	6883      	ldr	r3, [r0, #8]
 80082cc:	9303      	str	r3, [sp, #12]
    if( LmHandlerCallbacks->OnRxData != NULL )
 80082ce:	4b0f      	ldr	r3, [pc, #60]	@ (800830c <McpsIndication+0x84>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d4:	b113      	cbz	r3, 80082dc <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 80082d6:	490c      	ldr	r1, [pc, #48]	@ (8008308 <McpsIndication+0x80>)
 80082d8:	a802      	add	r0, sp, #8
 80082da:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 80082dc:	4b0b      	ldr	r3, [pc, #44]	@ (800830c <McpsIndication+0x84>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e2:	b113      	cbz	r3, 80082ea <McpsIndication+0x62>
 80082e4:	7e22      	ldrb	r2, [r4, #24]
 80082e6:	b102      	cbz	r2, 80082ea <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 80082e8:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 80082ea:	4621      	mov	r1, r4
 80082ec:	2001      	movs	r0, #1
 80082ee:	f7ff fd2f 	bl	8007d50 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 80082f2:	f10d 0007 	add.w	r0, sp, #7
 80082f6:	f7ff ffb1 	bl	800825c <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 80082fa:	7963      	ldrb	r3, [r4, #5]
 80082fc:	b113      	cbz	r3, 8008304 <McpsIndication+0x7c>
        IsUplinkTxPending = true;
 80082fe:	4b04      	ldr	r3, [pc, #16]	@ (8008310 <McpsIndication+0x88>)
 8008300:	2201      	movs	r2, #1
 8008302:	701a      	strb	r2, [r3, #0]
}
 8008304:	b004      	add	sp, #16
 8008306:	bd10      	pop	{r4, pc}
 8008308:	20000080 	.word	0x20000080
 800830c:	200007cc 	.word	0x200007cc
 8008310:	2000079e 	.word	0x2000079e

08008314 <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 8008314:	b180      	cbz	r0, 8008338 <LmHandlerGetTxDatarate+0x24>
{
 8008316:	b510      	push	{r4, lr}
 8008318:	b08a      	sub	sp, #40	@ 0x28
 800831a:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800831c:	2320      	movs	r3, #32
 800831e:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 8008322:	4668      	mov	r0, sp
 8008324:	f003 f91c 	bl	800b560 <LoRaMacMibGetRequestConfirm>
 8008328:	b948      	cbnz	r0, 800833e <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800832a:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800832e:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8008330:	4a04      	ldr	r2, [pc, #16]	@ (8008344 <LmHandlerGetTxDatarate+0x30>)
 8008332:	7113      	strb	r3, [r2, #4]
}
 8008334:	b00a      	add	sp, #40	@ 0x28
 8008336:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008338:	f04f 30ff 	mov.w	r0, #4294967295
}
 800833c:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800833e:	f04f 30ff 	mov.w	r0, #4294967295
 8008342:	e7f7      	b.n	8008334 <LmHandlerGetTxDatarate+0x20>
 8008344:	200007d0 	.word	0x200007d0

08008348 <LmHandlerSetSystemMaxRxError>:
{
 8008348:	b500      	push	{lr}
 800834a:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800834c:	2323      	movs	r3, #35	@ 0x23
 800834e:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8008352:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008354:	4668      	mov	r0, sp
 8008356:	f003 fa73 	bl	800b840 <LoRaMacMibSetRequestConfirm>
 800835a:	b910      	cbnz	r0, 8008362 <LmHandlerSetSystemMaxRxError+0x1a>
}
 800835c:	b00b      	add	sp, #44	@ 0x2c
 800835e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008362:	f04f 30ff 	mov.w	r0, #4294967295
 8008366:	e7f9      	b.n	800835c <LmHandlerSetSystemMaxRxError+0x14>

08008368 <LmHandlerConfigure>:
{
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	b08e      	sub	sp, #56	@ 0x38
 800836c:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800836e:	4c44      	ldr	r4, [pc, #272]	@ (8008480 <LmHandlerConfigure+0x118>)
 8008370:	2218      	movs	r2, #24
 8008372:	4620      	mov	r0, r4
 8008374:	f007 ff9d 	bl	80102b2 <memcpy1>
    IsUplinkTxPending = false;
 8008378:	4b42      	ldr	r3, [pc, #264]	@ (8008484 <LmHandlerConfigure+0x11c>)
 800837a:	2200      	movs	r2, #0
 800837c:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 800837e:	f7fb f81d 	bl	80033bc <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 8008382:	7822      	ldrb	r2, [r4, #0]
 8008384:	2301      	movs	r3, #1
 8008386:	4093      	lsls	r3, r2
 8008388:	6841      	ldr	r1, [r0, #4]
 800838a:	420b      	tst	r3, r1
 800838c:	d106      	bne.n	800839c <LmHandlerConfigure+0x34>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800838e:	4b3e      	ldr	r3, [pc, #248]	@ (8008488 <LmHandlerConfigure+0x120>)
 8008390:	2201      	movs	r2, #1
 8008392:	2100      	movs	r1, #0
 8008394:	4608      	mov	r0, r1
 8008396:	f009 fe6f 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800839a:	e7fe      	b.n	800839a <LmHandlerConfigure+0x32>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800839c:	493b      	ldr	r1, [pc, #236]	@ (800848c <LmHandlerConfigure+0x124>)
 800839e:	483c      	ldr	r0, [pc, #240]	@ (8008490 <LmHandlerConfigure+0x128>)
 80083a0:	f002 fe44 	bl	800b02c <LoRaMacInitialization>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d164      	bne.n	8008472 <LmHandlerConfigure+0x10a>
        mibReq.Type = MIB_NET_ID;
 80083a8:	2305      	movs	r3, #5
 80083aa:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 80083ae:	2301      	movs	r3, #1
 80083b0:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80083b2:	a804      	add	r0, sp, #16
 80083b4:	f003 fa44 	bl	800b840 <LoRaMacMibSetRequestConfirm>
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 80083b8:	4b34      	ldr	r3, [pc, #208]	@ (800848c <LmHandlerConfigure+0x124>)
 80083ba:	68d9      	ldr	r1, [r3, #12]
 80083bc:	6898      	ldr	r0, [r3, #8]
 80083be:	f007 fe8b 	bl	80100d8 <SecureElementInitMcuID>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d158      	bne.n	8008478 <LmHandlerConfigure+0x110>
    mibReq.Type = MIB_DEV_ADDR;
 80083c6:	2306      	movs	r3, #6
 80083c8:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80083cc:	a804      	add	r0, sp, #16
 80083ce:	f003 f8c7 	bl	800b560 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80083d2:	4c30      	ldr	r4, [pc, #192]	@ (8008494 <LmHandlerConfigure+0x12c>)
 80083d4:	9b05      	ldr	r3, [sp, #20]
 80083d6:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80083d8:	a804      	add	r0, sp, #16
 80083da:	f003 fa31 	bl	800b840 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 80083de:	2302      	movs	r3, #2
 80083e0:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 80083e4:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80083e6:	a804      	add	r0, sp, #16
 80083e8:	f003 f8ba 	bl	800b560 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 80083ec:	2303      	movs	r3, #3
 80083ee:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 80083f2:	3408      	adds	r4, #8
 80083f4:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80083f6:	a804      	add	r0, sp, #16
 80083f8:	f003 f8b2 	bl	800b560 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 80083fc:	f007 ff06 	bl	801020c <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8008400:	260f      	movs	r6, #15
 8008402:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8008406:	2301      	movs	r3, #1
 8008408:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800840c:	a804      	add	r0, sp, #16
 800840e:	f003 fa17 	bl	800b840 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8008412:	2310      	movs	r3, #16
 8008414:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8008418:	2500      	movs	r5, #0
 800841a:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800841e:	eb0d 0003 	add.w	r0, sp, r3
 8008422:	f003 fa0d 	bl	800b840 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8008426:	2304      	movs	r3, #4
 8008428:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800842c:	4c14      	ldr	r4, [pc, #80]	@ (8008480 <LmHandlerConfigure+0x118>)
 800842e:	78a3      	ldrb	r3, [r4, #2]
 8008430:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008434:	a804      	add	r0, sp, #16
 8008436:	f003 fa03 	bl	800b840 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800843a:	233a      	movs	r3, #58	@ 0x3a
 800843c:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8008440:	6963      	ldr	r3, [r4, #20]
 8008442:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008444:	a804      	add	r0, sp, #16
 8008446:	f003 f9fb 	bl	800b840 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800844a:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800844e:	a902      	add	r1, sp, #8
 8008450:	7820      	ldrb	r0, [r4, #0]
 8008452:	f004 ff5c 	bl	800d30e <RegionGetPhyParam>
 8008456:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 8008458:	1b43      	subs	r3, r0, r5
 800845a:	bf18      	it	ne
 800845c:	2301      	movne	r3, #1
 800845e:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 8008460:	2014      	movs	r0, #20
 8008462:	f7ff ff71 	bl	8008348 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8008466:	79e0      	ldrb	r0, [r4, #7]
 8008468:	f003 feb8 	bl	800c1dc <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 800846c:	4628      	mov	r0, r5
}
 800846e:	b00e      	add	sp, #56	@ 0x38
 8008470:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_HANDLER_ERROR;
 8008472:	f04f 30ff 	mov.w	r0, #4294967295
 8008476:	e7fa      	b.n	800846e <LmHandlerConfigure+0x106>
        return LORAMAC_HANDLER_ERROR;
 8008478:	f04f 30ff 	mov.w	r0, #4294967295
 800847c:	e7f7      	b.n	800846e <LmHandlerConfigure+0x106>
 800847e:	bf00      	nop
 8008480:	200007d0 	.word	0x200007d0
 8008484:	2000079e 	.word	0x2000079e
 8008488:	08013294 	.word	0x08013294
 800848c:	200007a4 	.word	0x200007a4
 8008490:	200007bc 	.word	0x200007bc
 8008494:	200000bc 	.word	0x200000bc

08008498 <LmHandlerPackageRegister>:
{
 8008498:	b530      	push	{r4, r5, lr}
 800849a:	b083      	sub	sp, #12
 800849c:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 800849e:	2300      	movs	r3, #0
 80084a0:	9301      	str	r3, [sp, #4]
    switch( id )
 80084a2:	4604      	mov	r4, r0
 80084a4:	b9d8      	cbnz	r0, 80084de <LmHandlerPackageRegister+0x46>
                package = LmhpCompliancePackageFactory( );
 80084a6:	f000 fbe5 	bl	8008c74 <LmhpCompliancePackageFactory>
 80084aa:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 80084ac:	9b01      	ldr	r3, [sp, #4]
 80084ae:	b1f3      	cbz	r3, 80084ee <LmHandlerPackageRegister+0x56>
        LmHandlerPackages[id] = package;
 80084b0:	4a10      	ldr	r2, [pc, #64]	@ (80084f4 <LmHandlerPackageRegister+0x5c>)
 80084b2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80084b6:	4a10      	ldr	r2, [pc, #64]	@ (80084f8 <LmHandlerPackageRegister+0x60>)
 80084b8:	629a      	str	r2, [r3, #40]	@ 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 80084ba:	4a10      	ldr	r2, [pc, #64]	@ (80084fc <LmHandlerPackageRegister+0x64>)
 80084bc:	6812      	ldr	r2, [r2, #0]
 80084be:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80084c0:	6319      	str	r1, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 80084c2:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80084c4:	6359      	str	r1, [r3, #52]	@ 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 80084c6:	490e      	ldr	r1, [pc, #56]	@ (8008500 <LmHandlerPackageRegister+0x68>)
 80084c8:	62d9      	str	r1, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 80084ca:	6992      	ldr	r2, [r2, #24]
 80084cc:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	22f2      	movs	r2, #242	@ 0xf2
 80084d2:	490c      	ldr	r1, [pc, #48]	@ (8008504 <LmHandlerPackageRegister+0x6c>)
 80084d4:	4628      	mov	r0, r5
 80084d6:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 80084d8:	2000      	movs	r0, #0
}
 80084da:	b003      	add	sp, #12
 80084dc:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 80084de:	a901      	add	r1, sp, #4
 80084e0:	f000 fbce 	bl	8008c80 <LmhpPackagesRegister>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d0e1      	beq.n	80084ac <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 80084e8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ec:	e7f5      	b.n	80084da <LmHandlerPackageRegister+0x42>
        return LORAMAC_HANDLER_ERROR;
 80084ee:	f04f 30ff 	mov.w	r0, #4294967295
 80084f2:	e7f2      	b.n	80084da <LmHandlerPackageRegister+0x42>
 80084f4:	200007e8 	.word	0x200007e8
 80084f8:	08007ef9 	.word	0x08007ef9
 80084fc:	200007cc 	.word	0x200007cc
 8008500:	08007fd1 	.word	0x08007fd1
 8008504:	200006ac 	.word	0x200006ac

08008508 <LmHandlerInit>:
{
 8008508:	b500      	push	{lr}
 800850a:	b083      	sub	sp, #12
 800850c:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800850e:	4b19      	ldr	r3, [pc, #100]	@ (8008574 <LmHandlerInit+0x6c>)
 8008510:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8008512:	4b19      	ldr	r3, [pc, #100]	@ (8008578 <LmHandlerInit+0x70>)
 8008514:	4a19      	ldr	r2, [pc, #100]	@ (800857c <LmHandlerInit+0x74>)
 8008516:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8008518:	4a19      	ldr	r2, [pc, #100]	@ (8008580 <LmHandlerInit+0x78>)
 800851a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800851c:	4a19      	ldr	r2, [pc, #100]	@ (8008584 <LmHandlerInit+0x7c>)
 800851e:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8008520:	4a19      	ldr	r2, [pc, #100]	@ (8008588 <LmHandlerInit+0x80>)
 8008522:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8008524:	6802      	ldr	r2, [r0, #0]
 8008526:	4b19      	ldr	r3, [pc, #100]	@ (800858c <LmHandlerInit+0x84>)
 8008528:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800852a:	6842      	ldr	r2, [r0, #4]
 800852c:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800852e:	6882      	ldr	r2, [r0, #8]
 8008530:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 8008532:	68c2      	ldr	r2, [r0, #12]
 8008534:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8008536:	4a16      	ldr	r2, [pc, #88]	@ (8008590 <LmHandlerInit+0x88>)
 8008538:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800853a:	6982      	ldr	r2, [r0, #24]
 800853c:	615a      	str	r2, [r3, #20]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800853e:	4b15      	ldr	r3, [pc, #84]	@ (8008594 <LmHandlerInit+0x8c>)
 8008540:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 8008542:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008544:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 8008546:	4a14      	ldr	r2, [pc, #80]	@ (8008598 <LmHandlerInit+0x90>)
 8008548:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800854a:	4a14      	ldr	r2, [pc, #80]	@ (800859c <LmHandlerInit+0x94>)
 800854c:	60da      	str	r2, [r3, #12]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800854e:	4619      	mov	r1, r3
 8008550:	2000      	movs	r0, #0
 8008552:	f7ff ffa1 	bl	8008498 <LmHandlerPackageRegister>
 8008556:	b930      	cbnz	r0, 8008566 <LmHandlerInit+0x5e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 8008558:	a801      	add	r0, sp, #4
 800855a:	f000 fb8f 	bl	8008c7c <LmhpPackagesRegistrationInit>
 800855e:	b928      	cbnz	r0, 800856c <LmHandlerInit+0x64>
}
 8008560:	b003      	add	sp, #12
 8008562:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008566:	f04f 30ff 	mov.w	r0, #4294967295
 800856a:	e7f9      	b.n	8008560 <LmHandlerInit+0x58>
        return LORAMAC_HANDLER_ERROR;
 800856c:	f04f 30ff 	mov.w	r0, #4294967295
 8008570:	e7f6      	b.n	8008560 <LmHandlerInit+0x58>
 8008572:	bf00      	nop
 8008574:	200007cc 	.word	0x200007cc
 8008578:	200007bc 	.word	0x200007bc
 800857c:	08007e11 	.word	0x08007e11
 8008580:	08008289 	.word	0x08008289
 8008584:	08008621 	.word	0x08008621
 8008588:	08007dbd 	.word	0x08007dbd
 800858c:	200007a4 	.word	0x200007a4
 8008590:	0800d2f9 	.word	0x0800d2f9
 8008594:	200007fc 	.word	0x200007fc
 8008598:	08007ec1 	.word	0x08007ec1
 800859c:	08007edd 	.word	0x08007edd

080085a0 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 80085a0:	b161      	cbz	r1, 80085bc <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 80085a2:	b118      	cbz	r0, 80085ac <LmHandlerGetVersion+0xc>
 80085a4:	2801      	cmp	r0, #1
 80085a6:	d005      	beq.n	80085b4 <LmHandlerGetVersion+0x14>
 80085a8:	2000      	movs	r0, #0
 80085aa:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 80085ac:	4a05      	ldr	r2, [pc, #20]	@ (80085c4 <LmHandlerGetVersion+0x24>)
 80085ae:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 80085b0:	2000      	movs	r0, #0
            break;
 80085b2:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 80085b4:	4a04      	ldr	r2, [pc, #16]	@ (80085c8 <LmHandlerGetVersion+0x28>)
 80085b6:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80085b8:	2000      	movs	r0, #0
            break;
 80085ba:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	01000400 	.word	0x01000400
 80085c8:	02010003 	.word	0x02010003

080085cc <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 80085cc:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 80085ce:	f003 fe23 	bl	800c218 <LoRaMacDeInitialization>
 80085d2:	b900      	cbnz	r0, 80085d6 <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 80085d4:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 80085d6:	f06f 0001 	mvn.w	r0, #1
 80085da:	e7fb      	b.n	80085d4 <LmHandlerStop+0x8>

080085dc <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 80085dc:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 80085de:	f002 ff33 	bl	800b448 <LoRaMacHalt>
 80085e2:	b900      	cbnz	r0, 80085e6 <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 80085e4:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 80085e6:	f06f 0001 	mvn.w	r0, #1
 80085ea:	e7fb      	b.n	80085e4 <LmHandlerHalt+0x8>

080085ec <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 80085ec:	b180      	cbz	r0, 8008610 <LmHandlerGetTxPower+0x24>
{
 80085ee:	b510      	push	{r4, lr}
 80085f0:	b08a      	sub	sp, #40	@ 0x28
 80085f2:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80085f4:	2321      	movs	r3, #33	@ 0x21
 80085f6:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80085fa:	4668      	mov	r0, sp
 80085fc:	f002 ffb0 	bl	800b560 <LoRaMacMibGetRequestConfirm>
 8008600:	b948      	cbnz	r0, 8008616 <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 8008602:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8008606:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 8008608:	4a04      	ldr	r2, [pc, #16]	@ (800861c <LmHandlerGetTxPower+0x30>)
 800860a:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 800860c:	b00a      	add	sp, #40	@ 0x28
 800860e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008610:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008614:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008616:	f04f 30ff 	mov.w	r0, #4294967295
 800861a:	e7f7      	b.n	800860c <LmHandlerGetTxPower+0x20>
 800861c:	200007d0 	.word	0x200007d0

08008620 <MlmeConfirm>:
{
 8008620:	b510      	push	{r4, lr}
 8008622:	b08a      	sub	sp, #40	@ 0x28
 8008624:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 8008626:	4b2b      	ldr	r3, [pc, #172]	@ (80086d4 <MlmeConfirm+0xb4>)
 8008628:	2200      	movs	r2, #0
 800862a:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800862c:	7842      	ldrb	r2, [r0, #1]
 800862e:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8008630:	4b29      	ldr	r3, [pc, #164]	@ (80086d8 <MlmeConfirm+0xb8>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008636:	b10b      	cbz	r3, 800863c <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 8008638:	4826      	ldr	r0, [pc, #152]	@ (80086d4 <MlmeConfirm+0xb4>)
 800863a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800863c:	4621      	mov	r1, r4
 800863e:	2002      	movs	r0, #2
 8008640:	f7ff fb86 	bl	8007d50 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8008644:	7823      	ldrb	r3, [r4, #0]
 8008646:	2b05      	cmp	r3, #5
 8008648:	d035      	beq.n	80086b6 <MlmeConfirm+0x96>
 800864a:	2b0b      	cmp	r3, #11
 800864c:	d03c      	beq.n	80086c8 <MlmeConfirm+0xa8>
 800864e:	2b01      	cmp	r3, #1
 8008650:	d138      	bne.n	80086c4 <MlmeConfirm+0xa4>
                mibReq.Type = MIB_DEV_ADDR;
 8008652:	2306      	movs	r3, #6
 8008654:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8008658:	4668      	mov	r0, sp
 800865a:	f002 ff81 	bl	800b560 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800865e:	9901      	ldr	r1, [sp, #4]
 8008660:	4b1e      	ldr	r3, [pc, #120]	@ (80086dc <MlmeConfirm+0xbc>)
 8008662:	79d8      	ldrb	r0, [r3, #7]
 8008664:	f007 fd16 	bl	8010094 <SecureElementSetDevAddr>
 8008668:	b910      	cbnz	r0, 8008670 <MlmeConfirm+0x50>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800866a:	9a01      	ldr	r2, [sp, #4]
 800866c:	4b1c      	ldr	r3, [pc, #112]	@ (80086e0 <MlmeConfirm+0xc0>)
 800866e:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8008670:	4c1c      	ldr	r4, [pc, #112]	@ (80086e4 <MlmeConfirm+0xc4>)
 8008672:	4620      	mov	r0, r4
 8008674:	f7ff fe4e 	bl	8008314 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 8008678:	1c60      	adds	r0, r4, #1
 800867a:	f7ff ffb7 	bl	80085ec <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800867e:	4b15      	ldr	r3, [pc, #84]	@ (80086d4 <MlmeConfirm+0xb4>)
 8008680:	785b      	ldrb	r3, [r3, #1]
 8008682:	b183      	cbz	r3, 80086a6 <MlmeConfirm+0x86>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8008684:	4b15      	ldr	r3, [pc, #84]	@ (80086dc <MlmeConfirm+0xbc>)
 8008686:	22ff      	movs	r2, #255	@ 0xff
 8008688:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800868a:	4b13      	ldr	r3, [pc, #76]	@ (80086d8 <MlmeConfirm+0xb8>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008690:	b10b      	cbz	r3, 8008696 <MlmeConfirm+0x76>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8008692:	4812      	ldr	r0, [pc, #72]	@ (80086dc <MlmeConfirm+0xbc>)
 8008694:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008696:	4b0f      	ldr	r3, [pc, #60]	@ (80086d4 <MlmeConfirm+0xb4>)
 8008698:	785b      	ldrb	r3, [r3, #1]
 800869a:	b99b      	cbnz	r3, 80086c4 <MlmeConfirm+0xa4>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800869c:	4b0f      	ldr	r3, [pc, #60]	@ (80086dc <MlmeConfirm+0xbc>)
 800869e:	79d8      	ldrb	r0, [r3, #7]
 80086a0:	f007 fdc6 	bl	8010230 <SecureElementPrintSessionKeys>
            break;
 80086a4:	e00e      	b.n	80086c4 <MlmeConfirm+0xa4>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80086a6:	1f23      	subs	r3, r4, #4
 80086a8:	2200      	movs	r2, #0
 80086aa:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 80086ac:	4b0e      	ldr	r3, [pc, #56]	@ (80086e8 <MlmeConfirm+0xc8>)
 80086ae:	7858      	ldrb	r0, [r3, #1]
 80086b0:	f7ff fd7a 	bl	80081a8 <LmHandlerRequestClass>
 80086b4:	e7e9      	b.n	800868a <MlmeConfirm+0x6a>
                RxParams.LinkCheck = true;
 80086b6:	4b0d      	ldr	r3, [pc, #52]	@ (80086ec <MlmeConfirm+0xcc>)
 80086b8:	2201      	movs	r2, #1
 80086ba:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80086bc:	7a22      	ldrb	r2, [r4, #8]
 80086be:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 80086c0:	7a62      	ldrb	r2, [r4, #9]
 80086c2:	74da      	strb	r2, [r3, #19]
}
 80086c4:	b00a      	add	sp, #40	@ 0x28
 80086c6:	bd10      	pop	{r4, pc}
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80086c8:	7863      	ldrb	r3, [r4, #1]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0fa      	beq.n	80086c4 <MlmeConfirm+0xa4>
                    LmHandlerDeviceTimeReq( );
 80086ce:	f7ff fc7f 	bl	8007fd0 <LmHandlerDeviceTimeReq>
}
 80086d2:	e7f7      	b.n	80086c4 <MlmeConfirm+0xa4>
 80086d4:	20000094 	.word	0x20000094
 80086d8:	200007cc 	.word	0x200007cc
 80086dc:	200000b0 	.word	0x200000b0
 80086e0:	200000bc 	.word	0x200000bc
 80086e4:	200000b4 	.word	0x200000b4
 80086e8:	200007d0 	.word	0x200007d0
 80086ec:	20000080 	.word	0x20000080

080086f0 <LmHandlerNvmDataStore>:

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80086f0:	f04f 30ff 	mov.w	r0, #4294967295
 80086f4:	4770      	bx	lr
	...

080086f8 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 80086f8:	4b01      	ldr	r3, [pc, #4]	@ (8008700 <LmhpComplianceIsInitialized+0x8>)
 80086fa:	7818      	ldrb	r0, [r3, #0]
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	20000828 	.word	0x20000828

08008704 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 8008704:	4b01      	ldr	r3, [pc, #4]	@ (800870c <LmhpComplianceIsTxPending+0x8>)
 8008706:	7858      	ldrb	r0, [r3, #1]
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	20000828 	.word	0x20000828

08008710 <LmhpComplianceOnMlmeConfirm>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8008710:	4770      	bx	lr

08008712 <LmhpComplianceOnMlmeIndication>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8008712:	4770      	bx	lr

08008714 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 8008714:	b508      	push	{r3, lr}
    if( ComplianceTestState.DataBufferSize != 0 )
 8008716:	4b05      	ldr	r3, [pc, #20]	@ (800872c <OnProcessTimer+0x18>)
 8008718:	7a9b      	ldrb	r3, [r3, #10]
 800871a:	b113      	cbz	r3, 8008722 <OnProcessTimer+0xe>
    {
        ComplianceTestState.IsTxPending = true;
 800871c:	4b03      	ldr	r3, [pc, #12]	@ (800872c <OnProcessTimer+0x18>)
 800871e:	2201      	movs	r2, #1
 8008720:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 8008722:	4b03      	ldr	r3, [pc, #12]	@ (8008730 <OnProcessTimer+0x1c>)
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	b103      	cbz	r3, 800872a <OnProcessTimer+0x16>
    {
        CompliancePackage.OnPackageProcessEvent();
 8008728:	4798      	blx	r3
    }
}
 800872a:	bd08      	pop	{r3, pc}
 800872c:	20000828 	.word	0x20000828
 8008730:	200000d4 	.word	0x200000d4

08008734 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8008734:	4b8c      	ldr	r3, [pc, #560]	@ (8008968 <LmhpComplianceOnMcpsIndication+0x234>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	f000 8205 	beq.w	8008b48 <LmhpComplianceOnMcpsIndication+0x414>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800873e:	78c3      	ldrb	r3, [r0, #3]
 8008740:	b90b      	cbnz	r3, 8008746 <LmhpComplianceOnMcpsIndication+0x12>
 8008742:	7b83      	ldrb	r3, [r0, #14]
 8008744:	b11b      	cbz	r3, 800874e <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 8008746:	4a88      	ldr	r2, [pc, #544]	@ (8008968 <LmhpComplianceOnMcpsIndication+0x234>)
 8008748:	8a13      	ldrh	r3, [r2, #16]
 800874a:	3301      	adds	r3, #1
 800874c:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 800874e:	7b43      	ldrb	r3, [r0, #13]
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 81f9 	beq.w	8008b48 <LmhpComplianceOnMcpsIndication+0x414>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8008756:	78c3      	ldrb	r3, [r0, #3]
 8008758:	2be0      	cmp	r3, #224	@ 0xe0
 800875a:	f040 81f5 	bne.w	8008b48 <LmhpComplianceOnMcpsIndication+0x414>
{
 800875e:	b570      	push	{r4, r5, r6, lr}
 8008760:	b096      	sub	sp, #88	@ 0x58
    ComplianceTestState.DataBufferSize = 0;
 8008762:	4b81      	ldr	r3, [pc, #516]	@ (8008968 <LmhpComplianceOnMcpsIndication+0x234>)
 8008764:	2200      	movs	r2, #0
 8008766:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 8008768:	6884      	ldr	r4, [r0, #8]
 800876a:	7823      	ldrb	r3, [r4, #0]
 800876c:	2b7f      	cmp	r3, #127	@ 0x7f
 800876e:	f200 8093 	bhi.w	8008898 <LmhpComplianceOnMcpsIndication+0x164>
 8008772:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008776:	0080      	.short	0x0080
 8008778:	00a2009d 	.word	0x00a2009d
 800877c:	00b200aa 	.word	0x00b200aa
 8008780:	00c600bf 	.word	0x00c600bf
 8008784:	00f000df 	.word	0x00f000df
 8008788:	0131011d 	.word	0x0131011d
 800878c:	00910091 	.word	0x00910091
 8008790:	00910091 	.word	0x00910091
 8008794:	00910091 	.word	0x00910091
 8008798:	00910091 	.word	0x00910091
 800879c:	00910091 	.word	0x00910091
 80087a0:	00910091 	.word	0x00910091
 80087a4:	00910091 	.word	0x00910091
 80087a8:	00910091 	.word	0x00910091
 80087ac:	00910091 	.word	0x00910091
 80087b0:	00910091 	.word	0x00910091
 80087b4:	01350091 	.word	0x01350091
 80087b8:	0140013c 	.word	0x0140013c
 80087bc:	00910091 	.word	0x00910091
 80087c0:	00910091 	.word	0x00910091
 80087c4:	00910091 	.word	0x00910091
 80087c8:	00910091 	.word	0x00910091
 80087cc:	00910091 	.word	0x00910091
 80087d0:	00910091 	.word	0x00910091
 80087d4:	00910091 	.word	0x00910091
 80087d8:	00910091 	.word	0x00910091
 80087dc:	00910091 	.word	0x00910091
 80087e0:	00910091 	.word	0x00910091
 80087e4:	00910091 	.word	0x00910091
 80087e8:	00910091 	.word	0x00910091
 80087ec:	00910091 	.word	0x00910091
 80087f0:	00910091 	.word	0x00910091
 80087f4:	00910091 	.word	0x00910091
 80087f8:	00910091 	.word	0x00910091
 80087fc:	00910091 	.word	0x00910091
 8008800:	00910091 	.word	0x00910091
 8008804:	00910091 	.word	0x00910091
 8008808:	00910091 	.word	0x00910091
 800880c:	00910091 	.word	0x00910091
 8008810:	00910091 	.word	0x00910091
 8008814:	00910091 	.word	0x00910091
 8008818:	00910091 	.word	0x00910091
 800881c:	00910091 	.word	0x00910091
 8008820:	00910091 	.word	0x00910091
 8008824:	00910091 	.word	0x00910091
 8008828:	00910091 	.word	0x00910091
 800882c:	00910091 	.word	0x00910091
 8008830:	00910091 	.word	0x00910091
 8008834:	00910091 	.word	0x00910091
 8008838:	00910091 	.word	0x00910091
 800883c:	00910091 	.word	0x00910091
 8008840:	00910091 	.word	0x00910091
 8008844:	00910091 	.word	0x00910091
 8008848:	00910091 	.word	0x00910091
 800884c:	00910091 	.word	0x00910091
 8008850:	00910091 	.word	0x00910091
 8008854:	00910091 	.word	0x00910091
 8008858:	00910091 	.word	0x00910091
 800885c:	00910091 	.word	0x00910091
 8008860:	00910091 	.word	0x00910091
 8008864:	00910091 	.word	0x00910091
 8008868:	00910091 	.word	0x00910091
 800886c:	00910091 	.word	0x00910091
 8008870:	016c014b 	.word	0x016c014b
 8008874:	017a      	.short	0x017a
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8008876:	4b3c      	ldr	r3, [pc, #240]	@ (8008968 <LmhpComplianceOnMcpsIndication+0x234>)
 8008878:	68da      	ldr	r2, [r3, #12]
 800887a:	2101      	movs	r1, #1
 800887c:	7299      	strb	r1, [r3, #10]
 800887e:	2000      	movs	r0, #0
 8008880:	7010      	strb	r0, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8008882:	68d8      	ldr	r0, [r3, #12]
 8008884:	7a9a      	ldrb	r2, [r3, #10]
 8008886:	1854      	adds	r4, r2, r1
 8008888:	729c      	strb	r4, [r3, #10]
 800888a:	2406      	movs	r4, #6
 800888c:	5484      	strb	r4, [r0, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800888e:	68d8      	ldr	r0, [r3, #12]
 8008890:	7a9a      	ldrb	r2, [r3, #10]
 8008892:	1854      	adds	r4, r2, r1
 8008894:	729c      	strb	r4, [r3, #10]
 8008896:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 8008898:	4b33      	ldr	r3, [pc, #204]	@ (8008968 <LmhpComplianceOnMcpsIndication+0x234>)
 800889a:	7a9b      	ldrb	r3, [r3, #10]
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 814c 	beq.w	8008b3a <LmhpComplianceOnMcpsIndication+0x406>
        if( ProcessTimer.IsRunning == 0U)
 80088a2:	4b32      	ldr	r3, [pc, #200]	@ (800896c <LmhpComplianceOnMcpsIndication+0x238>)
 80088a4:	7a5b      	ldrb	r3, [r3, #9]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f000 813d 	beq.w	8008b26 <LmhpComplianceOnMcpsIndication+0x3f2>
}
 80088ac:	b016      	add	sp, #88	@ 0x58
 80088ae:	bd70      	pop	{r4, r5, r6, pc}
                ComplianceTestState.IsResetCmdPending = true;
 80088b0:	4b2d      	ldr	r3, [pc, #180]	@ (8008968 <LmhpComplianceOnMcpsIndication+0x234>)
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 80088b8:	e7ee      	b.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                if( CompliancePackage.OnJoinRequest != NULL )
 80088ba:	4b2d      	ldr	r3, [pc, #180]	@ (8008970 <LmhpComplianceOnMcpsIndication+0x23c>)
 80088bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0ea      	beq.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80088c2:	2101      	movs	r1, #1
 80088c4:	2002      	movs	r0, #2
 80088c6:	4798      	blx	r3
 80088c8:	e7e6      	b.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 80088ca:	7862      	ldrb	r2, [r4, #1]
 80088cc:	4b26      	ldr	r3, [pc, #152]	@ (8008968 <LmhpComplianceOnMcpsIndication+0x234>)
 80088ce:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                break;
 80088d8:	e7de      	b.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type            = MIB_ADR;
 80088da:	2304      	movs	r3, #4
 80088dc:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 80088e0:	7863      	ldrb	r3, [r4, #1]
 80088e2:	3b00      	subs	r3, #0
 80088e4:	bf18      	it	ne
 80088e6:	2301      	movne	r3, #1
 80088e8:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80088ec:	a801      	add	r0, sp, #4
 80088ee:	f002 ffa7 	bl	800b840 <LoRaMacMibSetRequestConfirm>
                break;
 80088f2:	e7d1      	b.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 80088f4:	7860      	ldrb	r0, [r4, #1]
 80088f6:	3800      	subs	r0, #0
 80088f8:	bf18      	it	ne
 80088fa:	2001      	movne	r0, #1
 80088fc:	f003 fc6e 	bl	800c1dc <LoRaMacTestSetDutyCycleOn>
                break;
 8008900:	e7ca      	b.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8008902:	ad01      	add	r5, sp, #4
 8008904:	4e1b      	ldr	r6, [pc, #108]	@ (8008974 <LmhpComplianceOnMcpsIndication+0x240>)
 8008906:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800890a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800890c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800890e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008912:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8008916:	7863      	ldrb	r3, [r4, #1]
                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8008918:	2b0a      	cmp	r3, #10
 800891a:	d8bd      	bhi.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800891c:	4a16      	ldr	r2, [pc, #88]	@ (8008978 <LmhpComplianceOnMcpsIndication+0x244>)
 800891e:	6812      	ldr	r2, [r2, #0]
 8008920:	6852      	ldr	r2, [r2, #4]
 8008922:	2a00      	cmp	r2, #0
 8008924:	d0b8      	beq.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8008926:	a916      	add	r1, sp, #88	@ 0x58
 8008928:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800892c:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8008930:	4790      	blx	r2
                break;
 8008932:	e7b1      	b.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8008934:	7862      	ldrb	r2, [r4, #1]
                if( ( frameType == 1 ) || ( frameType == 2 ) )
 8008936:	1e53      	subs	r3, r2, #1
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b01      	cmp	r3, #1
 800893c:	d8ac      	bhi.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800893e:	1e50      	subs	r0, r2, #1
 8008940:	bf18      	it	ne
 8008942:	2001      	movne	r0, #1
 8008944:	4b08      	ldr	r3, [pc, #32]	@ (8008968 <LmhpComplianceOnMcpsIndication+0x234>)
 8008946:	7218      	strb	r0, [r3, #8]
                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8008948:	4b0b      	ldr	r3, [pc, #44]	@ (8008978 <LmhpComplianceOnMcpsIndication+0x244>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d0a2      	beq.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 8008952:	4798      	blx	r3
 8008954:	e7a0      	b.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 8008956:	4b04      	ldr	r3, [pc, #16]	@ (8008968 <LmhpComplianceOnMcpsIndication+0x234>)
 8008958:	68da      	ldr	r2, [r3, #12]
 800895a:	2101      	movs	r1, #1
 800895c:	7299      	strb	r1, [r3, #10]
 800895e:	2308      	movs	r3, #8
 8008960:	7013      	strb	r3, [r2, #0]
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8008962:	460b      	mov	r3, r1
 8008964:	e01b      	b.n	800899e <LmhpComplianceOnMcpsIndication+0x26a>
 8008966:	bf00      	nop
 8008968:	20000828 	.word	0x20000828
 800896c:	2000080c 	.word	0x2000080c
 8008970:	200000d4 	.word	0x200000d4
 8008974:	08012cd4 	.word	0x08012cd4
 8008978:	20000824 	.word	0x20000824
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800897c:	6882      	ldr	r2, [r0, #8]
 800897e:	f101 0c01 	add.w	ip, r1, #1
 8008982:	5c52      	ldrb	r2, [r2, r1]
 8008984:	4971      	ldr	r1, [pc, #452]	@ (8008b4c <LmhpComplianceOnMcpsIndication+0x418>)
 8008986:	68cd      	ldr	r5, [r1, #12]
 8008988:	7a8c      	ldrb	r4, [r1, #10]
 800898a:	f104 0e01 	add.w	lr, r4, #1
 800898e:	f881 e00a 	strb.w	lr, [r1, #10]
 8008992:	3201      	adds	r2, #1
 8008994:	552a      	strb	r2, [r5, r4]
                     i++ )
 8008996:	3301      	adds	r3, #1
 8008998:	b2db      	uxtb	r3, r3
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800899a:	fa5f f18c 	uxtb.w	r1, ip
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800899e:	4a6b      	ldr	r2, [pc, #428]	@ (8008b4c <LmhpComplianceOnMcpsIndication+0x418>)
 80089a0:	7a52      	ldrb	r2, [r2, #9]
 80089a2:	7b04      	ldrb	r4, [r0, #12]
 80089a4:	42a2      	cmp	r2, r4
 80089a6:	bf28      	it	cs
 80089a8:	4622      	movcs	r2, r4
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d8e6      	bhi.n	800897c <LmhpComplianceOnMcpsIndication+0x248>
 80089ae:	e773      	b.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 80089b0:	4b66      	ldr	r3, [pc, #408]	@ (8008b4c <LmhpComplianceOnMcpsIndication+0x418>)
 80089b2:	68da      	ldr	r2, [r3, #12]
 80089b4:	2101      	movs	r1, #1
 80089b6:	7299      	strb	r1, [r3, #10]
 80089b8:	2109      	movs	r1, #9
 80089ba:	7011      	strb	r1, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 80089bc:	8a18      	ldrh	r0, [r3, #16]
 80089be:	68d9      	ldr	r1, [r3, #12]
 80089c0:	7a9a      	ldrb	r2, [r3, #10]
 80089c2:	1c54      	adds	r4, r2, #1
 80089c4:	729c      	strb	r4, [r3, #10]
 80089c6:	5488      	strb	r0, [r1, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 80089c8:	8a1a      	ldrh	r2, [r3, #16]
 80089ca:	68d8      	ldr	r0, [r3, #12]
 80089cc:	7a99      	ldrb	r1, [r3, #10]
 80089ce:	1c4c      	adds	r4, r1, #1
 80089d0:	729c      	strb	r4, [r3, #10]
 80089d2:	0a13      	lsrs	r3, r2, #8
 80089d4:	5443      	strb	r3, [r0, r1]
                break;
 80089d6:	e75f      	b.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.RxAppCnt = 0;
 80089d8:	4b5c      	ldr	r3, [pc, #368]	@ (8008b4c <LmhpComplianceOnMcpsIndication+0x418>)
 80089da:	2200      	movs	r2, #0
 80089dc:	821a      	strh	r2, [r3, #16]
                break;
 80089de:	e75b      	b.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                mlmeReq.Type = MLME_LINK_CHECK;
 80089e0:	2305      	movs	r3, #5
 80089e2:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 80089e6:	a801      	add	r0, sp, #4
 80089e8:	f003 fa00 	bl	800bdec <LoRaMacMlmeRequest>
                break;
 80089ec:	e754      	b.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                CompliancePackage.OnDeviceTimeRequest( );
 80089ee:	4b58      	ldr	r3, [pc, #352]	@ (8008b50 <LmhpComplianceOnMcpsIndication+0x41c>)
 80089f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f2:	4798      	blx	r3
                break;
 80089f4:	e750      	b.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 80089f6:	7860      	ldrb	r0, [r4, #1]
 80089f8:	4b54      	ldr	r3, [pc, #336]	@ (8008b4c <LmhpComplianceOnMcpsIndication+0x418>)
 80089fa:	7558      	strb	r0, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 80089fc:	4b55      	ldr	r3, [pc, #340]	@ (8008b54 <LmhpComplianceOnMcpsIndication+0x420>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f43f af48 	beq.w	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8008a08:	4798      	blx	r3
 8008a0a:	e745      	b.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                if( mcpsIndication->BufferSize == 7 )
 8008a0c:	7b03      	ldrb	r3, [r0, #12]
 8008a0e:	2b07      	cmp	r3, #7
 8008a10:	f47f af42 	bne.w	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                    mlmeReq.Type = MLME_TXCW;
 8008a14:	2306      	movs	r3, #6
 8008a16:	f88d 3004 	strb.w	r3, [sp, #4]
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8008a1a:	7863      	ldrb	r3, [r4, #1]
 8008a1c:	78a2      	ldrb	r2, [r4, #2]
 8008a1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    mlmeReq.Req.TxCw.Timeout =
 8008a22:	f8ad 3008 	strh.w	r3, [sp, #8]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8008a26:	78e3      	ldrb	r3, [r4, #3]
 8008a28:	7922      	ldrb	r2, [r4, #4]
 8008a2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8008a2e:	7962      	ldrb	r2, [r4, #5]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8008a30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8008a34:	2264      	movs	r2, #100	@ 0x64
 8008a36:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 8008a3a:	9303      	str	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8008a3c:	6883      	ldr	r3, [r0, #8]
 8008a3e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8008a42:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacMlmeRequest( &mlmeReq );
 8008a46:	a801      	add	r0, sp, #4
 8008a48:	f003 f9d0 	bl	800bdec <LoRaMacMlmeRequest>
                break;
 8008a4c:	e724      	b.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8008a4e:	233b      	movs	r3, #59	@ 0x3b
 8008a50:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
                mibReq.Param.IsCertPortOn = false;
 8008a54:	2300      	movs	r3, #0
 8008a56:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008a5a:	a80c      	add	r0, sp, #48	@ 0x30
 8008a5c:	f002 fef0 	bl	800b840 <LoRaMacMibSetRequestConfirm>
                ComplianceTestState.IsResetCmdPending = true;
 8008a60:	4b3a      	ldr	r3, [pc, #232]	@ (8008b4c <LmhpComplianceOnMcpsIndication+0x418>)
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 8008a68:	e716      	b.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_LORAWAN_VERSION;
 8008a6a:	232a      	movs	r3, #42	@ 0x2a
 8008a6c:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8008a70:	a801      	add	r0, sp, #4
 8008a72:	f002 fd75 	bl	800b560 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 8008a76:	9902      	ldr	r1, [sp, #8]
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8008a78:	9a03      	ldr	r2, [sp, #12]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 8008a7a:	4b34      	ldr	r3, [pc, #208]	@ (8008b4c <LmhpComplianceOnMcpsIndication+0x418>)
 8008a7c:	68dc      	ldr	r4, [r3, #12]
 8008a7e:	7a98      	ldrb	r0, [r3, #10]
 8008a80:	1c45      	adds	r5, r0, #1
 8008a82:	729d      	strb	r5, [r3, #10]
 8008a84:	257f      	movs	r5, #127	@ 0x7f
 8008a86:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8008a88:	4832      	ldr	r0, [pc, #200]	@ (8008b54 <LmhpComplianceOnMcpsIndication+0x420>)
 8008a8a:	6800      	ldr	r0, [r0, #0]
 8008a8c:	68dd      	ldr	r5, [r3, #12]
 8008a8e:	7a9c      	ldrb	r4, [r3, #10]
 8008a90:	1c66      	adds	r6, r4, #1
 8008a92:	729e      	strb	r6, [r3, #10]
 8008a94:	78c6      	ldrb	r6, [r0, #3]
 8008a96:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 8008a98:	68dd      	ldr	r5, [r3, #12]
 8008a9a:	7a9c      	ldrb	r4, [r3, #10]
 8008a9c:	1c66      	adds	r6, r4, #1
 8008a9e:	729e      	strb	r6, [r3, #10]
 8008aa0:	7886      	ldrb	r6, [r0, #2]
 8008aa2:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8008aa4:	68dd      	ldr	r5, [r3, #12]
 8008aa6:	7a9c      	ldrb	r4, [r3, #10]
 8008aa8:	1c66      	adds	r6, r4, #1
 8008aaa:	729e      	strb	r6, [r3, #10]
 8008aac:	7846      	ldrb	r6, [r0, #1]
 8008aae:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8008ab0:	68dd      	ldr	r5, [r3, #12]
 8008ab2:	7a9c      	ldrb	r4, [r3, #10]
 8008ab4:	1c66      	adds	r6, r4, #1
 8008ab6:	729e      	strb	r6, [r3, #10]
 8008ab8:	7800      	ldrb	r0, [r0, #0]
 8008aba:	5528      	strb	r0, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8008abc:	68dc      	ldr	r4, [r3, #12]
 8008abe:	7a98      	ldrb	r0, [r3, #10]
 8008ac0:	1c45      	adds	r5, r0, #1
 8008ac2:	729d      	strb	r5, [r3, #10]
 8008ac4:	f3c1 6507 	ubfx	r5, r1, #24, #8
 8008ac8:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8008aca:	68dc      	ldr	r4, [r3, #12]
 8008acc:	7a98      	ldrb	r0, [r3, #10]
 8008ace:	1c45      	adds	r5, r0, #1
 8008ad0:	729d      	strb	r5, [r3, #10]
 8008ad2:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8008ad6:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8008ad8:	68dc      	ldr	r4, [r3, #12]
 8008ada:	7a98      	ldrb	r0, [r3, #10]
 8008adc:	1c45      	adds	r5, r0, #1
 8008ade:	729d      	strb	r5, [r3, #10]
 8008ae0:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8008ae4:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8008ae6:	68dc      	ldr	r4, [r3, #12]
 8008ae8:	7a98      	ldrb	r0, [r3, #10]
 8008aea:	1c45      	adds	r5, r0, #1
 8008aec:	729d      	strb	r5, [r3, #10]
 8008aee:	5421      	strb	r1, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8008af0:	68d8      	ldr	r0, [r3, #12]
 8008af2:	7a99      	ldrb	r1, [r3, #10]
 8008af4:	1c4c      	adds	r4, r1, #1
 8008af6:	729c      	strb	r4, [r3, #10]
 8008af8:	f3c2 6407 	ubfx	r4, r2, #24, #8
 8008afc:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8008afe:	68d8      	ldr	r0, [r3, #12]
 8008b00:	7a99      	ldrb	r1, [r3, #10]
 8008b02:	1c4c      	adds	r4, r1, #1
 8008b04:	729c      	strb	r4, [r3, #10]
 8008b06:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008b0a:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8008b0c:	68d8      	ldr	r0, [r3, #12]
 8008b0e:	7a99      	ldrb	r1, [r3, #10]
 8008b10:	1c4c      	adds	r4, r1, #1
 8008b12:	729c      	strb	r4, [r3, #10]
 8008b14:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8008b18:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8008b1a:	68d8      	ldr	r0, [r3, #12]
 8008b1c:	7a99      	ldrb	r1, [r3, #10]
 8008b1e:	1c4c      	adds	r4, r1, #1
 8008b20:	729c      	strb	r4, [r3, #10]
 8008b22:	5442      	strb	r2, [r0, r1]
                break;
 8008b24:	e6b8      	b.n	8008898 <LmhpComplianceOnMcpsIndication+0x164>
            TimerSetValue( &ProcessTimer, 1000 );
 8008b26:	4c0c      	ldr	r4, [pc, #48]	@ (8008b58 <LmhpComplianceOnMcpsIndication+0x424>)
 8008b28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f009 fe49 	bl	80127c4 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 8008b32:	4620      	mov	r0, r4
 8008b34:	f009 fe00 	bl	8012738 <UTIL_TIMER_Start>
 8008b38:	e6b8      	b.n	80088ac <LmhpComplianceOnMcpsIndication+0x178>
        TimerStop( &ProcessTimer );
 8008b3a:	4807      	ldr	r0, [pc, #28]	@ (8008b58 <LmhpComplianceOnMcpsIndication+0x424>)
 8008b3c:	f009 fda2 	bl	8012684 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8008b40:	4b02      	ldr	r3, [pc, #8]	@ (8008b4c <LmhpComplianceOnMcpsIndication+0x418>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	705a      	strb	r2, [r3, #1]
 8008b46:	e6b1      	b.n	80088ac <LmhpComplianceOnMcpsIndication+0x178>
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	20000828 	.word	0x20000828
 8008b50:	200000d4 	.word	0x200000d4
 8008b54:	20000824 	.word	0x20000824
 8008b58:	2000080c 	.word	0x2000080c

08008b5c <LmhpComplianceProcess>:
{
 8008b5c:	b530      	push	{r4, r5, lr}
 8008b5e:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 8008b60:	4b27      	ldr	r3, [pc, #156]	@ (8008c00 <LmhpComplianceProcess+0xa4>)
 8008b62:	785b      	ldrb	r3, [r3, #1]
 8008b64:	b993      	cbnz	r3, 8008b8c <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8008b66:	4b26      	ldr	r3, [pc, #152]	@ (8008c00 <LmhpComplianceProcess+0xa4>)
 8008b68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d13d      	bne.n	8008bec <LmhpComplianceProcess+0x90>
    if( ComplianceTestState.IsResetCmdPending == true )
 8008b70:	4b23      	ldr	r3, [pc, #140]	@ (8008c00 <LmhpComplianceProcess+0xa4>)
 8008b72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008b76:	b13b      	cbz	r3, 8008b88 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 8008b78:	4b21      	ldr	r3, [pc, #132]	@ (8008c00 <LmhpComplianceProcess+0xa4>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        if( CompliancePackage.OnSystemReset != NULL )
 8008b80:	4b20      	ldr	r3, [pc, #128]	@ (8008c04 <LmhpComplianceProcess+0xa8>)
 8008b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b84:	b103      	cbz	r3, 8008b88 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 8008b86:	4798      	blx	r3
}
 8008b88:	b003      	add	sp, #12
 8008b8a:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 8008b8c:	f009 fd3a 	bl	8012604 <UTIL_TIMER_GetCurrentTime>
 8008b90:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 8008b92:	4b1b      	ldr	r3, [pc, #108]	@ (8008c00 <LmhpComplianceProcess+0xa4>)
 8008b94:	685d      	ldr	r5, [r3, #4]
 8008b96:	f7ff fa2f 	bl	8007ff8 <LmHandlerGetDutyCycleWaitTime>
 8008b9a:	4405      	add	r5, r0
 8008b9c:	42a5      	cmp	r5, r4
 8008b9e:	d2e7      	bcs.n	8008b70 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 8008ba0:	4b17      	ldr	r3, [pc, #92]	@ (8008c00 <LmhpComplianceProcess+0xa4>)
 8008ba2:	7a9b      	ldrb	r3, [r3, #10]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d0e3      	beq.n	8008b70 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData =
 8008ba8:	22e0      	movs	r2, #224	@ 0xe0
 8008baa:	f88d 2000 	strb.w	r2, [sp]
 8008bae:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8008bb2:	4b13      	ldr	r3, [pc, #76]	@ (8008c00 <LmhpComplianceProcess+0xa4>)
 8008bb4:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData =
 8008bb6:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 8008bb8:	2201      	movs	r2, #1
 8008bba:	7a19      	ldrb	r1, [r3, #8]
 8008bbc:	4668      	mov	r0, sp
 8008bbe:	f7ff fa49 	bl	8008054 <LmHandlerSend>
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 8008bc2:	b110      	cbz	r0, 8008bca <LmhpComplianceProcess+0x6e>
 8008bc4:	f110 0f07 	cmn.w	r0, #7
 8008bc8:	d106      	bne.n	8008bd8 <LmhpComplianceProcess+0x7c>
                    ComplianceTestState.IsTxPending = false;
 8008bca:	4b0d      	ldr	r3, [pc, #52]	@ (8008c00 <LmhpComplianceProcess+0xa4>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8008bd0:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 8008bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8008c00 <LmhpComplianceProcess+0xa4>)
 8008bd4:	605c      	str	r4, [r3, #4]
 8008bd6:	e7cb      	b.n	8008b70 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1500 );
 8008bd8:	4d0b      	ldr	r5, [pc, #44]	@ (8008c08 <LmhpComplianceProcess+0xac>)
 8008bda:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8008bde:	4628      	mov	r0, r5
 8008be0:	f009 fdf0 	bl	80127c4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 8008be4:	4628      	mov	r0, r5
 8008be6:	f009 fda7 	bl	8012738 <UTIL_TIMER_Start>
 8008bea:	e7f2      	b.n	8008bd2 <LmhpComplianceProcess+0x76>
            ComplianceTestState.IsClassReqCmdPending = false;
 8008bec:	4b04      	ldr	r3, [pc, #16]	@ (8008c00 <LmhpComplianceProcess+0xa4>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8008bf4:	f893 0036 	ldrb.w	r0, [r3, #54]	@ 0x36
 8008bf8:	f7ff fad6 	bl	80081a8 <LmHandlerRequestClass>
 8008bfc:	e7b8      	b.n	8008b70 <LmhpComplianceProcess+0x14>
 8008bfe:	bf00      	nop
 8008c00:	20000828 	.word	0x20000828
 8008c04:	200000d4 	.word	0x200000d4
 8008c08:	2000080c 	.word	0x2000080c

08008c0c <LmhpComplianceInit>:
{
 8008c0c:	b530      	push	{r4, r5, lr}
 8008c0e:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8008c10:	b188      	cbz	r0, 8008c36 <LmhpComplianceInit+0x2a>
 8008c12:	4603      	mov	r3, r0
 8008c14:	b179      	cbz	r1, 8008c36 <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 8008c16:	4813      	ldr	r0, [pc, #76]	@ (8008c64 <LmhpComplianceInit+0x58>)
 8008c18:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 8008c1a:	4b13      	ldr	r3, [pc, #76]	@ (8008c68 <LmhpComplianceInit+0x5c>)
 8008c1c:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8008c1e:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 8008c20:	2201      	movs	r2, #1
 8008c22:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8008c24:	2200      	movs	r2, #0
 8008c26:	9200      	str	r2, [sp, #0]
 8008c28:	4b10      	ldr	r3, [pc, #64]	@ (8008c6c <LmhpComplianceInit+0x60>)
 8008c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8008c2e:	4810      	ldr	r0, [pc, #64]	@ (8008c70 <LmhpComplianceInit+0x64>)
 8008c30:	f009 fcca 	bl	80125c8 <UTIL_TIMER_Create>
 8008c34:	e004      	b.n	8008c40 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 8008c36:	2300      	movs	r3, #0
 8008c38:	4a0a      	ldr	r2, [pc, #40]	@ (8008c64 <LmhpComplianceInit+0x58>)
 8008c3a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8008c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008c68 <LmhpComplianceInit+0x5c>)
 8008c3e:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 8008c40:	4c09      	ldr	r4, [pc, #36]	@ (8008c68 <LmhpComplianceInit+0x5c>)
 8008c42:	2500      	movs	r5, #0
 8008c44:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8008c46:	2220      	movs	r2, #32
 8008c48:	4629      	mov	r1, r5
 8008c4a:	f104 0014 	add.w	r0, r4, #20
 8008c4e:	f007 fb48 	bl	80102e2 <memset1>
    ComplianceTestState.IsTxPending = false;
 8008c52:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 8008c54:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 8008c56:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 8008c5a:	f884 5035 	strb.w	r5, [r4, #53]	@ 0x35
}
 8008c5e:	b003      	add	sp, #12
 8008c60:	bd30      	pop	{r4, r5, pc}
 8008c62:	bf00      	nop
 8008c64:	20000824 	.word	0x20000824
 8008c68:	20000828 	.word	0x20000828
 8008c6c:	08008715 	.word	0x08008715
 8008c70:	2000080c 	.word	0x2000080c

08008c74 <LmhpCompliancePackageFactory>:
}
 8008c74:	4800      	ldr	r0, [pc, #0]	@ (8008c78 <LmhpCompliancePackageFactory+0x4>)
 8008c76:	4770      	bx	lr
 8008c78:	200000d4 	.word	0x200000d4

08008c7c <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	4770      	bx	lr

08008c80 <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	4770      	bx	lr
	...

08008c88 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008c88:	4b07      	ldr	r3, [pc, #28]	@ (8008ca8 <UpdateRxSlotIdleState+0x20>)
 8008c8a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d004      	beq.n	8008c9c <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8008c92:	4b06      	ldr	r3, [pc, #24]	@ (8008cac <UpdateRxSlotIdleState+0x24>)
 8008c94:	2206      	movs	r2, #6
 8008c96:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
 8008c9a:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008c9c:	4b03      	ldr	r3, [pc, #12]	@ (8008cac <UpdateRxSlotIdleState+0x24>)
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	2000090c 	.word	0x2000090c
 8008cac:	20000ed8 	.word	0x20000ed8

08008cb0 <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8008cb0:	4b01      	ldr	r3, [pc, #4]	@ (8008cb8 <LoRaMacEnableRequests+0x8>)
 8008cb2:	f883 0492 	strb.w	r0, [r3, #1170]	@ 0x492
}
 8008cb6:	4770      	bx	lr
 8008cb8:	20000ed8 	.word	0x20000ed8

08008cbc <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8008cbc:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8008cbe:	4b15      	ldr	r3, [pc, #84]	@ (8008d14 <LoRaMacHandleIndicationEvents+0x58>)
 8008cc0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8008cc4:	f013 0f08 	tst.w	r3, #8
 8008cc8:	d00e      	beq.n	8008ce8 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8008cca:	4812      	ldr	r0, [pc, #72]	@ (8008d14 <LoRaMacHandleIndicationEvents+0x58>)
 8008ccc:	f890 3491 	ldrb.w	r3, [r0, #1169]	@ 0x491
 8008cd0:	f023 0308 	bic.w	r3, r3, #8
 8008cd4:	f880 3491 	strb.w	r3, [r0, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8008cd8:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	f200 418c 	addw	r1, r0, #1164	@ 0x48c
 8008ce2:	f500 608d 	add.w	r0, r0, #1128	@ 0x468
 8008ce6:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8008d14 <LoRaMacHandleIndicationEvents+0x58>)
 8008cea:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8008cee:	f013 0f02 	tst.w	r3, #2
 8008cf2:	d00e      	beq.n	8008d12 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8008cf4:	4807      	ldr	r0, [pc, #28]	@ (8008d14 <LoRaMacHandleIndicationEvents+0x58>)
 8008cf6:	f890 3491 	ldrb.w	r3, [r0, #1169]	@ 0x491
 8008cfa:	f023 0302 	bic.w	r3, r3, #2
 8008cfe:	f880 3491 	strb.w	r3, [r0, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8008d02:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f200 418c 	addw	r1, r0, #1164	@ 0x48c
 8008d0c:	f500 6084 	add.w	r0, r0, #1056	@ 0x420
 8008d10:	4798      	blx	r3
    }
}
 8008d12:	bd08      	pop	{r3, pc}
 8008d14:	20000ed8 	.word	0x20000ed8

08008d18 <CheckForMinimumAbpDatarate>:
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 8008d18:	b110      	cbz	r0, 8008d20 <CheckForMinimumAbpDatarate+0x8>
 8008d1a:	2901      	cmp	r1, #1
 8008d1c:	d001      	beq.n	8008d22 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 8008d1e:	2000      	movs	r0, #0
}
 8008d20:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8008d22:	2a00      	cmp	r2, #0
 8008d24:	d0fc      	beq.n	8008d20 <CheckForMinimumAbpDatarate+0x8>
    return false;
 8008d26:	2000      	movs	r0, #0
 8008d28:	4770      	bx	lr
	...

08008d2c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008d2c:	4b07      	ldr	r3, [pc, #28]	@ (8008d4c <LoRaMacCheckForRxAbort+0x20>)
 8008d2e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8008d32:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d36:	d008      	beq.n	8008d4a <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8008d38:	4a04      	ldr	r2, [pc, #16]	@ (8008d4c <LoRaMacCheckForRxAbort+0x20>)
 8008d3a:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8008d3e:	f8c2 1340 	str.w	r1, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008d42:	f023 0382 	bic.w	r3, r3, #130	@ 0x82
 8008d46:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 8008d4a:	4770      	bx	lr
 8008d4c:	20000ed8 	.word	0x20000ed8

08008d50 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8008d50:	4b06      	ldr	r3, [pc, #24]	@ (8008d6c <CalculateBackOff+0x1c>)
 8008d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d54:	b94b      	cbnz	r3, 8008d6a <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8008d56:	4a05      	ldr	r2, [pc, #20]	@ (8008d6c <CalculateBackOff+0x1c>)
 8008d58:	f8b2 3120 	ldrh.w	r3, [r2, #288]	@ 0x120
 8008d5c:	4904      	ldr	r1, [pc, #16]	@ (8008d70 <CalculateBackOff+0x20>)
 8008d5e:	f8d1 141c 	ldr.w	r1, [r1, #1052]	@ 0x41c
 8008d62:	3b01      	subs	r3, #1
 8008d64:	fb01 f303 	mul.w	r3, r1, r3
 8008d68:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8008d6a:	4770      	bx	lr
 8008d6c:	2000090c 	.word	0x2000090c
 8008d70:	20000ed8 	.word	0x20000ed8

08008d74 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8008d74:	b508      	push	{r3, lr}
 8008d76:	4684      	mov	ip, r0
 8008d78:	4608      	mov	r0, r1
 8008d7a:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008d7c:	4b06      	ldr	r3, [pc, #24]	@ (8008d98 <SetTxContinuousWave+0x24>)
 8008d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d80:	4662      	mov	r2, ip
 8008d82:	b249      	sxtb	r1, r1
 8008d84:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008d86:	4a05      	ldr	r2, [pc, #20]	@ (8008d9c <SetTxContinuousWave+0x28>)
 8008d88:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 8008d8c:	f043 0302 	orr.w	r3, r3, #2
 8008d90:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
}
 8008d94:	2000      	movs	r0, #0
 8008d96:	bd08      	pop	{r3, pc}
 8008d98:	08013b98 	.word	0x08013b98
 8008d9c:	20000ed8 	.word	0x20000ed8

08008da0 <RestoreNvmData>:
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
}
 8008da0:	2000      	movs	r0, #0
 8008da2:	4770      	bx	lr

08008da4 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8008da4:	4602      	mov	r2, r0
 8008da6:	b1f8      	cbz	r0, 8008de8 <DetermineFrameType+0x44>
 8008da8:	b301      	cbz	r1, 8008dec <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8008daa:	7b03      	ldrb	r3, [r0, #12]
 8008dac:	f013 030f 	ands.w	r3, r3, #15
 8008db0:	d005      	beq.n	8008dbe <DetermineFrameType+0x1a>
 8008db2:	f890 0020 	ldrb.w	r0, [r0, #32]
 8008db6:	b110      	cbz	r0, 8008dbe <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8008db8:	2000      	movs	r0, #0
 8008dba:	7008      	strb	r0, [r1, #0]
 8008dbc:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8008dbe:	f892 0028 	ldrb.w	r0, [r2, #40]	@ 0x28
 8008dc2:	b910      	cbnz	r0, 8008dca <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	700b      	strb	r3, [r1, #0]
 8008dc8:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8008dca:	b92b      	cbnz	r3, 8008dd8 <DetermineFrameType+0x34>
 8008dcc:	f892 0020 	ldrb.w	r0, [r2, #32]
 8008dd0:	b910      	cbnz	r0, 8008dd8 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	700b      	strb	r3, [r1, #0]
 8008dd6:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8008dd8:	b953      	cbnz	r3, 8008df0 <DetermineFrameType+0x4c>
 8008dda:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008dde:	b14a      	cbz	r2, 8008df4 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8008de0:	2203      	movs	r2, #3
 8008de2:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8008de4:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8008de6:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008de8:	2003      	movs	r0, #3
 8008dea:	4770      	bx	lr
 8008dec:	2003      	movs	r0, #3
 8008dee:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8008df0:	2018      	movs	r0, #24
 8008df2:	4770      	bx	lr
 8008df4:	2018      	movs	r0, #24
}
 8008df6:	4770      	bx	lr

08008df8 <CheckRetrans>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 8008df8:	4288      	cmp	r0, r1
 8008dfa:	d201      	bcs.n	8008e00 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	4770      	bx	lr
        return true;
 8008e00:	2001      	movs	r0, #1
}
 8008e02:	4770      	bx	lr

08008e04 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8008e04:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8008e06:	4b0b      	ldr	r3, [pc, #44]	@ (8008e34 <CheckRetransUnconfirmedUplink+0x30>)
 8008e08:	f893 1068 	ldrb.w	r1, [r3, #104]	@ 0x68
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e38 <CheckRetransUnconfirmedUplink+0x34>)
 8008e0e:	f893 0418 	ldrb.w	r0, [r3, #1048]	@ 0x418
 8008e12:	f7ff fff1 	bl	8008df8 <CheckRetrans>
 8008e16:	b950      	cbnz	r0, 8008e2e <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008e18:	4b07      	ldr	r3, [pc, #28]	@ (8008e38 <CheckRetransUnconfirmedUplink+0x34>)
 8008e1a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8008e1e:	f013 0f02 	tst.w	r3, #2
 8008e22:	d004      	beq.n	8008e2e <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008e24:	4b04      	ldr	r3, [pc, #16]	@ (8008e38 <CheckRetransUnconfirmedUplink+0x34>)
 8008e26:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d900      	bls.n	8008e30 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 8008e2e:	bd08      	pop	{r3, pc}
            return true;
 8008e30:	2001      	movs	r0, #1
 8008e32:	e7fc      	b.n	8008e2e <CheckRetransUnconfirmedUplink+0x2a>
 8008e34:	2000090c 	.word	0x2000090c
 8008e38:	20000ed8 	.word	0x20000ed8

08008e3c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8008e3c:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8008e3e:	4b09      	ldr	r3, [pc, #36]	@ (8008e64 <CheckRetransConfirmedUplink+0x28>)
 8008e40:	f893 1068 	ldrb.w	r1, [r3, #104]	@ 0x68
 8008e44:	4b08      	ldr	r3, [pc, #32]	@ (8008e68 <CheckRetransConfirmedUplink+0x2c>)
 8008e46:	f893 0418 	ldrb.w	r0, [r3, #1048]	@ 0x418
 8008e4a:	f7ff ffd5 	bl	8008df8 <CheckRetrans>
 8008e4e:	b940      	cbnz	r0, 8008e62 <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008e50:	4b05      	ldr	r3, [pc, #20]	@ (8008e68 <CheckRetransConfirmedUplink+0x2c>)
 8008e52:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8008e56:	f013 0f02 	tst.w	r3, #2
 8008e5a:	d002      	beq.n	8008e62 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008e5c:	4b02      	ldr	r3, [pc, #8]	@ (8008e68 <CheckRetransConfirmedUplink+0x2c>)
 8008e5e:	f893 0444 	ldrb.w	r0, [r3, #1092]	@ 0x444
        {
            return true;
        }
    }
    return false;
}
 8008e62:	bd08      	pop	{r3, pc}
 8008e64:	2000090c 	.word	0x2000090c
 8008e68:	20000ed8 	.word	0x20000ed8

08008e6c <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 8008e6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008e70:	d000      	beq.n	8008e74 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 8008e72:	3001      	adds	r0, #1
    }
    return counter;
}
 8008e74:	4770      	bx	lr
	...

08008e78 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8008e78:	b510      	push	{r4, lr}
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008e7a:	4b12      	ldr	r3, [pc, #72]	@ (8008ec4 <StopRetransmission+0x4c>)
 8008e7c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8008e80:	f013 0f02 	tst.w	r3, #2
 8008e84:	d004      	beq.n	8008e90 <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8008e86:	4b0f      	ldr	r3, [pc, #60]	@ (8008ec4 <StopRetransmission+0x4c>)
 8008e88:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d908      	bls.n	8008ea2 <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8008e90:	4b0d      	ldr	r3, [pc, #52]	@ (8008ec8 <StopRetransmission+0x50>)
 8008e92:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8008e96:	b123      	cbz	r3, 8008ea2 <StopRetransmission+0x2a>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8008e98:	4c0b      	ldr	r4, [pc, #44]	@ (8008ec8 <StopRetransmission+0x50>)
 8008e9a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008e9c:	f7ff ffe6 	bl	8008e6c <IncreaseAdrAckCounter>
 8008ea0:	62a0      	str	r0, [r4, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8008ea2:	4b08      	ldr	r3, [pc, #32]	@ (8008ec4 <StopRetransmission+0x4c>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 8008eaa:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8008eae:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008eb2:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 8008eb6:	f022 0202 	bic.w	r2, r2, #2
 8008eba:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return true;
}
 8008ebe:	2001      	movs	r0, #1
 8008ec0:	bd10      	pop	{r4, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20000ed8 	.word	0x20000ed8
 8008ec8:	2000090c 	.word	0x2000090c

08008ecc <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8008ecc:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008ece:	4b04      	ldr	r3, [pc, #16]	@ (8008ee0 <OnMacProcessNotify+0x14>)
 8008ed0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8008ed4:	b113      	cbz	r3, 8008edc <OnMacProcessNotify+0x10>
 8008ed6:	695b      	ldr	r3, [r3, #20]
 8008ed8:	b103      	cbz	r3, 8008edc <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008eda:	4798      	blx	r3
    }
}
 8008edc:	bd08      	pop	{r3, pc}
 8008ede:	bf00      	nop
 8008ee0:	20000ed8 	.word	0x20000ed8

08008ee4 <OnRadioRxError>:
{
 8008ee4:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8008ee6:	4a04      	ldr	r2, [pc, #16]	@ (8008ef8 <OnRadioRxError+0x14>)
 8008ee8:	7813      	ldrb	r3, [r2, #0]
 8008eea:	f043 0304 	orr.w	r3, r3, #4
 8008eee:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8008ef0:	f7ff ffec 	bl	8008ecc <OnMacProcessNotify>
}
 8008ef4:	bd08      	pop	{r3, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20000878 	.word	0x20000878

08008efc <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8008efc:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8008efe:	4b04      	ldr	r3, [pc, #16]	@ (8008f10 <CallNvmDataChangeCallback+0x14>)
 8008f00:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8008f04:	b113      	cbz	r3, 8008f0c <CallNvmDataChangeCallback+0x10>
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	b103      	cbz	r3, 8008f0c <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8008f0a:	4798      	blx	r3
    }
}
 8008f0c:	bd08      	pop	{r3, pc}
 8008f0e:	bf00      	nop
 8008f10:	20000ed8 	.word	0x20000ed8

08008f14 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8008f14:	4b04      	ldr	r3, [pc, #16]	@ (8008f28 <IsRequestPending+0x14>)
 8008f16:	f893 0491 	ldrb.w	r0, [r3, #1169]	@ 0x491
 8008f1a:	f010 0005 	ands.w	r0, r0, #5
 8008f1e:	d100      	bne.n	8008f22 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8008f20:	4770      	bx	lr
        return 1;
 8008f22:	2001      	movs	r0, #1
 8008f24:	e7fc      	b.n	8008f20 <IsRequestPending+0xc>
 8008f26:	bf00      	nop
 8008f28:	20000ed8 	.word	0x20000ed8

08008f2c <OnAbpJoinPendingTimerEvent>:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
/*!
 * \brief Function executed on AbpJoinPendingTimer timer event
 */
static void OnAbpJoinPendingTimerEvent( void *context )
{
 8008f2c:	b508      	push	{r3, lr}
    MacCtx.MacState &= ~LORAMAC_ABP_JOIN_PENDING;
 8008f2e:	4b08      	ldr	r3, [pc, #32]	@ (8008f50 <OnAbpJoinPendingTimerEvent+0x24>)
 8008f30:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 8008f34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f38:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008f3c:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 8008f40:	f042 0210 	orr.w	r2, r2, #16
 8008f44:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    OnMacProcessNotify( );
 8008f48:	f7ff ffc0 	bl	8008ecc <OnMacProcessNotify>
}
 8008f4c:	bd08      	pop	{r3, pc}
 8008f4e:	bf00      	nop
 8008f50:	20000ed8 	.word	0x20000ed8

08008f54 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8008f54:	b500      	push	{lr}
 8008f56:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008f58:	4b0d      	ldr	r3, [pc, #52]	@ (8008f90 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8008f5a:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8008f5e:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8008f62:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008f66:	220d      	movs	r2, #13
 8008f68:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008f6c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8008f70:	b113      	cbz	r3, 8008f78 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008f72:	230e      	movs	r3, #14
 8008f74:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008f78:	a902      	add	r1, sp, #8
 8008f7a:	4b05      	ldr	r3, [pc, #20]	@ (8008f90 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8008f7c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008f80:	f004 f9c5 	bl	800d30e <RegionGetPhyParam>
 8008f84:	9001      	str	r0, [sp, #4]
}
 8008f86:	b2c0      	uxtb	r0, r0
 8008f88:	b005      	add	sp, #20
 8008f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f8e:	bf00      	nop
 8008f90:	2000090c 	.word	0x2000090c

08008f94 <ValidatePayloadLength>:
{
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4604      	mov	r4, r0
 8008f98:	4615      	mov	r5, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008f9a:	4608      	mov	r0, r1
 8008f9c:	f7ff ffda 	bl	8008f54 <GetMaxAppPayloadWithoutFOptsLength>
    payloadSize = ( lenN + fOptsLen );
 8008fa0:	442c      	add	r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008fa2:	42a0      	cmp	r0, r4
 8008fa4:	d201      	bcs.n	8008faa <ValidatePayloadLength+0x16>
    return false;
 8008fa6:	2000      	movs	r0, #0
}
 8008fa8:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8008faa:	2001      	movs	r0, #1
 8008fac:	e7fc      	b.n	8008fa8 <ValidatePayloadLength+0x14>
	...

08008fb0 <ProcessRadioTxDone>:
{
 8008fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fb2:	b08f      	sub	sp, #60	@ 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80090a4 <ProcessRadioTxDone+0xf4>)
 8008fb6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d002      	beq.n	8008fc4 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 8008fbe:	4b3a      	ldr	r3, [pc, #232]	@ (80090a8 <ProcessRadioTxDone+0xf8>)
 8008fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc2:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fc4:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008fc8:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8008fca:	f009 fb1b 	bl	8012604 <UTIL_TIMER_GetCurrentTime>
 8008fce:	4b37      	ldr	r3, [pc, #220]	@ (80090ac <ProcessRadioTxDone+0xfc>)
 8008fd0:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8008fd2:	4c37      	ldr	r4, [pc, #220]	@ (80090b0 <ProcessRadioTxDone+0x100>)
 8008fd4:	f8d4 13b0 	ldr.w	r1, [r4, #944]	@ 0x3b0
 8008fd8:	1a2d      	subs	r5, r5, r0
 8008fda:	f504 7660 	add.w	r6, r4, #896	@ 0x380
 8008fde:	4429      	add	r1, r5
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f009 fbef 	bl	80127c4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	f009 fba6 	bl	8012738 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8008fec:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 8008ff0:	f504 7666 	add.w	r6, r4, #920	@ 0x398
 8008ff4:	4429      	add	r1, r5
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f009 fbe4 	bl	80127c4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f009 fb9b 	bl	8012738 <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009002:	f387 8810 	msr	PRIMASK, r7
    if( MacCtx.NodeAckRequested == true )
 8009006:	f894 341a 	ldrb.w	r3, [r4, #1050]	@ 0x41a
 800900a:	2b00      	cmp	r3, #0
 800900c:	d134      	bne.n	8009078 <ProcessRadioTxDone+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800900e:	4b28      	ldr	r3, [pc, #160]	@ (80090b0 <ProcessRadioTxDone+0x100>)
 8009010:	2200      	movs	r2, #0
 8009012:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8009016:	4b25      	ldr	r3, [pc, #148]	@ (80090ac <ProcessRadioTxDone+0xfc>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4c22      	ldr	r4, [pc, #136]	@ (80090a4 <ProcessRadioTxDone+0xf4>)
 800901c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    txDone.Channel = MacCtx.Channel;
 800901e:	4f24      	ldr	r7, [pc, #144]	@ (80090b0 <ProcessRadioTxDone+0x100>)
 8009020:	f897 241b 	ldrb.w	r2, [r7, #1051]	@ 0x41b
 8009024:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009028:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800902a:	ae0c      	add	r6, sp, #48	@ 0x30
 800902c:	4630      	mov	r0, r6
 800902e:	f009 faa9 	bl	8012584 <SysTimeGetMcuTime>
 8009032:	ad02      	add	r5, sp, #8
 8009034:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
 800903e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8009042:	4628      	mov	r0, r5
 8009044:	f009 fa3b 	bl	80124be <SysTimeSub>
 8009048:	ab07      	add	r3, sp, #28
 800904a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800904e:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8009052:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8009056:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8009058:	2301      	movs	r3, #1
 800905a:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800905e:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 8009062:	b90b      	cbnz	r3, 8009068 <ProcessRadioTxDone+0xb8>
        txDone.Joined  = false;
 8009064:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8009068:	a904      	add	r1, sp, #16
 800906a:	4b0e      	ldr	r3, [pc, #56]	@ (80090a4 <ProcessRadioTxDone+0xf4>)
 800906c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8009070:	f004 f965 	bl	800d33e <RegionSetBandTxDone>
}
 8009074:	b00f      	add	sp, #60	@ 0x3c
 8009076:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8009078:	2315      	movs	r3, #21
 800907a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800907e:	a90a      	add	r1, sp, #40	@ 0x28
 8009080:	4b08      	ldr	r3, [pc, #32]	@ (80090a4 <ProcessRadioTxDone+0xf4>)
 8009082:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8009086:	f004 f942 	bl	800d30e <RegionGetPhyParam>
 800908a:	9009      	str	r0, [sp, #36]	@ 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800908c:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 8009090:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8009094:	4401      	add	r1, r0
 8009096:	4620      	mov	r0, r4
 8009098:	f009 fb94 	bl	80127c4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800909c:	4620      	mov	r0, r4
 800909e:	f009 fb4b 	bl	8012738 <UTIL_TIMER_Start>
 80090a2:	e7b8      	b.n	8009016 <ProcessRadioTxDone+0x66>
 80090a4:	2000090c 	.word	0x2000090c
 80090a8:	08013b98 	.word	0x08013b98
 80090ac:	20000874 	.word	0x20000874
 80090b0:	20000ed8 	.word	0x20000ed8

080090b4 <OnRetransmitTimeoutTimerEvent>:
{
 80090b4:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80090b6:	4c07      	ldr	r4, [pc, #28]	@ (80090d4 <OnRetransmitTimeoutTimerEvent+0x20>)
 80090b8:	4620      	mov	r0, r4
 80090ba:	f009 fae3 	bl	8012684 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 80090be:	7ea3      	ldrb	r3, [r4, #26]
 80090c0:	b123      	cbz	r3, 80090cc <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 80090c2:	f5a4 6380 	sub.w	r3, r4, #1024	@ 0x400
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    OnMacProcessNotify( );
 80090cc:	f7ff fefe 	bl	8008ecc <OnMacProcessNotify>
}
 80090d0:	bd10      	pop	{r4, pc}
 80090d2:	bf00      	nop
 80090d4:	200012d8 	.word	0x200012d8

080090d8 <PrepareRxDoneAbort>:
{
 80090d8:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80090da:	4b0e      	ldr	r3, [pc, #56]	@ (8009114 <PrepareRxDoneAbort+0x3c>)
 80090dc:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 80090e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80090e4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == true )
 80090e8:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 80090ec:	b973      	cbnz	r3, 800910c <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80090ee:	4b09      	ldr	r3, [pc, #36]	@ (8009114 <PrepareRxDoneAbort+0x3c>)
 80090f0:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 80090f4:	f042 0202 	orr.w	r2, r2, #2
 80090f8:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 80090fc:	b2d2      	uxtb	r2, r2
 80090fe:	f042 0210 	orr.w	r2, r2, #16
 8009102:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    UpdateRxSlotIdleState( );
 8009106:	f7ff fdbf 	bl	8008c88 <UpdateRxSlotIdleState>
}
 800910a:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 800910c:	2000      	movs	r0, #0
 800910e:	f7ff ffd1 	bl	80090b4 <OnRetransmitTimeoutTimerEvent>
 8009112:	e7ec      	b.n	80090ee <PrepareRxDoneAbort+0x16>
 8009114:	20000ed8 	.word	0x20000ed8

08009118 <LoRaMacCheckForBeaconAcquisition>:
{
 8009118:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800911a:	200b      	movs	r0, #11
 800911c:	f003 fb9a 	bl	800c854 <LoRaMacConfirmQueueIsCmdActive>
 8009120:	b188      	cbz	r0, 8009146 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8009122:	4b0b      	ldr	r3, [pc, #44]	@ (8009150 <LoRaMacCheckForBeaconAcquisition+0x38>)
 8009124:	f893 0491 	ldrb.w	r0, [r3, #1169]	@ 0x491
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009128:	f010 0f01 	tst.w	r0, #1
 800912c:	d10d      	bne.n	800914a <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800912e:	f010 0004 	ands.w	r0, r0, #4
 8009132:	d009      	beq.n	8009148 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009134:	461a      	mov	r2, r3
 8009136:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800913a:	f023 0302 	bic.w	r3, r3, #2
 800913e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 8009142:	2001      	movs	r0, #1
 8009144:	e000      	b.n	8009148 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8009146:	2000      	movs	r0, #0
}
 8009148:	bd08      	pop	{r3, pc}
    return 0x00;
 800914a:	2000      	movs	r0, #0
 800914c:	e7fc      	b.n	8009148 <LoRaMacCheckForBeaconAcquisition+0x30>
 800914e:	bf00      	nop
 8009150:	20000ed8 	.word	0x20000ed8

08009154 <GetFCntDown>:
{
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	9c04      	ldr	r4, [sp, #16]
 8009158:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800915a:	b1f2      	cbz	r2, 800919a <GetFCntDown+0x46>
 800915c:	4694      	mov	ip, r2
 800915e:	b1f4      	cbz	r4, 800919e <GetFCntDown+0x4a>
 8009160:	b1fd      	cbz	r5, 80091a2 <GetFCntDown+0x4e>
    switch( addrID )
 8009162:	b188      	cbz	r0, 8009188 <GetFCntDown+0x34>
 8009164:	2801      	cmp	r0, #1
 8009166:	d11e      	bne.n	80091a6 <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 8009168:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800916c:	2b01      	cmp	r3, #1
 800916e:	d002      	beq.n	8009176 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8009170:	2303      	movs	r3, #3
 8009172:	7023      	strb	r3, [r4, #0]
 8009174:	e00a      	b.n	800918c <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8009176:	b121      	cbz	r1, 8009182 <GetFCntDown+0x2e>
 8009178:	2903      	cmp	r1, #3
 800917a:	d002      	beq.n	8009182 <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 800917c:	2301      	movs	r3, #1
 800917e:	7023      	strb	r3, [r4, #0]
 8009180:	e004      	b.n	800918c <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 8009182:	2302      	movs	r3, #2
 8009184:	7023      	strb	r3, [r4, #0]
 8009186:	e001      	b.n	800918c <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8009188:	2304      	movs	r3, #4
 800918a:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800918c:	462a      	mov	r2, r5
 800918e:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 8009192:	7820      	ldrb	r0, [r4, #0]
 8009194:	f003 fd88 	bl	800cca8 <LoRaMacCryptoGetFCntDown>
}
 8009198:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800919a:	2009      	movs	r0, #9
 800919c:	e7fc      	b.n	8009198 <GetFCntDown+0x44>
 800919e:	2009      	movs	r0, #9
 80091a0:	e7fa      	b.n	8009198 <GetFCntDown+0x44>
 80091a2:	2009      	movs	r0, #9
 80091a4:	e7f8      	b.n	8009198 <GetFCntDown+0x44>
    switch( addrID )
 80091a6:	2005      	movs	r0, #5
 80091a8:	e7f6      	b.n	8009198 <GetFCntDown+0x44>

080091aa <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80091aa:	2801      	cmp	r0, #1
 80091ac:	d900      	bls.n	80091b0 <RemoveMacCommands+0x6>
 80091ae:	4770      	bx	lr
{
 80091b0:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 80091b2:	2a01      	cmp	r2, #1
 80091b4:	d105      	bne.n	80091c2 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 80091b6:	f011 0f20 	tst.w	r1, #32
 80091ba:	d004      	beq.n	80091c6 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80091bc:	f003 f9f6 	bl	800c5ac <LoRaMacCommandsRemoveStickyAnsCmds>
 80091c0:	e001      	b.n	80091c6 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80091c2:	f003 f9f3 	bl	800c5ac <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80091c6:	bd08      	pop	{r3, pc}

080091c8 <ProcessMacCommands>:
{
 80091c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	b08f      	sub	sp, #60	@ 0x3c
 80091ce:	4698      	mov	r8, r3
    uint8_t status = 0;
 80091d0:	2300      	movs	r3, #0
 80091d2:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80091d6:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 80091da:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 80091de:	2b01      	cmp	r3, #1
 80091e0:	f200 82e0 	bhi.w	80097a4 <ProcessMacCommands+0x5dc>
 80091e4:	4605      	mov	r5, r0
 80091e6:	460c      	mov	r4, r1
 80091e8:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 80091ea:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 80091ee:	42bc      	cmp	r4, r7
 80091f0:	f080 82d8 	bcs.w	80097a4 <ProcessMacCommands+0x5dc>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80091f4:	5d28      	ldrb	r0, [r5, r4]
 80091f6:	f003 fa31 	bl	800c65c <LoRaMacCommandsGetCmdSize>
 80091fa:	4420      	add	r0, r4
 80091fc:	42b8      	cmp	r0, r7
 80091fe:	f300 82d1 	bgt.w	80097a4 <ProcessMacCommands+0x5dc>
        switch( payload[macIndex++] )
 8009202:	1c66      	adds	r6, r4, #1
 8009204:	b2f6      	uxtb	r6, r6
 8009206:	5d2b      	ldrb	r3, [r5, r4]
 8009208:	3b02      	subs	r3, #2
 800920a:	2b11      	cmp	r3, #17
 800920c:	f200 82ca 	bhi.w	80097a4 <ProcessMacCommands+0x5dc>
 8009210:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009214:	00280012 	.word	0x00280012
 8009218:	00c000ad 	.word	0x00c000ad
 800921c:	0125010d 	.word	0x0125010d
 8009220:	017a015e 	.word	0x017a015e
 8009224:	02c801c6 	.word	0x02c801c6
 8009228:	01f602c8 	.word	0x01f602c8
 800922c:	02c802c8 	.word	0x02c802c8
 8009230:	026f0258 	.word	0x026f0258
 8009234:	02a8028e 	.word	0x02a8028e
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8009238:	2005      	movs	r0, #5
 800923a:	f003 fb0b 	bl	800c854 <LoRaMacConfirmQueueIsCmdActive>
 800923e:	b908      	cbnz	r0, 8009244 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 8009240:	4634      	mov	r4, r6
 8009242:	e7d4      	b.n	80091ee <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8009244:	2105      	movs	r1, #5
 8009246:	2000      	movs	r0, #0
 8009248:	f003 fab8 	bl	800c7bc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800924c:	1ca3      	adds	r3, r4, #2
 800924e:	b2db      	uxtb	r3, r3
 8009250:	5da9      	ldrb	r1, [r5, r6]
 8009252:	4aaa      	ldr	r2, [pc, #680]	@ (80094fc <ProcessMacCommands+0x334>)
 8009254:	f882 145c 	strb.w	r1, [r2, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8009258:	3403      	adds	r4, #3
 800925a:	b2e4      	uxtb	r4, r4
 800925c:	5ceb      	ldrb	r3, [r5, r3]
 800925e:	f882 345d 	strb.w	r3, [r2, #1117]	@ 0x45d
 8009262:	e7c4      	b.n	80091ee <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 8009264:	2300      	movs	r3, #0
 8009266:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800926a:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800926e:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 8009272:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8009276:	f1b9 0f00 	cmp.w	r9, #0
 800927a:	d036      	beq.n	80092ea <ProcessMacCommands+0x122>
                    macIndex += 4;
 800927c:	3405      	adds	r4, #5
 800927e:	b2e4      	uxtb	r4, r4
 8009280:	e7b5      	b.n	80091ee <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 8009282:	2305      	movs	r3, #5
 8009284:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8009288:	e050      	b.n	800932c <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800928a:	4b9d      	ldr	r3, [pc, #628]	@ (8009500 <ProcessMacCommands+0x338>)
 800928c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8009290:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 8009294:	4293      	cmp	r3, r2
 8009296:	da03      	bge.n	80092a0 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8009298:	4b99      	ldr	r3, [pc, #612]	@ (8009500 <ProcessMacCommands+0x338>)
 800929a:	2101      	movs	r1, #1
 800929c:	f883 111d 	strb.w	r1, [r3, #285]	@ 0x11d
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80092a0:	4b97      	ldr	r3, [pc, #604]	@ (8009500 <ProcessMacCommands+0x338>)
 80092a2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80092a6:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80092aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80092ae:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80092b2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 80092b6:	e04d      	b.n	8009354 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80092b8:	2201      	movs	r2, #1
 80092ba:	f10d 012f 	add.w	r1, sp, #47	@ 0x2f
 80092be:	2003      	movs	r0, #3
 80092c0:	f003 f900 	bl	800c4c4 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80092c4:	3401      	adds	r4, #1
 80092c6:	b2e4      	uxtb	r4, r4
 80092c8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80092cc:	498d      	ldr	r1, [pc, #564]	@ (8009504 <ProcessMacCommands+0x33c>)
 80092ce:	fba1 2103 	umull	r2, r1, r1, r3
 80092d2:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 80092d6:	d3ef      	bcc.n	80092b8 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 80092d8:	4433      	add	r3, r6
 80092da:	b2de      	uxtb	r6, r3
 80092dc:	1e74      	subs	r4, r6, #1
 80092de:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 80092e0:	42a7      	cmp	r7, r4
 80092e2:	d93a      	bls.n	800935a <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80092e4:	5d2b      	ldrb	r3, [r5, r4]
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d136      	bne.n	8009358 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 80092ea:	1e73      	subs	r3, r6, #1
 80092ec:	442b      	add	r3, r5
 80092ee:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80092f0:	4b83      	ldr	r3, [pc, #524]	@ (8009500 <ProcessMacCommands+0x338>)
 80092f2:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 80092f6:	f88d 2026 	strb.w	r2, [sp, #38]	@ 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80092fa:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 80092fe:	f88d 1025 	strb.w	r1, [sp, #37]	@ 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8009302:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 8009306:	f88d 1027 	strb.w	r1, [sp, #39]	@ 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800930a:	f993 1038 	ldrsb.w	r1, [r3, #56]	@ 0x38
 800930e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8009312:	f893 1068 	ldrb.w	r1, [r3, #104]	@ 0x68
 8009316:	f88d 1029 	strb.w	r1, [sp, #41]	@ 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800931a:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800931e:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8009320:	2a00      	cmp	r2, #0
 8009322:	d0ae      	beq.n	8009282 <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8009324:	1bbb      	subs	r3, r7, r6
 8009326:	3301      	adds	r3, #1
 8009328:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800932c:	ab05      	add	r3, sp, #20
 800932e:	9301      	str	r3, [sp, #4]
 8009330:	ab03      	add	r3, sp, #12
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	f10d 030b 	add.w	r3, sp, #11
 8009338:	f10d 020a 	add.w	r2, sp, #10
 800933c:	a907      	add	r1, sp, #28
 800933e:	4870      	ldr	r0, [pc, #448]	@ (8009500 <ProcessMacCommands+0x338>)
 8009340:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 8009344:	f004 f877 	bl	800d436 <RegionLinkAdrReq>
 8009348:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 800934c:	f000 0007 	and.w	r0, r0, #7
 8009350:	2807      	cmp	r0, #7
 8009352:	d09a      	beq.n	800928a <ProcessMacCommands+0xc2>
{
 8009354:	2400      	movs	r4, #0
 8009356:	e7b7      	b.n	80092c8 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8009358:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 800935a:	42bc      	cmp	r4, r7
 800935c:	d204      	bcs.n	8009368 <ProcessMacCommands+0x1a0>
                        macIndex--;
 800935e:	3c01      	subs	r4, #1
 8009360:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 8009362:	f04f 0901 	mov.w	r9, #1
 8009366:	e742      	b.n	80091ee <ProcessMacCommands+0x26>
 8009368:	f04f 0901 	mov.w	r9, #1
                break;
 800936c:	e73f      	b.n	80091ee <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800936e:	3402      	adds	r4, #2
 8009370:	b2e4      	uxtb	r4, r4
 8009372:	5dab      	ldrb	r3, [r5, r6]
 8009374:	f003 030f 	and.w	r3, r3, #15
 8009378:	4961      	ldr	r1, [pc, #388]	@ (8009500 <ProcessMacCommands+0x338>)
 800937a:	f881 311b 	strb.w	r3, [r1, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800937e:	2201      	movs	r2, #1
 8009380:	fa02 f303 	lsl.w	r3, r2, r3
 8009384:	f8a1 3120 	strh.w	r3, [r1, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009388:	2200      	movs	r2, #0
 800938a:	a90b      	add	r1, sp, #44	@ 0x2c
 800938c:	2004      	movs	r0, #4
 800938e:	f003 f899 	bl	800c4c4 <LoRaMacCommandsAddCmd>
                break;
 8009392:	e72c      	b.n	80091ee <ProcessMacCommands+0x26>
                status = 0x07;
 8009394:	2307      	movs	r3, #7
 8009396:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800939a:	5dab      	ldrb	r3, [r5, r6]
 800939c:	f3c3 1202 	ubfx	r2, r3, #4, #3
 80093a0:	f88d 201d 	strb.w	r2, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80093a4:	f003 030f 	and.w	r3, r3, #15
 80093a8:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 80093ac:	1ca2      	adds	r2, r4, #2
 80093ae:	b2d2      	uxtb	r2, r2
                if( rxParamSetupReq.Datarate == 0x0F )
 80093b0:	2b0f      	cmp	r3, #15
 80093b2:	d027      	beq.n	8009404 <ProcessMacCommands+0x23c>
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80093b4:	1ce1      	adds	r1, r4, #3
 80093b6:	b2c9      	uxtb	r1, r1
 80093b8:	5cab      	ldrb	r3, [r5, r2]
 80093ba:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80093bc:	1d22      	adds	r2, r4, #4
 80093be:	b2d2      	uxtb	r2, r2
 80093c0:	5c69      	ldrb	r1, [r5, r1]
 80093c2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80093c6:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80093c8:	3405      	adds	r4, #5
 80093ca:	b2e4      	uxtb	r4, r4
 80093cc:	5caa      	ldrb	r2, [r5, r2]
 80093ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093d2:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 80093d4:	2264      	movs	r2, #100	@ 0x64
 80093d6:	fb02 f303 	mul.w	r3, r2, r3
 80093da:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80093dc:	a907      	add	r1, sp, #28
 80093de:	4b48      	ldr	r3, [pc, #288]	@ (8009500 <ProcessMacCommands+0x338>)
 80093e0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80093e4:	f004 f843 	bl	800d46e <RegionRxParamSetupReq>
 80093e8:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
                if( ( status & 0x07 ) == 0x07 )
 80093ec:	f000 0307 	and.w	r3, r0, #7
 80093f0:	2b07      	cmp	r3, #7
 80093f2:	d00d      	beq.n	8009410 <ProcessMacCommands+0x248>
                macCmdPayload[0] = status;
 80093f4:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80093f8:	2201      	movs	r2, #1
 80093fa:	a90b      	add	r1, sp, #44	@ 0x2c
 80093fc:	2005      	movs	r0, #5
 80093fe:	f003 f861 	bl	800c4c4 <LoRaMacCommandsAddCmd>
                break;
 8009402:	e6f4      	b.n	80091ee <ProcessMacCommands+0x26>
                    rxParamSetupReq.Datarate = Nvm.MacGroup2.MacParams.Rx2Channel.Datarate;
 8009404:	4b3e      	ldr	r3, [pc, #248]	@ (8009500 <ProcessMacCommands+0x338>)
 8009406:	f993 3070 	ldrsb.w	r3, [r3, #112]	@ 0x70
 800940a:	f88d 301c 	strb.w	r3, [sp, #28]
 800940e:	e7d1      	b.n	80093b4 <ProcessMacCommands+0x1ec>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8009410:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8009414:	4b3a      	ldr	r3, [pc, #232]	@ (8009500 <ProcessMacCommands+0x338>)
 8009416:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800941a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800941e:	9a08      	ldr	r2, [sp, #32]
 8009420:	66da      	str	r2, [r3, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8009422:	675a      	str	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8009424:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8009428:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 800942c:	e7e2      	b.n	80093f4 <ProcessMacCommands+0x22c>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800942e:	4b33      	ldr	r3, [pc, #204]	@ (80094fc <ProcessMacCommands+0x334>)
 8009430:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8009434:	b17b      	cbz	r3, 8009456 <ProcessMacCommands+0x28e>
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	b17b      	cbz	r3, 800945a <ProcessMacCommands+0x292>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800943a:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800943c:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8009440:	f008 033f 	and.w	r3, r8, #63	@ 0x3f
 8009444:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8009448:	2202      	movs	r2, #2
 800944a:	a90b      	add	r1, sp, #44	@ 0x2c
 800944c:	2006      	movs	r0, #6
 800944e:	f003 f839 	bl	800c4c4 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8009452:	4634      	mov	r4, r6
                break;
 8009454:	e6cb      	b.n	80091ee <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8009456:	20ff      	movs	r0, #255	@ 0xff
 8009458:	e7f0      	b.n	800943c <ProcessMacCommands+0x274>
 800945a:	20ff      	movs	r0, #255	@ 0xff
 800945c:	e7ee      	b.n	800943c <ProcessMacCommands+0x274>
                status = 0x03;
 800945e:	2303      	movs	r3, #3
 8009460:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 8009464:	1ca3      	adds	r3, r4, #2
 8009466:	b2db      	uxtb	r3, r3
 8009468:	57aa      	ldrsb	r2, [r5, r6]
 800946a:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800946e:	aa07      	add	r2, sp, #28
 8009470:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8009472:	1ce2      	adds	r2, r4, #3
 8009474:	b2d2      	uxtb	r2, r2
 8009476:	5ceb      	ldrb	r3, [r5, r3]
 8009478:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800947a:	1d21      	adds	r1, r4, #4
 800947c:	b2c9      	uxtb	r1, r1
 800947e:	5caa      	ldrb	r2, [r5, r2]
 8009480:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009484:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009486:	1d62      	adds	r2, r4, #5
 8009488:	b2d2      	uxtb	r2, r2
 800948a:	5c69      	ldrb	r1, [r5, r1]
 800948c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009490:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 8009492:	2164      	movs	r1, #100	@ 0x64
 8009494:	fb01 f303 	mul.w	r3, r1, r3
 8009498:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800949a:	2300      	movs	r3, #0
 800949c:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800949e:	3406      	adds	r4, #6
 80094a0:	b2e4      	uxtb	r4, r4
 80094a2:	56ab      	ldrsb	r3, [r5, r2]
 80094a4:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80094a8:	a905      	add	r1, sp, #20
 80094aa:	4b15      	ldr	r3, [pc, #84]	@ (8009500 <ProcessMacCommands+0x338>)
 80094ac:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80094b0:	f003 ffec 	bl	800d48c <RegionNewChannelReq>
 80094b4:	b2c3      	uxtb	r3, r0
 80094b6:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                if( ( int8_t )status >= 0 )
 80094ba:	2800      	cmp	r0, #0
 80094bc:	f6ff ae97 	blt.w	80091ee <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 80094c0:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80094c4:	2201      	movs	r2, #1
 80094c6:	a90b      	add	r1, sp, #44	@ 0x2c
 80094c8:	2007      	movs	r0, #7
 80094ca:	f002 fffb 	bl	800c4c4 <LoRaMacCommandsAddCmd>
                break;
 80094ce:	e68e      	b.n	80091ee <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80094d0:	3402      	adds	r4, #2
 80094d2:	b2e4      	uxtb	r4, r4
 80094d4:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 80094d6:	f013 030f 	ands.w	r3, r3, #15
 80094da:	d100      	bne.n	80094de <ProcessMacCommands+0x316>
                    delay++;
 80094dc:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80094de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80094e2:	fb02 f303 	mul.w	r3, r2, r3
 80094e6:	4a06      	ldr	r2, [pc, #24]	@ (8009500 <ProcessMacCommands+0x338>)
 80094e8:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80094ea:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80094ee:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80094f0:	2200      	movs	r2, #0
 80094f2:	a90b      	add	r1, sp, #44	@ 0x2c
 80094f4:	2008      	movs	r0, #8
 80094f6:	f002 ffe5 	bl	800c4c4 <LoRaMacCommandsAddCmd>
                break;
 80094fa:	e678      	b.n	80091ee <ProcessMacCommands+0x26>
 80094fc:	20000ed8 	.word	0x20000ed8
 8009500:	2000090c 	.word	0x2000090c
 8009504:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 8009508:	3402      	adds	r4, #2
 800950a:	b2e4      	uxtb	r4, r4
 800950c:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800950e:	2200      	movs	r2, #0
 8009510:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8009514:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009518:	f013 0f20 	tst.w	r3, #32
 800951c:	d002      	beq.n	8009524 <ProcessMacCommands+0x35c>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800951e:	2201      	movs	r2, #1
 8009520:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8009524:	f013 0f10 	tst.w	r3, #16
 8009528:	d002      	beq.n	8009530 <ProcessMacCommands+0x368>
                    txParamSetupReq.UplinkDwellTime = 1;
 800952a:	2201      	movs	r2, #1
 800952c:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8009530:	f003 030f 	and.w	r3, r3, #15
 8009534:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8009538:	a903      	add	r1, sp, #12
 800953a:	4b9c      	ldr	r3, [pc, #624]	@ (80097ac <ProcessMacCommands+0x5e4>)
 800953c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8009540:	f003 ffb3 	bl	800d4aa <RegionTxParamSetupReq>
 8009544:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009548:	f43f ae51 	beq.w	80091ee <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800954c:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8009550:	4e96      	ldr	r6, [pc, #600]	@ (80097ac <ProcessMacCommands+0x5e4>)
 8009552:	f886 a07c 	strb.w	sl, [r6, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8009556:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800955a:	f886 307d 	strb.w	r3, [r6, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800955e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8009562:	4a93      	ldr	r2, [pc, #588]	@ (80097b0 <ProcessMacCommands+0x5e8>)
 8009564:	5cd0      	ldrb	r0, [r2, r3]
 8009566:	f7f7 fb5f 	bl	8000c28 <__aeabi_ui2f>
 800956a:	f8c6 0080 	str.w	r0, [r6, #128]	@ 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800956e:	2302      	movs	r3, #2
 8009570:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009574:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009578:	a907      	add	r1, sp, #28
 800957a:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800957e:	f003 fec6 	bl	800d30e <RegionGetPhyParam>
 8009582:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009584:	b240      	sxtb	r0, r0
 8009586:	f996 3039 	ldrsb.w	r3, [r6, #57]	@ 0x39
 800958a:	4298      	cmp	r0, r3
 800958c:	bfb8      	it	lt
 800958e:	4618      	movlt	r0, r3
 8009590:	f886 0039 	strb.w	r0, [r6, #57]	@ 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8009594:	2200      	movs	r2, #0
 8009596:	a90b      	add	r1, sp, #44	@ 0x2c
 8009598:	2009      	movs	r0, #9
 800959a:	f002 ff93 	bl	800c4c4 <LoRaMacCommandsAddCmd>
                break;
 800959e:	e626      	b.n	80091ee <ProcessMacCommands+0x26>
                status = 0x03;
 80095a0:	2303      	movs	r3, #3
 80095a2:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 80095a6:	1ca3      	adds	r3, r4, #2
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	5daa      	ldrb	r2, [r5, r6]
 80095ac:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80095b0:	1ce1      	adds	r1, r4, #3
 80095b2:	b2c9      	uxtb	r1, r1
 80095b4:	5ceb      	ldrb	r3, [r5, r3]
 80095b6:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80095b8:	1d22      	adds	r2, r4, #4
 80095ba:	b2d2      	uxtb	r2, r2
 80095bc:	5c69      	ldrb	r1, [r5, r1]
 80095be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80095c2:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80095c4:	3405      	adds	r4, #5
 80095c6:	b2e4      	uxtb	r4, r4
 80095c8:	5caa      	ldrb	r2, [r5, r2]
 80095ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095ce:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 80095d0:	2264      	movs	r2, #100	@ 0x64
 80095d2:	fb02 f303 	mul.w	r3, r2, r3
 80095d6:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80095d8:	a907      	add	r1, sp, #28
 80095da:	4b74      	ldr	r3, [pc, #464]	@ (80097ac <ProcessMacCommands+0x5e4>)
 80095dc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80095e0:	f003 ff72 	bl	800d4c8 <RegionDlChannelReq>
 80095e4:	b2c3      	uxtb	r3, r0
 80095e6:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                if( ( int8_t )status >= 0 )
 80095ea:	2800      	cmp	r0, #0
 80095ec:	f6ff adff 	blt.w	80091ee <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 80095f0:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80095f4:	2201      	movs	r2, #1
 80095f6:	a90b      	add	r1, sp, #44	@ 0x2c
 80095f8:	200a      	movs	r0, #10
 80095fa:	f002 ff63 	bl	800c4c4 <LoRaMacCommandsAddCmd>
                break;
 80095fe:	e5f6      	b.n	80091ee <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8009600:	2009      	movs	r0, #9
 8009602:	f003 f927 	bl	800c854 <LoRaMacConfirmQueueIsCmdActive>
 8009606:	b928      	cbnz	r0, 8009614 <ProcessMacCommands+0x44c>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8009608:	4b6a      	ldr	r3, [pc, #424]	@ (80097b4 <ProcessMacCommands+0x5ec>)
 800960a:	2200      	movs	r2, #0
 800960c:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
        switch( payload[macIndex++] )
 8009610:	4634      	mov	r4, r6
 8009612:	e5ec      	b.n	80091ee <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8009614:	2109      	movs	r1, #9
 8009616:	2000      	movs	r0, #0
 8009618:	f003 f8d0 	bl	800c7bc <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800961c:	a903      	add	r1, sp, #12
 800961e:	2300      	movs	r3, #0
 8009620:	9303      	str	r3, [sp, #12]
 8009622:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 8009624:	f10d 0a14 	add.w	sl, sp, #20
 8009628:	9305      	str	r3, [sp, #20]
 800962a:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800962c:	f10d 0b1c 	add.w	fp, sp, #28
 8009630:	9307      	str	r3, [sp, #28]
 8009632:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8009634:	1ca0      	adds	r0, r4, #2
 8009636:	b2c0      	uxtb	r0, r0
 8009638:	5dab      	ldrb	r3, [r5, r6]
 800963a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800963c:	1ce2      	adds	r2, r4, #3
 800963e:	b2d2      	uxtb	r2, r2
 8009640:	5c28      	ldrb	r0, [r5, r0]
 8009642:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8009646:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009648:	1d20      	adds	r0, r4, #4
 800964a:	b2c0      	uxtb	r0, r0
 800964c:	5caa      	ldrb	r2, [r5, r2]
 800964e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009652:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009654:	1d62      	adds	r2, r4, #5
 8009656:	b2d2      	uxtb	r2, r2
 8009658:	5c28      	ldrb	r0, [r5, r0]
 800965a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800965e:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009660:	3406      	adds	r4, #6
 8009662:	b2e4      	uxtb	r4, r4
 8009664:	5caa      	ldrb	r2, [r5, r2]
 8009666:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800966a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800966e:	fb00 f202 	mul.w	r2, r0, r2
 8009672:	0a12      	lsrs	r2, r2, #8
 8009674:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8009678:	c903      	ldmia	r1, {r0, r1}
 800967a:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800967e:	4a4e      	ldr	r2, [pc, #312]	@ (80097b8 <ProcessMacCommands+0x5f0>)
 8009680:	441a      	add	r2, r3
 8009682:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8009684:	4658      	mov	r0, fp
 8009686:	f008 ff5b 	bl	8012540 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800968a:	4e4a      	ldr	r6, [pc, #296]	@ (80097b4 <ProcessMacCommands+0x5ec>)
 800968c:	f8d6 333c 	ldr.w	r3, [r6, #828]	@ 0x33c
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	f8d6 3338 	ldr.w	r3, [r6, #824]	@ 0x338
 8009696:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800969a:	a80c      	add	r0, sp, #48	@ 0x30
 800969c:	f008 ff0f 	bl	80124be <SysTimeSub>
 80096a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096a6:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80096aa:	4650      	mov	r0, sl
 80096ac:	f008 fee8 	bl	8012480 <SysTimeAdd>
                    SysTimeSet( sysTime );
 80096b0:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80096b4:	f008 ff22 	bl	80124fc <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80096b8:	f002 fe6a 	bl	800c390 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80096bc:	2301      	movs	r3, #1
 80096be:	f886 3438 	strb.w	r3, [r6, #1080]	@ 0x438
 80096c2:	e594      	b.n	80091ee <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80096c4:	200c      	movs	r0, #12
 80096c6:	f003 f8c5 	bl	800c854 <LoRaMacConfirmQueueIsCmdActive>
 80096ca:	b908      	cbnz	r0, 80096d0 <ProcessMacCommands+0x508>
        switch( payload[macIndex++] )
 80096cc:	4634      	mov	r4, r6
 80096ce:	e58e      	b.n	80091ee <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80096d0:	210c      	movs	r1, #12
 80096d2:	2000      	movs	r0, #0
 80096d4:	f003 f872 	bl	800c7bc <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80096d8:	4b36      	ldr	r3, [pc, #216]	@ (80097b4 <ProcessMacCommands+0x5ec>)
 80096da:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 80096de:	3b04      	subs	r3, #4
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d801      	bhi.n	80096ea <ProcessMacCommands+0x522>
        switch( payload[macIndex++] )
 80096e6:	4634      	mov	r4, r6
 80096e8:	e581      	b.n	80091ee <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 80096ea:	f002 fe4d 	bl	800c388 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 80096ee:	4634      	mov	r4, r6
 80096f0:	e57d      	b.n	80091ee <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 80096f2:	1ca2      	adds	r2, r4, #2
 80096f4:	b2d2      	uxtb	r2, r2
 80096f6:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80096f8:	1ce1      	adds	r1, r4, #3
 80096fa:	b2c9      	uxtb	r1, r1
 80096fc:	5caa      	ldrb	r2, [r5, r2]
 80096fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009702:	1d22      	adds	r2, r4, #4
 8009704:	b2d2      	uxtb	r2, r2
 8009706:	5c69      	ldrb	r1, [r5, r1]
 8009708:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800970c:	3405      	adds	r4, #5
 800970e:	b2e4      	uxtb	r4, r4
 8009710:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8009712:	2164      	movs	r1, #100	@ 0x64
 8009714:	fb03 f101 	mul.w	r1, r3, r1
 8009718:	f000 000f 	and.w	r0, r0, #15
 800971c:	f002 fe35 	bl	800c38a <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8009720:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8009724:	2201      	movs	r2, #1
 8009726:	a90b      	add	r1, sp, #44	@ 0x2c
 8009728:	2011      	movs	r0, #17
 800972a:	f002 fecb 	bl	800c4c4 <LoRaMacCommandsAddCmd>
                break;
 800972e:	e55e      	b.n	80091ee <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8009730:	200d      	movs	r0, #13
 8009732:	f003 f88f 	bl	800c854 <LoRaMacConfirmQueueIsCmdActive>
 8009736:	b908      	cbnz	r0, 800973c <ProcessMacCommands+0x574>
        switch( payload[macIndex++] )
 8009738:	4634      	mov	r4, r6
 800973a:	e558      	b.n	80091ee <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800973c:	210d      	movs	r1, #13
 800973e:	2000      	movs	r0, #0
 8009740:	f003 f83c 	bl	800c7bc <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8009744:	1ca2      	adds	r2, r4, #2
 8009746:	b2d2      	uxtb	r2, r2
 8009748:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800974a:	1ce3      	adds	r3, r4, #3
 800974c:	b2db      	uxtb	r3, r3
 800974e:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8009750:	3404      	adds	r4, #4
 8009752:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8009754:	4a19      	ldr	r2, [pc, #100]	@ (80097bc <ProcessMacCommands+0x5f4>)
 8009756:	6812      	ldr	r2, [r2, #0]
 8009758:	5ce9      	ldrb	r1, [r5, r3]
 800975a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800975e:	f002 fe16 	bl	800c38e <LoRaMacClassBBeaconTimingAns>
 8009762:	e544      	b.n	80091ee <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 8009764:	1ca1      	adds	r1, r4, #2
 8009766:	b2c9      	uxtb	r1, r1
 8009768:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800976a:	1ce2      	adds	r2, r4, #3
 800976c:	b2d2      	uxtb	r2, r2
 800976e:	5c69      	ldrb	r1, [r5, r1]
 8009770:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009774:	3404      	adds	r4, #4
 8009776:	b2e4      	uxtb	r4, r4
 8009778:	5caa      	ldrb	r2, [r5, r2]
 800977a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800977e:	2064      	movs	r0, #100	@ 0x64
 8009780:	fb03 f000 	mul.w	r0, r3, r0
 8009784:	f002 fe05 	bl	800c392 <LoRaMacClassBBeaconFreqReq>
 8009788:	b140      	cbz	r0, 800979c <ProcessMacCommands+0x5d4>
                        macCmdPayload[0] = 1;
 800978a:	2301      	movs	r3, #1
 800978c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8009790:	2201      	movs	r2, #1
 8009792:	a90b      	add	r1, sp, #44	@ 0x2c
 8009794:	2013      	movs	r0, #19
 8009796:	f002 fe95 	bl	800c4c4 <LoRaMacCommandsAddCmd>
                break;
 800979a:	e528      	b.n	80091ee <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80097a2:	e7f5      	b.n	8009790 <ProcessMacCommands+0x5c8>
}
 80097a4:	b00f      	add	sp, #60	@ 0x3c
 80097a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097aa:	bf00      	nop
 80097ac:	2000090c 	.word	0x2000090c
 80097b0:	0801372c 	.word	0x0801372c
 80097b4:	20000ed8 	.word	0x20000ed8
 80097b8:	12d53d80 	.word	0x12d53d80
 80097bc:	20000864 	.word	0x20000864

080097c0 <ProcessRadioRxDone>:
{
 80097c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097c4:	b0a5      	sub	sp, #148	@ 0x94
    uint8_t *payload = RxDoneParams.Payload;
 80097c6:	4bb4      	ldr	r3, [pc, #720]	@ (8009a98 <ProcessRadioRxDone+0x2d8>)
 80097c8:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 80097ca:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80097cc:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 80097d0:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80097d8:	4ab0      	ldr	r2, [pc, #704]	@ (8009a9c <ProcessRadioRxDone+0x2dc>)
 80097da:	f8d2 90e4 	ldr.w	r9, [r2, #228]	@ 0xe4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 80097de:	4ab0      	ldr	r2, [pc, #704]	@ (8009aa0 <ProcessRadioRxDone+0x2e0>)
 80097e0:	7811      	ldrb	r1, [r2, #0]
 80097e2:	f363 0100 	bfi	r1, r3, #0, #1
 80097e6:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 80097e8:	4cae      	ldr	r4, [pc, #696]	@ (8009aa4 <ProcessRadioRxDone+0x2e4>)
 80097ea:	f884 3444 	strb.w	r3, [r4, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 80097ee:	f8a4 848c 	strh.w	r8, [r4, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 80097f2:	f884 748e 	strb.w	r7, [r4, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80097f6:	f894 2490 	ldrb.w	r2, [r4, #1168]	@ 0x490
 80097fa:	f884 248f 	strb.w	r2, [r4, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 80097fe:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 8009802:	f884 3422 	strb.w	r3, [r4, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8009806:	f884 3425 	strb.w	r3, [r4, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800980a:	f8c4 3428 	str.w	r3, [r4, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800980e:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 8009812:	f884 342d 	strb.w	r3, [r4, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 8009816:	f884 342e 	strb.w	r3, [r4, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800981a:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800981e:	f884 3420 	strb.w	r3, [r4, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8009822:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8009826:	f884 3438 	strb.w	r3, [r4, #1080]	@ 0x438
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800982a:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    Radio.Sleep( );
 800982e:	4b9e      	ldr	r3, [pc, #632]	@ (8009aa8 <ProcessRadioRxDone+0x2e8>)
 8009830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009832:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8009834:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 8009838:	b1d3      	cbz	r3, 8009870 <ProcessRadioRxDone+0xb0>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800983a:	4629      	mov	r1, r5
 800983c:	4630      	mov	r0, r6
 800983e:	f002 fd90 	bl	800c362 <LoRaMacClassBRxBeacon>
 8009842:	b9d0      	cbnz	r0, 800987a <ProcessRadioRxDone+0xba>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009844:	4b95      	ldr	r3, [pc, #596]	@ (8009a9c <ProcessRadioRxDone+0x2dc>)
 8009846:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800984a:	2b01      	cmp	r3, #1
 800984c:	d01d      	beq.n	800988a <ProcessRadioRxDone+0xca>
    if( size == 0 )
 800984e:	2d00      	cmp	r5, #0
 8009850:	d038      	beq.n	80098c4 <ProcessRadioRxDone+0x104>
    macHdr.Value = payload[pktHeaderLen++];
 8009852:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 8009854:	0963      	lsrs	r3, r4, #5
 8009856:	3b01      	subs	r3, #1
 8009858:	2b06      	cmp	r3, #6
 800985a:	f200 8319 	bhi.w	8009e90 <ProcessRadioRxDone+0x6d0>
 800985e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009862:	0038      	.short	0x0038
 8009864:	00ef0317 	.word	0x00ef0317
 8009868:	00eb0317 	.word	0x00eb0317
 800986c:	02eb0317 	.word	0x02eb0317
        TimerStop( &MacCtx.RxWindowTimer2 );
 8009870:	f504 7066 	add.w	r0, r4, #920	@ 0x398
 8009874:	f008 ff06 	bl	8012684 <UTIL_TIMER_Stop>
 8009878:	e7df      	b.n	800983a <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800987a:	4b8a      	ldr	r3, [pc, #552]	@ (8009aa4 <ProcessRadioRxDone+0x2e4>)
 800987c:	f8a3 847e 	strh.w	r8, [r3, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8009880:	f883 7480 	strb.w	r7, [r3, #1152]	@ 0x480
}
 8009884:	b025      	add	sp, #148	@ 0x94
 8009886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800988a:	f002 fd6e 	bl	800c36a <LoRaMacClassBIsPingExpected>
 800988e:	b150      	cbz	r0, 80098a6 <ProcessRadioRxDone+0xe6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009890:	2000      	movs	r0, #0
 8009892:	f002 fd5f 	bl	800c354 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009896:	2000      	movs	r0, #0
 8009898:	f002 fd61 	bl	800c35e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800989c:	4b81      	ldr	r3, [pc, #516]	@ (8009aa4 <ProcessRadioRxDone+0x2e4>)
 800989e:	2204      	movs	r2, #4
 80098a0:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 80098a4:	e7d3      	b.n	800984e <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80098a6:	f002 fd62 	bl	800c36e <LoRaMacClassBIsMulticastExpected>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	d0cf      	beq.n	800984e <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80098ae:	2000      	movs	r0, #0
 80098b0:	f002 fd51 	bl	800c356 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80098b4:	2000      	movs	r0, #0
 80098b6:	f002 fd53 	bl	800c360 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80098ba:	4b7a      	ldr	r3, [pc, #488]	@ (8009aa4 <ProcessRadioRxDone+0x2e4>)
 80098bc:	2205      	movs	r2, #5
 80098be:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 80098c2:	e7c4      	b.n	800984e <ProcessRadioRxDone+0x8e>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80098c4:	4b77      	ldr	r3, [pc, #476]	@ (8009aa4 <ProcessRadioRxDone+0x2e4>)
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 80098cc:	f7ff fc04 	bl	80090d8 <PrepareRxDoneAbort>
        return;
 80098d0:	e7d8      	b.n	8009884 <ProcessRadioRxDone+0xc4>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80098d2:	2d10      	cmp	r5, #16
 80098d4:	f240 808c 	bls.w	80099f0 <ProcessRadioRxDone+0x230>
            macMsgJoinAccept.Buffer = payload;
 80098d8:	9608      	str	r6, [sp, #32]
            macMsgJoinAccept.BufSize = size;
 80098da:	b2ed      	uxtb	r5, r5
 80098dc:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80098e0:	4b6e      	ldr	r3, [pc, #440]	@ (8009a9c <ProcessRadioRxDone+0x2dc>)
 80098e2:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f040 8089 	bne.w	80099fe <ProcessRadioRxDone+0x23e>
            SecureElementGetJoinEui( joinEui );
 80098ec:	a804      	add	r0, sp, #16
 80098ee:	f006 fbc3 	bl	8010078 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 80098f2:	aa08      	add	r2, sp, #32
 80098f4:	a904      	add	r1, sp, #16
 80098f6:	20ff      	movs	r0, #255	@ 0xff
 80098f8:	f003 fb28 	bl	800cf4c <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80098fc:	2800      	cmp	r0, #0
 80098fe:	f040 8090 	bne.w	8009a22 <ProcessRadioRxDone+0x262>
                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 8009902:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8009906:	f003 030f 	and.w	r3, r3, #15
 800990a:	2b0f      	cmp	r3, #15
 800990c:	d012      	beq.n	8009934 <ProcessRadioRxDone+0x174>
                    verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800990e:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8009912:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009916:	f88d 300c 	strb.w	r3, [sp, #12]
                    verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800991a:	4b60      	ldr	r3, [pc, #384]	@ (8009a9c <ProcessRadioRxDone+0x2dc>)
 800991c:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8009920:	f88d 200d 	strb.w	r2, [sp, #13]
                    if( RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR ) == false )
 8009924:	2207      	movs	r2, #7
 8009926:	a903      	add	r1, sp, #12
 8009928:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800992c:	f003 fd21 	bl	800d372 <RegionVerify>
 8009930:	2800      	cmp	r0, #0
 8009932:	d06b      	beq.n	8009a0c <ProcessRadioRxDone+0x24c>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8009934:	f89d 3029 	ldrb.w	r3, [sp, #41]	@ 0x29
 8009938:	4c58      	ldr	r4, [pc, #352]	@ (8009a9c <ProcessRadioRxDone+0x2dc>)
 800993a:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800993e:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 8009942:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009946:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800994a:	f89d 202b 	ldrb.w	r2, [sp, #43]	@ 0x2b
 800994e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009952:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8009956:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009958:	f8c4 10e4 	str.w	r1, [r4, #228]	@ 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800995c:	2002      	movs	r0, #2
 800995e:	f006 fb99 	bl	8010094 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8009962:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8009966:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800996a:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800996e:	f003 030f 	and.w	r3, r3, #15
 8009972:	2b0f      	cmp	r3, #15
 8009974:	d007      	beq.n	8009986 <ProcessRadioRxDone+0x1c6>
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009976:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800997a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800997e:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009982:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8009986:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 800998a:	4a44      	ldr	r2, [pc, #272]	@ (8009a9c <ProcessRadioRxDone+0x2dc>)
 800998c:	6593      	str	r3, [r2, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800998e:	b913      	cbnz	r3, 8009996 <ProcessRadioRxDone+0x1d6>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8009990:	4613      	mov	r3, r2
 8009992:	2201      	movs	r2, #1
 8009994:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8009996:	4c41      	ldr	r4, [pc, #260]	@ (8009a9c <ProcessRadioRxDone+0x2dc>)
 8009998:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800999a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800999e:	fb02 f303 	mul.w	r3, r2, r3
 80099a2:	65a3      	str	r3, [r4, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80099a4:	4413      	add	r3, r2
 80099a6:	65e3      	str	r3, [r4, #92]	@ 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 80099a8:	2601      	movs	r6, #1
 80099aa:	f884 6068 	strb.w	r6, [r4, #104]	@ 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80099ae:	2300      	movs	r3, #0
 80099b0:	f884 312e 	strb.w	r3, [r4, #302]	@ 0x12e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80099b4:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80099b8:	9322      	str	r3, [sp, #136]	@ 0x88
                applyCFList.Size = size - 17;
 80099ba:	3d11      	subs	r5, #17
 80099bc:	f88d 508c 	strb.w	r5, [sp, #140]	@ 0x8c
                applyCFList.JoinChannel = MacCtx.Channel;
 80099c0:	4b38      	ldr	r3, [pc, #224]	@ (8009aa4 <ProcessRadioRxDone+0x2e4>)
 80099c2:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 80099c6:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80099ca:	a921      	add	r1, sp, #132	@ 0x84
 80099cc:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 80099d0:	f003 fcdf 	bl	800d392 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80099d4:	2302      	movs	r3, #2
 80099d6:	f884 3130 	strb.w	r3, [r4, #304]	@ 0x130
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80099da:	4630      	mov	r0, r6
 80099dc:	f002 ff3a 	bl	800c854 <LoRaMacConfirmQueueIsCmdActive>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	f000 8241 	beq.w	8009e68 <ProcessRadioRxDone+0x6a8>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 80099e6:	4631      	mov	r1, r6
 80099e8:	2000      	movs	r0, #0
 80099ea:	f002 fee7 	bl	800c7bc <LoRaMacConfirmQueueSetStatus>
 80099ee:	e23b      	b.n	8009e68 <ProcessRadioRxDone+0x6a8>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80099f0:	4b2c      	ldr	r3, [pc, #176]	@ (8009aa4 <ProcessRadioRxDone+0x2e4>)
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 80099f8:	f7ff fb6e 	bl	80090d8 <PrepareRxDoneAbort>
                return;
 80099fc:	e742      	b.n	8009884 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80099fe:	4b29      	ldr	r3, [pc, #164]	@ (8009aa4 <ProcessRadioRxDone+0x2e4>)
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8009a06:	f7ff fb67 	bl	80090d8 <PrepareRxDoneAbort>
                return;
 8009a0a:	e73b      	b.n	8009884 <ProcessRadioRxDone+0xc4>
                        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009a0c:	2001      	movs	r0, #1
 8009a0e:	f002 ff21 	bl	800c854 <LoRaMacConfirmQueueIsCmdActive>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	f000 8228 	beq.w	8009e68 <ProcessRadioRxDone+0x6a8>
                            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8009a18:	2101      	movs	r1, #1
 8009a1a:	2007      	movs	r0, #7
 8009a1c:	f002 fece 	bl	800c7bc <LoRaMacConfirmQueueSetStatus>
 8009a20:	e222      	b.n	8009e68 <ProcessRadioRxDone+0x6a8>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009a22:	2001      	movs	r0, #1
 8009a24:	f002 ff16 	bl	800c854 <LoRaMacConfirmQueueIsCmdActive>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	f000 821d 	beq.w	8009e68 <ProcessRadioRxDone+0x6a8>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8009a2e:	2101      	movs	r1, #1
 8009a30:	2007      	movs	r0, #7
 8009a32:	f002 fec3 	bl	800c7bc <LoRaMacConfirmQueueSetStatus>
 8009a36:	e217      	b.n	8009e68 <ProcessRadioRxDone+0x6a8>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009a38:	4b1a      	ldr	r3, [pc, #104]	@ (8009aa4 <ProcessRadioRxDone+0x2e4>)
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009a40:	4b16      	ldr	r3, [pc, #88]	@ (8009a9c <ProcessRadioRxDone+0x2dc>)
 8009a42:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8009a46:	f88d 207e 	strb.w	r2, [sp, #126]	@ 0x7e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8009a4a:	4a16      	ldr	r2, [pc, #88]	@ (8009aa4 <ProcessRadioRxDone+0x2e4>)
 8009a4c:	f992 2424 	ldrsb.w	r2, [r2, #1060]	@ 0x424
 8009a50:	f88d 207d 	strb.w	r2, [sp, #125]	@ 0x7d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009a54:	220d      	movs	r2, #13
 8009a56:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8009a5a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8009a5e:	b113      	cbz	r3, 8009a66 <ProcessRadioRxDone+0x2a6>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009a60:	230e      	movs	r3, #14
 8009a62:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009a66:	a91f      	add	r1, sp, #124	@ 0x7c
 8009a68:	4b0c      	ldr	r3, [pc, #48]	@ (8009a9c <ProcessRadioRxDone+0x2dc>)
 8009a6a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8009a6e:	f003 fc4e 	bl	800d30e <RegionGetPhyParam>
 8009a72:	901e      	str	r0, [sp, #120]	@ 0x78
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8009a74:	f1a5 030d 	sub.w	r3, r5, #13
 8009a78:	b21b      	sxth	r3, r3
 8009a7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009a7e:	b200      	sxth	r0, r0
 8009a80:	4283      	cmp	r3, r0
 8009a82:	dc01      	bgt.n	8009a88 <ProcessRadioRxDone+0x2c8>
 8009a84:	2d0b      	cmp	r5, #11
 8009a86:	d811      	bhi.n	8009aac <ProcessRadioRxDone+0x2ec>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009a88:	4b06      	ldr	r3, [pc, #24]	@ (8009aa4 <ProcessRadioRxDone+0x2e4>)
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8009a90:	f7ff fb22 	bl	80090d8 <PrepareRxDoneAbort>
                return;
 8009a94:	e6f6      	b.n	8009884 <ProcessRadioRxDone+0xc4>
 8009a96:	bf00      	nop
 8009a98:	20000864 	.word	0x20000864
 8009a9c:	2000090c 	.word	0x2000090c
 8009aa0:	20000878 	.word	0x20000878
 8009aa4:	20000ed8 	.word	0x20000ed8
 8009aa8:	08013b98 	.word	0x08013b98
            macMsgData.Buffer = payload;
 8009aac:	9612      	str	r6, [sp, #72]	@ 0x48
            macMsgData.BufSize = size;
 8009aae:	f88d 504c 	strb.w	r5, [sp, #76]	@ 0x4c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8009ab2:	4ba5      	ldr	r3, [pc, #660]	@ (8009d48 <ProcessRadioRxDone+0x588>)
 8009ab4:	931b      	str	r3, [sp, #108]	@ 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8009ab6:	23ff      	movs	r3, #255	@ 0xff
 8009ab8:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009abc:	a812      	add	r0, sp, #72	@ 0x48
 8009abe:	f003 fb17 	bl	800d0f0 <LoRaMacParserData>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d136      	bne.n	8009b34 <ProcessRadioRxDone+0x374>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009ac6:	4ba1      	ldr	r3, [pc, #644]	@ (8009d4c <ProcessRadioRxDone+0x58c>)
 8009ac8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d038      	beq.n	8009b42 <ProcessRadioRxDone+0x382>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8009ad0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009ad2:	4b9f      	ldr	r3, [pc, #636]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009ad4:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8009ad8:	a904      	add	r1, sp, #16
 8009ada:	a812      	add	r0, sp, #72	@ 0x48
 8009adc:	f7ff f962 	bl	8008da4 <DetermineFrameType>
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d158      	bne.n	8009b98 <ProcessRadioRxDone+0x3d8>
            downLinkCounter = 0;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	9307      	str	r3, [sp, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d05a      	beq.n	8009ba6 <ProcessRadioRxDone+0x3e6>
 8009af0:	2601      	movs	r6, #1
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8009af2:	ab07      	add	r3, sp, #28
 8009af4:	9301      	str	r3, [sp, #4]
 8009af6:	f10d 031b 	add.w	r3, sp, #27
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	4b93      	ldr	r3, [pc, #588]	@ (8009d4c <ProcessRadioRxDone+0x58c>)
 8009afe:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8009b02:	aa12      	add	r2, sp, #72	@ 0x48
 8009b04:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f7ff fb23 	bl	8009154 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	f000 808b 	beq.w	8009c2a <ProcessRadioRxDone+0x46a>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8009b14:	2807      	cmp	r0, #7
 8009b16:	f000 8083 	beq.w	8009c20 <ProcessRadioRxDone+0x460>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009b1a:	4b8d      	ldr	r3, [pc, #564]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009b22:	9a07      	ldr	r2, [sp, #28]
 8009b24:	4b8a      	ldr	r3, [pc, #552]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009b26:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8009b2a:	f8c3 246c 	str.w	r2, [r3, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 8009b2e:	f7ff fad3 	bl	80090d8 <PrepareRxDoneAbort>
                return;
 8009b32:	e6a7      	b.n	8009884 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009b34:	4b86      	ldr	r3, [pc, #536]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8009b3c:	f7ff facc 	bl	80090d8 <PrepareRxDoneAbort>
                return;
 8009b40:	e6a0      	b.n	8009884 <ProcessRadioRxDone+0xc4>
                if( LoRaMacClassBIsPingExpected( ) == true )
 8009b42:	f002 fc12 	bl	800c36a <LoRaMacClassBIsPingExpected>
 8009b46:	b188      	cbz	r0, 8009b6c <ProcessRadioRxDone+0x3ac>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009b48:	2000      	movs	r0, #0
 8009b4a:	f002 fc03 	bl	800c354 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8009b4e:	2000      	movs	r0, #0
 8009b50:	f002 fc05 	bl	800c35e <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8009b54:	4b7e      	ldr	r3, [pc, #504]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009b56:	2204      	movs	r2, #4
 8009b58:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8009b5c:	f89d 1054 	ldrb.w	r1, [sp, #84]	@ 0x54
 8009b60:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8009b64:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8009b66:	f002 fc19 	bl	800c39c <LoRaMacClassBSetFPendingBit>
 8009b6a:	e7b1      	b.n	8009ad0 <ProcessRadioRxDone+0x310>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009b6c:	f002 fbff 	bl	800c36e <LoRaMacClassBIsMulticastExpected>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d0ad      	beq.n	8009ad0 <ProcessRadioRxDone+0x310>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009b74:	2000      	movs	r0, #0
 8009b76:	f002 fbee 	bl	800c356 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	f002 fbf0 	bl	800c360 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8009b80:	4b73      	ldr	r3, [pc, #460]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009b82:	2205      	movs	r2, #5
 8009b84:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8009b88:	f89d 1054 	ldrb.w	r1, [sp, #84]	@ 0x54
 8009b8c:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8009b90:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8009b92:	f002 fc03 	bl	800c39c <LoRaMacClassBSetFPendingBit>
 8009b96:	e79b      	b.n	8009ad0 <ProcessRadioRxDone+0x310>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009b98:	4b6d      	ldr	r3, [pc, #436]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8009ba0:	f7ff fa9a 	bl	80090d8 <PrepareRxDoneAbort>
                return;
 8009ba4:	e66e      	b.n	8009884 <ProcessRadioRxDone+0xc4>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8009bac:	4a67      	ldr	r2, [pc, #412]	@ (8009d4c <ProcessRadioRxDone+0x58c>)
 8009bae:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8009bb2:	f8d2 20ec 	ldr.w	r2, [r2, #236]	@ 0xec
 8009bb6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8009bb8:	428a      	cmp	r2, r1
 8009bba:	d002      	beq.n	8009bc2 <ProcessRadioRxDone+0x402>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	e794      	b.n	8009aec <ProcessRadioRxDone+0x32c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8009bc2:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8009bc6:	4961      	ldr	r1, [pc, #388]	@ (8009d4c <ProcessRadioRxDone+0x58c>)
 8009bc8:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8009bcc:	f891 10e9 	ldrb.w	r1, [r1, #233]	@ 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009bd0:	2900      	cmp	r1, #0
 8009bd2:	d0f3      	beq.n	8009bbc <ProcessRadioRxDone+0x3fc>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8009bd4:	4b5d      	ldr	r3, [pc, #372]	@ (8009d4c <ProcessRadioRxDone+0x58c>)
 8009bd6:	2130      	movs	r1, #48	@ 0x30
 8009bd8:	fb01 3000 	mla	r0, r1, r0, r3
 8009bdc:	f890 60ea 	ldrb.w	r6, [r0, #234]	@ 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8009be0:	f8d0 110c 	ldr.w	r1, [r0, #268]	@ 0x10c
 8009be4:	6809      	ldr	r1, [r1, #0]
 8009be6:	9107      	str	r1, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8009be8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d00b      	beq.n	8009c08 <ProcessRadioRxDone+0x448>
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8009bf0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009bf4:	2b03      	cmp	r3, #3
 8009bf6:	d10c      	bne.n	8009c12 <ProcessRadioRxDone+0x452>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8009bf8:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8009bfc:	f013 0f60 	tst.w	r3, #96	@ 0x60
 8009c00:	d107      	bne.n	8009c12 <ProcessRadioRxDone+0x452>
 8009c02:	4691      	mov	r9, r2
 8009c04:	2501      	movs	r5, #1
 8009c06:	e774      	b.n	8009af2 <ProcessRadioRxDone+0x332>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009c08:	4b51      	ldr	r3, [pc, #324]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009c0a:	2103      	movs	r1, #3
 8009c0c:	f883 148f 	strb.w	r1, [r3, #1167]	@ 0x48f
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8009c10:	e7ee      	b.n	8009bf0 <ProcessRadioRxDone+0x430>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009c12:	4b4f      	ldr	r3, [pc, #316]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009c14:	2201      	movs	r2, #1
 8009c16:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8009c1a:	f7ff fa5d 	bl	80090d8 <PrepareRxDoneAbort>
                return;
 8009c1e:	e631      	b.n	8009884 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8009c20:	4b4b      	ldr	r3, [pc, #300]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009c22:	2208      	movs	r2, #8
 8009c24:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 8009c28:	e77b      	b.n	8009b22 <ProcessRadioRxDone+0x362>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8009c2a:	ab12      	add	r3, sp, #72	@ 0x48
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	9b07      	ldr	r3, [sp, #28]
 8009c30:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8009c34:	4649      	mov	r1, r9
 8009c36:	4630      	mov	r0, r6
 8009c38:	f003 f8e0 	bl	800cdfc <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d14e      	bne.n	8009cde <ProcessRadioRxDone+0x51e>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009c40:	4b43      	ldr	r3, [pc, #268]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009c42:	2100      	movs	r1, #0
 8009c44:	f883 1421 	strb.w	r1, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 8009c48:	f883 5422 	strb.w	r5, [r3, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 8009c4c:	f8c3 1428 	str.w	r1, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8009c50:	f883 142c 	strb.w	r1, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009c54:	9a07      	ldr	r2, [sp, #28]
 8009c56:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8009c5a:	f8c3 246c 	str.w	r2, [r3, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009c5e:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8009c62:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8009c66:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009c6a:	f883 1441 	strb.w	r1, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009c6e:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009c72:	f893 048f 	ldrb.w	r0, [r3, #1167]	@ 0x48f
 8009c76:	2801      	cmp	r0, #1
 8009c78:	d93f      	bls.n	8009cfa <ProcessRadioRxDone+0x53a>
            if( multicast == 1 )
 8009c7a:	2d01      	cmp	r5, #1
 8009c7c:	d043      	beq.n	8009d06 <ProcessRadioRxDone+0x546>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8009c7e:	f004 04e0 	and.w	r4, r4, #224	@ 0xe0
 8009c82:	2ca0      	cmp	r4, #160	@ 0xa0
 8009c84:	d044      	beq.n	8009d10 <ProcessRadioRxDone+0x550>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8009c86:	2300      	movs	r3, #0
 8009c88:	4a30      	ldr	r2, [pc, #192]	@ (8009d4c <ProcessRadioRxDone+0x58c>)
 8009c8a:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009c8e:	4a30      	ldr	r2, [pc, #192]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009c90:	f882 3420 	strb.w	r3, [r2, #1056]	@ 0x420
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 8009c94:	4b2d      	ldr	r3, [pc, #180]	@ (8009d4c <ProcessRadioRxDone+0x58c>)
 8009c96:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009c9a:	b923      	cbnz	r3, 8009ca6 <ProcessRadioRxDone+0x4e6>
 8009c9c:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8009ca0:	f013 0f10 	tst.w	r3, #16
 8009ca4:	d003      	beq.n	8009cae <ProcessRadioRxDone+0x4ee>
 8009ca6:	4b29      	ldr	r3, [pc, #164]	@ (8009d4c <ProcessRadioRxDone+0x58c>)
 8009ca8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009cac:	b11b      	cbz	r3, 8009cb6 <ProcessRadioRxDone+0x4f6>
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) 
 8009cae:	4b28      	ldr	r3, [pc, #160]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009cb0:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 8009cb4:	b11b      	cbz	r3, 8009cbe <ProcessRadioRxDone+0x4fe>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8009cb6:	4b26      	ldr	r3, [pc, #152]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8009cbe:	4b24      	ldr	r3, [pc, #144]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009cc0:	f893 2440 	ldrb.w	r2, [r3, #1088]	@ 0x440
 8009cc4:	f89d 1054 	ldrb.w	r1, [sp, #84]	@ 0x54
 8009cc8:	f7ff fa6f 	bl	80091aa <RemoveMacCommands>
            switch( fType )
 8009ccc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009cd0:	2b03      	cmp	r3, #3
 8009cd2:	f200 809a 	bhi.w	8009e0a <ProcessRadioRxDone+0x64a>
 8009cd6:	e8df f003 	tbb	[pc, r3]
 8009cda:	663f      	.short	0x663f
 8009cdc:	8878      	.short	0x8878
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8009cde:	2802      	cmp	r0, #2
 8009ce0:	d006      	beq.n	8009cf0 <ProcessRadioRxDone+0x530>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8009ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009ce4:	220b      	movs	r2, #11
 8009ce6:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 8009cea:	f7ff f9f5 	bl	80090d8 <PrepareRxDoneAbort>
                return;
 8009cee:	e5c9      	b.n	8009884 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8009cf0:	4b17      	ldr	r3, [pc, #92]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009cf2:	220a      	movs	r2, #10
 8009cf4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 8009cf8:	e7f7      	b.n	8009cea <ProcessRadioRxDone+0x52a>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8009cfa:	4b14      	ldr	r3, [pc, #80]	@ (8009d4c <ProcessRadioRxDone+0x58c>)
 8009cfc:	6299      	str	r1, [r3, #40]	@ 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
 8009d04:	e7b9      	b.n	8009c7a <ProcessRadioRxDone+0x4ba>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8009d06:	4b12      	ldr	r3, [pc, #72]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009d08:	2202      	movs	r2, #2
 8009d0a:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 8009d0e:	e7c1      	b.n	8009c94 <ProcessRadioRxDone+0x4d4>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8009d10:	4b0e      	ldr	r3, [pc, #56]	@ (8009d4c <ProcessRadioRxDone+0x58c>)
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009d18:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 8009d1c:	b913      	cbnz	r3, 8009d24 <ProcessRadioRxDone+0x564>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8009d1e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009d20:	4b0a      	ldr	r3, [pc, #40]	@ (8009d4c <ProcessRadioRxDone+0x58c>)
 8009d22:	635a      	str	r2, [r3, #52]	@ 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009d24:	4b0a      	ldr	r3, [pc, #40]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8009d2c:	4290      	cmp	r0, r2
 8009d2e:	d9b1      	bls.n	8009c94 <ProcessRadioRxDone+0x4d4>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8009d30:	4b06      	ldr	r3, [pc, #24]	@ (8009d4c <ProcessRadioRxDone+0x58c>)
 8009d32:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8009d36:	4b06      	ldr	r3, [pc, #24]	@ (8009d50 <ProcessRadioRxDone+0x590>)
 8009d38:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8009d3c:	4a05      	ldr	r2, [pc, #20]	@ (8009d54 <ProcessRadioRxDone+0x594>)
 8009d3e:	6812      	ldr	r2, [r2, #0]
 8009d40:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
 8009d44:	e7a6      	b.n	8009c94 <ProcessRadioRxDone+0x4d4>
 8009d46:	bf00      	nop
 8009d48:	20001110 	.word	0x20001110
 8009d4c:	2000090c 	.word	0x2000090c
 8009d50:	20000ed8 	.word	0x20000ed8
 8009d54:	20000864 	.word	0x20000864
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8009d58:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8009d5c:	4c57      	ldr	r4, [pc, #348]	@ (8009ebc <ProcessRadioRxDone+0x6fc>)
 8009d5e:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	463b      	mov	r3, r7
 8009d66:	f002 020f 	and.w	r2, r2, #15
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	a816      	add	r0, sp, #88	@ 0x58
 8009d6e:	f7ff fa2b 	bl	80091c8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009d72:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 8009d76:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009d7a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009d7c:	f8c4 3428 	str.w	r3, [r4, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009d80:	f89d 3070 	ldrb.w	r3, [sp, #112]	@ 0x70
 8009d84:	f884 342c 	strb.w	r3, [r4, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	f884 342d 	strb.w	r3, [r4, #1069]	@ 0x42d
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8009d8e:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 8009d92:	2be0      	cmp	r3, #224	@ 0xe0
 8009d94:	d040      	beq.n	8009e18 <ProcessRadioRxDone+0x658>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009d96:	4a49      	ldr	r2, [pc, #292]	@ (8009ebc <ProcessRadioRxDone+0x6fc>)
 8009d98:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8009d9c:	f043 0302 	orr.w	r3, r3, #2
 8009da0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 8009da4:	e060      	b.n	8009e68 <ProcessRadioRxDone+0x6a8>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8009da6:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8009daa:	4c44      	ldr	r4, [pc, #272]	@ (8009ebc <ProcessRadioRxDone+0x6fc>)
 8009dac:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	463b      	mov	r3, r7
 8009db4:	f002 020f 	and.w	r2, r2, #15
 8009db8:	2100      	movs	r1, #0
 8009dba:	a816      	add	r0, sp, #88	@ 0x58
 8009dbc:	f7ff fa04 	bl	80091c8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009dc0:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 8009dc4:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    break;
 8009dc8:	e7e1      	b.n	8009d8e <ProcessRadioRxDone+0x5ce>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8009dca:	4c3c      	ldr	r4, [pc, #240]	@ (8009ebc <ProcessRadioRxDone+0x6fc>)
 8009dcc:	f894 348f 	ldrb.w	r3, [r4, #1167]	@ 0x48f
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	463b      	mov	r3, r7
 8009dd4:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8009dd8:	2100      	movs	r1, #0
 8009dda:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8009ddc:	f7ff f9f4 	bl	80091c8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009de0:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 8009de4:	f884 3423 	strb.w	r3, [r4, #1059]	@ 0x423
                    break;
 8009de8:	e7d1      	b.n	8009d8e <ProcessRadioRxDone+0x5ce>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009dea:	f89d 2068 	ldrb.w	r2, [sp, #104]	@ 0x68
 8009dee:	4b33      	ldr	r3, [pc, #204]	@ (8009ebc <ProcessRadioRxDone+0x6fc>)
 8009df0:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009df4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009df6:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009dfa:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8009dfe:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 8009e08:	e7c1      	b.n	8009d8e <ProcessRadioRxDone+0x5ce>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8009ebc <ProcessRadioRxDone+0x6fc>)
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 8009e12:	f7ff f961 	bl	80090d8 <PrepareRxDoneAbort>
                    break;
 8009e16:	e7ba      	b.n	8009d8e <ProcessRadioRxDone+0x5ce>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8009e18:	4a29      	ldr	r2, [pc, #164]	@ (8009ec0 <ProcessRadioRxDone+0x700>)
 8009e1a:	f892 211f 	ldrb.w	r2, [r2, #287]	@ 0x11f
 8009e1e:	2a00      	cmp	r2, #0
 8009e20:	d1b9      	bne.n	8009d96 <ProcessRadioRxDone+0x5d6>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009e22:	4a26      	ldr	r2, [pc, #152]	@ (8009ebc <ProcessRadioRxDone+0x6fc>)
 8009e24:	f882 3423 	strb.w	r3, [r2, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8009e2e:	f882 342c 	strb.w	r3, [r2, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 8009e32:	f882 342d 	strb.w	r3, [r2, #1069]	@ 0x42d
 8009e36:	e7ae      	b.n	8009d96 <ProcessRadioRxDone+0x5d6>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8009e38:	1e6a      	subs	r2, r5, #1
 8009e3a:	4c22      	ldr	r4, [pc, #136]	@ (8009ec4 <ProcessRadioRxDone+0x704>)
 8009e3c:	b292      	uxth	r2, r2
 8009e3e:	1c71      	adds	r1, r6, #1
 8009e40:	4620      	mov	r0, r4
 8009e42:	f006 fa36 	bl	80102b2 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8009e46:	2203      	movs	r2, #3
 8009e48:	f884 21e8 	strb.w	r2, [r4, #488]	@ 0x1e8
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f884 21e9 	strb.w	r2, [r4, #489]	@ 0x1e9
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8009e52:	f8c4 41f0 	str.w	r4, [r4, #496]	@ 0x1f0
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8009e56:	3d01      	subs	r5, #1
 8009e58:	f884 51f4 	strb.w	r5, [r4, #500]	@ 0x1f4
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009e5c:	f894 2259 	ldrb.w	r2, [r4, #601]	@ 0x259
 8009e60:	f042 0202 	orr.w	r2, r2, #2
 8009e64:	f884 2259 	strb.w	r2, [r4, #601]	@ 0x259
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009e68:	4b14      	ldr	r3, [pc, #80]	@ (8009ebc <ProcessRadioRxDone+0x6fc>)
 8009e6a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d915      	bls.n	8009e9e <ProcessRadioRxDone+0x6de>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8009e72:	4b12      	ldr	r3, [pc, #72]	@ (8009ebc <ProcessRadioRxDone+0x6fc>)
 8009e74:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	d006      	beq.n	8009e8a <ProcessRadioRxDone+0x6ca>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8009e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8009ebc <ProcessRadioRxDone+0x6fc>)
 8009e7e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8009e82:	f043 0310 	orr.w	r3, r3, #16
 8009e86:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    UpdateRxSlotIdleState( );
 8009e8a:	f7fe fefd 	bl	8008c88 <UpdateRxSlotIdleState>
 8009e8e:	e4f9      	b.n	8009884 <ProcessRadioRxDone+0xc4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009e90:	4b0a      	ldr	r3, [pc, #40]	@ (8009ebc <ProcessRadioRxDone+0x6fc>)
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 8009e98:	f7ff f91e 	bl	80090d8 <PrepareRxDoneAbort>
            break;
 8009e9c:	e7e4      	b.n	8009e68 <ProcessRadioRxDone+0x6a8>
        if( MacCtx.NodeAckRequested == true )
 8009e9e:	4b07      	ldr	r3, [pc, #28]	@ (8009ebc <ProcessRadioRxDone+0x6fc>)
 8009ea0:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d0e4      	beq.n	8009e72 <ProcessRadioRxDone+0x6b2>
            if( MacCtx.McpsConfirm.AckReceived == true )
 8009ea8:	4b04      	ldr	r3, [pc, #16]	@ (8009ebc <ProcessRadioRxDone+0x6fc>)
 8009eaa:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d0df      	beq.n	8009e72 <ProcessRadioRxDone+0x6b2>
                OnRetransmitTimeoutTimerEvent( NULL );
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	f7ff f8fe 	bl	80090b4 <OnRetransmitTimeoutTimerEvent>
 8009eb8:	e7db      	b.n	8009e72 <ProcessRadioRxDone+0x6b2>
 8009eba:	bf00      	nop
 8009ebc:	20000ed8 	.word	0x20000ed8
 8009ec0:	2000090c 	.word	0x2000090c
 8009ec4:	20001110 	.word	0x20001110

08009ec8 <ProcessRadioTxTimeout>:
{
 8009ec8:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009eca:	4b0f      	ldr	r3, [pc, #60]	@ (8009f08 <ProcessRadioTxTimeout+0x40>)
 8009ecc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d002      	beq.n	8009eda <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8009ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8009f0c <ProcessRadioTxTimeout+0x44>)
 8009ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed8:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8009eda:	f7fe fed5 	bl	8008c88 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8009ede:	4c0c      	ldr	r4, [pc, #48]	@ (8009f10 <ProcessRadioTxTimeout+0x48>)
 8009ee0:	2002      	movs	r0, #2
 8009ee2:	f884 0441 	strb.w	r0, [r4, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009ee6:	f002 fc97 	bl	800c818 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8009eea:	f894 341a 	ldrb.w	r3, [r4, #1050]	@ 0x41a
 8009eee:	b113      	cbz	r3, 8009ef6 <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f884 2419 	strb.w	r2, [r4, #1049]	@ 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009ef6:	4a06      	ldr	r2, [pc, #24]	@ (8009f10 <ProcessRadioTxTimeout+0x48>)
 8009ef8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8009efc:	f043 0310 	orr.w	r3, r3, #16
 8009f00:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 8009f04:	bd10      	pop	{r4, pc}
 8009f06:	bf00      	nop
 8009f08:	2000090c 	.word	0x2000090c
 8009f0c:	08013b98 	.word	0x08013b98
 8009f10:	20000ed8 	.word	0x20000ed8

08009f14 <CheckForClassBCollision>:
{
 8009f14:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009f16:	f002 fa26 	bl	800c366 <LoRaMacClassBIsBeaconExpected>
 8009f1a:	b978      	cbnz	r0, 8009f3c <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009f1c:	4b09      	ldr	r3, [pc, #36]	@ (8009f44 <CheckForClassBCollision+0x30>)
 8009f1e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d001      	beq.n	8009f2a <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8009f26:	2000      	movs	r0, #0
}
 8009f28:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009f2a:	f002 fa1e 	bl	800c36a <LoRaMacClassBIsPingExpected>
 8009f2e:	b938      	cbnz	r0, 8009f40 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009f30:	f002 fa1d 	bl	800c36e <LoRaMacClassBIsMulticastExpected>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d0f7      	beq.n	8009f28 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8009f38:	200f      	movs	r0, #15
 8009f3a:	e7f5      	b.n	8009f28 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8009f3c:	200e      	movs	r0, #14
 8009f3e:	e7f3      	b.n	8009f28 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8009f40:	200f      	movs	r0, #15
 8009f42:	e7f1      	b.n	8009f28 <CheckForClassBCollision+0x14>
 8009f44:	2000090c 	.word	0x2000090c

08009f48 <HandleRadioRxErrorTimeout>:
{
 8009f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4a:	4605      	mov	r5, r0
 8009f4c:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009f4e:	4b34      	ldr	r3, [pc, #208]	@ (800a020 <HandleRadioRxErrorTimeout+0xd8>)
 8009f50:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d002      	beq.n	8009f5e <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8009f58:	4b32      	ldr	r3, [pc, #200]	@ (800a024 <HandleRadioRxErrorTimeout+0xdc>)
 8009f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f5c:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009f5e:	f002 fa02 	bl	800c366 <LoRaMacClassBIsBeaconExpected>
 8009f62:	4606      	mov	r6, r0
 8009f64:	bb48      	cbnz	r0, 8009fba <HandleRadioRxErrorTimeout+0x72>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009f66:	4b2e      	ldr	r3, [pc, #184]	@ (800a020 <HandleRadioRxErrorTimeout+0xd8>)
 8009f68:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d02b      	beq.n	8009fc8 <HandleRadioRxErrorTimeout+0x80>
    if( classBRx == false )
 8009f70:	2e00      	cmp	r6, #0
 8009f72:	d151      	bne.n	800a018 <HandleRadioRxErrorTimeout+0xd0>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009f74:	4b2c      	ldr	r3, [pc, #176]	@ (800a028 <HandleRadioRxErrorTimeout+0xe0>)
 8009f76:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d13b      	bne.n	8009ff6 <HandleRadioRxErrorTimeout+0xae>
            if( MacCtx.NodeAckRequested == true )
 8009f7e:	4b2a      	ldr	r3, [pc, #168]	@ (800a028 <HandleRadioRxErrorTimeout+0xe0>)
 8009f80:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8009f84:	b113      	cbz	r3, 8009f8c <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8009f86:	4b28      	ldr	r3, [pc, #160]	@ (800a028 <HandleRadioRxErrorTimeout+0xe0>)
 8009f88:	f883 5441 	strb.w	r5, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	f002 fc43 	bl	800c818 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8009f92:	4b23      	ldr	r3, [pc, #140]	@ (800a020 <HandleRadioRxErrorTimeout+0xd8>)
 8009f94:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8009f96:	f008 fb3f 	bl	8012618 <UTIL_TIMER_GetElapsedTime>
 8009f9a:	4b23      	ldr	r3, [pc, #140]	@ (800a028 <HandleRadioRxErrorTimeout+0xe0>)
 8009f9c:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8009fa0:	4298      	cmp	r0, r3
 8009fa2:	d339      	bcc.n	800a018 <HandleRadioRxErrorTimeout+0xd0>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8009fa4:	4c21      	ldr	r4, [pc, #132]	@ (800a02c <HandleRadioRxErrorTimeout+0xe4>)
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f008 fb6c 	bl	8012684 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8009fac:	f894 30f9 	ldrb.w	r3, [r4, #249]	@ 0xf9
 8009fb0:	f043 0310 	orr.w	r3, r3, #16
 8009fb4:	f884 30f9 	strb.w	r3, [r4, #249]	@ 0xf9
 8009fb8:	e02e      	b.n	800a018 <HandleRadioRxErrorTimeout+0xd0>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8009fba:	2002      	movs	r0, #2
 8009fbc:	f002 f9c9 	bl	800c352 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	f002 f9cb 	bl	800c35c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8009fc6:	e7ce      	b.n	8009f66 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009fc8:	f002 f9cf 	bl	800c36a <LoRaMacClassBIsPingExpected>
 8009fcc:	4607      	mov	r7, r0
 8009fce:	b950      	cbnz	r0, 8009fe6 <HandleRadioRxErrorTimeout+0x9e>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009fd0:	f002 f9cd 	bl	800c36e <LoRaMacClassBIsMulticastExpected>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d0cb      	beq.n	8009f70 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009fd8:	2000      	movs	r0, #0
 8009fda:	f002 f9bc 	bl	800c356 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009fde:	2000      	movs	r0, #0
 8009fe0:	f002 f9be 	bl	800c360 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8009fe4:	e018      	b.n	800a018 <HandleRadioRxErrorTimeout+0xd0>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	f002 f9b4 	bl	800c354 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009fec:	2000      	movs	r0, #0
 8009fee:	f002 f9b6 	bl	800c35e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8009ff2:	463e      	mov	r6, r7
 8009ff4:	e7ec      	b.n	8009fd0 <HandleRadioRxErrorTimeout+0x88>
            if( MacCtx.NodeAckRequested == true )
 8009ff6:	4b0c      	ldr	r3, [pc, #48]	@ (800a028 <HandleRadioRxErrorTimeout+0xe0>)
 8009ff8:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8009ffc:	b113      	cbz	r3, 800a004 <HandleRadioRxErrorTimeout+0xbc>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8009ffe:	4b0a      	ldr	r3, [pc, #40]	@ (800a028 <HandleRadioRxErrorTimeout+0xe0>)
 800a000:	f883 4441 	strb.w	r4, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800a004:	4620      	mov	r0, r4
 800a006:	f002 fc07 	bl	800c818 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800a00a:	4a07      	ldr	r2, [pc, #28]	@ (800a028 <HandleRadioRxErrorTimeout+0xe0>)
 800a00c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800a010:	f043 0310 	orr.w	r3, r3, #16
 800a014:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    UpdateRxSlotIdleState( );
 800a018:	f7fe fe36 	bl	8008c88 <UpdateRxSlotIdleState>
}
 800a01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a01e:	bf00      	nop
 800a020:	2000090c 	.word	0x2000090c
 800a024:	08013b98 	.word	0x08013b98
 800a028:	20000ed8 	.word	0x20000ed8
 800a02c:	20001270 	.word	0x20001270

0800a030 <ProcessRadioRxError>:
{
 800a030:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800a032:	2106      	movs	r1, #6
 800a034:	2005      	movs	r0, #5
 800a036:	f7ff ff87 	bl	8009f48 <HandleRadioRxErrorTimeout>
}
 800a03a:	bd08      	pop	{r3, pc}

0800a03c <ProcessRadioRxTimeout>:
{
 800a03c:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800a03e:	2104      	movs	r1, #4
 800a040:	2003      	movs	r0, #3
 800a042:	f7ff ff81 	bl	8009f48 <HandleRadioRxErrorTimeout>
}
 800a046:	bd08      	pop	{r3, pc}

0800a048 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a048:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a04c:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800a04e:	4a14      	ldr	r2, [pc, #80]	@ (800a0a0 <LoRaMacHandleIrqEvents+0x58>)
 800a050:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800a052:	2000      	movs	r0, #0
 800a054:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a056:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800a05a:	b303      	cbz	r3, 800a09e <LoRaMacHandleIrqEvents+0x56>
{
 800a05c:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800a05e:	b2dc      	uxtb	r4, r3
 800a060:	f013 0f20 	tst.w	r3, #32
 800a064:	d10c      	bne.n	800a080 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800a066:	f014 0f10 	tst.w	r4, #16
 800a06a:	d10c      	bne.n	800a086 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800a06c:	f014 0f08 	tst.w	r4, #8
 800a070:	d10c      	bne.n	800a08c <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800a072:	f014 0f04 	tst.w	r4, #4
 800a076:	d10c      	bne.n	800a092 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800a078:	f014 0f02 	tst.w	r4, #2
 800a07c:	d10c      	bne.n	800a098 <LoRaMacHandleIrqEvents+0x50>
}
 800a07e:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800a080:	f7fe ff96 	bl	8008fb0 <ProcessRadioTxDone>
 800a084:	e7ef      	b.n	800a066 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800a086:	f7ff fb9b 	bl	80097c0 <ProcessRadioRxDone>
 800a08a:	e7ef      	b.n	800a06c <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800a08c:	f7ff ff1c 	bl	8009ec8 <ProcessRadioTxTimeout>
 800a090:	e7ef      	b.n	800a072 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800a092:	f7ff ffcd 	bl	800a030 <ProcessRadioRxError>
 800a096:	e7ef      	b.n	800a078 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800a098:	f7ff ffd0 	bl	800a03c <ProcessRadioRxTimeout>
}
 800a09c:	e7ef      	b.n	800a07e <LoRaMacHandleIrqEvents+0x36>
 800a09e:	4770      	bx	lr
 800a0a0:	20000878 	.word	0x20000878

0800a0a4 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 800a0a4:	b909      	cbnz	r1, 800a0aa <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800a0a6:	2000      	movs	r0, #0
}
 800a0a8:	4770      	bx	lr
{
 800a0aa:	b510      	push	{r4, lr}
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800a0b0:	f008 fab2 	bl	8012618 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800a0b4:	42a0      	cmp	r0, r4
 800a0b6:	d801      	bhi.n	800a0bc <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800a0b8:	2000      	movs	r0, #0
}
 800a0ba:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800a0bc:	4b02      	ldr	r3, [pc, #8]	@ (800a0c8 <LoRaMacHandleResponseTimeout+0x24>)
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800a0c4:	2001      	movs	r0, #1
 800a0c6:	e7f8      	b.n	800a0ba <LoRaMacHandleResponseTimeout+0x16>
 800a0c8:	2000090c 	.word	0x2000090c

0800a0cc <LoRaMacHandleMlmeRequest>:
{
 800a0cc:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a0ce:	4b14      	ldr	r3, [pc, #80]	@ (800a120 <LoRaMacHandleMlmeRequest+0x54>)
 800a0d0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800a0d4:	f013 0f04 	tst.w	r3, #4
 800a0d8:	d100      	bne.n	800a0dc <LoRaMacHandleMlmeRequest+0x10>
}
 800a0da:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a0dc:	2001      	movs	r0, #1
 800a0de:	f002 fbb9 	bl	800c854 <LoRaMacConfirmQueueIsCmdActive>
 800a0e2:	b178      	cbz	r0, 800a104 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800a0e4:	2001      	movs	r0, #1
 800a0e6:	f002 fb7f 	bl	800c7e8 <LoRaMacConfirmQueueGetStatus>
 800a0ea:	b918      	cbnz	r0, 800a0f4 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800a0ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a120 <LoRaMacHandleMlmeRequest+0x54>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a0f4:	4a0a      	ldr	r2, [pc, #40]	@ (800a120 <LoRaMacHandleMlmeRequest+0x54>)
 800a0f6:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 800a0fa:	f023 0302 	bic.w	r3, r3, #2
 800a0fe:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
 800a102:	e7ea      	b.n	800a0da <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800a104:	2006      	movs	r0, #6
 800a106:	f002 fba5 	bl	800c854 <LoRaMacConfirmQueueIsCmdActive>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d0e5      	beq.n	800a0da <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a10e:	4a04      	ldr	r2, [pc, #16]	@ (800a120 <LoRaMacHandleMlmeRequest+0x54>)
 800a110:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 800a114:	f023 0302 	bic.w	r3, r3, #2
 800a118:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800a11c:	e7dd      	b.n	800a0da <LoRaMacHandleMlmeRequest+0xe>
 800a11e:	bf00      	nop
 800a120:	20000ed8 	.word	0x20000ed8

0800a124 <SerializeTxFrame>:
{
 800a124:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800a126:	4b0f      	ldr	r3, [pc, #60]	@ (800a164 <SerializeTxFrame+0x40>)
 800a128:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800a12c:	b11b      	cbz	r3, 800a136 <SerializeTxFrame+0x12>
 800a12e:	2b04      	cmp	r3, #4
 800a130:	d00a      	beq.n	800a148 <SerializeTxFrame+0x24>
 800a132:	2003      	movs	r0, #3
}
 800a134:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800a136:	480c      	ldr	r0, [pc, #48]	@ (800a168 <SerializeTxFrame+0x44>)
 800a138:	f003 f839 	bl	800d1ae <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800a13c:	b968      	cbnz	r0, 800a15a <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800a13e:	4b09      	ldr	r3, [pc, #36]	@ (800a164 <SerializeTxFrame+0x40>)
 800a140:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800a144:	801a      	strh	r2, [r3, #0]
            break;
 800a146:	e7f5      	b.n	800a134 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800a148:	4807      	ldr	r0, [pc, #28]	@ (800a168 <SerializeTxFrame+0x44>)
 800a14a:	f003 f866 	bl	800d21a <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800a14e:	b930      	cbnz	r0, 800a15e <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800a150:	4b04      	ldr	r3, [pc, #16]	@ (800a164 <SerializeTxFrame+0x40>)
 800a152:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800a156:	801a      	strh	r2, [r3, #0]
            break;
 800a158:	e7ec      	b.n	800a134 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a15a:	2011      	movs	r0, #17
 800a15c:	e7ea      	b.n	800a134 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a15e:	2011      	movs	r0, #17
 800a160:	e7e8      	b.n	800a134 <SerializeTxFrame+0x10>
 800a162:	bf00      	nop
 800a164:	20000ed8 	.word	0x20000ed8
 800a168:	20000fe0 	.word	0x20000fe0

0800a16c <ComputeRxWindowParameters>:
{
 800a16c:	b570      	push	{r4, r5, r6, lr}
 800a16e:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a170:	4c1e      	ldr	r4, [pc, #120]	@ (800a1ec <ComputeRxWindowParameters+0x80>)
 800a172:	f894 6048 	ldrb.w	r6, [r4, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800a176:	f994 3069 	ldrsb.w	r3, [r4, #105]	@ 0x69
 800a17a:	f994 2039 	ldrsb.w	r2, [r4, #57]	@ 0x39
 800a17e:	f894 107d 	ldrb.w	r1, [r4, #125]	@ 0x7d
 800a182:	4630      	mov	r0, r6
 800a184:	f003 f9d4 	bl	800d530 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a188:	4d19      	ldr	r5, [pc, #100]	@ (800a1f0 <ComputeRxWindowParameters+0x84>)
 800a18a:	9500      	str	r5, [sp, #0]
 800a18c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a18e:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 800a192:	b241      	sxtb	r1, r0
 800a194:	4630      	mov	r0, r6
 800a196:	f003 f918 	bl	800d3ca <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a19a:	f105 0318 	add.w	r3, r5, #24
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a1a2:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 800a1a6:	f994 1070 	ldrsb.w	r1, [r4, #112]	@ 0x70
 800a1aa:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a1ae:	f003 f90c 	bl	800d3ca <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800a1b2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800a1b4:	f5a5 736e 	sub.w	r3, r5, #952	@ 0x3b8
 800a1b8:	68e8      	ldr	r0, [r5, #12]
 800a1ba:	4402      	add	r2, r0
 800a1bc:	f845 2c08 	str.w	r2, [r5, #-8]
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800a1c0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800a1c2:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800a1c4:	440a      	add	r2, r1
 800a1c6:	f845 2c04 	str.w	r2, [r5, #-4]
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800a1ca:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800a1ce:	2b04      	cmp	r3, #4
 800a1d0:	d009      	beq.n	800a1e6 <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800a1d2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800a1d4:	4418      	add	r0, r3
 800a1d6:	f5a5 736e 	sub.w	r3, r5, #952	@ 0x3b8
 800a1da:	f8c3 03b0 	str.w	r0, [r3, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800a1de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a1e0:	4411      	add	r1, r2
 800a1e2:	f8c3 13b4 	str.w	r1, [r3, #948]	@ 0x3b4
}
 800a1e6:	b002      	add	sp, #8
 800a1e8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ea:	bf00      	nop
 800a1ec:	2000090c 	.word	0x2000090c
 800a1f0:	20001290 	.word	0x20001290

0800a1f4 <VerifyTxFrame>:
{
 800a1f4:	b510      	push	{r4, lr}
 800a1f6:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a1fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a234 <VerifyTxFrame+0x40>)
 800a1fe:	f893 4130 	ldrb.w	r4, [r3, #304]	@ 0x130
 800a202:	b914      	cbnz	r4, 800a20a <VerifyTxFrame+0x16>
}
 800a204:	4620      	mov	r0, r4
 800a206:	b002      	add	sp, #8
 800a208:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a20a:	a801      	add	r0, sp, #4
 800a20c:	f002 f9e8 	bl	800c5e0 <LoRaMacCommandsGetSizeSerializedCmds>
 800a210:	4604      	mov	r4, r0
 800a212:	b968      	cbnz	r0, 800a230 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800a214:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a218:	4b06      	ldr	r3, [pc, #24]	@ (800a234 <VerifyTxFrame+0x40>)
 800a21a:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 800a21e:	4b06      	ldr	r3, [pc, #24]	@ (800a238 <VerifyTxFrame+0x44>)
 800a220:	f893 0237 	ldrb.w	r0, [r3, #567]	@ 0x237
 800a224:	f7fe feb6 	bl	8008f94 <ValidatePayloadLength>
 800a228:	2800      	cmp	r0, #0
 800a22a:	d1eb      	bne.n	800a204 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800a22c:	2408      	movs	r4, #8
 800a22e:	e7e9      	b.n	800a204 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a230:	2413      	movs	r4, #19
 800a232:	e7e7      	b.n	800a204 <VerifyTxFrame+0x10>
 800a234:	2000090c 	.word	0x2000090c
 800a238:	20000ed8 	.word	0x20000ed8

0800a23c <SecureFrame>:
{
 800a23c:	b530      	push	{r4, r5, lr}
 800a23e:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800a240:	2300      	movs	r3, #0
 800a242:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800a244:	4b18      	ldr	r3, [pc, #96]	@ (800a2a8 <SecureFrame+0x6c>)
 800a246:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800a24a:	b133      	cbz	r3, 800a25a <SecureFrame+0x1e>
 800a24c:	4605      	mov	r5, r0
 800a24e:	460c      	mov	r4, r1
 800a250:	2b04      	cmp	r3, #4
 800a252:	d00b      	beq.n	800a26c <SecureFrame+0x30>
 800a254:	2003      	movs	r0, #3
}
 800a256:	b003      	add	sp, #12
 800a258:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800a25a:	4814      	ldr	r0, [pc, #80]	@ (800a2ac <SecureFrame+0x70>)
 800a25c:	f002 fd64 	bl	800cd28 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800a260:	b9d8      	cbnz	r0, 800a29a <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800a262:	4b11      	ldr	r3, [pc, #68]	@ (800a2a8 <SecureFrame+0x6c>)
 800a264:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800a268:	801a      	strh	r2, [r3, #0]
            break;
 800a26a:	e7f4      	b.n	800a256 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a26c:	a801      	add	r0, sp, #4
 800a26e:	f002 fd0f 	bl	800cc90 <LoRaMacCryptoGetFCntUp>
 800a272:	b9a0      	cbnz	r0, 800a29e <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800a274:	4b0c      	ldr	r3, [pc, #48]	@ (800a2a8 <SecureFrame+0x6c>)
 800a276:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800a27a:	b113      	cbz	r3, 800a282 <SecureFrame+0x46>
                fCntUp -= 1;
 800a27c:	9b01      	ldr	r3, [sp, #4]
 800a27e:	3b01      	subs	r3, #1
 800a280:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800a282:	4b0a      	ldr	r3, [pc, #40]	@ (800a2ac <SecureFrame+0x70>)
 800a284:	4622      	mov	r2, r4
 800a286:	4629      	mov	r1, r5
 800a288:	9801      	ldr	r0, [sp, #4]
 800a28a:	f002 fd73 	bl	800cd74 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800a28e:	b940      	cbnz	r0, 800a2a2 <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800a290:	4b05      	ldr	r3, [pc, #20]	@ (800a2a8 <SecureFrame+0x6c>)
 800a292:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800a296:	801a      	strh	r2, [r3, #0]
            break;
 800a298:	e7dd      	b.n	800a256 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a29a:	2011      	movs	r0, #17
 800a29c:	e7db      	b.n	800a256 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800a29e:	2012      	movs	r0, #18
 800a2a0:	e7d9      	b.n	800a256 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a2a2:	2011      	movs	r0, #17
 800a2a4:	e7d7      	b.n	800a256 <SecureFrame+0x1a>
 800a2a6:	bf00      	nop
 800a2a8:	20000ed8 	.word	0x20000ed8
 800a2ac:	20000fe0 	.word	0x20000fe0

0800a2b0 <SendFrameOnChannel>:
{
 800a2b0:	b570      	push	{r4, r5, r6, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800a2bc:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a2c0:	4d36      	ldr	r5, [pc, #216]	@ (800a39c <SendFrameOnChannel+0xec>)
 800a2c2:	f995 3039 	ldrsb.w	r3, [r5, #57]	@ 0x39
 800a2c6:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a2ca:	f995 3038 	ldrsb.w	r3, [r5, #56]	@ 0x38
 800a2ce:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800a2d2:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800a2d6:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a2d8:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 800a2dc:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800a2de:	4c30      	ldr	r4, [pc, #192]	@ (800a3a0 <SendFrameOnChannel+0xf0>)
 800a2e0:	8823      	ldrh	r3, [r4, #0]
 800a2e2:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a2e6:	f895 3130 	ldrb.w	r3, [r5, #304]	@ 0x130
 800a2ea:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800a2ee:	f204 431c 	addw	r3, r4, #1052	@ 0x41c
 800a2f2:	f10d 0207 	add.w	r2, sp, #7
 800a2f6:	a902      	add	r1, sp, #8
 800a2f8:	f895 0048 	ldrb.w	r0, [r5, #72]	@ 0x48
 800a2fc:	f003 f888 	bl	800d410 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	f884 3441 	strb.w	r3, [r4, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a306:	f895 3039 	ldrb.w	r3, [r5, #57]	@ 0x39
 800a30a:	f884 3442 	strb.w	r3, [r4, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800a30e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a312:	f884 3443 	strb.w	r3, [r4, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800a316:	f8c4 6450 	str.w	r6, [r4, #1104]	@ 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800a31a:	f8d4 341c 	ldr.w	r3, [r4, #1052]	@ 0x41c
 800a31e:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800a322:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800a326:	f002 f824 	bl	800c372 <LoRaMacClassBIsBeaconModeActive>
 800a32a:	bb60      	cbnz	r0, 800a386 <SendFrameOnChannel+0xd6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a32c:	4b1b      	ldr	r3, [pc, #108]	@ (800a39c <SendFrameOnChannel+0xec>)
 800a32e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800a332:	2b01      	cmp	r3, #1
 800a334:	d02f      	beq.n	800a396 <SendFrameOnChannel+0xe6>
    LoRaMacClassBHaltBeaconing( );
 800a336:	f002 f81f 	bl	800c378 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800a33a:	4b18      	ldr	r3, [pc, #96]	@ (800a39c <SendFrameOnChannel+0xec>)
 800a33c:	f993 0039 	ldrsb.w	r0, [r3, #57]	@ 0x39
 800a340:	4b17      	ldr	r3, [pc, #92]	@ (800a3a0 <SendFrameOnChannel+0xf0>)
 800a342:	f893 141b 	ldrb.w	r1, [r3, #1051]	@ 0x41b
 800a346:	b2c0      	uxtb	r0, r0
 800a348:	f7ff ff78 	bl	800a23c <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800a34c:	4604      	mov	r4, r0
 800a34e:	b9b8      	cbnz	r0, 800a380 <SendFrameOnChannel+0xd0>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800a350:	4813      	ldr	r0, [pc, #76]	@ (800a3a0 <SendFrameOnChannel+0xf0>)
 800a352:	f8d0 3340 	ldr.w	r3, [r0, #832]	@ 0x340
 800a356:	f043 0302 	orr.w	r3, r3, #2
 800a35a:	f8c0 3340 	str.w	r3, [r0, #832]	@ 0x340
    MacCtx.ChannelsNbTransCounter++;
 800a35e:	f890 3418 	ldrb.w	r3, [r0, #1048]	@ 0x418
 800a362:	3301      	adds	r3, #1
 800a364:	b2db      	uxtb	r3, r3
 800a366:	f880 3418 	strb.w	r3, [r0, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800a36a:	f880 3445 	strb.w	r3, [r0, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 800a36e:	2300      	movs	r3, #0
 800a370:	f8c0 3498 	str.w	r3, [r0, #1176]	@ 0x498
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800a374:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a4 <SendFrameOnChannel+0xf4>)
 800a376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a378:	f830 1b02 	ldrh.w	r1, [r0], #2
 800a37c:	b2c9      	uxtb	r1, r1
 800a37e:	4798      	blx	r3
}
 800a380:	4620      	mov	r0, r4
 800a382:	b006      	add	sp, #24
 800a384:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800a386:	f8d4 041c 	ldr.w	r0, [r4, #1052]	@ 0x41c
 800a38a:	f002 f804 	bl	800c396 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800a38e:	2800      	cmp	r0, #0
 800a390:	d0cc      	beq.n	800a32c <SendFrameOnChannel+0x7c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800a392:	2410      	movs	r4, #16
 800a394:	e7f4      	b.n	800a380 <SendFrameOnChannel+0xd0>
        LoRaMacClassBStopRxSlots( );
 800a396:	f002 f800 	bl	800c39a <LoRaMacClassBStopRxSlots>
 800a39a:	e7cc      	b.n	800a336 <SendFrameOnChannel+0x86>
 800a39c:	2000090c 	.word	0x2000090c
 800a3a0:	20000ed8 	.word	0x20000ed8
 800a3a4:	08013b98 	.word	0x08013b98

0800a3a8 <ScheduleTx>:
{
 800a3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ac:	b08c      	sub	sp, #48	@ 0x30
 800a3ae:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800a3b0:	f7ff fdb0 	bl	8009f14 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	b118      	cbz	r0, 800a3c0 <ScheduleTx+0x18>
}
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	b00c      	add	sp, #48	@ 0x30
 800a3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800a3c0:	f7fe fcc6 	bl	8008d50 <CalculateBackOff>
    status = SerializeTxFrame( );
 800a3c4:	f7ff feae 	bl	800a124 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d1f4      	bne.n	800a3b8 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800a3ce:	4e35      	ldr	r6, [pc, #212]	@ (800a4a4 <ScheduleTx+0xfc>)
 800a3d0:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800a3d2:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a3d4:	f996 3039 	ldrsb.w	r3, [r6, #57]	@ 0x39
 800a3d8:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800a3dc:	f896 311c 	ldrb.w	r3, [r6, #284]	@ 0x11c
 800a3e0:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800a3e4:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800a3e8:	4640      	mov	r0, r8
 800a3ea:	f008 f8cb 	bl	8012584 <SysTimeGetMcuTime>
 800a3ee:	af02      	add	r7, sp, #8
 800a3f0:	f8d6 3128 	ldr.w	r3, [r6, #296]	@ 0x128
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	f8d6 3124 	ldr.w	r3, [r6, #292]	@ 0x124
 800a3fa:	e898 0006 	ldmia.w	r8, {r1, r2}
 800a3fe:	4638      	mov	r0, r7
 800a400:	f008 f85d 	bl	80124be <SysTimeSub>
 800a404:	ab07      	add	r3, sp, #28
 800a406:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a40a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800a40e:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 800a410:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800a412:	2300      	movs	r3, #0
 800a414:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    nextChan.Joined = true;
 800a418:	2301      	movs	r3, #1
 800a41a:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800a41e:	4b22      	ldr	r3, [pc, #136]	@ (800a4a8 <ScheduleTx+0x100>)
 800a420:	881b      	ldrh	r3, [r3, #0]
 800a422:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a426:	f896 3130 	ldrb.w	r3, [r6, #304]	@ 0x130
 800a42a:	b92b      	cbnz	r3, 800a438 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800a42c:	2301      	movs	r3, #1
 800a42e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
        nextChan.Joined = false;
 800a432:	2300      	movs	r3, #0
 800a434:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800a438:	4b1c      	ldr	r3, [pc, #112]	@ (800a4ac <ScheduleTx+0x104>)
 800a43a:	481a      	ldr	r0, [pc, #104]	@ (800a4a4 <ScheduleTx+0xfc>)
 800a43c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800a440:	9200      	str	r2, [sp, #0]
 800a442:	f1a3 0279 	sub.w	r2, r3, #121	@ 0x79
 800a446:	a904      	add	r1, sp, #16
 800a448:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 800a44c:	f003 f85b 	bl	800d506 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800a450:	b1c0      	cbz	r0, 800a484 <ScheduleTx+0xdc>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800a452:	280b      	cmp	r0, #11
 800a454:	d124      	bne.n	800a4a0 <ScheduleTx+0xf8>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800a456:	4a14      	ldr	r2, [pc, #80]	@ (800a4a8 <ScheduleTx+0x100>)
 800a458:	f8d2 1494 	ldr.w	r1, [r2, #1172]	@ 0x494
 800a45c:	b191      	cbz	r1, 800a484 <ScheduleTx+0xdc>
                if( allowDelayedTx == true )
 800a45e:	b90d      	cbnz	r5, 800a464 <ScheduleTx+0xbc>
                return status;
 800a460:	4604      	mov	r4, r0
 800a462:	e7a9      	b.n	800a3b8 <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800a464:	4615      	mov	r5, r2
 800a466:	f8d2 2340 	ldr.w	r2, [r2, #832]	@ 0x340
 800a46a:	f042 0220 	orr.w	r2, r2, #32
 800a46e:	f8c5 2340 	str.w	r2, [r5, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800a472:	f505 755a 	add.w	r5, r5, #872	@ 0x368
 800a476:	4628      	mov	r0, r5
 800a478:	f008 f9a4 	bl	80127c4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800a47c:	4628      	mov	r0, r5
 800a47e:	f008 f95b 	bl	8012738 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800a482:	e799      	b.n	800a3b8 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800a484:	f7ff fe72 	bl	800a16c <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800a488:	f7ff feb4 	bl	800a1f4 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800a48c:	4604      	mov	r4, r0
 800a48e:	2800      	cmp	r0, #0
 800a490:	d192      	bne.n	800a3b8 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800a492:	4b05      	ldr	r3, [pc, #20]	@ (800a4a8 <ScheduleTx+0x100>)
 800a494:	f893 041b 	ldrb.w	r0, [r3, #1051]	@ 0x41b
 800a498:	f7ff ff0a 	bl	800a2b0 <SendFrameOnChannel>
 800a49c:	4604      	mov	r4, r0
 800a49e:	e78b      	b.n	800a3b8 <ScheduleTx+0x10>
            return status;
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	e789      	b.n	800a3b8 <ScheduleTx+0x10>
 800a4a4:	2000090c 	.word	0x2000090c
 800a4a8:	20000ed8 	.word	0x20000ed8
 800a4ac:	2000136c 	.word	0x2000136c

0800a4b0 <OnTxDelayedTimerEvent>:
{
 800a4b0:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800a4b2:	4c16      	ldr	r4, [pc, #88]	@ (800a50c <OnTxDelayedTimerEvent+0x5c>)
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f008 f8e5 	bl	8012684 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a4ba:	f854 3c28 	ldr.w	r3, [r4, #-40]
 800a4be:	f023 0320 	bic.w	r3, r3, #32
 800a4c2:	f844 3c28 	str.w	r3, [r4, #-40]
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800a4c6:	f8d4 1130 	ldr.w	r1, [r4, #304]	@ 0x130
 800a4ca:	4b11      	ldr	r3, [pc, #68]	@ (800a510 <OnTxDelayedTimerEvent+0x60>)
 800a4cc:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 800a4d0:	f7ff fde8 	bl	800a0a4 <LoRaMacHandleResponseTimeout>
 800a4d4:	b100      	cbz	r0, 800a4d8 <OnTxDelayedTimerEvent+0x28>
}
 800a4d6:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800a4d8:	2001      	movs	r0, #1
 800a4da:	f7ff ff65 	bl	800a3a8 <ScheduleTx>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d0f9      	beq.n	800a4d6 <OnTxDelayedTimerEvent+0x26>
 800a4e2:	280b      	cmp	r0, #11
 800a4e4:	d0f7      	beq.n	800a4d6 <OnTxDelayedTimerEvent+0x26>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a4e6:	4b0a      	ldr	r3, [pc, #40]	@ (800a510 <OnTxDelayedTimerEvent+0x60>)
 800a4e8:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800a4ec:	f5a4 735a 	sub.w	r3, r4, #872	@ 0x368
 800a4f0:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800a4f4:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800a4f8:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800a4fc:	2009      	movs	r0, #9
 800a4fe:	f883 0441 	strb.w	r0, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800a502:	f002 f989 	bl	800c818 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800a506:	f7fe fcb7 	bl	8008e78 <StopRetransmission>
            break;
 800a50a:	e7e4      	b.n	800a4d6 <OnTxDelayedTimerEvent+0x26>
 800a50c:	20001240 	.word	0x20001240
 800a510:	2000090c 	.word	0x2000090c

0800a514 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a514:	4b1c      	ldr	r3, [pc, #112]	@ (800a588 <LoRaMacHandleMcpsRequest+0x74>)
 800a516:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800a51a:	f013 0f01 	tst.w	r3, #1
 800a51e:	d031      	beq.n	800a584 <LoRaMacHandleMcpsRequest+0x70>
{
 800a520:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800a522:	4b19      	ldr	r3, [pc, #100]	@ (800a588 <LoRaMacHandleMcpsRequest+0x74>)
 800a524:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800a528:	b12b      	cbz	r3, 800a536 <LoRaMacHandleMcpsRequest+0x22>
 800a52a:	2b03      	cmp	r3, #3
 800a52c:	d003      	beq.n	800a536 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d006      	beq.n	800a540 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800a532:	2000      	movs	r0, #0
 800a534:	e002      	b.n	800a53c <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800a536:	f7fe fc65 	bl	8008e04 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800a53a:	b940      	cbnz	r0, 800a54e <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800a53c:	b1b0      	cbz	r0, 800a56c <LoRaMacHandleMcpsRequest+0x58>
}
 800a53e:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800a540:	4b11      	ldr	r3, [pc, #68]	@ (800a588 <LoRaMacHandleMcpsRequest+0x74>)
 800a542:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800a546:	b17b      	cbz	r3, 800a568 <LoRaMacHandleMcpsRequest+0x54>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800a548:	f7fe fc78 	bl	8008e3c <CheckRetransConfirmedUplink>
 800a54c:	e7f5      	b.n	800a53a <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800a54e:	4c0f      	ldr	r4, [pc, #60]	@ (800a58c <LoRaMacHandleMcpsRequest+0x78>)
 800a550:	4620      	mov	r0, r4
 800a552:	f008 f897 	bl	8012684 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a556:	f854 3c28 	ldr.w	r3, [r4, #-40]
 800a55a:	f023 0320 	bic.w	r3, r3, #32
 800a55e:	f844 3c28 	str.w	r3, [r4, #-40]
            StopRetransmission( );
 800a562:	f7fe fc89 	bl	8008e78 <StopRetransmission>
 800a566:	e7ea      	b.n	800a53e <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800a568:	2001      	movs	r0, #1
 800a56a:	e7e7      	b.n	800a53c <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a56c:	4b06      	ldr	r3, [pc, #24]	@ (800a588 <LoRaMacHandleMcpsRequest+0x74>)
 800a56e:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800a572:	f022 0210 	bic.w	r2, r2, #16
 800a576:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800a57a:	f883 0419 	strb.w	r0, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 800a57e:	f7ff ff97 	bl	800a4b0 <OnTxDelayedTimerEvent>
}
 800a582:	e7dc      	b.n	800a53e <LoRaMacHandleMcpsRequest+0x2a>
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	20000ed8 	.word	0x20000ed8
 800a58c:	20001240 	.word	0x20001240

0800a590 <LoRaMacHandleRequestEvents>:
{
 800a590:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a592:	4b22      	ldr	r3, [pc, #136]	@ (800a61c <LoRaMacHandleRequestEvents+0x8c>)
 800a594:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800a598:	bb83      	cbnz	r3, 800a5fc <LoRaMacHandleRequestEvents+0x6c>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a59a:	4b20      	ldr	r3, [pc, #128]	@ (800a61c <LoRaMacHandleRequestEvents+0x8c>)
 800a59c:	f893 4491 	ldrb.w	r4, [r3, #1169]	@ 0x491
 800a5a0:	f014 0501 	ands.w	r5, r4, #1
 800a5a4:	d006      	beq.n	800a5b4 <LoRaMacHandleRequestEvents+0x24>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800a5ac:	f023 0301 	bic.w	r3, r3, #1
 800a5b0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a5b4:	4b19      	ldr	r3, [pc, #100]	@ (800a61c <LoRaMacHandleRequestEvents+0x8c>)
 800a5b6:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800a5ba:	f013 0f04 	tst.w	r3, #4
 800a5be:	d006      	beq.n	800a5ce <LoRaMacHandleRequestEvents+0x3e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a5c0:	4a16      	ldr	r2, [pc, #88]	@ (800a61c <LoRaMacHandleRequestEvents+0x8c>)
 800a5c2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800a5c6:	f023 0304 	bic.w	r3, r3, #4
 800a5ca:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a5ce:	2001      	movs	r0, #1
 800a5d0:	f7fe fb6e 	bl	8008cb0 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800a5d4:	b135      	cbz	r5, 800a5e4 <LoRaMacHandleRequestEvents+0x54>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800a5d6:	4811      	ldr	r0, [pc, #68]	@ (800a61c <LoRaMacHandleRequestEvents+0x8c>)
 800a5d8:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f500 6088 	add.w	r0, r0, #1088	@ 0x440
 800a5e2:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800a5e4:	f014 0f04 	tst.w	r4, #4
 800a5e8:	d109      	bne.n	800a5fe <LoRaMacHandleRequestEvents+0x6e>
        LoRaMacClassBResumeBeaconing( );
 800a5ea:	f001 fec6 	bl	800c37a <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800a5ee:	4a0b      	ldr	r2, [pc, #44]	@ (800a61c <LoRaMacHandleRequestEvents+0x8c>)
 800a5f0:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800a5f4:	f023 0310 	bic.w	r3, r3, #16
 800a5f8:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 800a5fc:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800a5fe:	4808      	ldr	r0, [pc, #32]	@ (800a620 <LoRaMacHandleRequestEvents+0x90>)
 800a600:	f002 f934 	bl	800c86c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800a604:	f002 f96a 	bl	800c8dc <LoRaMacConfirmQueueGetCnt>
 800a608:	2800      	cmp	r0, #0
 800a60a:	d0ee      	beq.n	800a5ea <LoRaMacHandleRequestEvents+0x5a>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a60c:	4a03      	ldr	r2, [pc, #12]	@ (800a61c <LoRaMacHandleRequestEvents+0x8c>)
 800a60e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800a612:	f043 0304 	orr.w	r3, r3, #4
 800a616:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800a61a:	e7e6      	b.n	800a5ea <LoRaMacHandleRequestEvents+0x5a>
 800a61c:	20000ed8 	.word	0x20000ed8
 800a620:	2000132c 	.word	0x2000132c

0800a624 <OpenContinuousRxCWindow>:
{
 800a624:	b530      	push	{r4, r5, lr}
 800a626:	b083      	sub	sp, #12
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800a628:	4c15      	ldr	r4, [pc, #84]	@ (800a680 <OpenContinuousRxCWindow+0x5c>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a62a:	4d16      	ldr	r5, [pc, #88]	@ (800a684 <OpenContinuousRxCWindow+0x60>)
 800a62c:	9500      	str	r5, [sp, #0]
 800a62e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a630:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 800a634:	f994 1078 	ldrsb.w	r1, [r4, #120]	@ 0x78
 800a638:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a63c:	f002 fec5 	bl	800d3ca <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a640:	2302      	movs	r3, #2
 800a642:	74eb      	strb	r3, [r5, #19]
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a644:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 800a648:	752b      	strb	r3, [r5, #20]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800a64a:	2301      	movs	r3, #1
 800a64c:	74ab      	strb	r3, [r5, #18]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800a64e:	f105 023c 	add.w	r2, r5, #60	@ 0x3c
 800a652:	4629      	mov	r1, r5
 800a654:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800a658:	f002 feca 	bl	800d3f0 <RegionRxConfig>
 800a65c:	b168      	cbz	r0, 800a67a <OpenContinuousRxCWindow+0x56>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800a65e:	f5a5 747a 	sub.w	r4, r5, #1000	@ 0x3e8
 800a662:	f894 3424 	ldrb.w	r3, [r4, #1060]	@ 0x424
 800a666:	f884 346a 	strb.w	r3, [r4, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 800a66a:	4b07      	ldr	r3, [pc, #28]	@ (800a688 <OpenContinuousRxCWindow+0x64>)
 800a66c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a66e:	2000      	movs	r0, #0
 800a670:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800a672:	f894 33fb 	ldrb.w	r3, [r4, #1019]	@ 0x3fb
 800a676:	f884 3490 	strb.w	r3, [r4, #1168]	@ 0x490
}
 800a67a:	b003      	add	sp, #12
 800a67c:	bd30      	pop	{r4, r5, pc}
 800a67e:	bf00      	nop
 800a680:	2000090c 	.word	0x2000090c
 800a684:	200012c0 	.word	0x200012c0
 800a688:	08013b98 	.word	0x08013b98

0800a68c <RxWindowSetup>:
{
 800a68c:	b538      	push	{r3, r4, r5, lr}
 800a68e:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800a690:	f007 fff8 	bl	8012684 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800a694:	4b0c      	ldr	r3, [pc, #48]	@ (800a6c8 <RxWindowSetup+0x3c>)
 800a696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a698:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800a69a:	4a0c      	ldr	r2, [pc, #48]	@ (800a6cc <RxWindowSetup+0x40>)
 800a69c:	4621      	mov	r1, r4
 800a69e:	4b0c      	ldr	r3, [pc, #48]	@ (800a6d0 <RxWindowSetup+0x44>)
 800a6a0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800a6a4:	f002 fea4 	bl	800d3f0 <RegionRxConfig>
 800a6a8:	b160      	cbz	r0, 800a6c4 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800a6aa:	4d0a      	ldr	r5, [pc, #40]	@ (800a6d4 <RxWindowSetup+0x48>)
 800a6ac:	f895 3424 	ldrb.w	r3, [r5, #1060]	@ 0x424
 800a6b0:	f885 346a 	strb.w	r3, [r5, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800a6b4:	4b04      	ldr	r3, [pc, #16]	@ (800a6c8 <RxWindowSetup+0x3c>)
 800a6b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6b8:	4a05      	ldr	r2, [pc, #20]	@ (800a6d0 <RxWindowSetup+0x44>)
 800a6ba:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 800a6bc:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800a6be:	7ce3      	ldrb	r3, [r4, #19]
 800a6c0:	f885 3490 	strb.w	r3, [r5, #1168]	@ 0x490
}
 800a6c4:	bd38      	pop	{r3, r4, r5, pc}
 800a6c6:	bf00      	nop
 800a6c8:	08013b98 	.word	0x08013b98
 800a6cc:	200012fc 	.word	0x200012fc
 800a6d0:	2000090c 	.word	0x2000090c
 800a6d4:	20000ed8 	.word	0x20000ed8

0800a6d8 <OnRxWindow2TimerEvent>:
{
 800a6d8:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800a6da:	4b13      	ldr	r3, [pc, #76]	@ (800a728 <OnRxWindow2TimerEvent+0x50>)
 800a6dc:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800a6e0:	b903      	cbnz	r3, 800a6e4 <OnRxWindow2TimerEvent+0xc>
}
 800a6e2:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800a6e4:	4810      	ldr	r0, [pc, #64]	@ (800a728 <OnRxWindow2TimerEvent+0x50>)
 800a6e6:	f890 341b 	ldrb.w	r3, [r0, #1051]	@ 0x41b
 800a6ea:	f880 33d0 	strb.w	r3, [r0, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800a6ee:	4b0f      	ldr	r3, [pc, #60]	@ (800a72c <OnRxWindow2TimerEvent+0x54>)
 800a6f0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a6f2:	f8c0 23d4 	str.w	r2, [r0, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a6f6:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800a6fa:	f880 23e0 	strb.w	r2, [r0, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a6fe:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800a702:	f880 23e1 	strb.w	r2, [r0, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800a706:	2200      	movs	r2, #0
 800a708:	f880 23e2 	strb.w	r2, [r0, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800a70c:	2201      	movs	r2, #1
 800a70e:	f880 23e3 	strb.w	r2, [r0, #995]	@ 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a712:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800a716:	f880 33e4 	strb.w	r3, [r0, #996]	@ 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800a71a:	f500 7174 	add.w	r1, r0, #976	@ 0x3d0
 800a71e:	f500 7066 	add.w	r0, r0, #920	@ 0x398
 800a722:	f7ff ffb3 	bl	800a68c <RxWindowSetup>
 800a726:	e7dc      	b.n	800a6e2 <OnRxWindow2TimerEvent+0xa>
 800a728:	20000ed8 	.word	0x20000ed8
 800a72c:	2000090c 	.word	0x2000090c

0800a730 <OnRxWindow1TimerEvent>:
{
 800a730:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800a732:	4811      	ldr	r0, [pc, #68]	@ (800a778 <OnRxWindow1TimerEvent+0x48>)
 800a734:	f890 341b 	ldrb.w	r3, [r0, #1051]	@ 0x41b
 800a738:	f880 33b8 	strb.w	r3, [r0, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800a73c:	4b0f      	ldr	r3, [pc, #60]	@ (800a77c <OnRxWindow1TimerEvent+0x4c>)
 800a73e:	f993 2069 	ldrsb.w	r2, [r3, #105]	@ 0x69
 800a742:	f880 23bb 	strb.w	r2, [r0, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a746:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800a74a:	f880 23c8 	strb.w	r2, [r0, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a74e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800a752:	f880 23c9 	strb.w	r2, [r0, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800a756:	2200      	movs	r2, #0
 800a758:	f880 23ca 	strb.w	r2, [r0, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800a75c:	f880 23cb 	strb.w	r2, [r0, #971]	@ 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a760:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800a764:	f880 33cc 	strb.w	r3, [r0, #972]	@ 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800a768:	f500 716e 	add.w	r1, r0, #952	@ 0x3b8
 800a76c:	f500 7060 	add.w	r0, r0, #896	@ 0x380
 800a770:	f7ff ff8c 	bl	800a68c <RxWindowSetup>
}
 800a774:	bd08      	pop	{r3, pc}
 800a776:	bf00      	nop
 800a778:	20000ed8 	.word	0x20000ed8
 800a77c:	2000090c 	.word	0x2000090c

0800a780 <LoRaMacHandleNvm>:
{
 800a780:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800a782:	4b31      	ldr	r3, [pc, #196]	@ (800a848 <LoRaMacHandleNvm+0xc8>)
 800a784:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800a788:	b103      	cbz	r3, 800a78c <LoRaMacHandleNvm+0xc>
}
 800a78a:	bd38      	pop	{r3, r4, r5, pc}
 800a78c:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800a78e:	2124      	movs	r1, #36	@ 0x24
 800a790:	f005 fdb0 	bl	80102f4 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800a794:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a796:	4283      	cmp	r3, r0
 800a798:	d053      	beq.n	800a842 <LoRaMacHandleNvm+0xc2>
        nvmData->Crypto.Crc32 = crc;
 800a79a:	6260      	str	r0, [r4, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800a79c:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800a79e:	211c      	movs	r1, #28
 800a7a0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a7a4:	f005 fda6 	bl	80102f4 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800a7a8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a7aa:	4283      	cmp	r3, r0
 800a7ac:	d002      	beq.n	800a7b4 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800a7ae:	6460      	str	r0, [r4, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800a7b0:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800a7b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a7b8:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800a7bc:	f005 fd9a 	bl	80102f4 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800a7c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 800a7c4:	4283      	cmp	r3, r0
 800a7c6:	d003      	beq.n	800a7d0 <LoRaMacHandleNvm+0x50>
        nvmData->MacGroup2.Crc32 = crc;
 800a7c8:	f8c4 0148 	str.w	r0, [r4, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800a7cc:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800a7d0:	21d4      	movs	r1, #212	@ 0xd4
 800a7d2:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 800a7d6:	f005 fd8d 	bl	80102f4 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800a7da:	f8d4 3220 	ldr.w	r3, [r4, #544]	@ 0x220
 800a7de:	4283      	cmp	r3, r0
 800a7e0:	d003      	beq.n	800a7ea <LoRaMacHandleNvm+0x6a>
        nvmData->SecureElement.Crc32 = crc;
 800a7e2:	f8c4 0220 	str.w	r0, [r4, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800a7e6:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800a7ea:	2110      	movs	r1, #16
 800a7ec:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 800a7f0:	f005 fd80 	bl	80102f4 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800a7f4:	f8d4 3234 	ldr.w	r3, [r4, #564]	@ 0x234
 800a7f8:	4283      	cmp	r3, r0
 800a7fa:	d003      	beq.n	800a804 <LoRaMacHandleNvm+0x84>
        nvmData->RegionGroup1.Crc32 = crc;
 800a7fc:	f8c4 0234 	str.w	r0, [r4, #564]	@ 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800a800:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800a804:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800a808:	f504 700e 	add.w	r0, r4, #568	@ 0x238
 800a80c:	f005 fd72 	bl	80102f4 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800a810:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	@ 0x5b0
 800a814:	4283      	cmp	r3, r0
 800a816:	d003      	beq.n	800a820 <LoRaMacHandleNvm+0xa0>
        nvmData->RegionGroup2.Crc32 = crc;
 800a818:	f8c4 05b0 	str.w	r0, [r4, #1456]	@ 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800a81c:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800a820:	2114      	movs	r1, #20
 800a822:	f204 50b4 	addw	r0, r4, #1460	@ 0x5b4
 800a826:	f005 fd65 	bl	80102f4 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800a82a:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	@ 0x5c8
 800a82e:	4283      	cmp	r3, r0
 800a830:	d003      	beq.n	800a83a <LoRaMacHandleNvm+0xba>
        nvmData->ClassB.Crc32 = crc;
 800a832:	f8c4 05c8 	str.w	r0, [r4, #1480]	@ 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800a836:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800a83a:	4628      	mov	r0, r5
 800a83c:	f7fe fb5e 	bl	8008efc <CallNvmDataChangeCallback>
 800a840:	e7a3      	b.n	800a78a <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800a842:	2500      	movs	r5, #0
 800a844:	e7ab      	b.n	800a79e <LoRaMacHandleNvm+0x1e>
 800a846:	bf00      	nop
 800a848:	20000ed8 	.word	0x20000ed8

0800a84c <AbpJoinPendingStart>:

/*!
 * \brief Start ABP join simulation
 */
static void AbpJoinPendingStart( void )
{
 800a84c:	b510      	push	{r4, lr}
 800a84e:	b082      	sub	sp, #8
    static bool initialized = false;

    if( initialized == false )
 800a850:	4b11      	ldr	r3, [pc, #68]	@ (800a898 <AbpJoinPendingStart+0x4c>)
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	b1a3      	cbz	r3, 800a880 <AbpJoinPendingStart+0x34>
    {
        initialized = true;
        TimerInit( &MacCtx.AbpJoinPendingTimer, OnAbpJoinPendingTimerEvent );
    }

    MacCtx.MacState |= LORAMAC_ABP_JOIN_PENDING;
 800a856:	4c11      	ldr	r4, [pc, #68]	@ (800a89c <AbpJoinPendingStart+0x50>)
 800a858:	f8d4 3340 	ldr.w	r3, [r4, #832]	@ 0x340
 800a85c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a860:	f8c4 3340 	str.w	r3, [r4, #832]	@ 0x340

    TimerStop( &MacCtx.AbpJoinPendingTimer );
 800a864:	f204 449c 	addw	r4, r4, #1180	@ 0x49c
 800a868:	4620      	mov	r0, r4
 800a86a:	f007 ff0b 	bl	8012684 <UTIL_TIMER_Stop>
    TimerSetValue( &MacCtx.AbpJoinPendingTimer, ABP_JOIN_PENDING_DELAY_MS );
 800a86e:	210a      	movs	r1, #10
 800a870:	4620      	mov	r0, r4
 800a872:	f007 ffa7 	bl	80127c4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.AbpJoinPendingTimer );
 800a876:	4620      	mov	r0, r4
 800a878:	f007 ff5e 	bl	8012738 <UTIL_TIMER_Start>
}
 800a87c:	b002      	add	sp, #8
 800a87e:	bd10      	pop	{r4, pc}
        initialized = true;
 800a880:	4b05      	ldr	r3, [pc, #20]	@ (800a898 <AbpJoinPendingStart+0x4c>)
 800a882:	2201      	movs	r2, #1
 800a884:	701a      	strb	r2, [r3, #0]
        TimerInit( &MacCtx.AbpJoinPendingTimer, OnAbpJoinPendingTimerEvent );
 800a886:	2200      	movs	r2, #0
 800a888:	9200      	str	r2, [sp, #0]
 800a88a:	4b05      	ldr	r3, [pc, #20]	@ (800a8a0 <AbpJoinPendingStart+0x54>)
 800a88c:	f04f 31ff 	mov.w	r1, #4294967295
 800a890:	4804      	ldr	r0, [pc, #16]	@ (800a8a4 <AbpJoinPendingStart+0x58>)
 800a892:	f007 fe99 	bl	80125c8 <UTIL_TIMER_Create>
 800a896:	e7de      	b.n	800a856 <AbpJoinPendingStart+0xa>
 800a898:	20000860 	.word	0x20000860
 800a89c:	20000ed8 	.word	0x20000ed8
 800a8a0:	08008f2d 	.word	0x08008f2d
 800a8a4:	20001374 	.word	0x20001374

0800a8a8 <OnRadioRxTimeout>:
{
 800a8a8:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800a8aa:	4a07      	ldr	r2, [pc, #28]	@ (800a8c8 <OnRadioRxTimeout+0x20>)
 800a8ac:	7813      	ldrb	r3, [r2, #0]
 800a8ae:	f043 0302 	orr.w	r3, r3, #2
 800a8b2:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800a8b4:	f7fe fb0a 	bl	8008ecc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800a8b8:	4b04      	ldr	r3, [pc, #16]	@ (800a8cc <OnRadioRxTimeout+0x24>)
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	2100      	movs	r1, #0
 800a8be:	2002      	movs	r0, #2
 800a8c0:	f007 fbda 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
}
 800a8c4:	bd08      	pop	{r3, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20000878 	.word	0x20000878
 800a8cc:	080132e0 	.word	0x080132e0

0800a8d0 <OnRadioTxTimeout>:
{
 800a8d0:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800a8d2:	4a07      	ldr	r2, [pc, #28]	@ (800a8f0 <OnRadioTxTimeout+0x20>)
 800a8d4:	7813      	ldrb	r3, [r2, #0]
 800a8d6:	f043 0308 	orr.w	r3, r3, #8
 800a8da:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800a8dc:	f7fe faf6 	bl	8008ecc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800a8e0:	4b04      	ldr	r3, [pc, #16]	@ (800a8f4 <OnRadioTxTimeout+0x24>)
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	2002      	movs	r0, #2
 800a8e8:	f007 fbc6 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
}
 800a8ec:	bd08      	pop	{r3, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000878 	.word	0x20000878
 800a8f4:	080132f0 	.word	0x080132f0

0800a8f8 <OnRadioRxDone>:
{
 800a8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8fc:	4680      	mov	r8, r0
 800a8fe:	460f      	mov	r7, r1
 800a900:	4616      	mov	r6, r2
 800a902:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800a904:	f007 fe7e 	bl	8012604 <UTIL_TIMER_GetCurrentTime>
 800a908:	4c0c      	ldr	r4, [pc, #48]	@ (800a93c <OnRadioRxDone+0x44>)
 800a90a:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800a90c:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800a910:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800a912:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800a914:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800a916:	4b0a      	ldr	r3, [pc, #40]	@ (800a940 <OnRadioRxDone+0x48>)
 800a918:	781a      	ldrb	r2, [r3, #0]
 800a91a:	f042 0210 	orr.w	r2, r2, #16
 800a91e:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800a920:	b2d2      	uxtb	r2, r2
 800a922:	f042 0201 	orr.w	r2, r2, #1
 800a926:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800a928:	f7fe fad0 	bl	8008ecc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800a92c:	4b05      	ldr	r3, [pc, #20]	@ (800a944 <OnRadioRxDone+0x4c>)
 800a92e:	2201      	movs	r2, #1
 800a930:	2100      	movs	r1, #0
 800a932:	2002      	movs	r0, #2
 800a934:	f007 fba0 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
}
 800a938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a93c:	20000864 	.word	0x20000864
 800a940:	20000878 	.word	0x20000878
 800a944:	08013300 	.word	0x08013300

0800a948 <OnRadioTxDone>:
{
 800a948:	b510      	push	{r4, lr}
 800a94a:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800a94c:	f007 fe5a 	bl	8012604 <UTIL_TIMER_GetCurrentTime>
 800a950:	4b0c      	ldr	r3, [pc, #48]	@ (800a984 <OnRadioTxDone+0x3c>)
 800a952:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800a954:	466c      	mov	r4, sp
 800a956:	4620      	mov	r0, r4
 800a958:	f007 fdf2 	bl	8012540 <SysTimeGet>
 800a95c:	4b0a      	ldr	r3, [pc, #40]	@ (800a988 <OnRadioTxDone+0x40>)
 800a95e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a962:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800a966:	4a09      	ldr	r2, [pc, #36]	@ (800a98c <OnRadioTxDone+0x44>)
 800a968:	7813      	ldrb	r3, [r2, #0]
 800a96a:	f043 0320 	orr.w	r3, r3, #32
 800a96e:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800a970:	f7fe faac 	bl	8008ecc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800a974:	4b06      	ldr	r3, [pc, #24]	@ (800a990 <OnRadioTxDone+0x48>)
 800a976:	2201      	movs	r2, #1
 800a978:	2100      	movs	r1, #0
 800a97a:	2002      	movs	r0, #2
 800a97c:	f007 fb7c 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
}
 800a980:	b002      	add	sp, #8
 800a982:	bd10      	pop	{r4, pc}
 800a984:	20000874 	.word	0x20000874
 800a988:	20001210 	.word	0x20001210
 800a98c:	20000878 	.word	0x20000878
 800a990:	08013310 	.word	0x08013310

0800a994 <ResetMacParameters>:
{
 800a994:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a996:	b091      	sub	sp, #68	@ 0x44
    if( isRejoin == false )
 800a998:	b918      	cbnz	r0, 800a9a2 <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800a99a:	4b5e      	ldr	r3, [pc, #376]	@ (800ab14 <ResetMacParameters+0x180>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    Nvm.MacGroup1.AdrAckCounter = 0;
 800a9a2:	4c5c      	ldr	r4, [pc, #368]	@ (800ab14 <ResetMacParameters+0x180>)
 800a9a4:	2500      	movs	r5, #0
 800a9a6:	62a5      	str	r5, [r4, #40]	@ 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800a9a8:	4e5b      	ldr	r6, [pc, #364]	@ (800ab18 <ResetMacParameters+0x184>)
 800a9aa:	f886 5418 	strb.w	r5, [r6, #1048]	@ 0x418
    MacCtx.RetransmitTimeoutRetry = false;
 800a9ae:	f886 5419 	strb.w	r5, [r6, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800a9b2:	f8c6 5498 	str.w	r5, [r6, #1176]	@ 0x498
    Nvm.MacGroup2.MaxDCycle = 0;
 800a9b6:	f884 511b 	strb.w	r5, [r4, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800a9ba:	2701      	movs	r7, #1
 800a9bc:	f8a4 7120 	strh.w	r7, [r4, #288]	@ 0x120
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a9c0:	f994 30dc 	ldrsb.w	r3, [r4, #220]	@ 0xdc
 800a9c4:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a9c8:	f994 30dd 	ldrsb.w	r3, [r4, #221]	@ 0xdd
 800a9cc:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800a9d0:	f894 30b1 	ldrb.w	r3, [r4, #177]	@ 0xb1
 800a9d4:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800a9d8:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 800a9dc:	f104 02b4 	add.w	r2, r4, #180	@ 0xb4
 800a9e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9e4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800a9e8:	f104 0374 	add.w	r3, r4, #116	@ 0x74
 800a9ec:	f104 02bc 	add.w	r2, r4, #188	@ 0xbc
 800a9f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9f4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800a9f8:	f894 30c4 	ldrb.w	r3, [r4, #196]	@ 0xc4
 800a9fc:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800aa00:	f894 30c5 	ldrb.w	r3, [r4, #197]	@ 0xc5
 800aa04:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800aa08:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 800aa0c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800aa10:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 800aa14:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800aa18:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	@ 0xd0
 800aa1c:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800aa20:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	@ 0xd2
 800aa24:	f8a4 308a 	strh.w	r3, [r4, #138]	@ 0x8a
    MacCtx.NodeAckRequested = false;
 800aa28:	f886 541a 	strb.w	r5, [r6, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800aa2c:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800aa30:	f884 511d 	strb.w	r5, [r4, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800aa34:	f884 511e 	strb.w	r5, [r4, #286]	@ 0x11e
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800aa38:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800aa3c:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800aa40:	f884 5139 	strb.w	r5, [r4, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800aa44:	f8c4 513c 	str.w	r5, [r4, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800aa48:	f8c4 5140 	str.w	r5, [r4, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800aa4c:	f884 5145 	strb.w	r5, [r4, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800aa50:	f884 5146 	strb.w	r5, [r4, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800aa54:	f884 5147 	strb.w	r5, [r4, #327]	@ 0x147
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800aa58:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800aa5c:	f504 7309 	add.w	r3, r4, #548	@ 0x224
 800aa60:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800aa62:	f504 730e 	add.w	r3, r4, #568	@ 0x238
 800aa66:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800aa68:	4b2c      	ldr	r3, [pc, #176]	@ (800ab1c <ResetMacParameters+0x188>)
 800aa6a:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800aa6c:	a901      	add	r1, sp, #4
 800aa6e:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800aa72:	f002 fc71 	bl	800d358 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800aa76:	f886 541b 	strb.w	r5, [r6, #1051]	@ 0x41b
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800aa7a:	f886 53d0 	strb.w	r5, [r6, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800aa7e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800aa80:	f8c6 33d4 	str.w	r3, [r6, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aa84:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800aa88:	f886 33e0 	strb.w	r3, [r6, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800aa8c:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 800aa90:	f886 33e1 	strb.w	r3, [r6, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800aa94:	f886 53e2 	strb.w	r5, [r6, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800aa98:	f886 73e3 	strb.w	r7, [r6, #995]	@ 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800aa9c:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 800aaa0:	f886 33e4 	strb.w	r3, [r6, #996]	@ 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800aaa4:	f506 747a 	add.w	r4, r6, #1000	@ 0x3e8
 800aaa8:	f506 7c74 	add.w	ip, r6, #976	@ 0x3d0
 800aaac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aab2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800aab6:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800aaba:	f886 73fa 	strb.w	r7, [r6, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800aabe:	2302      	movs	r3, #2
 800aac0:	f886 33fb 	strb.w	r3, [r6, #1019]	@ 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800aac4:	950e      	str	r5, [sp, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800aac6:	950f      	str	r5, [sp, #60]	@ 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800aac8:	f8d6 3348 	ldr.w	r3, [r6, #840]	@ 0x348
 800aacc:	b11b      	cbz	r3, 800aad6 <ResetMacParameters+0x142>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	920e      	str	r2, [sp, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800aad2:	695b      	ldr	r3, [r3, #20]
 800aad4:	930f      	str	r3, [sp, #60]	@ 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800aad6:	4b12      	ldr	r3, [pc, #72]	@ (800ab20 <ResetMacParameters+0x18c>)
 800aad8:	9305      	str	r3, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800aada:	f1a3 0248 	sub.w	r2, r3, #72	@ 0x48
 800aade:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800aae0:	f1a3 0214 	sub.w	r2, r3, #20
 800aae4:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800aae6:	3329      	adds	r3, #41	@ 0x29
 800aae8:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800aaea:	4a0e      	ldr	r2, [pc, #56]	@ (800ab24 <ResetMacParameters+0x190>)
 800aaec:	9209      	str	r2, [sp, #36]	@ 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800aaee:	f1a2 039c 	sub.w	r3, r2, #156	@ 0x9c
 800aaf2:	930a      	str	r3, [sp, #40]	@ 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800aaf4:	f1a2 0398 	sub.w	r3, r2, #152	@ 0x98
 800aaf8:	930b      	str	r3, [sp, #44]	@ 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800aafa:	1d13      	adds	r3, r2, #4
 800aafc:	930c      	str	r3, [sp, #48]	@ 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800aafe:	f102 034c 	add.w	r3, r2, #76	@ 0x4c
 800ab02:	930d      	str	r3, [sp, #52]	@ 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800ab04:	f502 629a 	add.w	r2, r2, #1232	@ 0x4d0
 800ab08:	a90e      	add	r1, sp, #56	@ 0x38
 800ab0a:	a805      	add	r0, sp, #20
 800ab0c:	f001 fc20 	bl	800c350 <LoRaMacClassBInit>
}
 800ab10:	b011      	add	sp, #68	@ 0x44
 800ab12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab14:	2000090c 	.word	0x2000090c
 800ab18:	20000ed8 	.word	0x20000ed8
 800ab1c:	2000087c 	.word	0x2000087c
 800ab20:	20001340 	.word	0x20001340
 800ab24:	200009f0 	.word	0x200009f0

0800ab28 <SwitchClass>:
{
 800ab28:	b570      	push	{r4, r5, r6, lr}
 800ab2a:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800ab2c:	4b45      	ldr	r3, [pc, #276]	@ (800ac44 <SwitchClass+0x11c>)
 800ab2e:	f893 5118 	ldrb.w	r5, [r3, #280]	@ 0x118
 800ab32:	2d01      	cmp	r5, #1
 800ab34:	d06d      	beq.n	800ac12 <SwitchClass+0xea>
 800ab36:	2d02      	cmp	r5, #2
 800ab38:	d072      	beq.n	800ac20 <SwitchClass+0xf8>
 800ab3a:	2d00      	cmp	r5, #0
 800ab3c:	d17d      	bne.n	800ac3a <SwitchClass+0x112>
            if( deviceClass == CLASS_A )
 800ab3e:	bb58      	cbnz	r0, 800ab98 <SwitchClass+0x70>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ab40:	f103 0274 	add.w	r2, r3, #116	@ 0x74
 800ab44:	336c      	adds	r3, #108	@ 0x6c
 800ab46:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ab4a:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800ab4e:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 800ab50:	2c01      	cmp	r4, #1
 800ab52:	d023      	beq.n	800ab9c <SwitchClass+0x74>
            if( deviceClass == CLASS_C )
 800ab54:	2c02      	cmp	r4, #2
 800ab56:	d171      	bne.n	800ac3c <SwitchClass+0x114>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ab58:	4b3a      	ldr	r3, [pc, #232]	@ (800ac44 <SwitchClass+0x11c>)
 800ab5a:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ab5e:	4e3a      	ldr	r6, [pc, #232]	@ (800ac48 <SwitchClass+0x120>)
 800ab60:	f506 747a 	add.w	r4, r6, #1000	@ 0x3e8
 800ab64:	f506 7c74 	add.w	ip, r6, #976	@ 0x3d0
 800ab68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ab6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab6e:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800ab72:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ab76:	2302      	movs	r3, #2
 800ab78:	f886 33fb 	strb.w	r3, [r6, #1019]	@ 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	dd15      	ble.n	800abae <SwitchClass+0x86>
                MacCtx.NodeAckRequested = false;
 800ab82:	4b31      	ldr	r3, [pc, #196]	@ (800ac48 <SwitchClass+0x120>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                Radio.Sleep( );
 800ab8a:	4b30      	ldr	r3, [pc, #192]	@ (800ac4c <SwitchClass+0x124>)
 800ab8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab8e:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800ab90:	f7ff fd48 	bl	800a624 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800ab94:	4628      	mov	r0, r5
 800ab96:	e051      	b.n	800ac3c <SwitchClass+0x114>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ab98:	2003      	movs	r0, #3
 800ab9a:	e7d9      	b.n	800ab50 <SwitchClass+0x28>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f001 fbed 	bl	800c37c <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d1d6      	bne.n	800ab54 <SwitchClass+0x2c>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800aba6:	4b27      	ldr	r3, [pc, #156]	@ (800ac44 <SwitchClass+0x11c>)
 800aba8:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
 800abac:	e7d2      	b.n	800ab54 <SwitchClass+0x2c>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800abae:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800abb2:	4a24      	ldr	r2, [pc, #144]	@ (800ac44 <SwitchClass+0x11c>)
 800abb4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800abb8:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
 800abbc:	b132      	cbz	r2, 800abcc <SwitchClass+0xa4>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800abbe:	4a21      	ldr	r2, [pc, #132]	@ (800ac44 <SwitchClass+0x11c>)
 800abc0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800abc4:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800abc8:	2a02      	cmp	r2, #2
 800abca:	d002      	beq.n	800abd2 <SwitchClass+0xaa>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800abcc:	3301      	adds	r3, #1
 800abce:	b25b      	sxtb	r3, r3
 800abd0:	e7d5      	b.n	800ab7e <SwitchClass+0x56>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800abd2:	4a1c      	ldr	r2, [pc, #112]	@ (800ac44 <SwitchClass+0x11c>)
 800abd4:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 800abd8:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
 800abdc:	6751      	str	r1, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800abde:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 800abe2:	f882 3078 	strb.w	r3, [r2, #120]	@ 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800abe6:	4b18      	ldr	r3, [pc, #96]	@ (800ac48 <SwitchClass+0x120>)
 800abe8:	f893 041b 	ldrb.w	r0, [r3, #1051]	@ 0x41b
 800abec:	f883 03e8 	strb.w	r0, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800abf0:	f8c3 13ec 	str.w	r1, [r3, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800abf4:	f892 107d 	ldrb.w	r1, [r2, #125]	@ 0x7d
 800abf8:	f883 13f8 	strb.w	r1, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800abfc:	f892 208c 	ldrb.w	r2, [r2, #140]	@ 0x8c
 800ac00:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ac04:	2203      	movs	r2, #3
 800ac06:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800ac10:	e7b7      	b.n	800ab82 <SwitchClass+0x5a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ac12:	f001 fbb3 	bl	800c37c <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800ac16:	b988      	cbnz	r0, 800ac3c <SwitchClass+0x114>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ac18:	4b0a      	ldr	r3, [pc, #40]	@ (800ac44 <SwitchClass+0x11c>)
 800ac1a:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
 800ac1e:	e00d      	b.n	800ac3c <SwitchClass+0x114>
            if( deviceClass == CLASS_A )
 800ac20:	b968      	cbnz	r0, 800ac3e <SwitchClass+0x116>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800ac22:	4b09      	ldr	r3, [pc, #36]	@ (800ac48 <SwitchClass+0x120>)
 800ac24:	2206      	movs	r2, #6
 800ac26:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ac2a:	4b06      	ldr	r3, [pc, #24]	@ (800ac44 <SwitchClass+0x11c>)
 800ac2c:	f883 0118 	strb.w	r0, [r3, #280]	@ 0x118
                Radio.Sleep( );
 800ac30:	4b06      	ldr	r3, [pc, #24]	@ (800ac4c <SwitchClass+0x124>)
 800ac32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac34:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800ac36:	4620      	mov	r0, r4
 800ac38:	e000      	b.n	800ac3c <SwitchClass+0x114>
    switch( Nvm.MacGroup2.DeviceClass )
 800ac3a:	2003      	movs	r0, #3
}
 800ac3c:	bd70      	pop	{r4, r5, r6, pc}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac3e:	2003      	movs	r0, #3
 800ac40:	e7fc      	b.n	800ac3c <SwitchClass+0x114>
 800ac42:	bf00      	nop
 800ac44:	2000090c 	.word	0x2000090c
 800ac48:	20000ed8 	.word	0x20000ed8
 800ac4c:	08013b98 	.word	0x08013b98

0800ac50 <SendReJoinReq>:
{
 800ac50:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800ac52:	28ff      	cmp	r0, #255	@ 0xff
 800ac54:	d003      	beq.n	800ac5e <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800ac56:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800ac58:	f7ff fba6 	bl	800a3a8 <ScheduleTx>
}
 800ac5c:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800ac5e:	2000      	movs	r0, #0
 800ac60:	f7ff ff62 	bl	800ab28 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800ac64:	4d0a      	ldr	r5, [pc, #40]	@ (800ac90 <SendReJoinReq+0x40>)
 800ac66:	2400      	movs	r4, #0
 800ac68:	f885 4104 	strb.w	r4, [r5, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800ac6c:	1cab      	adds	r3, r5, #2
 800ac6e:	f8c5 3108 	str.w	r3, [r5, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ac72:	23ff      	movs	r3, #255	@ 0xff
 800ac74:	f885 310c 	strb.w	r3, [r5, #268]	@ 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800ac78:	f885 410d 	strb.w	r4, [r5, #269]	@ 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800ac7c:	f505 7087 	add.w	r0, r5, #270	@ 0x10e
 800ac80:	f005 f9fa 	bl	8010078 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800ac84:	f505 708b 	add.w	r0, r5, #278	@ 0x116
 800ac88:	f005 f9d8 	bl	801003c <SecureElementGetDevEui>
            allowDelayedTx = false;
 800ac8c:	4620      	mov	r0, r4
            break;
 800ac8e:	e7e3      	b.n	800ac58 <SendReJoinReq+0x8>
 800ac90:	20000ed8 	.word	0x20000ed8

0800ac94 <PrepareFrame>:
{
 800ac94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac98:	b083      	sub	sp, #12
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	460e      	mov	r6, r1
 800ac9e:	4617      	mov	r7, r2
 800aca0:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
    MacCtx.PktBufferLen = 0;
 800aca4:	495a      	ldr	r1, [pc, #360]	@ (800ae10 <PrepareFrame+0x17c>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800acaa:	f881 241a 	strb.w	r2, [r1, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 800acae:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800acb0:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800acb2:	4699      	mov	r9, r3
 800acb4:	b1cb      	cbz	r3, 800acea <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800acb6:	4c57      	ldr	r4, [pc, #348]	@ (800ae14 <PrepareFrame+0x180>)
 800acb8:	4642      	mov	r2, r8
 800acba:	4649      	mov	r1, r9
 800acbc:	4620      	mov	r0, r4
 800acbe:	f005 faf8 	bl	80102b2 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800acc2:	fa5f f088 	uxtb.w	r0, r8
 800acc6:	f884 00ff 	strb.w	r0, [r4, #255]	@ 0xff
 800acca:	f5a4 749c 	sub.w	r4, r4, #312	@ 0x138
    MacCtx.PktBuffer[0] = macHdr->Value;
 800acce:	782b      	ldrb	r3, [r5, #0]
 800acd0:	70a3      	strb	r3, [r4, #2]
    switch( macHdr->Bits.MType )
 800acd2:	782b      	ldrb	r3, [r5, #0]
 800acd4:	095b      	lsrs	r3, r3, #5
 800acd6:	2b04      	cmp	r3, #4
 800acd8:	d009      	beq.n	800acee <PrepareFrame+0x5a>
 800acda:	2b07      	cmp	r3, #7
 800acdc:	d079      	beq.n	800add2 <PrepareFrame+0x13e>
 800acde:	2b02      	cmp	r3, #2
 800ace0:	d009      	beq.n	800acf6 <PrepareFrame+0x62>
 800ace2:	2002      	movs	r0, #2
}
 800ace4:	b003      	add	sp, #12
 800ace6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800acea:	4690      	mov	r8, r2
 800acec:	e7e3      	b.n	800acb6 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800acee:	4b48      	ldr	r3, [pc, #288]	@ (800ae10 <PrepareFrame+0x17c>)
 800acf0:	2201      	movs	r2, #1
 800acf2:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800acf6:	4b46      	ldr	r3, [pc, #280]	@ (800ae10 <PrepareFrame+0x17c>)
 800acf8:	2204      	movs	r2, #4
 800acfa:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800acfe:	1c9a      	adds	r2, r3, #2
 800ad00:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ad04:	22ff      	movs	r2, #255	@ 0xff
 800ad06:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800ad0a:	782a      	ldrb	r2, [r5, #0]
 800ad0c:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800ad10:	f883 7128 	strb.w	r7, [r3, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800ad14:	4a40      	ldr	r2, [pc, #256]	@ (800ae18 <PrepareFrame+0x184>)
 800ad16:	f8d2 20e4 	ldr.w	r2, [r2, #228]	@ 0xe4
 800ad1a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800ad1e:	7832      	ldrb	r2, [r6, #0]
 800ad20:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800ad24:	f883 0130 	strb.w	r0, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800ad28:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 800ad2c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ad30:	a801      	add	r0, sp, #4
 800ad32:	f001 ffad 	bl	800cc90 <LoRaMacCryptoGetFCntUp>
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d15e      	bne.n	800adf8 <PrepareFrame+0x164>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800ad3a:	9a01      	ldr	r2, [sp, #4]
 800ad3c:	4b34      	ldr	r3, [pc, #208]	@ (800ae10 <PrepareFrame+0x17c>)
 800ad3e:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800ad42:	2100      	movs	r1, #0
 800ad44:	f883 1445 	strb.w	r1, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 800ad48:	f883 1444 	strb.w	r1, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800ad4c:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ad50:	4668      	mov	r0, sp
 800ad52:	f001 fc45 	bl	800c5e0 <LoRaMacCommandsGetSizeSerializedCmds>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d150      	bne.n	800adfc <PrepareFrame+0x168>
            if( macCmdsSize > 0 )
 800ad5a:	9b00      	ldr	r3, [sp, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d0c1      	beq.n	800ace4 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800ad60:	4b2d      	ldr	r3, [pc, #180]	@ (800ae18 <PrepareFrame+0x184>)
 800ad62:	f993 0039 	ldrsb.w	r0, [r3, #57]	@ 0x39
 800ad66:	f7fe f8f5 	bl	8008f54 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800ad6a:	4b29      	ldr	r3, [pc, #164]	@ (800ae10 <PrepareFrame+0x17c>)
 800ad6c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800ad70:	b113      	cbz	r3, 800ad78 <PrepareFrame+0xe4>
 800ad72:	9a00      	ldr	r2, [sp, #0]
 800ad74:	2a0f      	cmp	r2, #15
 800ad76:	d915      	bls.n	800ada4 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800ad78:	b113      	cbz	r3, 800ad80 <PrepareFrame+0xec>
 800ad7a:	9b00      	ldr	r3, [sp, #0]
 800ad7c:	2b0f      	cmp	r3, #15
 800ad7e:	d821      	bhi.n	800adc4 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800ad80:	4a26      	ldr	r2, [pc, #152]	@ (800ae1c <PrepareFrame+0x188>)
 800ad82:	4669      	mov	r1, sp
 800ad84:	f001 fc38 	bl	800c5f8 <LoRaMacCommandsSerializeCmds>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d13d      	bne.n	800ae08 <PrepareFrame+0x174>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800ad8c:	4b20      	ldr	r3, [pc, #128]	@ (800ae10 <PrepareFrame+0x17c>)
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800ad94:	f203 42b4 	addw	r2, r3, #1204	@ 0x4b4
 800ad98:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800ad9c:	9a00      	ldr	r2, [sp, #0]
 800ad9e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 800ada2:	e79f      	b.n	800ace4 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800ada4:	4a1e      	ldr	r2, [pc, #120]	@ (800ae20 <PrepareFrame+0x18c>)
 800ada6:	4669      	mov	r1, sp
 800ada8:	200f      	movs	r0, #15
 800adaa:	f001 fc25 	bl	800c5f8 <LoRaMacCommandsSerializeCmds>
 800adae:	bb38      	cbnz	r0, 800ae00 <PrepareFrame+0x16c>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800adb0:	7833      	ldrb	r3, [r6, #0]
 800adb2:	9a00      	ldr	r2, [sp, #0]
 800adb4:	f362 0303 	bfi	r3, r2, #0, #4
 800adb8:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800adba:	b2da      	uxtb	r2, r3
 800adbc:	4b14      	ldr	r3, [pc, #80]	@ (800ae10 <PrepareFrame+0x17c>)
 800adbe:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 800adc2:	e78f      	b.n	800ace4 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800adc4:	4a15      	ldr	r2, [pc, #84]	@ (800ae1c <PrepareFrame+0x188>)
 800adc6:	4669      	mov	r1, sp
 800adc8:	f001 fc16 	bl	800c5f8 <LoRaMacCommandsSerializeCmds>
 800adcc:	b1d0      	cbz	r0, 800ae04 <PrepareFrame+0x170>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800adce:	2013      	movs	r0, #19
 800add0:	e788      	b.n	800ace4 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800add2:	f1b9 0f00 	cmp.w	r9, #0
 800add6:	d019      	beq.n	800ae0c <PrepareFrame+0x178>
 800add8:	2800      	cmp	r0, #0
 800adda:	d083      	beq.n	800ace4 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800addc:	4c11      	ldr	r4, [pc, #68]	@ (800ae24 <PrepareFrame+0x190>)
 800adde:	fa5f f288 	uxtb.w	r2, r8
 800ade2:	4649      	mov	r1, r9
 800ade4:	4620      	mov	r0, r4
 800ade6:	f005 fa64 	bl	80102b2 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800adea:	f894 3234 	ldrb.w	r3, [r4, #564]	@ 0x234
 800adee:	3301      	adds	r3, #1
 800adf0:	f824 3c03 	strh.w	r3, [r4, #-3]
    return LORAMAC_STATUS_OK;
 800adf4:	2000      	movs	r0, #0
 800adf6:	e775      	b.n	800ace4 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800adf8:	2012      	movs	r0, #18
 800adfa:	e773      	b.n	800ace4 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800adfc:	2013      	movs	r0, #19
 800adfe:	e771      	b.n	800ace4 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ae00:	2013      	movs	r0, #19
 800ae02:	e76f      	b.n	800ace4 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800ae04:	200a      	movs	r0, #10
 800ae06:	e76d      	b.n	800ace4 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ae08:	2013      	movs	r0, #19
 800ae0a:	e76b      	b.n	800ace4 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	e769      	b.n	800ace4 <PrepareFrame+0x50>
 800ae10:	20000ed8 	.word	0x20000ed8
 800ae14:	20001010 	.word	0x20001010
 800ae18:	2000090c 	.word	0x2000090c
 800ae1c:	2000138c 	.word	0x2000138c
 800ae20:	20000ff0 	.word	0x20000ff0
 800ae24:	20000edb 	.word	0x20000edb

0800ae28 <Send>:
{
 800ae28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae2c:	b08a      	sub	sp, #40	@ 0x28
 800ae2e:	4617      	mov	r7, r2
 800ae30:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ae32:	4c44      	ldr	r4, [pc, #272]	@ (800af44 <Send+0x11c>)
 800ae34:	f994 a039 	ldrsb.w	sl, [r4, #57]	@ 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800ae38:	f994 9038 	ldrsb.w	r9, [r4, #56]	@ 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ae3c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ae3e:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ae40:	f894 3130 	ldrb.w	r3, [r4, #304]	@ 0x130
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d07a      	beq.n	800af3e <Send+0x116>
 800ae48:	4605      	mov	r5, r0
 800ae4a:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800ae4c:	f894 311b 	ldrb.w	r3, [r4, #283]	@ 0x11b
 800ae50:	b90b      	cbnz	r3, 800ae56 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800ae52:	2100      	movs	r1, #0
 800ae54:	6321      	str	r1, [r4, #48]	@ 0x30
    fCtrl.Value = 0;
 800ae56:	2300      	movs	r3, #0
 800ae58:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800ae5c:	4839      	ldr	r0, [pc, #228]	@ (800af44 <Send+0x11c>)
 800ae5e:	f890 111a 	ldrb.w	r1, [r0, #282]	@ 0x11a
 800ae62:	f361 13c7 	bfi	r3, r1, #7, #1
 800ae66:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ae6a:	f890 3118 	ldrb.w	r3, [r0, #280]	@ 0x118
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d052      	beq.n	800af18 <Send+0xf0>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800ae72:	4b34      	ldr	r3, [pc, #208]	@ (800af44 <Send+0x11c>)
 800ae74:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800ae78:	b12b      	cbz	r3, 800ae86 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800ae7a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800ae7e:	f043 0320 	orr.w	r3, r3, #32
 800ae82:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    adrNext.UpdateChanMask = true;
 800ae86:	2301      	movs	r3, #1
 800ae88:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800ae8c:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ae90:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800ae92:	492c      	ldr	r1, [pc, #176]	@ (800af44 <Send+0x11c>)
 800ae94:	f8b1 3088 	ldrh.w	r3, [r1, #136]	@ 0x88
 800ae98:	f8ad 3014 	strh.w	r3, [sp, #20]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800ae9c:	f8b1 308a 	ldrh.w	r3, [r1, #138]	@ 0x8a
 800aea0:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800aea4:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800aea8:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800aeac:	f891 307c 	ldrb.w	r3, [r1, #124]	@ 0x7c
 800aeb0:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800aeb4:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 800aeb8:	f88d 301c 	strb.w	r3, [sp, #28]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800aebc:	460b      	mov	r3, r1
 800aebe:	f813 2f68 	ldrb.w	r2, [r3, #104]!
 800aec2:	f88d 201a 	strb.w	r2, [sp, #26]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800aec6:	aa08      	add	r2, sp, #32
 800aec8:	9200      	str	r2, [sp, #0]
 800aeca:	f101 0238 	add.w	r2, r1, #56	@ 0x38
 800aece:	3139      	adds	r1, #57	@ 0x39
 800aed0:	a803      	add	r0, sp, #12
 800aed2:	f001 f9c3 	bl	800c25c <LoRaMacAdrCalcNext>
 800aed6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800aeda:	f360 1386 	bfi	r3, r0, #6, #1
 800aede:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800aee2:	f8cd 8000 	str.w	r8, [sp]
 800aee6:	463b      	mov	r3, r7
 800aee8:	4632      	mov	r2, r6
 800aeea:	a909      	add	r1, sp, #36	@ 0x24
 800aeec:	4628      	mov	r0, r5
 800aeee:	f7ff fed1 	bl	800ac94 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800aef2:	4604      	mov	r4, r0
 800aef4:	b108      	cbz	r0, 800aefa <Send+0xd2>
 800aef6:	280a      	cmp	r0, #10
 800aef8:	d104      	bne.n	800af04 <Send+0xdc>
        status = ScheduleTx( allowDelayedTx );
 800aefa:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 800aefe:	f7ff fa53 	bl	800a3a8 <ScheduleTx>
 800af02:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800af04:	b17c      	cbz	r4, 800af26 <Send+0xfe>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800af06:	4b0f      	ldr	r3, [pc, #60]	@ (800af44 <Send+0x11c>)
 800af08:	f883 a039 	strb.w	sl, [r3, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800af0c:	f883 9038 	strb.w	r9, [r3, #56]	@ 0x38
}
 800af10:	4620      	mov	r0, r4
 800af12:	b00a      	add	sp, #40	@ 0x28
 800af14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800af18:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800af1c:	f043 0310 	orr.w	r3, r3, #16
 800af20:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800af24:	e7a5      	b.n	800ae72 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800af26:	4b07      	ldr	r3, [pc, #28]	@ (800af44 <Send+0x11c>)
 800af28:	2200      	movs	r2, #0
 800af2a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800af2e:	9a08      	ldr	r2, [sp, #32]
 800af30:	629a      	str	r2, [r3, #40]	@ 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800af32:	f001 fb23 	bl	800c57c <LoRaMacCommandsRemoveNoneStickyCmds>
 800af36:	2800      	cmp	r0, #0
 800af38:	d0ea      	beq.n	800af10 <Send+0xe8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800af3a:	2413      	movs	r4, #19
 800af3c:	e7e8      	b.n	800af10 <Send+0xe8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800af3e:	2407      	movs	r4, #7
 800af40:	e7e6      	b.n	800af10 <Send+0xe8>
 800af42:	bf00      	nop
 800af44:	2000090c 	.word	0x2000090c

0800af48 <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800af48:	4b0c      	ldr	r3, [pc, #48]	@ (800af7c <LoRaMacIsBusy+0x34>)
 800af4a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d00c      	beq.n	800af6c <LoRaMacIsBusy+0x24>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800af52:	4a0b      	ldr	r2, [pc, #44]	@ (800af80 <LoRaMacIsBusy+0x38>)
 800af54:	7812      	ldrb	r2, [r2, #0]
 800af56:	f012 0f01 	tst.w	r2, #1
 800af5a:	d109      	bne.n	800af70 <LoRaMacIsBusy+0x28>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800af5c:	b953      	cbnz	r3, 800af74 <LoRaMacIsBusy+0x2c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800af5e:	4b07      	ldr	r3, [pc, #28]	@ (800af7c <LoRaMacIsBusy+0x34>)
 800af60:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800af64:	2b01      	cmp	r3, #1
 800af66:	d007      	beq.n	800af78 <LoRaMacIsBusy+0x30>
    return true;
 800af68:	2001      	movs	r0, #1
 800af6a:	4770      	bx	lr
        return false;
 800af6c:	2000      	movs	r0, #0
 800af6e:	4770      	bx	lr
        return true;
 800af70:	2001      	movs	r0, #1
 800af72:	4770      	bx	lr
    return true;
 800af74:	2001      	movs	r0, #1
 800af76:	4770      	bx	lr
        return false;
 800af78:	2000      	movs	r0, #0
}
 800af7a:	4770      	bx	lr
 800af7c:	20000ed8 	.word	0x20000ed8
 800af80:	20000878 	.word	0x20000878

0800af84 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800af84:	4b04      	ldr	r3, [pc, #16]	@ (800af98 <LoRaMacIsStopped+0x14>)
 800af86:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d001      	beq.n	800af92 <LoRaMacIsStopped+0xe>
    return false;
 800af8e:	2000      	movs	r0, #0
 800af90:	4770      	bx	lr
        return true;
 800af92:	2001      	movs	r0, #1
}
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	20000ed8 	.word	0x20000ed8

0800af9c <LoRaMacProcess>:
{
 800af9c:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800af9e:	f7ff f853 	bl	800a048 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800afa2:	f001 f9fc 	bl	800c39e <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800afa6:	4b1f      	ldr	r3, [pc, #124]	@ (800b024 <LoRaMacProcess+0x88>)
 800afa8:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800afac:	f013 0f10 	tst.w	r3, #16
 800afb0:	d10d      	bne.n	800afce <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800afb2:	f7fd fe83 	bl	8008cbc <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800afb6:	4b1b      	ldr	r3, [pc, #108]	@ (800b024 <LoRaMacProcess+0x88>)
 800afb8:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d022      	beq.n	800b006 <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800afc0:	4b18      	ldr	r3, [pc, #96]	@ (800b024 <LoRaMacProcess+0x88>)
 800afc2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800afc6:	f013 0f20 	tst.w	r3, #32
 800afca:	d11f      	bne.n	800b00c <LoRaMacProcess+0x70>
}
 800afcc:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800afce:	2000      	movs	r0, #0
 800afd0:	f7fd fe6e 	bl	8008cb0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800afd4:	f7fd feaa 	bl	8008d2c <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800afd8:	f7fd ff9c 	bl	8008f14 <IsRequestPending>
 800afdc:	b110      	cbz	r0, 800afe4 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800afde:	f7fe f89b 	bl	8009118 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800afe2:	b918      	cbnz	r0, 800afec <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800afe4:	f7ff f872 	bl	800a0cc <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800afe8:	f7ff fa94 	bl	800a514 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800afec:	f7ff fad0 	bl	800a590 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800aff0:	2001      	movs	r0, #1
 800aff2:	f7fd fe5d 	bl	8008cb0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800aff6:	4a0b      	ldr	r2, [pc, #44]	@ (800b024 <LoRaMacProcess+0x88>)
 800aff8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800affc:	f043 0320 	orr.w	r3, r3, #32
 800b000:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800b004:	e7d5      	b.n	800afb2 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800b006:	f7ff fb0d 	bl	800a624 <OpenContinuousRxCWindow>
 800b00a:	e7d9      	b.n	800afc0 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800b00c:	4a05      	ldr	r2, [pc, #20]	@ (800b024 <LoRaMacProcess+0x88>)
 800b00e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b012:	f023 0320 	bic.w	r3, r3, #32
 800b016:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 800b01a:	4803      	ldr	r0, [pc, #12]	@ (800b028 <LoRaMacProcess+0x8c>)
 800b01c:	f7ff fbb0 	bl	800a780 <LoRaMacHandleNvm>
}
 800b020:	e7d4      	b.n	800afcc <LoRaMacProcess+0x30>
 800b022:	bf00      	nop
 800b024:	20000ed8 	.word	0x20000ed8
 800b028:	2000090c 	.word	0x2000090c

0800b02c <LoRaMacInitialization>:
{
 800b02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b030:	b08d      	sub	sp, #52	@ 0x34
    if( ( primitives == NULL ) ||
 800b032:	2800      	cmp	r0, #0
 800b034:	f000 81a3 	beq.w	800b37e <LoRaMacInitialization+0x352>
 800b038:	4688      	mov	r8, r1
 800b03a:	4691      	mov	r9, r2
 800b03c:	4607      	mov	r7, r0
 800b03e:	2900      	cmp	r1, #0
 800b040:	f000 819f 	beq.w	800b382 <LoRaMacInitialization+0x356>
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800b044:	6803      	ldr	r3, [r0, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	f000 819d 	beq.w	800b386 <LoRaMacInitialization+0x35a>
        ( primitives->MacMcpsIndication == NULL ) ||
 800b04c:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f000 819b 	beq.w	800b38a <LoRaMacInitialization+0x35e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800b054:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 8199 	beq.w	800b38e <LoRaMacInitialization+0x362>
        ( primitives->MacMlmeIndication == NULL ) )
 800b05c:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800b05e:	2b00      	cmp	r3, #0
 800b060:	f000 8197 	beq.w	800b392 <LoRaMacInitialization+0x366>
    if( RegionIsActive( region ) == false )
 800b064:	4610      	mov	r0, r2
 800b066:	f002 f948 	bl	800d2fa <RegionIsActive>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	f000 8193 	beq.w	800b396 <LoRaMacInitialization+0x36a>
    LoRaMacConfirmQueueInit( primitives );
 800b070:	4638      	mov	r0, r7
 800b072:	f001 fb55 	bl	800c720 <LoRaMacConfirmQueueInit>
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800b076:	4ccb      	ldr	r4, [pc, #812]	@ (800b3a4 <LoRaMacInitialization+0x378>)
 800b078:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800b07c:	2100      	movs	r1, #0
 800b07e:	4620      	mov	r0, r4
 800b080:	f005 f92f 	bl	80102e2 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800b084:	4ec8      	ldr	r6, [pc, #800]	@ (800b3a8 <LoRaMacInitialization+0x37c>)
 800b086:	f240 5234 	movw	r2, #1332	@ 0x534
 800b08a:	2100      	movs	r1, #0
 800b08c:	4630      	mov	r0, r6
 800b08e:	f005 f928 	bl	80102e2 <memset1>
    Nvm.MacGroup2.Region = region;
 800b092:	f884 9048 	strb.w	r9, [r4, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800b096:	2500      	movs	r5, #0
 800b098:	f884 5118 	strb.w	r5, [r4, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800b09c:	f884 508c 	strb.w	r5, [r4, #140]	@ 0x8c
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800b0a0:	4bc2      	ldr	r3, [pc, #776]	@ (800b3ac <LoRaMacInitialization+0x380>)
 800b0a2:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
    params.Type = INIT_TYPE_DEFAULTS;
 800b0a6:	f88d 5020 	strb.w	r5, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800b0aa:	f504 7309 	add.w	r3, r4, #548	@ 0x224
 800b0ae:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800b0b0:	f504 730e 	add.w	r3, r4, #568	@ 0x238
 800b0b4:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800b0b6:	4bbe      	ldr	r3, [pc, #760]	@ (800b3b0 <LoRaMacInitialization+0x384>)
 800b0b8:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b0ba:	a905      	add	r1, sp, #20
 800b0bc:	4648      	mov	r0, r9
 800b0be:	f002 f94b 	bl	800d358 <RegionInitDefaults>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800b0c2:	230f      	movs	r3, #15
 800b0c4:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b0c8:	a90a      	add	r1, sp, #40	@ 0x28
 800b0ca:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b0ce:	f002 f91e 	bl	800d30e <RegionGetPhyParam>
 800b0d2:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800b0d4:	1b40      	subs	r0, r0, r5
 800b0d6:	bf18      	it	ne
 800b0d8:	2001      	movne	r0, #1
 800b0da:	f884 011c 	strb.w	r0, [r4, #284]	@ 0x11c
    getPhy.Attribute = PHY_DEF_TX_POWER;
 800b0de:	f04f 0a0a 	mov.w	sl, #10
 800b0e2:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b0e6:	a90a      	add	r1, sp, #40	@ 0x28
 800b0e8:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b0ec:	f002 f90f 	bl	800d30e <RegionGetPhyParam>
 800b0f0:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800b0f2:	f884 00dc 	strb.w	r0, [r4, #220]	@ 0xdc
    getPhy.Attribute = PHY_DEF_TX_DR;
 800b0f6:	f04f 0906 	mov.w	r9, #6
 800b0fa:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b0fe:	a90a      	add	r1, sp, #40	@ 0x28
 800b100:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b104:	f002 f903 	bl	800d30e <RegionGetPhyParam>
 800b108:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800b10a:	f884 00dd 	strb.w	r0, [r4, #221]	@ 0xdd
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800b10e:	2310      	movs	r3, #16
 800b110:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b114:	a90a      	add	r1, sp, #40	@ 0x28
 800b116:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b11a:	f002 f8f8 	bl	800d30e <RegionGetPhyParam>
 800b11e:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800b120:	f8c4 009c 	str.w	r0, [r4, #156]	@ 0x9c
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800b124:	2311      	movs	r3, #17
 800b126:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b12a:	a90a      	add	r1, sp, #40	@ 0x28
 800b12c:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b130:	f002 f8ed 	bl	800d30e <RegionGetPhyParam>
 800b134:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800b136:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800b13a:	2312      	movs	r3, #18
 800b13c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b140:	a90a      	add	r1, sp, #40	@ 0x28
 800b142:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b146:	f002 f8e2 	bl	800d30e <RegionGetPhyParam>
 800b14a:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800b14c:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800b150:	2313      	movs	r3, #19
 800b152:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b156:	a90a      	add	r1, sp, #40	@ 0x28
 800b158:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b15c:	f002 f8d7 	bl	800d30e <RegionGetPhyParam>
 800b160:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800b162:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800b166:	2314      	movs	r3, #20
 800b168:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b16c:	a90a      	add	r1, sp, #40	@ 0x28
 800b16e:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b172:	f002 f8cc 	bl	800d30e <RegionGetPhyParam>
 800b176:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800b178:	f8c4 00ac 	str.w	r0, [r4, #172]	@ 0xac
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800b17c:	2316      	movs	r3, #22
 800b17e:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b182:	a90a      	add	r1, sp, #40	@ 0x28
 800b184:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b188:	f002 f8c1 	bl	800d30e <RegionGetPhyParam>
 800b18c:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800b18e:	f884 00b1 	strb.w	r0, [r4, #177]	@ 0xb1
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800b192:	2317      	movs	r3, #23
 800b194:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b198:	a90a      	add	r1, sp, #40	@ 0x28
 800b19a:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b19e:	f002 f8b6 	bl	800d30e <RegionGetPhyParam>
 800b1a2:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800b1a4:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800b1a8:	f8c4 00bc 	str.w	r0, [r4, #188]	@ 0xbc
    getPhy.Attribute = PHY_DEF_RX2_DR;
 800b1ac:	2318      	movs	r3, #24
 800b1ae:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b1b2:	a90a      	add	r1, sp, #40	@ 0x28
 800b1b4:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b1b8:	f002 f8a9 	bl	800d30e <RegionGetPhyParam>
 800b1bc:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800b1be:	b2c0      	uxtb	r0, r0
 800b1c0:	f884 00b8 	strb.w	r0, [r4, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800b1c4:	f884 00c0 	strb.w	r0, [r4, #192]	@ 0xc0
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800b1c8:	231d      	movs	r3, #29
 800b1ca:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b1ce:	a90a      	add	r1, sp, #40	@ 0x28
 800b1d0:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b1d4:	f002 f89b 	bl	800d30e <RegionGetPhyParam>
 800b1d8:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800b1da:	f884 00c4 	strb.w	r0, [r4, #196]	@ 0xc4
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800b1de:	231e      	movs	r3, #30
 800b1e0:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b1e4:	a90a      	add	r1, sp, #40	@ 0x28
 800b1e6:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b1ea:	f002 f890 	bl	800d30e <RegionGetPhyParam>
 800b1ee:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800b1f0:	f884 00c5 	strb.w	r0, [r4, #197]	@ 0xc5
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800b1f4:	231f      	movs	r3, #31
 800b1f6:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b1fa:	a90a      	add	r1, sp, #40	@ 0x28
 800b1fc:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b200:	f002 f885 	bl	800d30e <RegionGetPhyParam>
 800b204:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800b206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b208:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800b20c:	2320      	movs	r3, #32
 800b20e:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b212:	a90a      	add	r1, sp, #40	@ 0x28
 800b214:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b218:	f002 f879 	bl	800d30e <RegionGetPhyParam>
 800b21c:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800b21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b220:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800b224:	230b      	movs	r3, #11
 800b226:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b22a:	a90a      	add	r1, sp, #40	@ 0x28
 800b22c:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b230:	f002 f86d 	bl	800d30e <RegionGetPhyParam>
 800b234:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800b236:	f8a4 00d0 	strh.w	r0, [r4, #208]	@ 0xd0
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800b23a:	230c      	movs	r3, #12
 800b23c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b240:	a90a      	add	r1, sp, #40	@ 0x28
 800b242:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800b246:	f002 f862 	bl	800d30e <RegionGetPhyParam>
 800b24a:	9009      	str	r0, [sp, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800b24c:	f8a4 00d2 	strh.w	r0, [r4, #210]	@ 0xd2
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800b250:	f04f 0b01 	mov.w	fp, #1
 800b254:	f884 b0b0 	strb.w	fp, [r4, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800b258:	f8c4 a094 	str.w	sl, [r4, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800b25c:	f884 9098 	strb.w	r9, [r4, #152]	@ 0x98
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800b260:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800b264:	f884 9050 	strb.w	r9, [r4, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800b268:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800b26c:	6563      	str	r3, [r4, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800b26e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800b272:	65a3      	str	r3, [r4, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800b274:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800b278:	65e3      	str	r3, [r4, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800b27a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800b27e:	6623      	str	r3, [r4, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800b280:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800b284:	6663      	str	r3, [r4, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800b286:	f884 b068 	strb.w	fp, [r4, #104]	@ 0x68
    Nvm.MacGroup2.IsCertPortOn = true;
 800b28a:	f884 b11f 	strb.w	fp, [r4, #287]	@ 0x11f
    MacCtx.MacCallbacks = callbacks;
 800b28e:	f8c6 8348 	str.w	r8, [r6, #840]	@ 0x348
    ResetMacParameters( false );
 800b292:	4628      	mov	r0, r5
 800b294:	f7ff fb7e 	bl	800a994 <ResetMacParameters>
    Nvm.MacGroup2.PublicNetwork = true;
 800b298:	f884 b119 	strb.w	fp, [r4, #281]	@ 0x119
    MacCtx.MacPrimitives = primitives;
 800b29c:	f8c6 7344 	str.w	r7, [r6, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 800b2a0:	f886 5491 	strb.w	r5, [r6, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800b2a4:	f8c6 b340 	str.w	fp, [r6, #832]	@ 0x340
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800b2a8:	62e5      	str	r5, [r4, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800b2aa:	6325      	str	r5, [r4, #48]	@ 0x30
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800b2ac:	9500      	str	r5, [sp, #0]
 800b2ae:	4b41      	ldr	r3, [pc, #260]	@ (800b3b4 <LoRaMacInitialization+0x388>)
 800b2b0:	462a      	mov	r2, r5
 800b2b2:	f04f 31ff 	mov.w	r1, #4294967295
 800b2b6:	f506 705a 	add.w	r0, r6, #872	@ 0x368
 800b2ba:	f007 f985 	bl	80125c8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800b2be:	9500      	str	r5, [sp, #0]
 800b2c0:	4b3d      	ldr	r3, [pc, #244]	@ (800b3b8 <LoRaMacInitialization+0x38c>)
 800b2c2:	462a      	mov	r2, r5
 800b2c4:	f04f 31ff 	mov.w	r1, #4294967295
 800b2c8:	f506 7060 	add.w	r0, r6, #896	@ 0x380
 800b2cc:	f007 f97c 	bl	80125c8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800b2d0:	9500      	str	r5, [sp, #0]
 800b2d2:	4b3a      	ldr	r3, [pc, #232]	@ (800b3bc <LoRaMacInitialization+0x390>)
 800b2d4:	462a      	mov	r2, r5
 800b2d6:	f04f 31ff 	mov.w	r1, #4294967295
 800b2da:	f506 7066 	add.w	r0, r6, #920	@ 0x398
 800b2de:	f007 f973 	bl	80125c8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800b2e2:	9500      	str	r5, [sp, #0]
 800b2e4:	4b36      	ldr	r3, [pc, #216]	@ (800b3c0 <LoRaMacInitialization+0x394>)
 800b2e6:	462a      	mov	r2, r5
 800b2e8:	f04f 31ff 	mov.w	r1, #4294967295
 800b2ec:	f506 6080 	add.w	r0, r6, #1024	@ 0x400
 800b2f0:	f007 f96a 	bl	80125c8 <UTIL_TIMER_Create>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800b2f4:	af02      	add	r7, sp, #8
 800b2f6:	4638      	mov	r0, r7
 800b2f8:	f007 f944 	bl	8012584 <SysTimeGetMcuTime>
 800b2fc:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 800b300:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b304:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Value = 0;
 800b308:	4b2e      	ldr	r3, [pc, #184]	@ (800b3c4 <LoRaMacInitialization+0x398>)
 800b30a:	601d      	str	r5, [r3, #0]
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800b30c:	4b2e      	ldr	r3, [pc, #184]	@ (800b3c8 <LoRaMacInitialization+0x39c>)
 800b30e:	f8c6 334c 	str.w	r3, [r6, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800b312:	4b2e      	ldr	r3, [pc, #184]	@ (800b3cc <LoRaMacInitialization+0x3a0>)
 800b314:	f8c6 3354 	str.w	r3, [r6, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800b318:	4b2d      	ldr	r3, [pc, #180]	@ (800b3d0 <LoRaMacInitialization+0x3a4>)
 800b31a:	f8c6 335c 	str.w	r3, [r6, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800b31e:	4b2d      	ldr	r3, [pc, #180]	@ (800b3d4 <LoRaMacInitialization+0x3a8>)
 800b320:	f8c6 3350 	str.w	r3, [r6, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800b324:	4b2c      	ldr	r3, [pc, #176]	@ (800b3d8 <LoRaMacInitialization+0x3ac>)
 800b326:	f8c6 3358 	str.w	r3, [r6, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800b32a:	4b2c      	ldr	r3, [pc, #176]	@ (800b3dc <LoRaMacInitialization+0x3b0>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f506 7053 	add.w	r0, r6, #844	@ 0x34c
 800b332:	4798      	blx	r3
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800b334:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 800b338:	f004 fcea 	bl	800fd10 <SecureElementInit>
 800b33c:	bb80      	cbnz	r0, 800b3a0 <LoRaMacInitialization+0x374>
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800b33e:	4620      	mov	r0, r4
 800b340:	f001 fc86 	bl	800cc50 <LoRaMacCryptoInit>
 800b344:	2800      	cmp	r0, #0
 800b346:	d14b      	bne.n	800b3e0 <LoRaMacInitialization+0x3b4>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800b348:	f001 f8ac 	bl	800c4a4 <LoRaMacCommandsInit>
 800b34c:	2800      	cmp	r0, #0
 800b34e:	d149      	bne.n	800b3e4 <LoRaMacInitialization+0x3b8>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800b350:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 800b354:	f001 fcce 	bl	800ccf4 <LoRaMacCryptoSetMulticastReference>
 800b358:	4604      	mov	r4, r0
 800b35a:	2800      	cmp	r0, #0
 800b35c:	d144      	bne.n	800b3e8 <LoRaMacInitialization+0x3bc>
    srand1( Radio.Random( ) );
 800b35e:	4d1f      	ldr	r5, [pc, #124]	@ (800b3dc <LoRaMacInitialization+0x3b0>)
 800b360:	696b      	ldr	r3, [r5, #20]
 800b362:	4798      	blx	r3
 800b364:	f004 ff92 	bl	801028c <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800b368:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800b36a:	4a0e      	ldr	r2, [pc, #56]	@ (800b3a4 <LoRaMacInitialization+0x378>)
 800b36c:	f892 0119 	ldrb.w	r0, [r2, #281]	@ 0x119
 800b370:	4798      	blx	r3
    Radio.Sleep( );
 800b372:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b374:	4798      	blx	r3
    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b376:	4658      	mov	r0, fp
 800b378:	f7fd fc9a 	bl	8008cb0 <LoRaMacEnableRequests>
    return LORAMAC_STATUS_OK;
 800b37c:	e00c      	b.n	800b398 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b37e:	2403      	movs	r4, #3
 800b380:	e00a      	b.n	800b398 <LoRaMacInitialization+0x36c>
 800b382:	2403      	movs	r4, #3
 800b384:	e008      	b.n	800b398 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b386:	2403      	movs	r4, #3
 800b388:	e006      	b.n	800b398 <LoRaMacInitialization+0x36c>
 800b38a:	2403      	movs	r4, #3
 800b38c:	e004      	b.n	800b398 <LoRaMacInitialization+0x36c>
 800b38e:	2403      	movs	r4, #3
 800b390:	e002      	b.n	800b398 <LoRaMacInitialization+0x36c>
 800b392:	2403      	movs	r4, #3
 800b394:	e000      	b.n	800b398 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800b396:	2409      	movs	r4, #9
}
 800b398:	4620      	mov	r0, r4
 800b39a:	b00d      	add	sp, #52	@ 0x34
 800b39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b3a0:	2411      	movs	r4, #17
 800b3a2:	e7f9      	b.n	800b398 <LoRaMacInitialization+0x36c>
 800b3a4:	2000090c 	.word	0x2000090c
 800b3a8:	20000ed8 	.word	0x20000ed8
 800b3ac:	01000400 	.word	0x01000400
 800b3b0:	2000087c 	.word	0x2000087c
 800b3b4:	0800a4b1 	.word	0x0800a4b1
 800b3b8:	0800a731 	.word	0x0800a731
 800b3bc:	0800a6d9 	.word	0x0800a6d9
 800b3c0:	080090b5 	.word	0x080090b5
 800b3c4:	20000878 	.word	0x20000878
 800b3c8:	0800a949 	.word	0x0800a949
 800b3cc:	0800a8f9 	.word	0x0800a8f9
 800b3d0:	08008ee5 	.word	0x08008ee5
 800b3d4:	0800a8d1 	.word	0x0800a8d1
 800b3d8:	0800a8a9 	.word	0x0800a8a9
 800b3dc:	08013b98 	.word	0x08013b98
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b3e0:	2411      	movs	r4, #17
 800b3e2:	e7d9      	b.n	800b398 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b3e4:	2413      	movs	r4, #19
 800b3e6:	e7d7      	b.n	800b398 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b3e8:	2411      	movs	r4, #17
 800b3ea:	e7d5      	b.n	800b398 <LoRaMacInitialization+0x36c>

0800b3ec <LoRaMacStart>:
{
 800b3ec:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800b3ee:	2400      	movs	r4, #0
 800b3f0:	4b03      	ldr	r3, [pc, #12]	@ (800b400 <LoRaMacStart+0x14>)
 800b3f2:	f8c3 4340 	str.w	r4, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 800b3f6:	f7fd fc47 	bl	8008c88 <UpdateRxSlotIdleState>
}
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	bd10      	pop	{r4, pc}
 800b3fe:	bf00      	nop
 800b400:	20000ed8 	.word	0x20000ed8

0800b404 <LoRaMacStop>:
{
 800b404:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800b406:	f7ff fd9f 	bl	800af48 <LoRaMacIsBusy>
 800b40a:	b130      	cbz	r0, 800b41a <LoRaMacStop+0x16>
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800b40c:	4b0b      	ldr	r3, [pc, #44]	@ (800b43c <LoRaMacStop+0x38>)
 800b40e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b412:	2b01      	cmp	r3, #1
 800b414:	d010      	beq.n	800b438 <LoRaMacStop+0x34>
    return LORAMAC_STATUS_BUSY;
 800b416:	2001      	movs	r0, #1
}
 800b418:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800b41a:	4b09      	ldr	r3, [pc, #36]	@ (800b440 <LoRaMacStop+0x3c>)
 800b41c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b420:	2b02      	cmp	r3, #2
 800b422:	d005      	beq.n	800b430 <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800b424:	4b05      	ldr	r3, [pc, #20]	@ (800b43c <LoRaMacStop+0x38>)
 800b426:	2201      	movs	r2, #1
 800b428:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 800b42c:	2000      	movs	r0, #0
 800b42e:	e7f3      	b.n	800b418 <LoRaMacStop+0x14>
            Radio.Sleep( );
 800b430:	4b04      	ldr	r3, [pc, #16]	@ (800b444 <LoRaMacStop+0x40>)
 800b432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b434:	4798      	blx	r3
 800b436:	e7f5      	b.n	800b424 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800b438:	2000      	movs	r0, #0
 800b43a:	e7ed      	b.n	800b418 <LoRaMacStop+0x14>
 800b43c:	20000ed8 	.word	0x20000ed8
 800b440:	2000090c 	.word	0x2000090c
 800b444:	08013b98 	.word	0x08013b98

0800b448 <LoRaMacHalt>:
{
 800b448:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800b44a:	4c0e      	ldr	r4, [pc, #56]	@ (800b484 <LoRaMacHalt+0x3c>)
 800b44c:	4620      	mov	r0, r4
 800b44e:	f007 f919 	bl	8012684 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800b452:	f104 0018 	add.w	r0, r4, #24
 800b456:	f007 f915 	bl	8012684 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800b45a:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800b45e:	f007 f911 	bl	8012684 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800b462:	f104 0098 	add.w	r0, r4, #152	@ 0x98
 800b466:	f007 f90d 	bl	8012684 <UTIL_TIMER_Stop>
    LoRaMacClassBHaltBeaconing( );
 800b46a:	f000 ff85 	bl	800c378 <LoRaMacClassBHaltBeaconing>
    Radio.Sleep( );
 800b46e:	4b06      	ldr	r3, [pc, #24]	@ (800b488 <LoRaMacHalt+0x40>)
 800b470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b472:	4798      	blx	r3
    MacCtx.MacState = LORAMAC_IDLE;
 800b474:	2000      	movs	r0, #0
 800b476:	f844 0c28 	str.w	r0, [r4, #-40]
    MacCtx.MacState = LORAMAC_STOPPED;
 800b47a:	2301      	movs	r3, #1
 800b47c:	f844 3c28 	str.w	r3, [r4, #-40]
}
 800b480:	bd10      	pop	{r4, pc}
 800b482:	bf00      	nop
 800b484:	20001240 	.word	0x20001240
 800b488:	08013b98 	.word	0x08013b98

0800b48c <LoRaMacQueryTxPossible>:
{
 800b48c:	b530      	push	{r4, r5, lr}
 800b48e:	b08b      	sub	sp, #44	@ 0x2c
 800b490:	4604      	mov	r4, r0
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b492:	4b31      	ldr	r3, [pc, #196]	@ (800b558 <LoRaMacQueryTxPossible+0xcc>)
 800b494:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b496:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b498:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800b49c:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b4a0:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800b4a4:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800b4a8:	4b2c      	ldr	r3, [pc, #176]	@ (800b55c <LoRaMacQueryTxPossible+0xd0>)
 800b4aa:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800b4ae:	f88d 200d 	strb.w	r2, [sp, #13]
    size_t macCmdsSize = 0;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	9302      	str	r3, [sp, #8]
    if( txInfo == NULL )
 800b4b6:	2900      	cmp	r1, #0
 800b4b8:	d048      	beq.n	800b54c <LoRaMacQueryTxPossible+0xc0>
 800b4ba:	460d      	mov	r5, r1
    adrNext.UpdateChanMask = false;
 800b4bc:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800b4c0:	4b25      	ldr	r3, [pc, #148]	@ (800b558 <LoRaMacQueryTxPossible+0xcc>)
 800b4c2:	f893 111a 	ldrb.w	r1, [r3, #282]	@ 0x11a
 800b4c6:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b4ca:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800b4cc:	f8b3 1088 	ldrh.w	r1, [r3, #136]	@ 0x88
 800b4d0:	f8ad 101c 	strh.w	r1, [sp, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800b4d4:	f8b3 108a 	ldrh.w	r1, [r3, #138]	@ 0x8a
 800b4d8:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b4dc:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 800b4e0:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b4e4:	f993 1038 	ldrsb.w	r1, [r3, #56]	@ 0x38
 800b4e8:	f88d 1021 	strb.w	r1, [sp, #33]	@ 0x21
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800b4ec:	f88d 2022 	strb.w	r2, [sp, #34]	@ 0x22
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b4f0:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800b4f4:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800b4f8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800b4fc:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800b500:	ab04      	add	r3, sp, #16
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	f10d 030d 	add.w	r3, sp, #13
 800b508:	f10d 020e 	add.w	r2, sp, #14
 800b50c:	f10d 010f 	add.w	r1, sp, #15
 800b510:	a805      	add	r0, sp, #20
 800b512:	f000 fea3 	bl	800c25c <LoRaMacAdrCalcNext>
    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800b516:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800b51a:	f7fd fd1b 	bl	8008f54 <GetMaxAppPayloadWithoutFOptsLength>
 800b51e:	7068      	strb	r0, [r5, #1]
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b520:	a802      	add	r0, sp, #8
 800b522:	f001 f85d 	bl	800c5e0 <LoRaMacCommandsGetSizeSerializedCmds>
 800b526:	b998      	cbnz	r0, 800b550 <LoRaMacQueryTxPossible+0xc4>
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800b528:	9b02      	ldr	r3, [sp, #8]
 800b52a:	2b0f      	cmp	r3, #15
 800b52c:	d80a      	bhi.n	800b544 <LoRaMacQueryTxPossible+0xb8>
 800b52e:	786a      	ldrb	r2, [r5, #1]
 800b530:	4293      	cmp	r3, r2
 800b532:	d807      	bhi.n	800b544 <LoRaMacQueryTxPossible+0xb8>
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	702b      	strb	r3, [r5, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800b538:	9b02      	ldr	r3, [sp, #8]
 800b53a:	441c      	add	r4, r3
 800b53c:	42a2      	cmp	r2, r4
 800b53e:	d309      	bcc.n	800b554 <LoRaMacQueryTxPossible+0xc8>
}
 800b540:	b00b      	add	sp, #44	@ 0x2c
 800b542:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800b544:	2300      	movs	r3, #0
 800b546:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800b548:	2008      	movs	r0, #8
 800b54a:	e7f9      	b.n	800b540 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b54c:	2003      	movs	r0, #3
 800b54e:	e7f7      	b.n	800b540 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b550:	2013      	movs	r0, #19
 800b552:	e7f5      	b.n	800b540 <LoRaMacQueryTxPossible+0xb4>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800b554:	2008      	movs	r0, #8
 800b556:	e7f3      	b.n	800b540 <LoRaMacQueryTxPossible+0xb4>
 800b558:	2000090c 	.word	0x2000090c
 800b55c:	20000ed8 	.word	0x20000ed8

0800b560 <LoRaMacMibGetRequestConfirm>:
    if( mibGet == NULL )
 800b560:	2800      	cmp	r0, #0
 800b562:	f000 815e 	beq.w	800b822 <LoRaMacMibGetRequestConfirm+0x2c2>
{
 800b566:	b510      	push	{r4, lr}
 800b568:	b084      	sub	sp, #16
 800b56a:	4604      	mov	r4, r0
    switch( mibGet->Type )
 800b56c:	7800      	ldrb	r0, [r0, #0]
 800b56e:	2841      	cmp	r0, #65	@ 0x41
 800b570:	f200 8153 	bhi.w	800b81a <LoRaMacMibGetRequestConfirm+0x2ba>
 800b574:	e8df f010 	tbh	[pc, r0, lsl #1]
 800b578:	00470042 	.word	0x00470042
 800b57c:	0052004d 	.word	0x0052004d
 800b580:	005d0057 	.word	0x005d0057
 800b584:	01510063 	.word	0x01510063
 800b588:	01510151 	.word	0x01510151
 800b58c:	01510151 	.word	0x01510151
 800b590:	01510151 	.word	0x01510151
 800b594:	006b0151 	.word	0x006b0151
 800b598:	00770071 	.word	0x00770071
 800b59c:	008c0084 	.word	0x008c0084
 800b5a0:	009c0094 	.word	0x009c0094
 800b5a4:	00a400b1 	.word	0x00a400b1
 800b5a8:	00c400be 	.word	0x00c400be
 800b5ac:	00ce00c9 	.word	0x00ce00c9
 800b5b0:	00d800d3 	.word	0x00d800d3
 800b5b4:	00ee00dd 	.word	0x00ee00dd
 800b5b8:	010000f4 	.word	0x010000f4
 800b5bc:	010600fa 	.word	0x010600fa
 800b5c0:	0111010b 	.word	0x0111010b
 800b5c4:	0117011e 	.word	0x0117011e
 800b5c8:	0151011b 	.word	0x0151011b
 800b5cc:	01510124 	.word	0x01510124
 800b5d0:	01510151 	.word	0x01510151
 800b5d4:	01510151 	.word	0x01510151
 800b5d8:	01510151 	.word	0x01510151
 800b5dc:	01510151 	.word	0x01510151
 800b5e0:	01510151 	.word	0x01510151
 800b5e4:	01510151 	.word	0x01510151
 800b5e8:	01510151 	.word	0x01510151
 800b5ec:	0133012d 	.word	0x0133012d
 800b5f0:	013f0139 	.word	0x013f0139
 800b5f4:	014b0145 	.word	0x014b0145
 800b5f8:	01570157 	.word	0x01570157
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800b5fc:	4b8b      	ldr	r3, [pc, #556]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b5fe:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b602:	7123      	strb	r3, [r4, #4]
            break;
 800b604:	e110      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b606:	4b89      	ldr	r3, [pc, #548]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b608:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b60c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b60e:	2000      	movs	r0, #0
            break;
 800b610:	e10a      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800b612:	6860      	ldr	r0, [r4, #4]
 800b614:	f004 fd12 	bl	801003c <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b618:	2000      	movs	r0, #0
            break;
 800b61a:	e105      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800b61c:	6860      	ldr	r0, [r4, #4]
 800b61e:	f004 fd2b 	bl	8010078 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b622:	2000      	movs	r0, #0
            break;
 800b624:	e100      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800b626:	4b81      	ldr	r3, [pc, #516]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b628:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800b62c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b62e:	2000      	movs	r0, #0
            break;
 800b630:	e0fa      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800b632:	4b7e      	ldr	r3, [pc, #504]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b638:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b63a:	2000      	movs	r0, #0
            break;
 800b63c:	e0f4      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800b63e:	1d21      	adds	r1, r4, #4
 800b640:	4b7a      	ldr	r3, [pc, #488]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b642:	f893 0130 	ldrb.w	r0, [r3, #304]	@ 0x130
 800b646:	f004 fd33 	bl	80100b0 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b64a:	2000      	movs	r0, #0
            break;
 800b64c:	e0ec      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800b64e:	4b77      	ldr	r3, [pc, #476]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b650:	f893 3119 	ldrb.w	r3, [r3, #281]	@ 0x119
 800b654:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b656:	2000      	movs	r0, #0
            break;
 800b658:	e0e6      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b65a:	4b74      	ldr	r3, [pc, #464]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b65c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800b660:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b662:	2000      	movs	r0, #0
            break;
 800b664:	e0e0      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            getPhy.Attribute = PHY_CHANNELS;
 800b666:	231c      	movs	r3, #28
 800b668:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b66c:	a902      	add	r1, sp, #8
 800b66e:	4b6f      	ldr	r3, [pc, #444]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b670:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b674:	f001 fe4b 	bl	800d30e <RegionGetPhyParam>
 800b678:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800b67a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b67c:	2000      	movs	r0, #0
            break;
 800b67e:	e0d3      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800b680:	3404      	adds	r4, #4
 800b682:	4b6b      	ldr	r3, [pc, #428]	@ (800b830 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b684:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b688:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b68c:	2000      	movs	r0, #0
            break;
 800b68e:	e0cb      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800b690:	3404      	adds	r4, #4
 800b692:	4b68      	ldr	r3, [pc, #416]	@ (800b834 <LoRaMacMibGetRequestConfirm+0x2d4>)
 800b694:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b698:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b69c:	2000      	movs	r0, #0
            break;
 800b69e:	e0c3      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800b6a0:	3404      	adds	r4, #4
 800b6a2:	4b65      	ldr	r3, [pc, #404]	@ (800b838 <LoRaMacMibGetRequestConfirm+0x2d8>)
 800b6a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b6a8:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b6ac:	2000      	movs	r0, #0
            break;
 800b6ae:	e0bb      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800b6b0:	3404      	adds	r4, #4
 800b6b2:	4b62      	ldr	r3, [pc, #392]	@ (800b83c <LoRaMacMibGetRequestConfirm+0x2dc>)
 800b6b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b6b8:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b6bc:	2000      	movs	r0, #0
            break;
 800b6be:	e0b3      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800b6c0:	231a      	movs	r3, #26
 800b6c2:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b6c6:	a902      	add	r1, sp, #8
 800b6c8:	4b58      	ldr	r3, [pc, #352]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b6ca:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b6ce:	f001 fe1e 	bl	800d30e <RegionGetPhyParam>
 800b6d2:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800b6d4:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b6d6:	2000      	movs	r0, #0
            break;
 800b6d8:	e0a6      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800b6da:	2319      	movs	r3, #25
 800b6dc:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b6e0:	a902      	add	r1, sp, #8
 800b6e2:	4b52      	ldr	r3, [pc, #328]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b6e4:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b6e8:	f001 fe11 	bl	800d30e <RegionGetPhyParam>
 800b6ec:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800b6ee:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b6f0:	2000      	movs	r0, #0
            break;
 800b6f2:	e099      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800b6f4:	4b4d      	ldr	r3, [pc, #308]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b6f6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800b6fa:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b6fc:	2000      	movs	r0, #0
            break;
 800b6fe:	e093      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800b700:	4b4a      	ldr	r3, [pc, #296]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b704:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b706:	2000      	movs	r0, #0
            break;
 800b708:	e08e      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800b70a:	4b48      	ldr	r3, [pc, #288]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b70c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b70e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b710:	2000      	movs	r0, #0
            break;
 800b712:	e089      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800b714:	4b45      	ldr	r3, [pc, #276]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b718:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b71a:	2000      	movs	r0, #0
            break;
 800b71c:	e084      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800b71e:	4b43      	ldr	r3, [pc, #268]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b722:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b724:	2000      	movs	r0, #0
            break;
 800b726:	e07f      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800b728:	4b40      	ldr	r3, [pc, #256]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b72a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b72c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b72e:	2000      	movs	r0, #0
            break;
 800b730:	e07a      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            getPhy.Attribute = PHY_MIN_TX_DR;
 800b732:	2302      	movs	r3, #2
 800b734:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b738:	4b3c      	ldr	r3, [pc, #240]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b73a:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800b73e:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b742:	a902      	add	r1, sp, #8
 800b744:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800b748:	f001 fde1 	bl	800d30e <RegionGetPhyParam>
 800b74c:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800b74e:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b750:	2000      	movs	r0, #0
            break;
 800b752:	e069      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b754:	4b35      	ldr	r3, [pc, #212]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b756:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 800b75a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b75c:	2000      	movs	r0, #0
            break;
 800b75e:	e063      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800b760:	4b32      	ldr	r3, [pc, #200]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b762:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800b766:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b768:	2000      	movs	r0, #0
            break;
 800b76a:	e05d      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b76c:	4b2f      	ldr	r3, [pc, #188]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b76e:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800b772:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b774:	2000      	movs	r0, #0
            break;
 800b776:	e057      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b778:	4b2c      	ldr	r3, [pc, #176]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b77a:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800b77e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b780:	2000      	movs	r0, #0
            break;
 800b782:	e051      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800b784:	4b29      	ldr	r3, [pc, #164]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b788:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b78a:	2000      	movs	r0, #0
            break;
 800b78c:	e04c      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800b78e:	4b27      	ldr	r3, [pc, #156]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b790:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b794:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b796:	2000      	movs	r0, #0
            break;
 800b798:	e046      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800b79a:	4b24      	ldr	r3, [pc, #144]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b79c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7a0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7a2:	2000      	movs	r0, #0
            break;
 800b7a4:	e040      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.Contexts = &Nvm;
 800b7a6:	4b21      	ldr	r3, [pc, #132]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b7a8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7aa:	2000      	movs	r0, #0
            break;
 800b7ac:	e03c      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.BackupContexts = NULL;
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	6060      	str	r0, [r4, #4]
            break;
 800b7b2:	e039      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800b7b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b7b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b7ba:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7bc:	2000      	movs	r0, #0
            break;
 800b7be:	e033      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800b7c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b7c2:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800b7c6:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800b7c8:	f001 fec6 	bl	800d558 <RegionGetVersion>
 800b7cc:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7ce:	2000      	movs	r0, #0
            break;
 800b7d0:	e02a      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800b7d2:	4b16      	ldr	r3, [pc, #88]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b7d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7d8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7da:	2000      	movs	r0, #0
            break;
 800b7dc:	e024      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800b7de:	4b13      	ldr	r3, [pc, #76]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b7e0:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 800b7e4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7e6:	2000      	movs	r0, #0
            break;
 800b7e8:	e01e      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800b7ea:	4b10      	ldr	r3, [pc, #64]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b7ec:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800b7f0:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7f2:	2000      	movs	r0, #0
            break;
 800b7f4:	e018      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800b7f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b7f8:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800b7fc:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7fe:	2000      	movs	r0, #0
            break;
 800b800:	e012      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800b802:	4b0a      	ldr	r3, [pc, #40]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b804:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 800b808:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b80a:	2000      	movs	r0, #0
            break;
 800b80c:	e00c      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800b80e:	4b07      	ldr	r3, [pc, #28]	@ (800b82c <LoRaMacMibGetRequestConfirm+0x2cc>)
 800b810:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800b814:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b816:	2000      	movs	r0, #0
            break;
 800b818:	e006      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800b81a:	4620      	mov	r0, r4
 800b81c:	f000 fdb0 	bl	800c380 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800b820:	e002      	b.n	800b828 <LoRaMacMibGetRequestConfirm+0x2c8>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b822:	2003      	movs	r0, #3
}
 800b824:	4770      	bx	lr
    switch( mibGet->Type )
 800b826:	2018      	movs	r0, #24
}
 800b828:	b004      	add	sp, #16
 800b82a:	bd10      	pop	{r4, pc}
 800b82c:	2000090c 	.word	0x2000090c
 800b830:	20000978 	.word	0x20000978
 800b834:	200009c0 	.word	0x200009c0
 800b838:	20000980 	.word	0x20000980
 800b83c:	200009c8 	.word	0x200009c8

0800b840 <LoRaMacMibSetRequestConfirm>:
{
 800b840:	b530      	push	{r4, r5, lr}
 800b842:	b085      	sub	sp, #20
    if( mibSet == NULL )
 800b844:	2800      	cmp	r0, #0
 800b846:	f000 82cb 	beq.w	800bde0 <LoRaMacMibSetRequestConfirm+0x5a0>
 800b84a:	4605      	mov	r5, r0
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800b84c:	4ba0      	ldr	r3, [pc, #640]	@ (800bad0 <LoRaMacMibSetRequestConfirm+0x290>)
 800b84e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b852:	f013 0f02 	tst.w	r3, #2
 800b856:	f040 82c5 	bne.w	800bde4 <LoRaMacMibSetRequestConfirm+0x5a4>
    switch( mibSet->Type )
 800b85a:	7804      	ldrb	r4, [r0, #0]
 800b85c:	2c41      	cmp	r4, #65	@ 0x41
 800b85e:	f200 827c 	bhi.w	800bd5a <LoRaMacMibSetRequestConfirm+0x51a>
 800b862:	e8df f014 	tbh	[pc, r4, lsl #1]
 800b866:	0042      	.short	0x0042
 800b868:	00500047 	.word	0x00500047
 800b86c:	00610059 	.word	0x00610059
 800b870:	006d0067 	.word	0x006d0067
 800b874:	0089007c 	.word	0x0089007c
 800b878:	00a30096 	.word	0x00a30096
 800b87c:	00bd00b0 	.word	0x00bd00b0
 800b880:	00d700ca 	.word	0x00d700ca
 800b884:	00ef00e4 	.word	0x00ef00e4
 800b888:	00f5027a 	.word	0x00f5027a
 800b88c:	013f011b 	.word	0x013f011b
 800b890:	0197016d 	.word	0x0197016d
 800b894:	01a70187 	.word	0x01a70187
 800b898:	01b701b2 	.word	0x01b701b2
 800b89c:	01c101bc 	.word	0x01c101bc
 800b8a0:	027a01c6 	.word	0x027a01c6
 800b8a4:	01e001cb 	.word	0x01e001cb
 800b8a8:	01f9020e 	.word	0x01f9020e
 800b8ac:	022e0223 	.word	0x022e0223
 800b8b0:	023c0236 	.word	0x023c0236
 800b8b4:	027a0242 	.word	0x027a0242
 800b8b8:	027a0246 	.word	0x027a0246
 800b8bc:	027a027a 	.word	0x027a027a
 800b8c0:	027a027a 	.word	0x027a027a
 800b8c4:	027a027a 	.word	0x027a027a
 800b8c8:	027a027a 	.word	0x027a027a
 800b8cc:	027a027a 	.word	0x027a027a
 800b8d0:	027a027a 	.word	0x027a027a
 800b8d4:	027a027a 	.word	0x027a027a
 800b8d8:	0256027a 	.word	0x0256027a
 800b8dc:	0262025c 	.word	0x0262025c
 800b8e0:	026e0268 	.word	0x026e0268
 800b8e4:	027e0274 	.word	0x027e0274
 800b8e8:	027e      	.short	0x027e
            status = SwitchClass( mibSet->Param.Class );
 800b8ea:	7900      	ldrb	r0, [r0, #4]
 800b8ec:	f7ff f91c 	bl	800ab28 <SwitchClass>
 800b8f0:	4604      	mov	r4, r0
            break;
 800b8f2:	e237      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800b8f4:	7903      	ldrb	r3, [r0, #4]
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	f000 823e 	beq.w	800bd78 <LoRaMacMibSetRequestConfirm+0x538>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800b8fc:	4a75      	ldr	r2, [pc, #468]	@ (800bad4 <LoRaMacMibSetRequestConfirm+0x294>)
 800b8fe:	f882 3130 	strb.w	r3, [r2, #304]	@ 0x130
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b902:	2400      	movs	r4, #0
 800b904:	e22e      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800b906:	6840      	ldr	r0, [r0, #4]
 800b908:	f004 fb8a 	bl	8010020 <SecureElementSetDevEui>
 800b90c:	4604      	mov	r4, r0
 800b90e:	2800      	cmp	r0, #0
 800b910:	f000 8228 	beq.w	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b914:	2403      	movs	r4, #3
 800b916:	e225      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800b918:	6840      	ldr	r0, [r0, #4]
 800b91a:	f004 fb9d 	bl	8010058 <SecureElementSetJoinEui>
 800b91e:	2800      	cmp	r0, #0
 800b920:	f040 8220 	bne.w	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b924:	4604      	mov	r4, r0
 800b926:	e21d      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800b928:	7902      	ldrb	r2, [r0, #4]
 800b92a:	4b6a      	ldr	r3, [pc, #424]	@ (800bad4 <LoRaMacMibSetRequestConfirm+0x294>)
 800b92c:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b930:	2400      	movs	r4, #0
            break;
 800b932:	e217      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800b934:	6842      	ldr	r2, [r0, #4]
 800b936:	4b67      	ldr	r3, [pc, #412]	@ (800bad4 <LoRaMacMibSetRequestConfirm+0x294>)
 800b938:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b93c:	2400      	movs	r4, #0
            break;
 800b93e:	e211      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800b940:	6841      	ldr	r1, [r0, #4]
 800b942:	4b64      	ldr	r3, [pc, #400]	@ (800bad4 <LoRaMacMibSetRequestConfirm+0x294>)
 800b944:	f893 0130 	ldrb.w	r0, [r3, #304]	@ 0x130
 800b948:	f004 fba4 	bl	8010094 <SecureElementSetDevAddr>
 800b94c:	4604      	mov	r4, r0
 800b94e:	2800      	cmp	r0, #0
 800b950:	f040 8214 	bne.w	800bd7c <LoRaMacMibSetRequestConfirm+0x53c>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800b954:	686a      	ldr	r2, [r5, #4]
 800b956:	4b5f      	ldr	r3, [pc, #380]	@ (800bad4 <LoRaMacMibSetRequestConfirm+0x294>)
 800b958:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800b95c:	e202      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            if( mibSet->Param.AppKey != NULL )
 800b95e:	6841      	ldr	r1, [r0, #4]
 800b960:	2900      	cmp	r1, #0
 800b962:	f000 820d 	beq.w	800bd80 <LoRaMacMibSetRequestConfirm+0x540>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800b966:	2000      	movs	r0, #0
 800b968:	f001 face 	bl	800cf08 <LoRaMacCryptoSetKey>
 800b96c:	4604      	mov	r4, r0
 800b96e:	2800      	cmp	r0, #0
 800b970:	f000 81f8 	beq.w	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b974:	2411      	movs	r4, #17
 800b976:	e236      	b.n	800bde6 <LoRaMacMibSetRequestConfirm+0x5a6>
            if( mibSet->Param.NwkKey != NULL )
 800b978:	6841      	ldr	r1, [r0, #4]
 800b97a:	2900      	cmp	r1, #0
 800b97c:	f000 8202 	beq.w	800bd84 <LoRaMacMibSetRequestConfirm+0x544>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800b980:	2001      	movs	r0, #1
 800b982:	f001 fac1 	bl	800cf08 <LoRaMacCryptoSetKey>
 800b986:	4604      	mov	r4, r0
 800b988:	2800      	cmp	r0, #0
 800b98a:	f000 81eb 	beq.w	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b98e:	2411      	movs	r4, #17
 800b990:	e229      	b.n	800bde6 <LoRaMacMibSetRequestConfirm+0x5a6>
            if( mibSet->Param.NwkSKey != NULL )
 800b992:	6841      	ldr	r1, [r0, #4]
 800b994:	2900      	cmp	r1, #0
 800b996:	f000 81f7 	beq.w	800bd88 <LoRaMacMibSetRequestConfirm+0x548>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800b99a:	2008      	movs	r0, #8
 800b99c:	f001 fab4 	bl	800cf08 <LoRaMacCryptoSetKey>
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	f000 81de 	beq.w	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b9a8:	2411      	movs	r4, #17
 800b9aa:	e21c      	b.n	800bde6 <LoRaMacMibSetRequestConfirm+0x5a6>
            if( mibSet->Param.AppSKey != NULL )
 800b9ac:	6841      	ldr	r1, [r0, #4]
 800b9ae:	2900      	cmp	r1, #0
 800b9b0:	f000 81ec 	beq.w	800bd8c <LoRaMacMibSetRequestConfirm+0x54c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800b9b4:	2009      	movs	r0, #9
 800b9b6:	f001 faa7 	bl	800cf08 <LoRaMacCryptoSetKey>
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	f000 81d1 	beq.w	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b9c2:	2411      	movs	r4, #17
 800b9c4:	e20f      	b.n	800bde6 <LoRaMacMibSetRequestConfirm+0x5a6>
            if( mibSet->Param.McKEKey != NULL )
 800b9c6:	6841      	ldr	r1, [r0, #4]
 800b9c8:	2900      	cmp	r1, #0
 800b9ca:	f000 81e1 	beq.w	800bd90 <LoRaMacMibSetRequestConfirm+0x550>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800b9ce:	200c      	movs	r0, #12
 800b9d0:	f001 fa9a 	bl	800cf08 <LoRaMacCryptoSetKey>
 800b9d4:	4604      	mov	r4, r0
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	f000 81c4 	beq.w	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b9dc:	2411      	movs	r4, #17
 800b9de:	e202      	b.n	800bde6 <LoRaMacMibSetRequestConfirm+0x5a6>
            if( mibSet->Param.McKey0 != NULL )
 800b9e0:	6841      	ldr	r1, [r0, #4]
 800b9e2:	2900      	cmp	r1, #0
 800b9e4:	f000 81d6 	beq.w	800bd94 <LoRaMacMibSetRequestConfirm+0x554>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800b9e8:	200d      	movs	r0, #13
 800b9ea:	f001 fa8d 	bl	800cf08 <LoRaMacCryptoSetKey>
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	f000 81b7 	beq.w	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b9f6:	2411      	movs	r4, #17
 800b9f8:	e1f5      	b.n	800bde6 <LoRaMacMibSetRequestConfirm+0x5a6>
            if( mibSet->Param.McAppSKey0 != NULL )
 800b9fa:	6841      	ldr	r1, [r0, #4]
 800b9fc:	2900      	cmp	r1, #0
 800b9fe:	f000 81cb 	beq.w	800bd98 <LoRaMacMibSetRequestConfirm+0x558>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800ba02:	200e      	movs	r0, #14
 800ba04:	f001 fa80 	bl	800cf08 <LoRaMacCryptoSetKey>
 800ba08:	4604      	mov	r4, r0
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	f000 81aa 	beq.w	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ba10:	2411      	movs	r4, #17
 800ba12:	e1e8      	b.n	800bde6 <LoRaMacMibSetRequestConfirm+0x5a6>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ba14:	6841      	ldr	r1, [r0, #4]
 800ba16:	2900      	cmp	r1, #0
 800ba18:	f000 81c0 	beq.w	800bd9c <LoRaMacMibSetRequestConfirm+0x55c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800ba1c:	200f      	movs	r0, #15
 800ba1e:	f001 fa73 	bl	800cf08 <LoRaMacCryptoSetKey>
 800ba22:	4604      	mov	r4, r0
 800ba24:	2800      	cmp	r0, #0
 800ba26:	f000 819d 	beq.w	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ba2a:	2411      	movs	r4, #17
 800ba2c:	e1db      	b.n	800bde6 <LoRaMacMibSetRequestConfirm+0x5a6>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ba2e:	7900      	ldrb	r0, [r0, #4]
 800ba30:	4b28      	ldr	r3, [pc, #160]	@ (800bad4 <LoRaMacMibSetRequestConfirm+0x294>)
 800ba32:	f883 0119 	strb.w	r0, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800ba36:	4c28      	ldr	r4, [pc, #160]	@ (800bad8 <LoRaMacMibSetRequestConfirm+0x298>)
 800ba38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ba3a:	4798      	blx	r3
            Radio.Sleep( );
 800ba3c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ba3e:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba40:	2400      	movs	r4, #0
            break;
 800ba42:	e18f      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800ba44:	7902      	ldrb	r2, [r0, #4]
 800ba46:	4b23      	ldr	r3, [pc, #140]	@ (800bad4 <LoRaMacMibSetRequestConfirm+0x294>)
 800ba48:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba4c:	2400      	movs	r4, #0
            break;
 800ba4e:	e189      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ba50:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ba54:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ba58:	4b1e      	ldr	r3, [pc, #120]	@ (800bad4 <LoRaMacMibSetRequestConfirm+0x294>)
 800ba5a:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800ba5e:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800ba62:	2207      	movs	r2, #7
 800ba64:	a901      	add	r1, sp, #4
 800ba66:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ba6a:	f001 fc82 	bl	800d372 <RegionVerify>
 800ba6e:	b908      	cbnz	r0, 800ba74 <LoRaMacMibSetRequestConfirm+0x234>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ba70:	2403      	movs	r4, #3
 800ba72:	e177      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800ba74:	686b      	ldr	r3, [r5, #4]
 800ba76:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800ba78:	2200      	movs	r2, #0
 800ba7a:	a901      	add	r1, sp, #4
 800ba7c:	4b15      	ldr	r3, [pc, #84]	@ (800bad4 <LoRaMacMibSetRequestConfirm+0x294>)
 800ba7e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ba82:	f001 fc76 	bl	800d372 <RegionVerify>
 800ba86:	2800      	cmp	r0, #0
 800ba88:	f000 818a 	beq.w	800bda0 <LoRaMacMibSetRequestConfirm+0x560>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800ba8c:	4b13      	ldr	r3, [pc, #76]	@ (800badc <LoRaMacMibSetRequestConfirm+0x29c>)
 800ba8e:	3504      	adds	r5, #4
 800ba90:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ba94:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba98:	2400      	movs	r4, #0
 800ba9a:	e163      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ba9c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800baa0:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800baa4:	4b0b      	ldr	r3, [pc, #44]	@ (800bad4 <LoRaMacMibSetRequestConfirm+0x294>)
 800baa6:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800baaa:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800baae:	2207      	movs	r2, #7
 800bab0:	a901      	add	r1, sp, #4
 800bab2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800bab6:	f001 fc5c 	bl	800d372 <RegionVerify>
 800baba:	2800      	cmp	r0, #0
 800babc:	f000 8172 	beq.w	800bda4 <LoRaMacMibSetRequestConfirm+0x564>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800bac0:	4b07      	ldr	r3, [pc, #28]	@ (800bae0 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800bac2:	3504      	adds	r5, #4
 800bac4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bac8:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bacc:	2400      	movs	r4, #0
 800bace:	e149      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
 800bad0:	20000ed8 	.word	0x20000ed8
 800bad4:	2000090c 	.word	0x2000090c
 800bad8:	08013b98 	.word	0x08013b98
 800badc:	20000978 	.word	0x20000978
 800bae0:	200009c0 	.word	0x200009c0
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800bae4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800bae8:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800baec:	4bb5      	ldr	r3, [pc, #724]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800baee:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800baf2:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800baf6:	2207      	movs	r2, #7
 800baf8:	a901      	add	r1, sp, #4
 800bafa:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800bafe:	f001 fc38 	bl	800d372 <RegionVerify>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	f000 8150 	beq.w	800bda8 <LoRaMacMibSetRequestConfirm+0x568>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800bb08:	4bae      	ldr	r3, [pc, #696]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bb0a:	f103 0274 	add.w	r2, r3, #116	@ 0x74
 800bb0e:	3504      	adds	r5, #4
 800bb10:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bb14:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800bb18:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	d001      	beq.n	800bb24 <LoRaMacMibSetRequestConfirm+0x2e4>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb20:	2400      	movs	r4, #0
 800bb22:	e11f      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800bb24:	f1a2 0374 	sub.w	r3, r2, #116	@ 0x74
 800bb28:	f893 4130 	ldrb.w	r4, [r3, #304]	@ 0x130
 800bb2c:	2c00      	cmp	r4, #0
 800bb2e:	f000 8119 	beq.w	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                    Radio.Sleep( );
 800bb32:	4ba5      	ldr	r3, [pc, #660]	@ (800bdc8 <LoRaMacMibSetRequestConfirm+0x588>)
 800bb34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb36:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800bb38:	f7fe fd74 	bl	800a624 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb3c:	2400      	movs	r4, #0
 800bb3e:	e111      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800bb40:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800bb44:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bb48:	4b9e      	ldr	r3, [pc, #632]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bb4a:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800bb4e:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800bb52:	2207      	movs	r2, #7
 800bb54:	a901      	add	r1, sp, #4
 800bb56:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800bb5a:	f001 fc0a 	bl	800d372 <RegionVerify>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	f000 8124 	beq.w	800bdac <LoRaMacMibSetRequestConfirm+0x56c>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800bb64:	4b99      	ldr	r3, [pc, #612]	@ (800bdcc <LoRaMacMibSetRequestConfirm+0x58c>)
 800bb66:	3504      	adds	r5, #4
 800bb68:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bb6c:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb70:	2400      	movs	r4, #0
 800bb72:	e0f7      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800bb74:	6843      	ldr	r3, [r0, #4]
 800bb76:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800bb7e:	a902      	add	r1, sp, #8
 800bb80:	4b90      	ldr	r3, [pc, #576]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bb82:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800bb86:	f001 fc11 	bl	800d3ac <RegionChanMaskSet>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	f000 8110 	beq.w	800bdb0 <LoRaMacMibSetRequestConfirm+0x570>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb90:	2400      	movs	r4, #0
 800bb92:	e0e7      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800bb94:	6843      	ldr	r3, [r0, #4]
 800bb96:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800bb9e:	a902      	add	r1, sp, #8
 800bba0:	4b88      	ldr	r3, [pc, #544]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bba2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800bba6:	f001 fc01 	bl	800d3ac <RegionChanMaskSet>
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	f000 8102 	beq.w	800bdb4 <LoRaMacMibSetRequestConfirm+0x574>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbb0:	2400      	movs	r4, #0
 800bbb2:	e0d7      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800bbb4:	7902      	ldrb	r2, [r0, #4]
 800bbb6:	1e53      	subs	r3, r2, #1
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	2b0e      	cmp	r3, #14
 800bbbc:	f200 80fc 	bhi.w	800bdb8 <LoRaMacMibSetRequestConfirm+0x578>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800bbc0:	4b80      	ldr	r3, [pc, #512]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bbc2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbc6:	2400      	movs	r4, #0
 800bbc8:	e0cc      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800bbca:	6842      	ldr	r2, [r0, #4]
 800bbcc:	4b7d      	ldr	r3, [pc, #500]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bbce:	655a      	str	r2, [r3, #84]	@ 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbd0:	2400      	movs	r4, #0
            break;
 800bbd2:	e0c7      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800bbd4:	6842      	ldr	r2, [r0, #4]
 800bbd6:	4b7b      	ldr	r3, [pc, #492]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bbd8:	659a      	str	r2, [r3, #88]	@ 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbda:	2400      	movs	r4, #0
            break;
 800bbdc:	e0c2      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800bbde:	6842      	ldr	r2, [r0, #4]
 800bbe0:	4b78      	ldr	r3, [pc, #480]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bbe2:	65da      	str	r2, [r3, #92]	@ 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbe4:	2400      	movs	r4, #0
            break;
 800bbe6:	e0bd      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800bbe8:	6842      	ldr	r2, [r0, #4]
 800bbea:	4b76      	ldr	r3, [pc, #472]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bbec:	661a      	str	r2, [r3, #96]	@ 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbee:	2400      	movs	r4, #0
            break;
 800bbf0:	e0b8      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800bbf2:	6842      	ldr	r2, [r0, #4]
 800bbf4:	4b73      	ldr	r3, [pc, #460]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bbf6:	665a      	str	r2, [r3, #100]	@ 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbf8:	2400      	movs	r4, #0
            break;
 800bbfa:	e0b3      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800bbfc:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800bc00:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800bc04:	2206      	movs	r2, #6
 800bc06:	a901      	add	r1, sp, #4
 800bc08:	4b6e      	ldr	r3, [pc, #440]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bc0a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800bc0e:	f001 fbb0 	bl	800d372 <RegionVerify>
 800bc12:	2800      	cmp	r0, #0
 800bc14:	f000 80d2 	beq.w	800bdbc <LoRaMacMibSetRequestConfirm+0x57c>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800bc18:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800bc1c:	4b69      	ldr	r3, [pc, #420]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bc1e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bc22:	2400      	movs	r4, #0
 800bc24:	e09e      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800bc26:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800bc2a:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bc2e:	4b65      	ldr	r3, [pc, #404]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bc30:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800bc34:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800bc38:	2205      	movs	r2, #5
 800bc3a:	a901      	add	r1, sp, #4
 800bc3c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800bc40:	f001 fb97 	bl	800d372 <RegionVerify>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	f000 80bb 	beq.w	800bdc0 <LoRaMacMibSetRequestConfirm+0x580>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800bc4a:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800bc4e:	4b5d      	ldr	r3, [pc, #372]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bc50:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bc54:	2400      	movs	r4, #0
 800bc56:	e085      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800bc58:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800bc5c:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800bc60:	220a      	movs	r2, #10
 800bc62:	a901      	add	r1, sp, #4
 800bc64:	4b57      	ldr	r3, [pc, #348]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bc66:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800bc6a:	f001 fb82 	bl	800d372 <RegionVerify>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	f000 80b0 	beq.w	800bdd4 <LoRaMacMibSetRequestConfirm+0x594>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800bc74:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800bc78:	4b52      	ldr	r3, [pc, #328]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bc7a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bc7e:	2400      	movs	r4, #0
 800bc80:	e070      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800bc82:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800bc86:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800bc8a:	2209      	movs	r2, #9
 800bc8c:	a901      	add	r1, sp, #4
 800bc8e:	4b4d      	ldr	r3, [pc, #308]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bc90:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800bc94:	f001 fb6d 	bl	800d372 <RegionVerify>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	f000 809d 	beq.w	800bdd8 <LoRaMacMibSetRequestConfirm+0x598>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800bc9e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800bca2:	4b48      	ldr	r3, [pc, #288]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bca4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bca8:	2400      	movs	r4, #0
 800bcaa:	e05b      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            if( mibSet->Param.SystemMaxRxError <= 500 )
 800bcac:	6843      	ldr	r3, [r0, #4]
 800bcae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800bcb2:	f200 8093 	bhi.w	800bddc <LoRaMacMibSetRequestConfirm+0x59c>
                Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800bcb6:	4a43      	ldr	r2, [pc, #268]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bcb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800bcbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bcbe:	2400      	movs	r4, #0
 800bcc0:	e050      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800bcc2:	7902      	ldrb	r2, [r0, #4]
 800bcc4:	4b3f      	ldr	r3, [pc, #252]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bcc6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 800bcca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bcce:	2400      	movs	r4, #0
            break;
 800bcd0:	e048      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800bcd2:	6842      	ldr	r2, [r0, #4]
 800bcd4:	4b3b      	ldr	r3, [pc, #236]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bcd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bcda:	2400      	movs	r4, #0
            break;
 800bcdc:	e042      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800bcde:	6842      	ldr	r2, [r0, #4]
 800bce0:	4b38      	ldr	r3, [pc, #224]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bce2:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bce6:	2400      	movs	r4, #0
            break;
 800bce8:	e03c      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            status = RestoreNvmData( );
 800bcea:	f7fd f859 	bl	8008da0 <RestoreNvmData>
 800bcee:	4604      	mov	r4, r0
            break;
 800bcf0:	e038      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800bcf2:	7983      	ldrb	r3, [r0, #6]
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d901      	bls.n	800bcfc <LoRaMacMibSetRequestConfirm+0x4bc>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bcf8:	2403      	movs	r4, #3
 800bcfa:	e033      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800bcfc:	6842      	ldr	r2, [r0, #4]
 800bcfe:	4b31      	ldr	r3, [pc, #196]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bd00:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800bd04:	6840      	ldr	r0, [r0, #4]
 800bd06:	f000 ffbb 	bl	800cc80 <LoRaMacCryptoSetLrWanVersion>
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	b350      	cbz	r0, 800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800bd0e:	2411      	movs	r4, #17
 800bd10:	e069      	b.n	800bde6 <LoRaMacMibSetRequestConfirm+0x5a6>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800bd12:	6842      	ldr	r2, [r0, #4]
 800bd14:	4b2b      	ldr	r3, [pc, #172]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bd16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd1a:	2400      	movs	r4, #0
            break;
 800bd1c:	e022      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800bd1e:	7902      	ldrb	r2, [r0, #4]
 800bd20:	4b28      	ldr	r3, [pc, #160]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bd22:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd26:	2400      	movs	r4, #0
            break;
 800bd28:	e01c      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800bd2a:	8882      	ldrh	r2, [r0, #4]
 800bd2c:	4b25      	ldr	r3, [pc, #148]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bd2e:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd32:	2400      	movs	r4, #0
            break;
 800bd34:	e016      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800bd36:	8882      	ldrh	r2, [r0, #4]
 800bd38:	4b22      	ldr	r3, [pc, #136]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bd3a:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd3e:	2400      	movs	r4, #0
            break;
 800bd40:	e010      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800bd42:	8882      	ldrh	r2, [r0, #4]
 800bd44:	4b1f      	ldr	r3, [pc, #124]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bd46:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd4a:	2400      	movs	r4, #0
            break;
 800bd4c:	e00a      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800bd4e:	8882      	ldrh	r2, [r0, #4]
 800bd50:	4b1c      	ldr	r3, [pc, #112]	@ (800bdc4 <LoRaMacMibSetRequestConfirm+0x584>)
 800bd52:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd56:	2400      	movs	r4, #0
            break;
 800bd58:	e004      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800bd5a:	f000 fb13 	bl	800c384 <LoRaMacMibClassBSetRequestConfirm>
 800bd5e:	4604      	mov	r4, r0
            break;
 800bd60:	e000      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
    switch( mibSet->Type )
 800bd62:	2418      	movs	r4, #24
    if( status == LORAMAC_STATUS_OK )
 800bd64:	2c00      	cmp	r4, #0
 800bd66:	d13e      	bne.n	800bde6 <LoRaMacMibSetRequestConfirm+0x5a6>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800bd68:	4a19      	ldr	r2, [pc, #100]	@ (800bdd0 <LoRaMacMibSetRequestConfirm+0x590>)
 800bd6a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800bd6e:	f043 0320 	orr.w	r3, r3, #32
 800bd72:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800bd76:	e036      	b.n	800bde6 <LoRaMacMibSetRequestConfirm+0x5a6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd78:	2403      	movs	r4, #3
 800bd7a:	e7f3      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd7c:	2403      	movs	r4, #3
 800bd7e:	e7f1      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd80:	2403      	movs	r4, #3
 800bd82:	e7ef      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd84:	2403      	movs	r4, #3
 800bd86:	e7ed      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd88:	2403      	movs	r4, #3
 800bd8a:	e7eb      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd8c:	2403      	movs	r4, #3
 800bd8e:	e7e9      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd90:	2403      	movs	r4, #3
 800bd92:	e7e7      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd94:	2403      	movs	r4, #3
 800bd96:	e7e5      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd98:	2403      	movs	r4, #3
 800bd9a:	e7e3      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd9c:	2403      	movs	r4, #3
 800bd9e:	e7e1      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bda0:	2403      	movs	r4, #3
 800bda2:	e7df      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bda4:	2403      	movs	r4, #3
 800bda6:	e7dd      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bda8:	2403      	movs	r4, #3
 800bdaa:	e7db      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bdac:	2403      	movs	r4, #3
 800bdae:	e7d9      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bdb0:	2403      	movs	r4, #3
 800bdb2:	e7d7      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bdb4:	2403      	movs	r4, #3
 800bdb6:	e7d5      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bdb8:	2403      	movs	r4, #3
 800bdba:	e7d3      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bdbc:	2403      	movs	r4, #3
 800bdbe:	e7d1      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bdc0:	2403      	movs	r4, #3
 800bdc2:	e7cf      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
 800bdc4:	2000090c 	.word	0x2000090c
 800bdc8:	08013b98 	.word	0x08013b98
 800bdcc:	200009c8 	.word	0x200009c8
 800bdd0:	20000ed8 	.word	0x20000ed8
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bdd4:	2403      	movs	r4, #3
 800bdd6:	e7c5      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bdd8:	2403      	movs	r4, #3
 800bdda:	e7c3      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bddc:	2403      	movs	r4, #3
 800bdde:	e7c1      	b.n	800bd64 <LoRaMacMibSetRequestConfirm+0x524>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bde0:	2403      	movs	r4, #3
 800bde2:	e000      	b.n	800bde6 <LoRaMacMibSetRequestConfirm+0x5a6>
        return LORAMAC_STATUS_BUSY;
 800bde4:	2401      	movs	r4, #1
}
 800bde6:	4620      	mov	r0, r4
 800bde8:	b005      	add	sp, #20
 800bdea:	bd30      	pop	{r4, r5, pc}

0800bdec <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800bdec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdee:	b087      	sub	sp, #28
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    bool isAbpJoinPending = false;
#endif /* LORAMAC_VERSION */
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	f000 80fb 	beq.w	800bff2 <LoRaMacMlmeRequest+0x206>
 800bdfc:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800bdfe:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800be00:	f7ff f8a2 	bl	800af48 <LoRaMacIsBusy>
 800be04:	b118      	cbz	r0, 800be0e <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800be06:	2401      	movs	r4, #1
            AbpJoinPendingStart( );
        }
#endif /* LORAMAC_VERSION */
    }
    return status;
}
 800be08:	4620      	mov	r0, r4
 800be0a:	b007      	add	sp, #28
 800be0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800be0e:	f000 fd6b 	bl	800c8e8 <LoRaMacConfirmQueueIsFull>
 800be12:	4606      	mov	r6, r0
 800be14:	b108      	cbz	r0, 800be1a <LoRaMacMlmeRequest+0x2e>
        return LORAMAC_STATUS_BUSY;
 800be16:	2401      	movs	r4, #1
 800be18:	e7f6      	b.n	800be08 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800be1a:	f000 fd5f 	bl	800c8dc <LoRaMacConfirmQueueGetCnt>
 800be1e:	b308      	cbz	r0, 800be64 <LoRaMacMlmeRequest+0x78>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800be20:	4b75      	ldr	r3, [pc, #468]	@ (800bff8 <LoRaMacMlmeRequest+0x20c>)
 800be22:	2101      	movs	r1, #1
 800be24:	f883 1455 	strb.w	r1, [r3, #1109]	@ 0x455
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800be28:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800be2c:	f042 0204 	orr.w	r2, r2, #4
 800be30:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 800be34:	782b      	ldrb	r3, [r5, #0]
 800be36:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800be3a:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800be3e:	2200      	movs	r2, #0
 800be40:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800be44:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800be48:	461c      	mov	r4, r3
 800be4a:	3b01      	subs	r3, #1
 800be4c:	2b0c      	cmp	r3, #12
 800be4e:	f200 80b1 	bhi.w	800bfb4 <LoRaMacMlmeRequest+0x1c8>
 800be52:	e8df f003 	tbb	[pc, r3]
 800be56:	af0d      	.short	0xaf0d
 800be58:	675dafaf 	.word	0x675dafaf
 800be5c:	af70afaf 	.word	0xaf70afaf
 800be60:	7f9e      	.short	0x7f9e
 800be62:	95          	.byte	0x95
 800be63:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800be64:	2214      	movs	r2, #20
 800be66:	2100      	movs	r1, #0
 800be68:	4864      	ldr	r0, [pc, #400]	@ (800bffc <LoRaMacMlmeRequest+0x210>)
 800be6a:	f004 fa3a 	bl	80102e2 <memset1>
 800be6e:	e7d7      	b.n	800be20 <LoRaMacMlmeRequest+0x34>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800be70:	4b61      	ldr	r3, [pc, #388]	@ (800bff8 <LoRaMacMlmeRequest+0x20c>)
 800be72:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800be76:	f013 0f20 	tst.w	r3, #32
 800be7a:	d1c5      	bne.n	800be08 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800be7c:	792b      	ldrb	r3, [r5, #4]
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d003      	beq.n	800be8a <LoRaMacMlmeRequest+0x9e>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800be82:	2b01      	cmp	r3, #1
 800be84:	d026      	beq.n	800bed4 <LoRaMacMlmeRequest+0xe8>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800be86:	2402      	movs	r4, #2
 800be88:	e095      	b.n	800bfb6 <LoRaMacMlmeRequest+0x1ca>
                ResetMacParameters( false );
 800be8a:	2000      	movs	r0, #0
 800be8c:	f7fe fd82 	bl	800a994 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800be90:	4c5b      	ldr	r4, [pc, #364]	@ (800c000 <LoRaMacMlmeRequest+0x214>)
 800be92:	2200      	movs	r2, #0
 800be94:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800be98:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800be9c:	f001 fb23 	bl	800d4e6 <RegionAlternateDr>
 800bea0:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800bea4:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800bea8:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800beac:	2307      	movs	r3, #7
 800beae:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800beb2:	20ff      	movs	r0, #255	@ 0xff
 800beb4:	f7fe fecc 	bl	800ac50 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800beb8:	4604      	mov	r4, r0
 800beba:	2800      	cmp	r0, #0
 800bebc:	d07b      	beq.n	800bfb6 <LoRaMacMlmeRequest+0x1ca>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800bebe:	4f50      	ldr	r7, [pc, #320]	@ (800c000 <LoRaMacMlmeRequest+0x214>)
 800bec0:	2201      	movs	r2, #1
 800bec2:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800bec6:	f897 0048 	ldrb.w	r0, [r7, #72]	@ 0x48
 800beca:	f001 fb0c 	bl	800d4e6 <RegionAlternateDr>
 800bece:	f887 0039 	strb.w	r0, [r7, #57]	@ 0x39
 800bed2:	e070      	b.n	800bfb6 <LoRaMacMlmeRequest+0x1ca>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800bed4:	4e4a      	ldr	r6, [pc, #296]	@ (800c000 <LoRaMacMlmeRequest+0x214>)
 800bed6:	2400      	movs	r4, #0
 800bed8:	f886 411d 	strb.w	r4, [r6, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800bedc:	2302      	movs	r3, #2
 800bede:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800bee2:	4669      	mov	r1, sp
 800bee4:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800bee8:	f001 fa36 	bl	800d358 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800beec:	792b      	ldrb	r3, [r5, #4]
 800beee:	f886 3130 	strb.w	r3, [r6, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800bef2:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800bef6:	2601      	movs	r6, #1
 800bef8:	f88d 6016 	strb.w	r6, [sp, #22]
                OnMacProcessNotify( );
 800befc:	f7fc ffe6 	bl	8008ecc <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800bf00:	4a3d      	ldr	r2, [pc, #244]	@ (800bff8 <LoRaMacMlmeRequest+0x20c>)
 800bf02:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800bf06:	f043 0310 	orr.w	r3, r3, #16
 800bf0a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                status = LORAMAC_STATUS_OK;
 800bf0e:	e052      	b.n	800bfb6 <LoRaMacMlmeRequest+0x1ca>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800bf10:	2200      	movs	r2, #0
 800bf12:	a904      	add	r1, sp, #16
 800bf14:	2002      	movs	r0, #2
 800bf16:	f000 fad5 	bl	800c4c4 <LoRaMacCommandsAddCmd>
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	d04a      	beq.n	800bfb6 <LoRaMacMlmeRequest+0x1ca>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bf20:	2413      	movs	r4, #19
 800bf22:	e048      	b.n	800bfb6 <LoRaMacMlmeRequest+0x1ca>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800bf24:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800bf28:	b2d2      	uxtb	r2, r2
 800bf2a:	68a9      	ldr	r1, [r5, #8]
 800bf2c:	88a8      	ldrh	r0, [r5, #4]
 800bf2e:	f7fc ff21 	bl	8008d74 <SetTxContinuousWave>
 800bf32:	4604      	mov	r4, r0
            break;
 800bf34:	e03f      	b.n	800bfb6 <LoRaMacMlmeRequest+0x1ca>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800bf36:	4669      	mov	r1, sp
 800bf38:	200d      	movs	r0, #13
 800bf3a:	f000 fb0f 	bl	800c55c <LoRaMacCommandsGetCmd>
 800bf3e:	4604      	mov	r4, r0
 800bf40:	b3c8      	cbz	r0, 800bfb6 <LoRaMacMlmeRequest+0x1ca>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800bf42:	2200      	movs	r2, #0
 800bf44:	a904      	add	r1, sp, #16
 800bf46:	200d      	movs	r0, #13
 800bf48:	f000 fabc 	bl	800c4c4 <LoRaMacCommandsAddCmd>
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	b390      	cbz	r0, 800bfb6 <LoRaMacMlmeRequest+0x1ca>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bf50:	2413      	movs	r4, #19
            break;
 800bf52:	e030      	b.n	800bfb6 <LoRaMacMlmeRequest+0x1ca>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800bf54:	4b2a      	ldr	r3, [pc, #168]	@ (800c000 <LoRaMacMlmeRequest+0x214>)
 800bf56:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800bf5a:	b10b      	cbz	r3, 800bf60 <LoRaMacMlmeRequest+0x174>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800bf5c:	2402      	movs	r4, #2
 800bf5e:	e02a      	b.n	800bfb6 <LoRaMacMlmeRequest+0x1ca>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800bf60:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800bf62:	f004 0007 	and.w	r0, r4, #7
 800bf66:	f000 fa06 	bl	800c376 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800bf6a:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800bf6e:	2201      	movs	r2, #1
 800bf70:	a904      	add	r1, sp, #16
 800bf72:	2010      	movs	r0, #16
 800bf74:	f000 faa6 	bl	800c4c4 <LoRaMacCommandsAddCmd>
 800bf78:	4604      	mov	r4, r0
 800bf7a:	b1e0      	cbz	r0, 800bfb6 <LoRaMacMlmeRequest+0x1ca>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bf7c:	2413      	movs	r4, #19
 800bf7e:	e01a      	b.n	800bfb6 <LoRaMacMlmeRequest+0x1ca>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800bf80:	2200      	movs	r2, #0
 800bf82:	a904      	add	r1, sp, #16
 800bf84:	2012      	movs	r0, #18
 800bf86:	f000 fa9d 	bl	800c4c4 <LoRaMacCommandsAddCmd>
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	b198      	cbz	r0, 800bfb6 <LoRaMacMlmeRequest+0x1ca>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bf8e:	2413      	movs	r4, #19
 800bf90:	e011      	b.n	800bfb6 <LoRaMacMlmeRequest+0x1ca>
            queueElement.RestrictCommonReadyToHandle = true;
 800bf92:	2301      	movs	r3, #1
 800bf94:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800bf98:	f000 f9de 	bl	800c358 <LoRaMacClassBIsAcquisitionInProgress>
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	b108      	cbz	r0, 800bfa4 <LoRaMacMlmeRequest+0x1b8>
                status = LORAMAC_STATUS_BUSY;
 800bfa0:	2401      	movs	r4, #1
 800bfa2:	e008      	b.n	800bfb6 <LoRaMacMlmeRequest+0x1ca>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800bfa4:	f000 f9d5 	bl	800c352 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	f000 f9d7 	bl	800c35c <LoRaMacClassBBeaconTimerEvent>
    bool isAbpJoinPending = false;
 800bfae:	4626      	mov	r6, r4
                status = LORAMAC_STATUS_OK;
 800bfb0:	2400      	movs	r4, #0
 800bfb2:	e000      	b.n	800bfb6 <LoRaMacMlmeRequest+0x1ca>
    switch( mlmeRequest->Type )
 800bfb4:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800bfb6:	4b10      	ldr	r3, [pc, #64]	@ (800bff8 <LoRaMacMlmeRequest+0x20c>)
 800bfb8:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800bfbc:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800bfbe:	b17c      	cbz	r4, 800bfe0 <LoRaMacMlmeRequest+0x1f4>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800bfc0:	f000 fc8c 	bl	800c8dc <LoRaMacConfirmQueueGetCnt>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	f47f af1f 	bne.w	800be08 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800bfca:	4b0b      	ldr	r3, [pc, #44]	@ (800bff8 <LoRaMacMlmeRequest+0x20c>)
 800bfcc:	2100      	movs	r1, #0
 800bfce:	f883 141a 	strb.w	r1, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800bfd2:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800bfd6:	f361 0282 	bfi	r2, r1, #2, #1
 800bfda:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
 800bfde:	e713      	b.n	800be08 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800bfe0:	a805      	add	r0, sp, #20
 800bfe2:	f000 fbb1 	bl	800c748 <LoRaMacConfirmQueueAdd>
        if( isAbpJoinPending == true )
 800bfe6:	2e00      	cmp	r6, #0
 800bfe8:	f43f af0e 	beq.w	800be08 <LoRaMacMlmeRequest+0x1c>
            AbpJoinPendingStart( );
 800bfec:	f7fe fc2e 	bl	800a84c <AbpJoinPendingStart>
 800bff0:	e70a      	b.n	800be08 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bff2:	2403      	movs	r4, #3
 800bff4:	e708      	b.n	800be08 <LoRaMacMlmeRequest+0x1c>
 800bff6:	bf00      	nop
 800bff8:	20000ed8 	.word	0x20000ed8
 800bffc:	2000132c 	.word	0x2000132c
 800c000:	2000090c 	.word	0x2000090c

0800c004 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800c004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c008:	b091      	sub	sp, #68	@ 0x44
 800c00a:	9103      	str	r1, [sp, #12]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800c00c:	2800      	cmp	r0, #0
 800c00e:	f000 80db 	beq.w	800c1c8 <LoRaMacMcpsRequest+0x1c4>
 800c012:	f04f 0800 	mov.w	r8, #0
 800c016:	4605      	mov	r5, r0
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800c018:	f8c0 8010 	str.w	r8, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800c01c:	f7fe ff94 	bl	800af48 <LoRaMacIsBusy>
 800c020:	4607      	mov	r7, r0
 800c022:	b118      	cbz	r0, 800c02c <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800c024:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800c026:	b011      	add	sp, #68	@ 0x44
 800c028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800c02c:	ac06      	add	r4, sp, #24
 800c02e:	462e      	mov	r6, r5
 800c030:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c034:	f8c4 8000 	str.w	r8, [r4]
    macHdr.Value = 0;
 800c038:	4641      	mov	r1, r8
 800c03a:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800c03e:	4c64      	ldr	r4, [pc, #400]	@ (800c1d0 <LoRaMacMcpsRequest+0x1cc>)
 800c040:	2214      	movs	r2, #20
 800c042:	4620      	mov	r0, r4
 800c044:	f004 f94d 	bl	80102e2 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	7063      	strb	r3, [r4, #1]
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800c04c:	4b61      	ldr	r3, [pc, #388]	@ (800c1d4 <LoRaMacMcpsRequest+0x1d0>)
 800c04e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800c052:	2b02      	cmp	r3, #2
 800c054:	d071      	beq.n	800c13a <LoRaMacMcpsRequest+0x136>
    switch( request.Type )
 800c056:	f89d 9018 	ldrb.w	r9, [sp, #24]
 800c05a:	f1b9 0f01 	cmp.w	r9, #1
 800c05e:	d07f      	beq.n	800c160 <LoRaMacMcpsRequest+0x15c>
 800c060:	f1b9 0f03 	cmp.w	r9, #3
 800c064:	f000 808e 	beq.w	800c184 <LoRaMacMcpsRequest+0x180>
 800c068:	f1b9 0f00 	cmp.w	r9, #0
 800c06c:	f040 809a 	bne.w	800c1a4 <LoRaMacMcpsRequest+0x1a0>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800c070:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800c074:	2202      	movs	r2, #2
 800c076:	f362 1347 	bfi	r3, r2, #5, #3
 800c07a:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800c07e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c082:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800c084:	9b08      	ldr	r3, [sp, #32]
 800c086:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800c088:	f8bd 8024 	ldrh.w	r8, [sp, #36]	@ 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800c08c:	f99d b026 	ldrsb.w	fp, [sp, #38]	@ 0x26
            readyToSend = true;
 800c090:	2701      	movs	r7, #1
    getPhy.Attribute = PHY_MIN_TX_DR;
 800c092:	2302      	movs	r3, #2
 800c094:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c098:	4e4e      	ldr	r6, [pc, #312]	@ (800c1d4 <LoRaMacMcpsRequest+0x1d0>)
 800c09a:	f896 307c 	ldrb.w	r3, [r6, #124]	@ 0x7c
 800c09e:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c0a2:	a90e      	add	r1, sp, #56	@ 0x38
 800c0a4:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800c0a8:	f001 f931 	bl	800d30e <RegionGetPhyParam>
 800c0ac:	900d      	str	r0, [sp, #52]	@ 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800c0ae:	b244      	sxtb	r4, r0
 800c0b0:	45a3      	cmp	fp, r4
 800c0b2:	bfb8      	it	lt
 800c0b4:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800c0b6:	f896 a11a 	ldrb.w	sl, [r6, #282]	@ 0x11a
 800c0ba:	f896 211d 	ldrb.w	r2, [r6, #285]	@ 0x11d
 800c0be:	f896 1130 	ldrb.w	r1, [r6, #304]	@ 0x130
 800c0c2:	4650      	mov	r0, sl
 800c0c4:	f7fc fe28 	bl	8008d18 <CheckForMinimumAbpDatarate>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	b900      	cbnz	r0, 800c0ce <LoRaMacMcpsRequest+0xca>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800c0cc:	465c      	mov	r4, fp
    if( readyToSend == true )
 800c0ce:	2f00      	cmp	r7, #0
 800c0d0:	d074      	beq.n	800c1bc <LoRaMacMcpsRequest+0x1b8>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800c0d2:	f1ba 0f00 	cmp.w	sl, #0
 800c0d6:	d000      	beq.n	800c0da <LoRaMacMcpsRequest+0xd6>
 800c0d8:	b19b      	cbz	r3, 800c102 <LoRaMacMcpsRequest+0xfe>
            verify.DatarateParams.Datarate = datarate;
 800c0da:	f88d 402c 	strb.w	r4, [sp, #44]	@ 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c0de:	4b3d      	ldr	r3, [pc, #244]	@ (800c1d4 <LoRaMacMcpsRequest+0x1d0>)
 800c0e0:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800c0e4:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800c0e8:	2205      	movs	r2, #5
 800c0ea:	a90b      	add	r1, sp, #44	@ 0x2c
 800c0ec:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c0f0:	f001 f93f 	bl	800d372 <RegionVerify>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d069      	beq.n	800c1cc <LoRaMacMcpsRequest+0x1c8>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800c0f8:	f99d 202c 	ldrsb.w	r2, [sp, #44]	@ 0x2c
 800c0fc:	4b35      	ldr	r3, [pc, #212]	@ (800c1d4 <LoRaMacMcpsRequest+0x1d0>)
 800c0fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800c102:	4b35      	ldr	r3, [pc, #212]	@ (800c1d8 <LoRaMacMcpsRequest+0x1d4>)
 800c104:	f8d3 1498 	ldr.w	r1, [r3, #1176]	@ 0x498
 800c108:	4b32      	ldr	r3, [pc, #200]	@ (800c1d4 <LoRaMacMcpsRequest+0x1d0>)
 800c10a:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 800c10e:	f7fd ffc9 	bl	800a0a4 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800c112:	9b03      	ldr	r3, [sp, #12]
 800c114:	9300      	str	r3, [sp, #0]
 800c116:	4643      	mov	r3, r8
 800c118:	9a05      	ldr	r2, [sp, #20]
 800c11a:	9904      	ldr	r1, [sp, #16]
 800c11c:	a80c      	add	r0, sp, #48	@ 0x30
 800c11e:	f7fe fe83 	bl	800ae28 <Send>
        if( status == LORAMAC_STATUS_OK )
 800c122:	2800      	cmp	r0, #0
 800c124:	d145      	bne.n	800c1b2 <LoRaMacMcpsRequest+0x1ae>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800c126:	4b2c      	ldr	r3, [pc, #176]	@ (800c1d8 <LoRaMacMcpsRequest+0x1d4>)
 800c128:	f883 9440 	strb.w	r9, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800c12c:	f893 2491 	ldrb.w	r2, [r3, #1169]	@ 0x491
 800c130:	f042 0201 	orr.w	r2, r2, #1
 800c134:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
 800c138:	e041      	b.n	800c1be <LoRaMacMcpsRequest+0x1ba>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800c13a:	4b26      	ldr	r3, [pc, #152]	@ (800c1d4 <LoRaMacMcpsRequest+0x1d0>)
 800c13c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800c140:	2b02      	cmp	r3, #2
 800c142:	d188      	bne.n	800c056 <LoRaMacMcpsRequest+0x52>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800c144:	4b23      	ldr	r3, [pc, #140]	@ (800c1d4 <LoRaMacMcpsRequest+0x1d0>)
 800c146:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d183      	bne.n	800c056 <LoRaMacMcpsRequest+0x52>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800c14e:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800c152:	2b00      	cmp	r3, #0
 800c154:	f47f af7f 	bne.w	800c056 <LoRaMacMcpsRequest+0x52>
        request.Type = MCPS_CONFIRMED;
 800c158:	2301      	movs	r3, #1
 800c15a:	f88d 3018 	strb.w	r3, [sp, #24]
 800c15e:	e77a      	b.n	800c056 <LoRaMacMcpsRequest+0x52>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800c160:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800c164:	2204      	movs	r2, #4
 800c166:	f362 1347 	bfi	r3, r2, #5, #3
 800c16a:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            fPort = request.Req.Confirmed.fPort;
 800c16e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c172:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800c174:	9b08      	ldr	r3, [sp, #32]
 800c176:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800c178:	f8bd 8024 	ldrh.w	r8, [sp, #36]	@ 0x24
            datarate = request.Req.Confirmed.Datarate;
 800c17c:	f99d b026 	ldrsb.w	fp, [sp, #38]	@ 0x26
            readyToSend = true;
 800c180:	2701      	movs	r7, #1
            break;
 800c182:	e786      	b.n	800c092 <LoRaMacMcpsRequest+0x8e>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800c184:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800c188:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800c18c:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800c190:	9b07      	ldr	r3, [sp, #28]
 800c192:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800c194:	f8bd 8020 	ldrh.w	r8, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800c198:	f99d b022 	ldrsb.w	fp, [sp, #34]	@ 0x22
            readyToSend = true;
 800c19c:	2701      	movs	r7, #1
    uint8_t fPort = 0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	9304      	str	r3, [sp, #16]
            break;
 800c1a2:	e776      	b.n	800c092 <LoRaMacMcpsRequest+0x8e>
    switch( request.Type )
 800c1a4:	f04f 0b00 	mov.w	fp, #0
 800c1a8:	f8cd b014 	str.w	fp, [sp, #20]
 800c1ac:	f8cd b010 	str.w	fp, [sp, #16]
 800c1b0:	e76f      	b.n	800c092 <LoRaMacMcpsRequest+0x8e>
            MacCtx.NodeAckRequested = false;
 800c1b2:	4b09      	ldr	r3, [pc, #36]	@ (800c1d8 <LoRaMacMcpsRequest+0x1d4>)
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
 800c1ba:	e000      	b.n	800c1be <LoRaMacMcpsRequest+0x1ba>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c1bc:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800c1be:	4b06      	ldr	r3, [pc, #24]	@ (800c1d8 <LoRaMacMcpsRequest+0x1d4>)
 800c1c0:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800c1c4:	612b      	str	r3, [r5, #16]
    return status;
 800c1c6:	e72e      	b.n	800c026 <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c1c8:	2003      	movs	r0, #3
 800c1ca:	e72c      	b.n	800c026 <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800c1cc:	2003      	movs	r0, #3
 800c1ce:	e72a      	b.n	800c026 <LoRaMacMcpsRequest+0x22>
 800c1d0:	20001318 	.word	0x20001318
 800c1d4:	2000090c 	.word	0x2000090c
 800c1d8:	20000ed8 	.word	0x20000ed8

0800c1dc <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800c1dc:	b510      	push	{r4, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800c1e2:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800c1e6:	220f      	movs	r2, #15
 800c1e8:	a901      	add	r1, sp, #4
 800c1ea:	4b09      	ldr	r3, [pc, #36]	@ (800c210 <LoRaMacTestSetDutyCycleOn+0x34>)
 800c1ec:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c1f0:	f001 f8bf 	bl	800d372 <RegionVerify>
 800c1f4:	b148      	cbz	r0, 800c20a <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800c1f6:	4b06      	ldr	r3, [pc, #24]	@ (800c210 <LoRaMacTestSetDutyCycleOn+0x34>)
 800c1f8:	f883 411c 	strb.w	r4, [r3, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800c1fc:	4a05      	ldr	r2, [pc, #20]	@ (800c214 <LoRaMacTestSetDutyCycleOn+0x38>)
 800c1fe:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800c202:	f043 0320 	orr.w	r3, r3, #32
 800c206:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800c20a:	b002      	add	sp, #8
 800c20c:	bd10      	pop	{r4, pc}
 800c20e:	bf00      	nop
 800c210:	2000090c 	.word	0x2000090c
 800c214:	20000ed8 	.word	0x20000ed8

0800c218 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800c218:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800c21a:	f7ff f8f3 	bl	800b404 <LoRaMacStop>
 800c21e:	b110      	cbz	r0, 800c226 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800c220:	2401      	movs	r4, #1
    }
}
 800c222:	4620      	mov	r0, r4
 800c224:	bd38      	pop	{r3, r4, r5, pc}
 800c226:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800c228:	4d0a      	ldr	r5, [pc, #40]	@ (800c254 <LoRaMacDeInitialization+0x3c>)
 800c22a:	4628      	mov	r0, r5
 800c22c:	f006 fa2a 	bl	8012684 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800c230:	f105 0018 	add.w	r0, r5, #24
 800c234:	f006 fa26 	bl	8012684 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800c238:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 800c23c:	f006 fa22 	bl	8012684 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800c240:	f000 f89a 	bl	800c378 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800c244:	2000      	movs	r0, #0
 800c246:	f7fe fba5 	bl	800a994 <ResetMacParameters>
        Radio.Sleep( );
 800c24a:	4b03      	ldr	r3, [pc, #12]	@ (800c258 <LoRaMacDeInitialization+0x40>)
 800c24c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c24e:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800c250:	e7e7      	b.n	800c222 <LoRaMacDeInitialization+0xa>
 800c252:	bf00      	nop
 800c254:	20001240 	.word	0x20001240
 800c258:	08013b98 	.word	0x08013b98

0800c25c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800c25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c260:	b08b      	sub	sp, #44	@ 0x2c
 800c262:	460f      	mov	r7, r1
 800c264:	4616      	mov	r6, r2
 800c266:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800c268:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800c26c:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800c270:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800c274:	6842      	ldr	r2, [r0, #4]
 800c276:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c278:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800c27a:	f890 8001 	ldrb.w	r8, [r0, #1]
 800c27e:	f1b8 0f00 	cmp.w	r8, #0
 800c282:	d109      	bne.n	800c298 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800c284:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800c288:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800c28c:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800c290:	4640      	mov	r0, r8
 800c292:	b00b      	add	sp, #44	@ 0x2c
 800c294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c298:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800c29a:	2302      	movs	r3, #2
 800c29c:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800c2a0:	7bc3      	ldrb	r3, [r0, #15]
 800c2a2:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c2a6:	a908      	add	r1, sp, #32
 800c2a8:	7c00      	ldrb	r0, [r0, #16]
 800c2aa:	f001 f830 	bl	800d30e <RegionGetPhyParam>
 800c2ae:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800c2b0:	b243      	sxtb	r3, r0
 800c2b2:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800c2b4:	454b      	cmp	r3, r9
 800c2b6:	bfb8      	it	lt
 800c2b8:	464b      	movlt	r3, r9
 800c2ba:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800c2bc:	6862      	ldr	r2, [r4, #4]
 800c2be:	8923      	ldrh	r3, [r4, #8]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d201      	bcs.n	800c2c8 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800c2c4:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800c2c8:	8961      	ldrh	r1, [r4, #10]
 800c2ca:	440b      	add	r3, r1
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d224      	bcs.n	800c31a <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800c2d0:	6863      	ldr	r3, [r4, #4]
 800c2d2:	8921      	ldrh	r1, [r4, #8]
 800c2d4:	8962      	ldrh	r2, [r4, #10]
 800c2d6:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800c2da:	4283      	cmp	r3, r0
 800c2dc:	d332      	bcc.n	800c344 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800c2de:	1a5b      	subs	r3, r3, r1
 800c2e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800c2e4:	fb02 3311 	mls	r3, r2, r1, r3
 800c2e8:	bb7b      	cbnz	r3, 800c34a <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800c2ea:	9b01      	ldr	r3, [sp, #4]
 800c2ec:	4599      	cmp	r9, r3
 800c2ee:	dc03      	bgt.n	800c2f8 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800c2f0:	7823      	ldrb	r3, [r4, #0]
 800c2f2:	b9eb      	cbnz	r3, 800c330 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800c2f4:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800c2f8:	2321      	movs	r3, #33	@ 0x21
 800c2fa:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800c2fe:	9b00      	ldr	r3, [sp, #0]
 800c300:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800c304:	7be3      	ldrb	r3, [r4, #15]
 800c306:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c30a:	a908      	add	r1, sp, #32
 800c30c:	7c20      	ldrb	r0, [r4, #16]
 800c30e:	f000 fffe 	bl	800d30e <RegionGetPhyParam>
 800c312:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800c314:	fa4f f980 	sxtb.w	r9, r0
 800c318:	e7b4      	b.n	800c284 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800c31a:	230a      	movs	r3, #10
 800c31c:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c320:	a908      	add	r1, sp, #32
 800c322:	7c20      	ldrb	r0, [r4, #16]
 800c324:	f000 fff3 	bl	800d30e <RegionGetPhyParam>
 800c328:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800c32a:	fa4f fa80 	sxtb.w	sl, r0
 800c32e:	e7cf      	b.n	800c2d0 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800c330:	2302      	movs	r3, #2
 800c332:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800c336:	a903      	add	r1, sp, #12
 800c338:	7c20      	ldrb	r0, [r4, #16]
 800c33a:	f001 f80d 	bl	800d358 <RegionInitDefaults>
                    nbTrans = 1;
 800c33e:	f04f 0b01 	mov.w	fp, #1
 800c342:	e7d9      	b.n	800c2f8 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800c344:	f8dd 9000 	ldr.w	r9, [sp]
 800c348:	e79c      	b.n	800c284 <LoRaMacAdrCalcNext+0x28>
 800c34a:	f8dd 9000 	ldr.w	r9, [sp]
 800c34e:	e799      	b.n	800c284 <LoRaMacAdrCalcNext+0x28>

0800c350 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c350:	4770      	bx	lr

0800c352 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c352:	4770      	bx	lr

0800c354 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c354:	4770      	bx	lr

0800c356 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c356:	4770      	bx	lr

0800c358 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c358:	2000      	movs	r0, #0
 800c35a:	4770      	bx	lr

0800c35c <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c35c:	4770      	bx	lr

0800c35e <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c35e:	4770      	bx	lr

0800c360 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c360:	4770      	bx	lr

0800c362 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c362:	2000      	movs	r0, #0
 800c364:	4770      	bx	lr

0800c366 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c366:	2000      	movs	r0, #0
 800c368:	4770      	bx	lr

0800c36a <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c36a:	2000      	movs	r0, #0
 800c36c:	4770      	bx	lr

0800c36e <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c36e:	2000      	movs	r0, #0
 800c370:	4770      	bx	lr

0800c372 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c372:	2000      	movs	r0, #0
 800c374:	4770      	bx	lr

0800c376 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c376:	4770      	bx	lr

0800c378 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c378:	4770      	bx	lr

0800c37a <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c37a:	4770      	bx	lr

0800c37c <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c37c:	2002      	movs	r0, #2
 800c37e:	4770      	bx	lr

0800c380 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c380:	2002      	movs	r0, #2
 800c382:	4770      	bx	lr

0800c384 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c384:	2002      	movs	r0, #2
 800c386:	4770      	bx	lr

0800c388 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c388:	4770      	bx	lr

0800c38a <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c38a:	2000      	movs	r0, #0
 800c38c:	4770      	bx	lr

0800c38e <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c38e:	4770      	bx	lr

0800c390 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c390:	4770      	bx	lr

0800c392 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c392:	2000      	movs	r0, #0
 800c394:	4770      	bx	lr

0800c396 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c396:	2000      	movs	r0, #0
 800c398:	4770      	bx	lr

0800c39a <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c39a:	4770      	bx	lr

0800c39c <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c39c:	4770      	bx	lr

0800c39e <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c39e:	4770      	bx	lr

0800c3a0 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	2b0f      	cmp	r3, #15
 800c3a4:	d804      	bhi.n	800c3b0 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800c3a6:	5cc2      	ldrb	r2, [r0, r3]
 800c3a8:	b922      	cbnz	r2, 800c3b4 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	e7f8      	b.n	800c3a2 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800c3b0:	2001      	movs	r0, #1
 800c3b2:	4770      	bx	lr
            return false;
 800c3b4:	2000      	movs	r0, #0
}
 800c3b6:	4770      	bx	lr

0800c3b8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800c3b8:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800c3ba:	2500      	movs	r5, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800c3bc:	012c      	lsls	r4, r5, #4
 800c3be:	3408      	adds	r4, #8
 800c3c0:	4b06      	ldr	r3, [pc, #24]	@ (800c3dc <MallocNewMacCommandSlot+0x24>)
 800c3c2:	441c      	add	r4, r3
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f7ff ffeb 	bl	800c3a0 <IsSlotFree>
 800c3ca:	b920      	cbnz	r0, 800c3d6 <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800c3cc:	3501      	adds	r5, #1
 800c3ce:	b2ed      	uxtb	r5, r5
        if( itr == NUM_OF_MAC_COMMANDS )
 800c3d0:	2d20      	cmp	r5, #32
 800c3d2:	d1f3      	bne.n	800c3bc <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800c3d4:	2400      	movs	r4, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	bd38      	pop	{r3, r4, r5, pc}
 800c3da:	bf00      	nop
 800c3dc:	2000140c 	.word	0x2000140c

0800c3e0 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800c3e0:	b120      	cbz	r0, 800c3ec <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800c3e6:	6042      	str	r2, [r0, #4]

    return true;
 800c3e8:	2001      	movs	r0, #1
 800c3ea:	4770      	bx	lr
        return false;
 800c3ec:	2000      	movs	r0, #0
}
 800c3ee:	4770      	bx	lr

0800c3f0 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	b160      	cbz	r0, 800c40e <LinkedListAdd+0x1e>
 800c3f4:	b169      	cbz	r1, 800c412 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800c3f6:	6802      	ldr	r2, [r0, #0]
 800c3f8:	b13a      	cbz	r2, 800c40a <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800c3fa:	685a      	ldr	r2, [r3, #4]
 800c3fc:	b102      	cbz	r2, 800c400 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800c3fe:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800c400:	2200      	movs	r2, #0
 800c402:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800c404:	6059      	str	r1, [r3, #4]

    return true;
 800c406:	2001      	movs	r0, #1
 800c408:	4770      	bx	lr
        list->First = element;
 800c40a:	6001      	str	r1, [r0, #0]
 800c40c:	e7f5      	b.n	800c3fa <LinkedListAdd+0xa>
        return false;
 800c40e:	2000      	movs	r0, #0
 800c410:	4770      	bx	lr
 800c412:	2000      	movs	r0, #0
}
 800c414:	4770      	bx	lr

0800c416 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c416:	b160      	cbz	r0, 800c432 <LinkedListGetPrevious+0x1c>
 800c418:	b161      	cbz	r1, 800c434 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800c41a:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800c41c:	4281      	cmp	r1, r0
 800c41e:	d102      	bne.n	800c426 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800c420:	2000      	movs	r0, #0
    }

    return curElement;
}
 800c422:	4770      	bx	lr
            curElement = curElement->Next;
 800c424:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800c426:	2800      	cmp	r0, #0
 800c428:	d0fb      	beq.n	800c422 <LinkedListGetPrevious+0xc>
 800c42a:	6803      	ldr	r3, [r0, #0]
 800c42c:	428b      	cmp	r3, r1
 800c42e:	d1f9      	bne.n	800c424 <LinkedListGetPrevious+0xe>
 800c430:	4770      	bx	lr
 800c432:	4770      	bx	lr
        return NULL;
 800c434:	4608      	mov	r0, r1
 800c436:	4770      	bx	lr

0800c438 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c438:	b1b8      	cbz	r0, 800c46a <LinkedListRemove+0x32>
{
 800c43a:	b538      	push	{r3, r4, r5, lr}
 800c43c:	460c      	mov	r4, r1
 800c43e:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800c440:	b1a9      	cbz	r1, 800c46e <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800c442:	f7ff ffe8 	bl	800c416 <LinkedListGetPrevious>

    if( list->First == element )
 800c446:	682b      	ldr	r3, [r5, #0]
 800c448:	42a3      	cmp	r3, r4
 800c44a:	d009      	beq.n	800c460 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800c44c:	686b      	ldr	r3, [r5, #4]
 800c44e:	42a3      	cmp	r3, r4
 800c450:	d009      	beq.n	800c466 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800c452:	b108      	cbz	r0, 800c458 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800c454:	6823      	ldr	r3, [r4, #0]
 800c456:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800c458:	2300      	movs	r3, #0
 800c45a:	6023      	str	r3, [r4, #0]

    return true;
 800c45c:	2001      	movs	r0, #1
}
 800c45e:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800c460:	6823      	ldr	r3, [r4, #0]
 800c462:	602b      	str	r3, [r5, #0]
 800c464:	e7f2      	b.n	800c44c <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800c466:	6068      	str	r0, [r5, #4]
 800c468:	e7f3      	b.n	800c452 <LinkedListRemove+0x1a>
        return false;
 800c46a:	2000      	movs	r0, #0
}
 800c46c:	4770      	bx	lr
        return false;
 800c46e:	2000      	movs	r0, #0
 800c470:	e7f5      	b.n	800c45e <LinkedListRemove+0x26>
	...

0800c474 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800c474:	2811      	cmp	r0, #17
 800c476:	d805      	bhi.n	800c484 <IsSticky+0x10>
 800c478:	4b03      	ldr	r3, [pc, #12]	@ (800c488 <IsSticky+0x14>)
 800c47a:	fa23 f000 	lsr.w	r0, r3, r0
 800c47e:	f000 0001 	and.w	r0, r0, #1
 800c482:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800c484:	2000      	movs	r0, #0
    }
}
 800c486:	4770      	bx	lr
 800c488:	00020720 	.word	0x00020720

0800c48c <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800c48c:	2000      	movs	r0, #0
 800c48e:	4770      	bx	lr

0800c490 <FreeMacCommandSlot>:
    if( slot == NULL )
 800c490:	b130      	cbz	r0, 800c4a0 <FreeMacCommandSlot+0x10>
{
 800c492:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800c494:	2210      	movs	r2, #16
 800c496:	2100      	movs	r1, #0
 800c498:	f003 ff23 	bl	80102e2 <memset1>
    return true;
 800c49c:	2001      	movs	r0, #1
}
 800c49e:	bd08      	pop	{r3, pc}
        return false;
 800c4a0:	2000      	movs	r0, #0
}
 800c4a2:	4770      	bx	lr

0800c4a4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800c4a4:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800c4a6:	4c06      	ldr	r4, [pc, #24]	@ (800c4c0 <LoRaMacCommandsInit+0x1c>)
 800c4a8:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	f003 ff17 	bl	80102e2 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	f7ff ff93 	bl	800c3e0 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	bd10      	pop	{r4, pc}
 800c4be:	bf00      	nop
 800c4c0:	2000140c 	.word	0x2000140c

0800c4c4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800c4c4:	b321      	cbz	r1, 800c510 <LoRaMacCommandsAddCmd+0x4c>
{
 800c4c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c8:	4605      	mov	r5, r0
 800c4ca:	4614      	mov	r4, r2
 800c4cc:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800c4ce:	f7ff ff73 	bl	800c3b8 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800c4d2:	4606      	mov	r6, r0
 800c4d4:	b1f0      	cbz	r0, 800c514 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800c4d6:	4601      	mov	r1, r0
 800c4d8:	4810      	ldr	r0, [pc, #64]	@ (800c51c <LoRaMacCommandsAddCmd+0x58>)
 800c4da:	f7ff ff89 	bl	800c3f0 <LinkedListAdd>
 800c4de:	b1d8      	cbz	r0, 800c518 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800c4e0:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800c4e2:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800c4e4:	b2a2      	uxth	r2, r4
 800c4e6:	4639      	mov	r1, r7
 800c4e8:	1d70      	adds	r0, r6, #5
 800c4ea:	f003 fee2 	bl	80102b2 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	f7ff ffc0 	bl	800c474 <IsSticky>
 800c4f4:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	f7ff ffc8 	bl	800c48c <IsConfirmationRequired>
 800c4fc:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800c4fe:	4a07      	ldr	r2, [pc, #28]	@ (800c51c <LoRaMacCommandsAddCmd+0x58>)
 800c500:	f8d2 3208 	ldr.w	r3, [r2, #520]	@ 0x208
 800c504:	4423      	add	r3, r4
 800c506:	3301      	adds	r3, #1
 800c508:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800c50c:	2000      	movs	r0, #0
}
 800c50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c510:	2001      	movs	r0, #1
}
 800c512:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800c514:	2002      	movs	r0, #2
 800c516:	e7fa      	b.n	800c50e <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800c518:	2005      	movs	r0, #5
 800c51a:	e7f8      	b.n	800c50e <LoRaMacCommandsAddCmd+0x4a>
 800c51c:	2000140c 	.word	0x2000140c

0800c520 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800c520:	b1a0      	cbz	r0, 800c54c <LoRaMacCommandsRemoveCmd+0x2c>
{
 800c522:	b510      	push	{r4, lr}
 800c524:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800c526:	4601      	mov	r1, r0
 800c528:	480b      	ldr	r0, [pc, #44]	@ (800c558 <LoRaMacCommandsRemoveCmd+0x38>)
 800c52a:	f7ff ff85 	bl	800c438 <LinkedListRemove>
 800c52e:	b178      	cbz	r0, 800c550 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800c530:	4a09      	ldr	r2, [pc, #36]	@ (800c558 <LoRaMacCommandsRemoveCmd+0x38>)
 800c532:	f8d2 3208 	ldr.w	r3, [r2, #520]	@ 0x208
 800c536:	68a1      	ldr	r1, [r4, #8]
 800c538:	1a5b      	subs	r3, r3, r1
 800c53a:	3b01      	subs	r3, #1
 800c53c:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800c540:	4620      	mov	r0, r4
 800c542:	f7ff ffa5 	bl	800c490 <FreeMacCommandSlot>
 800c546:	b128      	cbz	r0, 800c554 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800c548:	2000      	movs	r0, #0
}
 800c54a:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c54c:	2001      	movs	r0, #1
}
 800c54e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800c550:	2003      	movs	r0, #3
 800c552:	e7fa      	b.n	800c54a <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800c554:	2005      	movs	r0, #5
 800c556:	e7f8      	b.n	800c54a <LoRaMacCommandsRemoveCmd+0x2a>
 800c558:	2000140c 	.word	0x2000140c

0800c55c <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800c55c:	4b06      	ldr	r3, [pc, #24]	@ (800c578 <LoRaMacCommandsGetCmd+0x1c>)
 800c55e:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800c560:	e000      	b.n	800c564 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800c562:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800c564:	b113      	cbz	r3, 800c56c <LoRaMacCommandsGetCmd+0x10>
 800c566:	791a      	ldrb	r2, [r3, #4]
 800c568:	4282      	cmp	r2, r0
 800c56a:	d1fa      	bne.n	800c562 <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800c56c:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800c56e:	b10b      	cbz	r3, 800c574 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800c570:	2000      	movs	r0, #0
 800c572:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800c574:	2003      	movs	r0, #3
}
 800c576:	4770      	bx	lr
 800c578:	2000140c 	.word	0x2000140c

0800c57c <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800c57c:	4b0a      	ldr	r3, [pc, #40]	@ (800c5a8 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800c57e:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800c580:	b120      	cbz	r0, 800c58c <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800c582:	7b03      	ldrb	r3, [r0, #12]
 800c584:	b11b      	cbz	r3, 800c58e <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800c586:	6800      	ldr	r0, [r0, #0]
 800c588:	e7fa      	b.n	800c580 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c58a:	bd10      	pop	{r4, pc}
 800c58c:	4770      	bx	lr
{
 800c58e:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800c590:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800c592:	f7ff ffc5 	bl	800c520 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800c596:	4620      	mov	r0, r4
    while( curElement != NULL )
 800c598:	2800      	cmp	r0, #0
 800c59a:	d0f6      	beq.n	800c58a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800c59c:	7b03      	ldrb	r3, [r0, #12]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d0f6      	beq.n	800c590 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800c5a2:	6800      	ldr	r0, [r0, #0]
 800c5a4:	e7f8      	b.n	800c598 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800c5a6:	bf00      	nop
 800c5a8:	2000140c 	.word	0x2000140c

0800c5ac <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800c5ac:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800c5ae:	4b0b      	ldr	r3, [pc, #44]	@ (800c5dc <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800c5b0:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800c5b2:	e000      	b.n	800c5b6 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800c5b4:	4634      	mov	r4, r6
    while( curElement != NULL )
 800c5b6:	b17c      	cbz	r4, 800c5d8 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800c5b8:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800c5ba:	7925      	ldrb	r5, [r4, #4]
 800c5bc:	4628      	mov	r0, r5
 800c5be:	f7ff ff59 	bl	800c474 <IsSticky>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d0f6      	beq.n	800c5b4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	f7ff ff60 	bl	800c48c <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d1f1      	bne.n	800c5b4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f7ff ffa5 	bl	800c520 <LoRaMacCommandsRemoveCmd>
 800c5d6:	e7ed      	b.n	800c5b4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c5d8:	2000      	movs	r0, #0
 800c5da:	bd70      	pop	{r4, r5, r6, pc}
 800c5dc:	2000140c 	.word	0x2000140c

0800c5e0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800c5e0:	b128      	cbz	r0, 800c5ee <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800c5e2:	4a04      	ldr	r2, [pc, #16]	@ (800c5f4 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800c5e4:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 800c5e8:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c5ee:	2001      	movs	r0, #1
}
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop
 800c5f4:	2000140c 	.word	0x2000140c

0800c5f8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800c5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800c5fc:	4b16      	ldr	r3, [pc, #88]	@ (800c658 <LoRaMacCommandsSerializeCmds+0x60>)
 800c5fe:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800c600:	b32a      	cbz	r2, 800c64e <LoRaMacCommandsSerializeCmds+0x56>
 800c602:	4607      	mov	r7, r0
 800c604:	4688      	mov	r8, r1
 800c606:	4616      	mov	r6, r2
 800c608:	b319      	cbz	r1, 800c652 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800c60a:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800c60c:	b194      	cbz	r4, 800c634 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800c60e:	1a7a      	subs	r2, r7, r1
 800c610:	68a3      	ldr	r3, [r4, #8]
 800c612:	3301      	adds	r3, #1
 800c614:	429a      	cmp	r2, r3
 800c616:	d30d      	bcc.n	800c634 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800c618:	1c4d      	adds	r5, r1, #1
 800c61a:	b2ed      	uxtb	r5, r5
 800c61c:	7923      	ldrb	r3, [r4, #4]
 800c61e:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800c620:	8922      	ldrh	r2, [r4, #8]
 800c622:	1d61      	adds	r1, r4, #5
 800c624:	1970      	adds	r0, r6, r5
 800c626:	f003 fe44 	bl	80102b2 <memcpy1>
            itr += curElement->PayloadSize;
 800c62a:	68a3      	ldr	r3, [r4, #8]
 800c62c:	441d      	add	r5, r3
 800c62e:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800c630:	6824      	ldr	r4, [r4, #0]
 800c632:	e7eb      	b.n	800c60c <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800c634:	b12c      	cbz	r4, 800c642 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800c636:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800c638:	4620      	mov	r0, r4
 800c63a:	f7ff ff71 	bl	800c520 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800c63e:	462c      	mov	r4, r5
 800c640:	e7f8      	b.n	800c634 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800c642:	4640      	mov	r0, r8
 800c644:	f7ff ffcc 	bl	800c5e0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800c648:	2000      	movs	r0, #0
}
 800c64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c64e:	2001      	movs	r0, #1
 800c650:	e7fb      	b.n	800c64a <LoRaMacCommandsSerializeCmds+0x52>
 800c652:	2001      	movs	r0, #1
 800c654:	e7f9      	b.n	800c64a <LoRaMacCommandsSerializeCmds+0x52>
 800c656:	bf00      	nop
 800c658:	2000140c 	.word	0x2000140c

0800c65c <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800c65c:	1e83      	subs	r3, r0, #2
 800c65e:	2b11      	cmp	r3, #17
 800c660:	d80a      	bhi.n	800c678 <LoRaMacCommandsGetCmdSize+0x1c>
 800c662:	e8df f003 	tbb	[pc, r3]
 800c666:	0b23      	.short	0x0b23
 800c668:	110f240d 	.word	0x110f240d
 800c66c:	09171513 	.word	0x09171513
 800c670:	09091909 	.word	0x09091909
 800c674:	211f1d1b 	.word	0x211f1d1b
 800c678:	2000      	movs	r0, #0
 800c67a:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800c67c:	2005      	movs	r0, #5
            break;
 800c67e:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800c680:	2002      	movs	r0, #2
            break;
 800c682:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800c684:	2001      	movs	r0, #1
            break;
 800c686:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800c688:	2006      	movs	r0, #6
            break;
 800c68a:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800c68c:	2002      	movs	r0, #2
            break;
 800c68e:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800c690:	2002      	movs	r0, #2
            break;
 800c692:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800c694:	2005      	movs	r0, #5
            break;
 800c696:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800c698:	2006      	movs	r0, #6
            break;
 800c69a:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800c69c:	2001      	movs	r0, #1
            break;
 800c69e:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800c6a0:	2005      	movs	r0, #5
            break;
 800c6a2:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800c6a4:	2004      	movs	r0, #4
            break;
 800c6a6:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800c6a8:	2004      	movs	r0, #4
            break;
 800c6aa:	4770      	bx	lr
            cidSize = 3;
 800c6ac:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800c6ae:	4770      	bx	lr

0800c6b0 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800c6b0:	4b03      	ldr	r3, [pc, #12]	@ (800c6c0 <IncreaseBufferPointer+0x10>)
 800c6b2:	4298      	cmp	r0, r3
 800c6b4:	d001      	beq.n	800c6ba <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800c6b6:	3004      	adds	r0, #4
 800c6b8:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800c6ba:	4802      	ldr	r0, [pc, #8]	@ (800c6c4 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	20001634 	.word	0x20001634
 800c6c4:	20001624 	.word	0x20001624

0800c6c8 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800c6c8:	b108      	cbz	r0, 800c6ce <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	4770      	bx	lr
        return true;
 800c6ce:	2001      	movs	r0, #1
}
 800c6d0:	4770      	bx	lr

0800c6d2 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800c6d2:	2804      	cmp	r0, #4
 800c6d4:	d801      	bhi.n	800c6da <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	4770      	bx	lr
        return true;
 800c6da:	2001      	movs	r0, #1
}
 800c6dc:	4770      	bx	lr
	...

0800c6e0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800c6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6e2:	4606      	mov	r6, r0
 800c6e4:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c71c <GetElement+0x3c>)
 800c6e8:	f893 7020 	ldrb.w	r7, [r3, #32]
 800c6ec:	4638      	mov	r0, r7
 800c6ee:	f7ff ffeb 	bl	800c6c8 <IsListEmpty>
 800c6f2:	b970      	cbnz	r0, 800c712 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800c6f4:	2500      	movs	r5, #0
 800c6f6:	42af      	cmp	r7, r5
 800c6f8:	d909      	bls.n	800c70e <GetElement+0x2e>
    {
        if( element->Request == request )
 800c6fa:	7823      	ldrb	r3, [r4, #0]
 800c6fc:	42b3      	cmp	r3, r6
 800c6fe:	d00a      	beq.n	800c716 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800c700:	4620      	mov	r0, r4
 800c702:	f7ff ffd5 	bl	800c6b0 <IncreaseBufferPointer>
 800c706:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800c708:	3501      	adds	r5, #1
 800c70a:	b2ed      	uxtb	r5, r5
 800c70c:	e7f3      	b.n	800c6f6 <GetElement+0x16>
    }

    return NULL;
 800c70e:	2000      	movs	r0, #0
}
 800c710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800c712:	2000      	movs	r0, #0
 800c714:	e7fc      	b.n	800c710 <GetElement+0x30>
            return element;
 800c716:	4620      	mov	r0, r4
 800c718:	e7fa      	b.n	800c710 <GetElement+0x30>
 800c71a:	bf00      	nop
 800c71c:	20001618 	.word	0x20001618

0800c720 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800c720:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800c722:	4c08      	ldr	r4, [pc, #32]	@ (800c744 <LoRaMacConfirmQueueInit+0x24>)
 800c724:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800c726:	2300      	movs	r3, #0
 800c728:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800c72c:	f104 000c 	add.w	r0, r4, #12
 800c730:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800c732:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800c734:	2214      	movs	r2, #20
 800c736:	21ff      	movs	r1, #255	@ 0xff
 800c738:	f003 fdd3 	bl	80102e2 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c73c:	2301      	movs	r3, #1
 800c73e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 800c742:	bd10      	pop	{r4, pc}
 800c744:	20001618 	.word	0x20001618

0800c748 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800c748:	b538      	push	{r3, r4, r5, lr}
 800c74a:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c74c:	4b0f      	ldr	r3, [pc, #60]	@ (800c78c <LoRaMacConfirmQueueAdd+0x44>)
 800c74e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c752:	f7ff ffbe 	bl	800c6d2 <IsListFull>
 800c756:	b9b8      	cbnz	r0, 800c788 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800c758:	4c0c      	ldr	r4, [pc, #48]	@ (800c78c <LoRaMacConfirmQueueAdd+0x44>)
 800c75a:	68a3      	ldr	r3, [r4, #8]
 800c75c:	782a      	ldrb	r2, [r5, #0]
 800c75e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800c760:	68a3      	ldr	r3, [r4, #8]
 800c762:	786a      	ldrb	r2, [r5, #1]
 800c764:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800c766:	68a3      	ldr	r3, [r4, #8]
 800c768:	78ea      	ldrb	r2, [r5, #3]
 800c76a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800c76c:	68a3      	ldr	r3, [r4, #8]
 800c76e:	78aa      	ldrb	r2, [r5, #2]
 800c770:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800c772:	f894 3020 	ldrb.w	r3, [r4, #32]
 800c776:	3301      	adds	r3, #1
 800c778:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800c77c:	68a0      	ldr	r0, [r4, #8]
 800c77e:	f7ff ff97 	bl	800c6b0 <IncreaseBufferPointer>
 800c782:	60a0      	str	r0, [r4, #8]

    return true;
 800c784:	2001      	movs	r0, #1
}
 800c786:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800c788:	2000      	movs	r0, #0
 800c78a:	e7fc      	b.n	800c786 <LoRaMacConfirmQueueAdd+0x3e>
 800c78c:	20001618 	.word	0x20001618

0800c790 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800c790:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c792:	4b09      	ldr	r3, [pc, #36]	@ (800c7b8 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800c794:	f893 4020 	ldrb.w	r4, [r3, #32]
 800c798:	4620      	mov	r0, r4
 800c79a:	f7ff ff95 	bl	800c6c8 <IsListEmpty>
 800c79e:	b948      	cbnz	r0, 800c7b4 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800c7a0:	4d05      	ldr	r5, [pc, #20]	@ (800c7b8 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800c7a2:	3c01      	subs	r4, #1
 800c7a4:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800c7a8:	6868      	ldr	r0, [r5, #4]
 800c7aa:	f7ff ff81 	bl	800c6b0 <IncreaseBufferPointer>
 800c7ae:	6068      	str	r0, [r5, #4]

    return true;
 800c7b0:	2001      	movs	r0, #1
}
 800c7b2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	e7fc      	b.n	800c7b2 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800c7b8:	20001618 	.word	0x20001618

0800c7bc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800c7bc:	b538      	push	{r3, r4, r5, lr}
 800c7be:	4605      	mov	r5, r0
 800c7c0:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800c7c2:	4b08      	ldr	r3, [pc, #32]	@ (800c7e4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800c7c4:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c7c8:	f7ff ff7e 	bl	800c6c8 <IsListEmpty>
 800c7cc:	b948      	cbnz	r0, 800c7e2 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c7ce:	4b05      	ldr	r3, [pc, #20]	@ (800c7e4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800c7d0:	689a      	ldr	r2, [r3, #8]
 800c7d2:	6859      	ldr	r1, [r3, #4]
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	f7ff ff83 	bl	800c6e0 <GetElement>
        if( element != NULL )
 800c7da:	b110      	cbz	r0, 800c7e2 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800c7dc:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800c7de:	2201      	movs	r2, #1
 800c7e0:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800c7e2:	bd38      	pop	{r3, r4, r5, pc}
 800c7e4:	20001618 	.word	0x20001618

0800c7e8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800c7e8:	b510      	push	{r4, lr}
 800c7ea:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800c7ec:	4b09      	ldr	r3, [pc, #36]	@ (800c814 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800c7ee:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c7f2:	f7ff ff69 	bl	800c6c8 <IsListEmpty>
 800c7f6:	b940      	cbnz	r0, 800c80a <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c7f8:	4b06      	ldr	r3, [pc, #24]	@ (800c814 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800c7fa:	689a      	ldr	r2, [r3, #8]
 800c7fc:	6859      	ldr	r1, [r3, #4]
 800c7fe:	4620      	mov	r0, r4
 800c800:	f7ff ff6e 	bl	800c6e0 <GetElement>
        if( element != NULL )
 800c804:	b118      	cbz	r0, 800c80e <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800c806:	7840      	ldrb	r0, [r0, #1]
 800c808:	e000      	b.n	800c80c <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c80a:	2001      	movs	r0, #1
}
 800c80c:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c80e:	2001      	movs	r0, #1
 800c810:	e7fc      	b.n	800c80c <LoRaMacConfirmQueueGetStatus+0x24>
 800c812:	bf00      	nop
 800c814:	20001618 	.word	0x20001618

0800c818 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800c818:	b538      	push	{r3, r4, r5, lr}
 800c81a:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800c81c:	4b0c      	ldr	r3, [pc, #48]	@ (800c850 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800c81e:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800c820:	f883 0021 	strb.w	r0, [r3, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800c824:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c828:	f7ff ff4e 	bl	800c6c8 <IsListEmpty>
 800c82c:	b150      	cbz	r0, 800c844 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800c82e:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800c830:	2301      	movs	r3, #1
 800c832:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800c834:	4620      	mov	r0, r4
 800c836:	f7ff ff3b 	bl	800c6b0 <IncreaseBufferPointer>
 800c83a:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800c83c:	4b04      	ldr	r3, [pc, #16]	@ (800c850 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	4283      	cmp	r3, r0
 800c842:	d0f4      	beq.n	800c82e <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800c844:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800c846:	78e3      	ldrb	r3, [r4, #3]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d1f3      	bne.n	800c834 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800c84c:	e7f0      	b.n	800c830 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800c84e:	bf00      	nop
 800c850:	20001618 	.word	0x20001618

0800c854 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800c854:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800c856:	4b04      	ldr	r3, [pc, #16]	@ (800c868 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800c858:	689a      	ldr	r2, [r3, #8]
 800c85a:	6859      	ldr	r1, [r3, #4]
 800c85c:	f7ff ff40 	bl	800c6e0 <GetElement>
 800c860:	b100      	cbz	r0, 800c864 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800c862:	2001      	movs	r0, #1
    }
    return false;
}
 800c864:	bd08      	pop	{r3, pc}
 800c866:	bf00      	nop
 800c868:	20001618 	.word	0x20001618

0800c86c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800c86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c86e:	b083      	sub	sp, #12
 800c870:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800c872:	4b19      	ldr	r3, [pc, #100]	@ (800c8d8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800c874:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800c878:	2204      	movs	r2, #4
 800c87a:	2100      	movs	r1, #0
 800c87c:	eb0d 0002 	add.w	r0, sp, r2
 800c880:	f003 fd2f 	bl	80102e2 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800c884:	2400      	movs	r4, #0
 800c886:	e00d      	b.n	800c8a4 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800c888:	781a      	ldrb	r2, [r3, #0]
 800c88a:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800c88e:	785a      	ldrb	r2, [r3, #1]
 800c890:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800c894:	78db      	ldrb	r3, [r3, #3]
 800c896:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800c89a:	f7ff ff79 	bl	800c790 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800c89e:	b1a5      	cbz	r5, 800c8ca <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800c8a0:	3401      	adds	r4, #1
 800c8a2:	b2e4      	uxtb	r4, r4
 800c8a4:	42bc      	cmp	r4, r7
 800c8a6:	d214      	bcs.n	800c8d2 <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800c8a8:	4b0b      	ldr	r3, [pc, #44]	@ (800c8d8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	7812      	ldrb	r2, [r2, #0]
 800c8ae:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800c8b0:	685a      	ldr	r2, [r3, #4]
 800c8b2:	7852      	ldrb	r2, [r2, #1]
 800c8b4:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800c8ba:	2d00      	cmp	r5, #0
 800c8bc:	d0e4      	beq.n	800c888 <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800c8be:	4b06      	ldr	r3, [pc, #24]	@ (800c8d8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	4798      	blx	r3
 800c8c8:	e7e7      	b.n	800c89a <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800c8ca:	a801      	add	r0, sp, #4
 800c8cc:	f7ff ff3c 	bl	800c748 <LoRaMacConfirmQueueAdd>
 800c8d0:	e7e6      	b.n	800c8a0 <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800c8d2:	b003      	add	sp, #12
 800c8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	20001618 	.word	0x20001618

0800c8dc <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800c8dc:	4b01      	ldr	r3, [pc, #4]	@ (800c8e4 <LoRaMacConfirmQueueGetCnt+0x8>)
 800c8de:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c8e2:	4770      	bx	lr
 800c8e4:	20001618 	.word	0x20001618

0800c8e8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800c8e8:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c8ea:	4b03      	ldr	r3, [pc, #12]	@ (800c8f8 <LoRaMacConfirmQueueIsFull+0x10>)
 800c8ec:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c8f0:	f7ff feef 	bl	800c6d2 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800c8f4:	bd08      	pop	{r3, pc}
 800c8f6:	bf00      	nop
 800c8f8:	20001618 	.word	0x20001618

0800c8fc <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800c8fc:	b410      	push	{r4}
 800c8fe:	9c01      	ldr	r4, [sp, #4]
 800c900:	9902      	ldr	r1, [sp, #8]
 800c902:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800c904:	b1da      	cbz	r2, 800c93e <PrepareB0+0x42>
 800c906:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800c908:	2049      	movs	r0, #73	@ 0x49
 800c90a:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800c90c:	2000      	movs	r0, #0
 800c90e:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800c910:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800c912:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800c914:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800c916:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800c918:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800c91a:	0a23      	lsrs	r3, r4, #8
 800c91c:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800c91e:	0c23      	lsrs	r3, r4, #16
 800c920:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800c922:	0e24      	lsrs	r4, r4, #24
 800c924:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800c926:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800c928:	0a0b      	lsrs	r3, r1, #8
 800c92a:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800c92c:	0c0b      	lsrs	r3, r1, #16
 800c92e:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800c930:	0e09      	lsrs	r1, r1, #24
 800c932:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800c934:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800c936:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c93a:	bc10      	pop	{r4}
 800c93c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c93e:	2009      	movs	r0, #9
 800c940:	e7fb      	b.n	800c93a <PrepareB0+0x3e>
	...

0800c944 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800c944:	2300      	movs	r3, #0
 800c946:	2b01      	cmp	r3, #1
 800c948:	d80d      	bhi.n	800c966 <GetKeyAddrItem+0x22>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800c94a:	4a08      	ldr	r2, [pc, #32]	@ (800c96c <GetKeyAddrItem+0x28>)
 800c94c:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800c950:	4282      	cmp	r2, r0
 800c952:	d002      	beq.n	800c95a <GetKeyAddrItem+0x16>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800c954:	3301      	adds	r3, #1
 800c956:	b2db      	uxtb	r3, r3
 800c958:	e7f5      	b.n	800c946 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800c95a:	4a04      	ldr	r2, [pc, #16]	@ (800c96c <GetKeyAddrItem+0x28>)
 800c95c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c960:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800c962:	2000      	movs	r0, #0
 800c964:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800c966:	200b      	movs	r0, #11
}
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	2000010c 	.word	0x2000010c

0800c970 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800c970:	b1f1      	cbz	r1, 800c9b0 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800c972:	3801      	subs	r0, #1
 800c974:	2803      	cmp	r0, #3
 800c976:	d81d      	bhi.n	800c9b4 <GetLastFcntDown+0x44>
 800c978:	e8df f000 	tbb	[pc, r0]
 800c97c:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800c980:	4a0d      	ldr	r2, [pc, #52]	@ (800c9b8 <GetLastFcntDown+0x48>)
 800c982:	6812      	ldr	r2, [r2, #0]
 800c984:	6912      	ldr	r2, [r2, #16]
 800c986:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800c988:	2000      	movs	r0, #0
            break;
 800c98a:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800c98c:	4a0a      	ldr	r2, [pc, #40]	@ (800c9b8 <GetLastFcntDown+0x48>)
 800c98e:	6812      	ldr	r2, [r2, #0]
 800c990:	6952      	ldr	r2, [r2, #20]
 800c992:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800c994:	2000      	movs	r0, #0
            break;
 800c996:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800c998:	4a07      	ldr	r2, [pc, #28]	@ (800c9b8 <GetLastFcntDown+0x48>)
 800c99a:	6812      	ldr	r2, [r2, #0]
 800c99c:	6992      	ldr	r2, [r2, #24]
 800c99e:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800c9a0:	2000      	movs	r0, #0
            break;
 800c9a2:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800c9a4:	4a04      	ldr	r2, [pc, #16]	@ (800c9b8 <GetLastFcntDown+0x48>)
 800c9a6:	6812      	ldr	r2, [r2, #0]
 800c9a8:	69d2      	ldr	r2, [r2, #28]
 800c9aa:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800c9ac:	2000      	movs	r0, #0
            break;
 800c9ae:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c9b0:	2009      	movs	r0, #9
 800c9b2:	4770      	bx	lr
    switch( fCntID )
 800c9b4:	2005      	movs	r0, #5
}
 800c9b6:	4770      	bx	lr
 800c9b8:	2000163c 	.word	0x2000163c

0800c9bc <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800c9bc:	b510      	push	{r4, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800c9c6:	a901      	add	r1, sp, #4
 800c9c8:	f7ff ffd2 	bl	800c970 <GetLastFcntDown>
 800c9cc:	b948      	cbnz	r0, 800c9e2 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800c9ce:	9b01      	ldr	r3, [sp, #4]
 800c9d0:	42a3      	cmp	r3, r4
 800c9d2:	d309      	bcc.n	800c9e8 <CheckFCntDown+0x2c>
 800c9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9d8:	d001      	beq.n	800c9de <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800c9da:	2000      	movs	r0, #0
 800c9dc:	e002      	b.n	800c9e4 <CheckFCntDown+0x28>
        return true;
 800c9de:	2001      	movs	r0, #1
 800c9e0:	e000      	b.n	800c9e4 <CheckFCntDown+0x28>
        return false;
 800c9e2:	2000      	movs	r0, #0
    }
}
 800c9e4:	b002      	add	sp, #8
 800c9e6:	bd10      	pop	{r4, pc}
        return true;
 800c9e8:	2001      	movs	r0, #1
 800c9ea:	e7fb      	b.n	800c9e4 <CheckFCntDown+0x28>

0800c9ec <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800c9ec:	3801      	subs	r0, #1
 800c9ee:	2803      	cmp	r0, #3
 800c9f0:	d815      	bhi.n	800ca1e <UpdateFCntDown+0x32>
 800c9f2:	e8df f000 	tbb	[pc, r0]
 800c9f6:	0702      	.short	0x0702
 800c9f8:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800c9fa:	4b09      	ldr	r3, [pc, #36]	@ (800ca20 <UpdateFCntDown+0x34>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800ca00:	6219      	str	r1, [r3, #32]
            break;
 800ca02:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800ca04:	4b06      	ldr	r3, [pc, #24]	@ (800ca20 <UpdateFCntDown+0x34>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800ca0a:	6219      	str	r1, [r3, #32]
            break;
 800ca0c:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800ca0e:	4b04      	ldr	r3, [pc, #16]	@ (800ca20 <UpdateFCntDown+0x34>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800ca14:	6219      	str	r1, [r3, #32]
            break;
 800ca16:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800ca18:	4b01      	ldr	r3, [pc, #4]	@ (800ca20 <UpdateFCntDown+0x34>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800ca1e:	4770      	bx	lr
 800ca20:	2000163c 	.word	0x2000163c

0800ca24 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800ca24:	4b0a      	ldr	r3, [pc, #40]	@ (800ca50 <ResetFCnts+0x2c>)
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	2300      	movs	r3, #0
 800ca2a:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800ca2c:	f04f 31ff 	mov.w	r1, #4294967295
 800ca30:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800ca32:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800ca34:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800ca36:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	dd00      	ble.n	800ca3e <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800ca3c:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800ca3e:	1d99      	adds	r1, r3, #6
 800ca40:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800ca44:	f04f 30ff 	mov.w	r0, #4294967295
 800ca48:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	e7f4      	b.n	800ca38 <ResetFCnts+0x14>
 800ca4e:	bf00      	nop
 800ca50:	2000163c 	.word	0x2000163c

0800ca54 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800ca54:	4b03      	ldr	r3, [pc, #12]	@ (800ca64 <IsJoinNonce10xOk+0x10>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800ca5a:	4283      	cmp	r3, r0
 800ca5c:	bf2c      	ite	cs
 800ca5e:	2000      	movcs	r0, #0
 800ca60:	2001      	movcc	r0, #1
 800ca62:	4770      	bx	lr
 800ca64:	2000163c 	.word	0x2000163c

0800ca68 <ComputeCmacB0>:
{
 800ca68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca6c:	b088      	sub	sp, #32
 800ca6e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800ca70:	b1f0      	cbz	r0, 800cab0 <ComputeCmacB0+0x48>
 800ca72:	460c      	mov	r4, r1
 800ca74:	4615      	mov	r5, r2
 800ca76:	461a      	mov	r2, r3
 800ca78:	4680      	mov	r8, r0
 800ca7a:	b1de      	cbz	r6, 800cab4 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ca7c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800ca80:	d81a      	bhi.n	800cab8 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800ca82:	af04      	add	r7, sp, #16
 800ca84:	9702      	str	r7, [sp, #8]
 800ca86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ca88:	9301      	str	r3, [sp, #4]
 800ca8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca8c:	9300      	str	r3, [sp, #0]
 800ca8e:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 800ca92:	4629      	mov	r1, r5
 800ca94:	4620      	mov	r0, r4
 800ca96:	f7ff ff31 	bl	800c8fc <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800ca9a:	9600      	str	r6, [sp, #0]
 800ca9c:	462b      	mov	r3, r5
 800ca9e:	4622      	mov	r2, r4
 800caa0:	4641      	mov	r1, r8
 800caa2:	4638      	mov	r0, r7
 800caa4:	f003 f9c0 	bl	800fe28 <SecureElementComputeAesCmac>
 800caa8:	b940      	cbnz	r0, 800cabc <ComputeCmacB0+0x54>
}
 800caaa:	b008      	add	sp, #32
 800caac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cab0:	2009      	movs	r0, #9
 800cab2:	e7fa      	b.n	800caaa <ComputeCmacB0+0x42>
 800cab4:	2009      	movs	r0, #9
 800cab6:	e7f8      	b.n	800caaa <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800cab8:	200d      	movs	r0, #13
 800caba:	e7f6      	b.n	800caaa <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cabc:	200e      	movs	r0, #14
 800cabe:	e7f4      	b.n	800caaa <ComputeCmacB0+0x42>

0800cac0 <DeriveSessionKey10x>:
{
 800cac0:	b510      	push	{r4, lr}
 800cac2:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800cac4:	2400      	movs	r4, #0
 800cac6:	9400      	str	r4, [sp, #0]
 800cac8:	9401      	str	r4, [sp, #4]
 800caca:	9402      	str	r4, [sp, #8]
 800cacc:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800cace:	2808      	cmp	r0, #8
 800cad0:	d003      	beq.n	800cada <DeriveSessionKey10x+0x1a>
 800cad2:	2809      	cmp	r0, #9
 800cad4:	d025      	beq.n	800cb22 <DeriveSessionKey10x+0x62>
 800cad6:	200a      	movs	r0, #10
 800cad8:	e021      	b.n	800cb1e <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800cada:	2401      	movs	r4, #1
 800cadc:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800cae0:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800cae4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800cae8:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800caec:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800caf0:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800caf4:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800caf8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800cafc:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800cb00:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800cb04:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800cb08:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800cb0c:	0a1b      	lsrs	r3, r3, #8
 800cb0e:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800cb12:	4602      	mov	r2, r0
 800cb14:	2101      	movs	r1, #1
 800cb16:	4668      	mov	r0, sp
 800cb18:	f003 fa24 	bl	800ff64 <SecureElementDeriveAndStoreKey>
 800cb1c:	b928      	cbnz	r0, 800cb2a <DeriveSessionKey10x+0x6a>
}
 800cb1e:	b004      	add	sp, #16
 800cb20:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800cb22:	2402      	movs	r4, #2
 800cb24:	f88d 4000 	strb.w	r4, [sp]
            break;
 800cb28:	e7da      	b.n	800cae0 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cb2a:	200e      	movs	r0, #14
 800cb2c:	e7f7      	b.n	800cb1e <DeriveSessionKey10x+0x5e>

0800cb2e <PayloadEncrypt>:
{
 800cb2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb32:	b088      	sub	sp, #32
 800cb34:	4690      	mov	r8, r2
 800cb36:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    if( buffer == 0 )
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	d052      	beq.n	800cbe2 <PayloadEncrypt+0xb4>
 800cb3c:	460d      	mov	r5, r1
 800cb3e:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800cb40:	2600      	movs	r6, #0
 800cb42:	9604      	str	r6, [sp, #16]
 800cb44:	9605      	str	r6, [sp, #20]
 800cb46:	9606      	str	r6, [sp, #24]
 800cb48:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800cb4a:	9600      	str	r6, [sp, #0]
 800cb4c:	9601      	str	r6, [sp, #4]
 800cb4e:	9602      	str	r6, [sp, #8]
 800cb50:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800cb52:	2701      	movs	r7, #1
 800cb54:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800cb58:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800cb5c:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800cb60:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800cb64:	0a19      	lsrs	r1, r3, #8
 800cb66:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800cb6a:	0c19      	lsrs	r1, r3, #16
 800cb6c:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800cb70:	0e1b      	lsrs	r3, r3, #24
 800cb72:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800cb76:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800cb7a:	0a13      	lsrs	r3, r2, #8
 800cb7c:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800cb80:	0c13      	lsrs	r3, r2, #16
 800cb82:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800cb86:	0e12      	lsrs	r2, r2, #24
 800cb88:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800cb8c:	e014      	b.n	800cbb8 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800cb8e:	18f2      	adds	r2, r6, r3
 800cb90:	5ca0      	ldrb	r0, [r4, r2]
 800cb92:	f103 0120 	add.w	r1, r3, #32
 800cb96:	4469      	add	r1, sp
 800cb98:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800cb9c:	4048      	eors	r0, r1
 800cb9e:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800cba0:	3301      	adds	r3, #1
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	462a      	mov	r2, r5
 800cba6:	2d10      	cmp	r5, #16
 800cba8:	bfa8      	it	ge
 800cbaa:	2210      	movge	r2, #16
 800cbac:	4293      	cmp	r3, r2
 800cbae:	dbee      	blt.n	800cb8e <PayloadEncrypt+0x60>
        size -= 16;
 800cbb0:	3d10      	subs	r5, #16
 800cbb2:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800cbb4:	3610      	adds	r6, #16
 800cbb6:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800cbb8:	2d00      	cmp	r5, #0
 800cbba:	dd0e      	ble.n	800cbda <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800cbbc:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800cbc0:	3701      	adds	r7, #1
 800cbc2:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800cbc4:	ab04      	add	r3, sp, #16
 800cbc6:	4642      	mov	r2, r8
 800cbc8:	2110      	movs	r1, #16
 800cbca:	4668      	mov	r0, sp
 800cbcc:	f003 f951 	bl	800fe72 <SecureElementAesEncrypt>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	d0e6      	beq.n	800cba4 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cbd6:	200e      	movs	r0, #14
 800cbd8:	e000      	b.n	800cbdc <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800cbda:	2000      	movs	r0, #0
}
 800cbdc:	b008      	add	sp, #32
 800cbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cbe2:	2009      	movs	r0, #9
 800cbe4:	e7fa      	b.n	800cbdc <PayloadEncrypt+0xae>

0800cbe6 <VerifyCmacB0>:
    if( msg == 0 )
 800cbe6:	b368      	cbz	r0, 800cc44 <VerifyCmacB0+0x5e>
{
 800cbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbec:	b0c8      	sub	sp, #288	@ 0x120
 800cbee:	460c      	mov	r4, r1
 800cbf0:	4615      	mov	r5, r2
 800cbf2:	461e      	mov	r6, r3
 800cbf4:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800cbf6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800cbfa:	d825      	bhi.n	800cc48 <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800cbfc:	af04      	add	r7, sp, #16
 800cbfe:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800cc02:	2100      	movs	r1, #0
 800cc04:	4638      	mov	r0, r7
 800cc06:	f003 fb6c 	bl	80102e2 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800cc0a:	9702      	str	r7, [sp, #8]
 800cc0c:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 800cc0e:	9301      	str	r3, [sp, #4]
 800cc10:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	f89d 3138 	ldrb.w	r3, [sp, #312]	@ 0x138
 800cc18:	4632      	mov	r2, r6
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f7ff fe6d 	bl	800c8fc <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800cc22:	4622      	mov	r2, r4
 800cc24:	4641      	mov	r1, r8
 800cc26:	a808      	add	r0, sp, #32
 800cc28:	f003 fb43 	bl	80102b2 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800cc2c:	462b      	mov	r3, r5
 800cc2e:	9a51      	ldr	r2, [sp, #324]	@ 0x144
 800cc30:	f104 0110 	add.w	r1, r4, #16
 800cc34:	4638      	mov	r0, r7
 800cc36:	f003 f906 	bl	800fe46 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800cc3a:	b130      	cbz	r0, 800cc4a <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800cc3c:	2801      	cmp	r0, #1
 800cc3e:	d004      	beq.n	800cc4a <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cc40:	200e      	movs	r0, #14
 800cc42:	e002      	b.n	800cc4a <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cc44:	2009      	movs	r0, #9
}
 800cc46:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800cc48:	200d      	movs	r0, #13
}
 800cc4a:	b048      	add	sp, #288	@ 0x120
 800cc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cc50 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800cc50:	b188      	cbz	r0, 800cc76 <LoRaMacCryptoInit+0x26>
{
 800cc52:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800cc54:	4c09      	ldr	r4, [pc, #36]	@ (800cc7c <LoRaMacCryptoInit+0x2c>)
 800cc56:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800cc58:	2228      	movs	r2, #40	@ 0x28
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	f003 fb41 	bl	80102e2 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800cc60:	6823      	ldr	r3, [r4, #0]
 800cc62:	2201      	movs	r2, #1
 800cc64:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800cc66:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800cc68:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800cc6a:	2400      	movs	r4, #0
 800cc6c:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800cc6e:	f7ff fed9 	bl	800ca24 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800cc72:	4620      	mov	r0, r4
}
 800cc74:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800cc76:	2008      	movs	r0, #8
}
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	2000163c 	.word	0x2000163c

0800cc80 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800cc80:	4b02      	ldr	r3, [pc, #8]	@ (800cc8c <LoRaMacCryptoSetLrWanVersion+0xc>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800cc86:	2000      	movs	r0, #0
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	2000163c 	.word	0x2000163c

0800cc90 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800cc90:	b130      	cbz	r0, 800cca0 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800cc92:	4b04      	ldr	r3, [pc, #16]	@ (800cca4 <LoRaMacCryptoGetFCntUp+0x14>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	3301      	adds	r3, #1
 800cc9a:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800cc9c:	2000      	movs	r0, #0
 800cc9e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cca0:	2009      	movs	r0, #9
}
 800cca2:	4770      	bx	lr
 800cca4:	2000163c 	.word	0x2000163c

0800cca8 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800cca8:	b530      	push	{r4, r5, lr}
 800ccaa:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800ccac:	2300      	movs	r3, #0
 800ccae:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800ccb0:	b1f2      	cbz	r2, 800ccf0 <LoRaMacCryptoGetFCntDown+0x48>
 800ccb2:	460c      	mov	r4, r1
 800ccb4:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800ccb6:	a901      	add	r1, sp, #4
 800ccb8:	f7ff fe5a 	bl	800c970 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ccbc:	b948      	cbnz	r0, 800ccd2 <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800ccbe:	9b01      	ldr	r3, [sp, #4]
 800ccc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccc4:	d007      	beq.n	800ccd6 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800ccc6:	b29a      	uxth	r2, r3
 800ccc8:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800ccca:	2a00      	cmp	r2, #0
 800cccc:	dd05      	ble.n	800ccda <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800ccce:	4413      	add	r3, r2
 800ccd0:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ccd2:	b003      	add	sp, #12
 800ccd4:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800ccd6:	602c      	str	r4, [r5, #0]
 800ccd8:	e7fb      	b.n	800ccd2 <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800ccda:	b132      	cbz	r2, 800ccea <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800ccdc:	f36f 030f 	bfc	r3, #0, #16
 800cce0:	4423      	add	r3, r4
 800cce2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800cce6:	602b      	str	r3, [r5, #0]
 800cce8:	e7f3      	b.n	800ccd2 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800ccea:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800ccec:	2007      	movs	r0, #7
 800ccee:	e7f0      	b.n	800ccd2 <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ccf0:	2009      	movs	r0, #9
 800ccf2:	e7ee      	b.n	800ccd2 <LoRaMacCryptoGetFCntDown+0x2a>

0800ccf4 <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800ccf4:	4601      	mov	r1, r0
 800ccf6:	b908      	cbnz	r0, 800ccfc <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ccf8:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ccfa:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	dd01      	ble.n	800cd06 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800cd02:	2000      	movs	r0, #0
 800cd04:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800cd06:	4a07      	ldr	r2, [pc, #28]	@ (800cd24 <LoRaMacCryptoSetMulticastReference+0x30>)
 800cd08:	6812      	ldr	r2, [r2, #0]
 800cd0a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800cd0e:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800cd12:	f103 0c06 	add.w	ip, r3, #6
 800cd16:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800cd1a:	3204      	adds	r2, #4
 800cd1c:	6242      	str	r2, [r0, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cd1e:	3301      	adds	r3, #1
 800cd20:	e7ed      	b.n	800ccfe <LoRaMacCryptoSetMulticastReference+0xa>
 800cd22:	bf00      	nop
 800cd24:	2000163c 	.word	0x2000163c

0800cd28 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800cd28:	b1d8      	cbz	r0, 800cd62 <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800cd2a:	b510      	push	{r4, lr}
 800cd2c:	b082      	sub	sp, #8
 800cd2e:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800cd30:	4b0f      	ldr	r3, [pc, #60]	@ (800cd70 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	8893      	ldrh	r3, [r2, #4]
 800cd36:	3301      	adds	r3, #1
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800cd3c:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800cd3e:	f000 fa36 	bl	800d1ae <LoRaMacSerializerJoinRequest>
 800cd42:	b980      	cbnz	r0, 800cd66 <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800cd44:	4623      	mov	r3, r4
 800cd46:	f853 1b18 	ldr.w	r1, [r3], #24
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	2213      	movs	r2, #19
 800cd50:	f003 f86a 	bl	800fe28 <SecureElementComputeAesCmac>
 800cd54:	b950      	cbnz	r0, 800cd6c <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800cd56:	4620      	mov	r0, r4
 800cd58:	f000 fa29 	bl	800d1ae <LoRaMacSerializerJoinRequest>
 800cd5c:	b120      	cbz	r0, 800cd68 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800cd5e:	2010      	movs	r0, #16
 800cd60:	e002      	b.n	800cd68 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cd62:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800cd64:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800cd66:	2010      	movs	r0, #16
}
 800cd68:	b002      	add	sp, #8
 800cd6a:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cd6c:	200e      	movs	r0, #14
 800cd6e:	e7fb      	b.n	800cd68 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800cd70:	2000163c 	.word	0x2000163c

0800cd74 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d036      	beq.n	800cde6 <LoRaMacCryptoSecureMessage+0x72>
{
 800cd78:	b530      	push	{r4, r5, lr}
 800cd7a:	b085      	sub	sp, #20
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800cd80:	4b1d      	ldr	r3, [pc, #116]	@ (800cdf8 <LoRaMacCryptoSecureMessage+0x84>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	4283      	cmp	r3, r0
 800cd88:	d82f      	bhi.n	800cdea <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800cd8a:	f895 2020 	ldrb.w	r2, [r5, #32]
 800cd8e:	b342      	cbz	r2, 800cde2 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800cd90:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800cd92:	42a3      	cmp	r3, r4
 800cd94:	d209      	bcs.n	800cdaa <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800cd96:	9401      	str	r4, [sp, #4]
 800cd98:	2300      	movs	r3, #0
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	68ab      	ldr	r3, [r5, #8]
 800cd9e:	f895 1028 	ldrb.w	r1, [r5, #40]	@ 0x28
 800cda2:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800cda4:	f7ff fec3 	bl	800cb2e <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cda8:	bb10      	cbnz	r0, 800cdf0 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800cdaa:	4628      	mov	r0, r5
 800cdac:	f000 fa35 	bl	800d21a <LoRaMacSerializerData>
 800cdb0:	b9e8      	cbnz	r0, 800cdee <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800cdb2:	7929      	ldrb	r1, [r5, #4]
 800cdb4:	3904      	subs	r1, #4
 800cdb6:	462b      	mov	r3, r5
 800cdb8:	f853 0b2c 	ldr.w	r0, [r3], #44
 800cdbc:	9303      	str	r3, [sp, #12]
 800cdbe:	9402      	str	r4, [sp, #8]
 800cdc0:	68ab      	ldr	r3, [r5, #8]
 800cdc2:	9301      	str	r3, [sp, #4]
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	9300      	str	r3, [sp, #0]
 800cdc8:	2208      	movs	r2, #8
 800cdca:	b289      	uxth	r1, r1
 800cdcc:	f7ff fe4c 	bl	800ca68 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cdd0:	b970      	cbnz	r0, 800cdf0 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	f000 fa21 	bl	800d21a <LoRaMacSerializerData>
 800cdd8:	b960      	cbnz	r0, 800cdf4 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800cdda:	4b07      	ldr	r3, [pc, #28]	@ (800cdf8 <LoRaMacCryptoSecureMessage+0x84>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800cde0:	e006      	b.n	800cdf0 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800cde2:	2208      	movs	r2, #8
 800cde4:	e7d5      	b.n	800cd92 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cde6:	2009      	movs	r0, #9
}
 800cde8:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800cdea:	2006      	movs	r0, #6
 800cdec:	e000      	b.n	800cdf0 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800cdee:	2010      	movs	r0, #16
}
 800cdf0:	b005      	add	sp, #20
 800cdf2:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800cdf4:	2010      	movs	r0, #16
 800cdf6:	e7fb      	b.n	800cdf0 <LoRaMacCryptoSecureMessage+0x7c>
 800cdf8:	2000163c 	.word	0x2000163c

0800cdfc <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800cdfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce00:	b087      	sub	sp, #28
 800ce02:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
    if( macMsg == 0 )
 800ce04:	2e00      	cmp	r6, #0
 800ce06:	d049      	beq.n	800ce9c <LoRaMacCryptoUnsecureMessage+0xa0>
 800ce08:	4605      	mov	r5, r0
 800ce0a:	4688      	mov	r8, r1
 800ce0c:	4617      	mov	r7, r2
 800ce0e:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800ce10:	4619      	mov	r1, r3
 800ce12:	4610      	mov	r0, r2
 800ce14:	f7ff fdd2 	bl	800c9bc <CheckFCntDown>
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	d041      	beq.n	800cea0 <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	f000 f967 	bl	800d0f0 <LoRaMacParserData>
 800ce22:	2800      	cmp	r0, #0
 800ce24:	d141      	bne.n	800ceaa <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800ce26:	a905      	add	r1, sp, #20
 800ce28:	4628      	mov	r0, r5
 800ce2a:	f7ff fd8b 	bl	800c944 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ce2e:	4605      	mov	r5, r0
 800ce30:	2800      	cmp	r0, #0
 800ce32:	d136      	bne.n	800cea2 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800ce34:	9b05      	ldr	r3, [sp, #20]
 800ce36:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800ce3a:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800ce3c:	68b3      	ldr	r3, [r6, #8]
 800ce3e:	4543      	cmp	r3, r8
 800ce40:	d135      	bne.n	800ceae <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800ce42:	7b33      	ldrb	r3, [r6, #12]
 800ce44:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800ce48:	491a      	ldr	r1, [pc, #104]	@ (800ceb4 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800ce4a:	6809      	ldr	r1, [r1, #0]
 800ce4c:	7889      	ldrb	r1, [r1, #2]
 800ce4e:	b901      	cbnz	r1, 800ce52 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800ce50:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800ce52:	7931      	ldrb	r1, [r6, #4]
 800ce54:	3904      	subs	r1, #4
 800ce56:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 800ce58:	9003      	str	r0, [sp, #12]
 800ce5a:	9402      	str	r4, [sp, #8]
 800ce5c:	f8cd 8004 	str.w	r8, [sp, #4]
 800ce60:	2001      	movs	r0, #1
 800ce62:	9000      	str	r0, [sp, #0]
 800ce64:	b289      	uxth	r1, r1
 800ce66:	6830      	ldr	r0, [r6, #0]
 800ce68:	f7ff febd 	bl	800cbe6 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ce6c:	4605      	mov	r5, r0
 800ce6e:	b9c0      	cbnz	r0, 800cea2 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800ce70:	f896 3020 	ldrb.w	r3, [r6, #32]
 800ce74:	b90b      	cbnz	r3, 800ce7a <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800ce76:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800ce7a:	9401      	str	r4, [sp, #4]
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	9300      	str	r3, [sp, #0]
 800ce80:	4643      	mov	r3, r8
 800ce82:	464a      	mov	r2, r9
 800ce84:	f896 1028 	ldrb.w	r1, [r6, #40]	@ 0x28
 800ce88:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800ce8a:	f7ff fe50 	bl	800cb2e <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ce8e:	4605      	mov	r5, r0
 800ce90:	b938      	cbnz	r0, 800cea2 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 800ce92:	4621      	mov	r1, r4
 800ce94:	4638      	mov	r0, r7
 800ce96:	f7ff fda9 	bl	800c9ec <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800ce9a:	e002      	b.n	800cea2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ce9c:	2509      	movs	r5, #9
 800ce9e:	e000      	b.n	800cea2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800cea0:	2506      	movs	r5, #6
}
 800cea2:	4628      	mov	r0, r5
 800cea4:	b007      	add	sp, #28
 800cea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ceaa:	250f      	movs	r5, #15
 800ceac:	e7f9      	b.n	800cea2 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800ceae:	2502      	movs	r5, #2
 800ceb0:	e7f7      	b.n	800cea2 <LoRaMacCryptoUnsecureMessage+0xa6>
 800ceb2:	bf00      	nop
 800ceb4:	2000163c 	.word	0x2000163c

0800ceb8 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800ceb8:	b500      	push	{lr}
 800ceba:	b085      	sub	sp, #20
 800cebc:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800cebe:	2300      	movs	r3, #0
 800cec0:	9300      	str	r3, [sp, #0]
 800cec2:	9301      	str	r3, [sp, #4]
 800cec4:	9302      	str	r3, [sp, #8]
 800cec6:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800cec8:	290b      	cmp	r1, #11
 800ceca:	d005      	beq.n	800ced8 <LoRaMacCryptoDeriveLifeTimeKey+0x20>
 800cecc:	290c      	cmp	r1, #12
 800cece:	d011      	beq.n	800cef4 <LoRaMacCryptoDeriveLifeTimeKey+0x3c>
 800ced0:	290a      	cmp	r1, #10
 800ced2:	d00a      	beq.n	800ceea <LoRaMacCryptoDeriveLifeTimeKey+0x32>
 800ced4:	200a      	movs	r0, #10
 800ced6:	e012      	b.n	800cefe <LoRaMacCryptoDeriveLifeTimeKey+0x46>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 800ced8:	2801      	cmp	r0, #1
 800ceda:	d001      	beq.n	800cee0 <LoRaMacCryptoDeriveLifeTimeKey+0x28>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800cedc:	2100      	movs	r1, #0
 800cede:	e00a      	b.n	800cef6 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
            {
                compBase[0] = 0x20;
 800cee0:	2320      	movs	r3, #32
 800cee2:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800cee6:	2100      	movs	r1, #0
 800cee8:	e005      	b.n	800cef6 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
            break;
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
            break;
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 800ceea:	2330      	movs	r3, #48	@ 0x30
 800ceec:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800cef0:	2100      	movs	r1, #0
            break;
 800cef2:	e000      	b.n	800cef6 <LoRaMacCryptoDeriveLifeTimeKey+0x3e>
    switch( keyID )
 800cef4:	210b      	movs	r1, #11
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800cef6:	4668      	mov	r0, sp
 800cef8:	f003 f834 	bl	800ff64 <SecureElementDeriveAndStoreKey>
 800cefc:	b910      	cbnz	r0, 800cf04 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800cefe:	b005      	add	sp, #20
 800cf00:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cf04:	200e      	movs	r0, #14
 800cf06:	e7fa      	b.n	800cefe <LoRaMacCryptoDeriveLifeTimeKey+0x46>

0800cf08 <LoRaMacCryptoSetKey>:
{
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800cf0c:	f002 ffe8 	bl	800fee0 <SecureElementSetKey>
 800cf10:	b998      	cbnz	r0, 800cf3a <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 800cf12:	b104      	cbz	r4, 800cf16 <LoRaMacCryptoSetKey+0xe>
}
 800cf14:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800cf16:	4b0c      	ldr	r3, [pc, #48]	@ (800cf48 <LoRaMacCryptoSetKey+0x40>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	210b      	movs	r1, #11
 800cf1c:	7898      	ldrb	r0, [r3, #2]
 800cf1e:	f7ff ffcb 	bl	800ceb8 <LoRaMacCryptoDeriveLifeTimeKey>
 800cf22:	b960      	cbnz	r0, 800cf3e <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800cf24:	210c      	movs	r1, #12
 800cf26:	f7ff ffc7 	bl	800ceb8 <LoRaMacCryptoDeriveLifeTimeKey>
 800cf2a:	b950      	cbnz	r0, 800cf42 <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800cf2c:	210a      	movs	r1, #10
 800cf2e:	f7ff ffc3 	bl	800ceb8 <LoRaMacCryptoDeriveLifeTimeKey>
 800cf32:	2800      	cmp	r0, #0
 800cf34:	d0ee      	beq.n	800cf14 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cf36:	200e      	movs	r0, #14
 800cf38:	e7ec      	b.n	800cf14 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cf3a:	200e      	movs	r0, #14
 800cf3c:	e7ea      	b.n	800cf14 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cf3e:	200e      	movs	r0, #14
 800cf40:	e7e8      	b.n	800cf14 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cf42:	200e      	movs	r0, #14
 800cf44:	e7e6      	b.n	800cf14 <LoRaMacCryptoSetKey+0xc>
 800cf46:	bf00      	nop
 800cf48:	2000163c 	.word	0x2000163c

0800cf4c <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800cf4c:	2a00      	cmp	r2, #0
 800cf4e:	d06e      	beq.n	800d02e <LoRaMacCryptoHandleJoinAccept+0xe2>
{
 800cf50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf54:	b08e      	sub	sp, #56	@ 0x38
 800cf56:	4606      	mov	r6, r0
 800cf58:	460d      	mov	r5, r1
 800cf5a:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800cf5c:	2900      	cmp	r1, #0
 800cf5e:	d068      	beq.n	800d032 <LoRaMacCryptoHandleJoinAccept+0xe6>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800cf60:	f10d 0814 	add.w	r8, sp, #20
 800cf64:	2221      	movs	r2, #33	@ 0x21
 800cf66:	2100      	movs	r1, #0
 800cf68:	4640      	mov	r0, r8
 800cf6a:	f005 fded 	bl	8012b48 <memset>
    uint8_t versionMinor         = 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	f88d 3013 	strb.w	r3, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800cf74:	4b34      	ldr	r3, [pc, #208]	@ (800d048 <LoRaMacCryptoHandleJoinAccept+0xfc>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	889f      	ldrh	r7, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800cf7a:	f10d 0313 	add.w	r3, sp, #19
 800cf7e:	9302      	str	r3, [sp, #8]
 800cf80:	f8cd 8004 	str.w	r8, [sp, #4]
 800cf84:	7923      	ldrb	r3, [r4, #4]
 800cf86:	9300      	str	r3, [sp, #0]
 800cf88:	6823      	ldr	r3, [r4, #0]
 800cf8a:	463a      	mov	r2, r7
 800cf8c:	4629      	mov	r1, r5
 800cf8e:	4630      	mov	r0, r6
 800cf90:	f003 f808 	bl	800ffa4 <SecureElementProcessJoinAccept>
 800cf94:	2800      	cmp	r0, #0
 800cf96:	d14e      	bne.n	800d036 <LoRaMacCryptoHandleJoinAccept+0xea>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800cf98:	7922      	ldrb	r2, [r4, #4]
 800cf9a:	4641      	mov	r1, r8
 800cf9c:	6820      	ldr	r0, [r4, #0]
 800cf9e:	f003 f988 	bl	80102b2 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	f000 f852 	bl	800d04c <LoRaMacParserJoinAccept>
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	d148      	bne.n	800d03e <LoRaMacCryptoHandleJoinAccept+0xf2>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800cfac:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800cfae:	79e3      	ldrb	r3, [r4, #7]
 800cfb0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800cfb4:	7a23      	ldrb	r3, [r4, #8]
 800cfb6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 800cfba:	4628      	mov	r0, r5
 800cfbc:	f7ff fd4a 	bl	800ca54 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d03e      	beq.n	800d042 <LoRaMacCryptoHandleJoinAccept+0xf6>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800cfc4:	4b20      	ldr	r3, [pc, #128]	@ (800d048 <LoRaMacCryptoHandleJoinAccept+0xfc>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800cfca:	210b      	movs	r1, #11
 800cfcc:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800cfd0:	f7ff ff72 	bl	800ceb8 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cfd4:	bb80      	cbnz	r0, 800d038 <LoRaMacCryptoHandleJoinAccept+0xec>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800cfd6:	210c      	movs	r1, #12
 800cfd8:	2000      	movs	r0, #0
 800cfda:	f7ff ff6d 	bl	800ceb8 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cfde:	bb58      	cbnz	r0, 800d038 <LoRaMacCryptoHandleJoinAccept+0xec>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800cfe0:	210a      	movs	r1, #10
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	f7ff ff68 	bl	800ceb8 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cfe8:	bb30      	cbnz	r0, 800d038 <LoRaMacCryptoHandleJoinAccept+0xec>
        netID = ( uint32_t )macMsg->NetID[0];
 800cfea:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800cfec:	7aa2      	ldrb	r2, [r4, #10]
 800cfee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800cff2:	7ae2      	ldrb	r2, [r4, #11]
 800cff4:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800cff8:	463b      	mov	r3, r7
 800cffa:	4622      	mov	r2, r4
 800cffc:	4629      	mov	r1, r5
 800cffe:	2009      	movs	r0, #9
 800d000:	f7ff fd5e 	bl	800cac0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d004:	b9c0      	cbnz	r0, 800d038 <LoRaMacCryptoHandleJoinAccept+0xec>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800d006:	463b      	mov	r3, r7
 800d008:	4622      	mov	r2, r4
 800d00a:	4629      	mov	r1, r5
 800d00c:	2008      	movs	r0, #8
 800d00e:	f7ff fd57 	bl	800cac0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d012:	b988      	cbnz	r0, 800d038 <LoRaMacCryptoHandleJoinAccept+0xec>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800d014:	4b0c      	ldr	r3, [pc, #48]	@ (800d048 <LoRaMacCryptoHandleJoinAccept+0xfc>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800d01c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800d01e:	2200      	movs	r2, #0
 800d020:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d022:	f04f 32ff 	mov.w	r2, #4294967295
 800d026:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d028:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d02a:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800d02c:	e004      	b.n	800d038 <LoRaMacCryptoHandleJoinAccept+0xec>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d02e:	2009      	movs	r0, #9
}
 800d030:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d032:	2009      	movs	r0, #9
 800d034:	e000      	b.n	800d038 <LoRaMacCryptoHandleJoinAccept+0xec>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d036:	200e      	movs	r0, #14
}
 800d038:	b00e      	add	sp, #56	@ 0x38
 800d03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d03e:	200f      	movs	r0, #15
 800d040:	e7fa      	b.n	800d038 <LoRaMacCryptoHandleJoinAccept+0xec>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800d042:	2003      	movs	r0, #3
 800d044:	e7f8      	b.n	800d038 <LoRaMacCryptoHandleJoinAccept+0xec>
 800d046:	bf00      	nop
 800d048:	2000163c 	.word	0x2000163c

0800d04c <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d04c:	2800      	cmp	r0, #0
 800d04e:	d049      	beq.n	800d0e4 <LoRaMacParserJoinAccept+0x98>
{
 800d050:	b510      	push	{r4, lr}
 800d052:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d054:	6801      	ldr	r1, [r0, #0]
 800d056:	2900      	cmp	r1, #0
 800d058:	d046      	beq.n	800d0e8 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d05a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d05e:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800d060:	2203      	movs	r2, #3
 800d062:	3006      	adds	r0, #6
 800d064:	f003 f925 	bl	80102b2 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800d068:	4620      	mov	r0, r4
 800d06a:	f850 1b09 	ldr.w	r1, [r0], #9
 800d06e:	2203      	movs	r2, #3
 800d070:	3104      	adds	r1, #4
 800d072:	f003 f91e 	bl	80102b2 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d076:	6821      	ldr	r1, [r4, #0]
 800d078:	79cb      	ldrb	r3, [r1, #7]
 800d07a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d07c:	7a0a      	ldrb	r2, [r1, #8]
 800d07e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d082:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d084:	7a4a      	ldrb	r2, [r1, #9]
 800d086:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d08a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d08c:	7a8a      	ldrb	r2, [r1, #10]
 800d08e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d092:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800d094:	7acb      	ldrb	r3, [r1, #11]
 800d096:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800d098:	7b0b      	ldrb	r3, [r1, #12]
 800d09a:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800d09c:	7923      	ldrb	r3, [r4, #4]
 800d09e:	2b21      	cmp	r3, #33	@ 0x21
 800d0a0:	d018      	beq.n	800d0d4 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800d0a2:	2b11      	cmp	r3, #17
 800d0a4:	dc22      	bgt.n	800d0ec <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800d0a6:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d0a8:	6821      	ldr	r1, [r4, #0]
 800d0aa:	f102 0c01 	add.w	ip, r2, #1
 800d0ae:	5c8b      	ldrb	r3, [r1, r2]
 800d0b0:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d0b2:	1c90      	adds	r0, r2, #2
 800d0b4:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800d0b8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800d0bc:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d0be:	3203      	adds	r2, #3
 800d0c0:	5c08      	ldrb	r0, [r1, r0]
 800d0c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d0c6:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d0c8:	5c8a      	ldrb	r2, [r1, r2]
 800d0ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d0ce:	6263      	str	r3, [r4, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 800d0d0:	2000      	movs	r0, #0
}
 800d0d2:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800d0d4:	2210      	movs	r2, #16
 800d0d6:	310d      	adds	r1, #13
 800d0d8:	f104 0012 	add.w	r0, r4, #18
 800d0dc:	f003 f8e9 	bl	80102b2 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800d0e0:	221d      	movs	r2, #29
 800d0e2:	e7e1      	b.n	800d0a8 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800d0e4:	2002      	movs	r0, #2
}
 800d0e6:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800d0e8:	2002      	movs	r0, #2
 800d0ea:	e7f2      	b.n	800d0d2 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800d0ec:	2001      	movs	r0, #1
 800d0ee:	e7f0      	b.n	800d0d2 <LoRaMacParserJoinAccept+0x86>

0800d0f0 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d058      	beq.n	800d1a6 <LoRaMacParserData+0xb6>
{
 800d0f4:	b510      	push	{r4, lr}
 800d0f6:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d0f8:	6801      	ldr	r1, [r0, #0]
 800d0fa:	2900      	cmp	r1, #0
 800d0fc:	d055      	beq.n	800d1aa <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d0fe:	780b      	ldrb	r3, [r1, #0]
 800d100:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800d102:	784b      	ldrb	r3, [r1, #1]
 800d104:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d106:	788a      	ldrb	r2, [r1, #2]
 800d108:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d10c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d10e:	78ca      	ldrb	r2, [r1, #3]
 800d110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d114:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d116:	790a      	ldrb	r2, [r1, #4]
 800d118:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d11c:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800d11e:	794b      	ldrb	r3, [r1, #5]
 800d120:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800d122:	798b      	ldrb	r3, [r1, #6]
 800d124:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800d126:	79ca      	ldrb	r2, [r1, #7]
 800d128:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d12c:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800d12e:	7b02      	ldrb	r2, [r0, #12]
 800d130:	f002 020f 	and.w	r2, r2, #15
 800d134:	3108      	adds	r1, #8
 800d136:	3010      	adds	r0, #16
 800d138:	f003 f8bb 	bl	80102b2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d13c:	7b23      	ldrb	r3, [r4, #12]
 800d13e:	f003 030f 	and.w	r3, r3, #15
 800d142:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800d146:	2200      	movs	r2, #0
 800d148:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800d14c:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800d150:	7922      	ldrb	r2, [r4, #4]
 800d152:	1a11      	subs	r1, r2, r0
 800d154:	2904      	cmp	r1, #4
 800d156:	dc16      	bgt.n	800d186 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800d158:	6822      	ldr	r2, [r4, #0]
 800d15a:	7923      	ldrb	r3, [r4, #4]
 800d15c:	441a      	add	r2, r3
 800d15e:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800d162:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800d164:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800d168:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d16c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800d16e:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800d172:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d176:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800d178:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800d17c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d180:	62e3      	str	r3, [r4, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800d182:	2000      	movs	r0, #0
}
 800d184:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800d186:	6821      	ldr	r1, [r4, #0]
 800d188:	3309      	adds	r3, #9
 800d18a:	5c08      	ldrb	r0, [r1, r0]
 800d18c:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800d190:	1ad2      	subs	r2, r2, r3
 800d192:	b2d2      	uxtb	r2, r2
 800d194:	3a04      	subs	r2, #4
 800d196:	b2d2      	uxtb	r2, r2
 800d198:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800d19c:	4419      	add	r1, r3
 800d19e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d1a0:	f003 f887 	bl	80102b2 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800d1a4:	e7d8      	b.n	800d158 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800d1a6:	2002      	movs	r0, #2
}
 800d1a8:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800d1aa:	2002      	movs	r0, #2
 800d1ac:	e7ea      	b.n	800d184 <LoRaMacParserData+0x94>

0800d1ae <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d1ae:	b370      	cbz	r0, 800d20e <LoRaMacSerializerJoinRequest+0x60>
{
 800d1b0:	b510      	push	{r4, lr}
 800d1b2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d1b4:	6803      	ldr	r3, [r0, #0]
 800d1b6:	b363      	cbz	r3, 800d212 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800d1b8:	7902      	ldrb	r2, [r0, #4]
 800d1ba:	2a16      	cmp	r2, #22
 800d1bc:	d92b      	bls.n	800d216 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800d1be:	7942      	ldrb	r2, [r0, #5]
 800d1c0:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800d1c2:	4601      	mov	r1, r0
 800d1c4:	f851 0b06 	ldr.w	r0, [r1], #6
 800d1c8:	2208      	movs	r2, #8
 800d1ca:	3001      	adds	r0, #1
 800d1cc:	f003 f87c 	bl	80102c8 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800d1d0:	4621      	mov	r1, r4
 800d1d2:	f851 0b0e 	ldr.w	r0, [r1], #14
 800d1d6:	2208      	movs	r2, #8
 800d1d8:	3009      	adds	r0, #9
 800d1da:	f003 f875 	bl	80102c8 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800d1de:	8ae2      	ldrh	r2, [r4, #22]
 800d1e0:	6823      	ldr	r3, [r4, #0]
 800d1e2:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800d1e4:	8ae3      	ldrh	r3, [r4, #22]
 800d1e6:	6822      	ldr	r2, [r4, #0]
 800d1e8:	0a1b      	lsrs	r3, r3, #8
 800d1ea:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800d1ec:	69a2      	ldr	r2, [r4, #24]
 800d1ee:	6823      	ldr	r3, [r4, #0]
 800d1f0:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800d1f2:	69a3      	ldr	r3, [r4, #24]
 800d1f4:	0a1b      	lsrs	r3, r3, #8
 800d1f6:	6822      	ldr	r2, [r4, #0]
 800d1f8:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800d1fa:	8b62      	ldrh	r2, [r4, #26]
 800d1fc:	6823      	ldr	r3, [r4, #0]
 800d1fe:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800d200:	7ee2      	ldrb	r2, [r4, #27]
 800d202:	6823      	ldr	r3, [r4, #0]
 800d204:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800d206:	2317      	movs	r3, #23
 800d208:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800d20a:	2000      	movs	r0, #0
}
 800d20c:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d20e:	2001      	movs	r0, #1
}
 800d210:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d212:	2001      	movs	r0, #1
 800d214:	e7fa      	b.n	800d20c <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800d216:	2002      	movs	r0, #2
 800d218:	e7f8      	b.n	800d20c <LoRaMacSerializerJoinRequest+0x5e>

0800d21a <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d21a:	2800      	cmp	r0, #0
 800d21c:	d066      	beq.n	800d2ec <LoRaMacSerializerData+0xd2>
{
 800d21e:	b538      	push	{r3, r4, r5, lr}
 800d220:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d222:	6801      	ldr	r1, [r0, #0]
 800d224:	2900      	cmp	r1, #0
 800d226:	d063      	beq.n	800d2f0 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d228:	7b02      	ldrb	r2, [r0, #12]
 800d22a:	f002 020f 	and.w	r2, r2, #15
 800d22e:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800d232:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d236:	b10b      	cbz	r3, 800d23c <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800d238:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800d23c:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800d23e:	3304      	adds	r3, #4
 800d240:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800d242:	7922      	ldrb	r2, [r4, #4]
 800d244:	429a      	cmp	r2, r3
 800d246:	d355      	bcc.n	800d2f4 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800d248:	7963      	ldrb	r3, [r4, #5]
 800d24a:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800d24c:	68a2      	ldr	r2, [r4, #8]
 800d24e:	6823      	ldr	r3, [r4, #0]
 800d250:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800d252:	68a3      	ldr	r3, [r4, #8]
 800d254:	0a1b      	lsrs	r3, r3, #8
 800d256:	6822      	ldr	r2, [r4, #0]
 800d258:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800d25a:	8962      	ldrh	r2, [r4, #10]
 800d25c:	6823      	ldr	r3, [r4, #0]
 800d25e:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800d260:	7ae2      	ldrb	r2, [r4, #11]
 800d262:	6823      	ldr	r3, [r4, #0]
 800d264:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800d266:	6823      	ldr	r3, [r4, #0]
 800d268:	7b22      	ldrb	r2, [r4, #12]
 800d26a:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800d26c:	89e2      	ldrh	r2, [r4, #14]
 800d26e:	6823      	ldr	r3, [r4, #0]
 800d270:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800d272:	89e3      	ldrh	r3, [r4, #14]
 800d274:	6822      	ldr	r2, [r4, #0]
 800d276:	0a1b      	lsrs	r3, r3, #8
 800d278:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800d27a:	4621      	mov	r1, r4
 800d27c:	f851 0b10 	ldr.w	r0, [r1], #16
 800d280:	7b22      	ldrb	r2, [r4, #12]
 800d282:	f002 020f 	and.w	r2, r2, #15
 800d286:	3008      	adds	r0, #8
 800d288:	f003 f813 	bl	80102b2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d28c:	7b23      	ldrb	r3, [r4, #12]
 800d28e:	f003 030f 	and.w	r3, r3, #15
 800d292:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800d296:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800d29a:	b12a      	cbz	r2, 800d2a8 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800d29c:	6822      	ldr	r2, [r4, #0]
 800d29e:	f894 1020 	ldrb.w	r1, [r4, #32]
 800d2a2:	5551      	strb	r1, [r2, r5]
 800d2a4:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800d2a8:	6820      	ldr	r0, [r4, #0]
 800d2aa:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800d2ae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d2b0:	4428      	add	r0, r5
 800d2b2:	f002 fffe 	bl	80102b2 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800d2b6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d2ba:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800d2bc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800d2be:	6821      	ldr	r1, [r4, #0]
 800d2c0:	1c5a      	adds	r2, r3, #1
 800d2c2:	b292      	uxth	r2, r2
 800d2c4:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800d2c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d2c8:	0a08      	lsrs	r0, r1, #8
 800d2ca:	6825      	ldr	r5, [r4, #0]
 800d2cc:	1c99      	adds	r1, r3, #2
 800d2ce:	b289      	uxth	r1, r1
 800d2d0:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800d2d2:	8de5      	ldrh	r5, [r4, #46]	@ 0x2e
 800d2d4:	6820      	ldr	r0, [r4, #0]
 800d2d6:	1cda      	adds	r2, r3, #3
 800d2d8:	b292      	uxth	r2, r2
 800d2da:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800d2dc:	f894 002f 	ldrb.w	r0, [r4, #47]	@ 0x2f
 800d2e0:	6821      	ldr	r1, [r4, #0]
 800d2e2:	3304      	adds	r3, #4
 800d2e4:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800d2e6:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800d2e8:	2000      	movs	r0, #0
}
 800d2ea:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d2ec:	2001      	movs	r0, #1
}
 800d2ee:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d2f0:	2001      	movs	r0, #1
 800d2f2:	e7fa      	b.n	800d2ea <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800d2f4:	2002      	movs	r0, #2
 800d2f6:	e7f8      	b.n	800d2ea <LoRaMacSerializerData+0xd0>

0800d2f8 <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d2f8:	4770      	bx	lr

0800d2fa <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800d2fa:	2804      	cmp	r0, #4
 800d2fc:	d005      	beq.n	800d30a <RegionIsActive+0x10>
 800d2fe:	2808      	cmp	r0, #8
 800d300:	d001      	beq.n	800d306 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800d302:	2000      	movs	r0, #0
        }
    }
}
 800d304:	4770      	bx	lr
    switch( region )
 800d306:	2001      	movs	r0, #1
 800d308:	4770      	bx	lr
 800d30a:	2001      	movs	r0, #1
 800d30c:	4770      	bx	lr

0800d30e <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800d30e:	b500      	push	{lr}
 800d310:	b083      	sub	sp, #12
 800d312:	4603      	mov	r3, r0
 800d314:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800d316:	2200      	movs	r2, #0
 800d318:	9200      	str	r2, [sp, #0]
    switch( region )
 800d31a:	2b04      	cmp	r3, #4
 800d31c:	d004      	beq.n	800d328 <RegionGetPhyParam+0x1a>
 800d31e:	2b08      	cmp	r3, #8
 800d320:	d009      	beq.n	800d336 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800d322:	9b00      	ldr	r3, [sp, #0]
 800d324:	9301      	str	r3, [sp, #4]
 800d326:	e002      	b.n	800d32e <RegionGetPhyParam+0x20>
        EU433_GET_PHY_PARAM( );
 800d328:	f000 fd2c 	bl	800dd84 <RegionEU433GetPhyParam>
 800d32c:	9001      	str	r0, [sp, #4]
        }
    }
}
 800d32e:	9801      	ldr	r0, [sp, #4]
 800d330:	b003      	add	sp, #12
 800d332:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800d336:	f001 faeb 	bl	800e910 <RegionUS915GetPhyParam>
 800d33a:	9001      	str	r0, [sp, #4]
 800d33c:	e7f7      	b.n	800d32e <RegionGetPhyParam+0x20>

0800d33e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800d33e:	b508      	push	{r3, lr}
 800d340:	4603      	mov	r3, r0
 800d342:	4608      	mov	r0, r1
    switch( region )
 800d344:	2b04      	cmp	r3, #4
 800d346:	d004      	beq.n	800d352 <RegionSetBandTxDone+0x14>
 800d348:	2b08      	cmp	r3, #8
 800d34a:	d104      	bne.n	800d356 <RegionSetBandTxDone+0x18>
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
 800d34c:	f001 fbb6 	bl	800eabc <RegionUS915SetBandTxDone>
 800d350:	e001      	b.n	800d356 <RegionSetBandTxDone+0x18>
        EU433_SET_BAND_TX_DONE( );
 800d352:	f000 fdd1 	bl	800def8 <RegionEU433SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800d356:	bd08      	pop	{r3, pc}

0800d358 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800d358:	b508      	push	{r3, lr}
 800d35a:	4603      	mov	r3, r0
 800d35c:	4608      	mov	r0, r1
    switch( region )
 800d35e:	2b04      	cmp	r3, #4
 800d360:	d004      	beq.n	800d36c <RegionInitDefaults+0x14>
 800d362:	2b08      	cmp	r3, #8
 800d364:	d104      	bne.n	800d370 <RegionInitDefaults+0x18>
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
 800d366:	f001 fbc7 	bl	800eaf8 <RegionUS915InitDefaults>
        default:
        {
            break;
        }
    }
}
 800d36a:	e001      	b.n	800d370 <RegionInitDefaults+0x18>
        EU433_INIT_DEFAULTS( );
 800d36c:	f000 fde2 	bl	800df34 <RegionEU433InitDefaults>
}
 800d370:	bd08      	pop	{r3, pc}

0800d372 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d372:	b508      	push	{r3, lr}
 800d374:	4603      	mov	r3, r0
 800d376:	4608      	mov	r0, r1
 800d378:	4611      	mov	r1, r2
    switch( region )
 800d37a:	2b04      	cmp	r3, #4
 800d37c:	d003      	beq.n	800d386 <RegionVerify+0x14>
 800d37e:	2b08      	cmp	r3, #8
 800d380:	d004      	beq.n	800d38c <RegionVerify+0x1a>
 800d382:	2000      	movs	r0, #0
 800d384:	e001      	b.n	800d38a <RegionVerify+0x18>
    {
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
 800d386:	f000 fe37 	bl	800dff8 <RegionEU433Verify>
        default:
        {
            return false;
        }
    }
}
 800d38a:	bd08      	pop	{r3, pc}
        US915_VERIFY( );
 800d38c:	f001 fc58 	bl	800ec40 <RegionUS915Verify>
 800d390:	e7fb      	b.n	800d38a <RegionVerify+0x18>

0800d392 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800d392:	b508      	push	{r3, lr}
 800d394:	4603      	mov	r3, r0
 800d396:	4608      	mov	r0, r1
    switch( region )
 800d398:	2b04      	cmp	r3, #4
 800d39a:	d004      	beq.n	800d3a6 <RegionApplyCFList+0x14>
 800d39c:	2b08      	cmp	r3, #8
 800d39e:	d104      	bne.n	800d3aa <RegionApplyCFList+0x18>
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
 800d3a0:	f001 fc88 	bl	800ecb4 <RegionUS915ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800d3a4:	e001      	b.n	800d3aa <RegionApplyCFList+0x18>
        EU433_APPLY_CF_LIST( );
 800d3a6:	f001 f9d5 	bl	800e754 <RegionEU433ApplyCFList>
}
 800d3aa:	bd08      	pop	{r3, pc}

0800d3ac <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800d3ac:	b508      	push	{r3, lr}
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	4608      	mov	r0, r1
    switch( region )
 800d3b2:	2b04      	cmp	r3, #4
 800d3b4:	d003      	beq.n	800d3be <RegionChanMaskSet+0x12>
 800d3b6:	2b08      	cmp	r3, #8
 800d3b8:	d004      	beq.n	800d3c4 <RegionChanMaskSet+0x18>
 800d3ba:	2000      	movs	r0, #0
 800d3bc:	e001      	b.n	800d3c2 <RegionChanMaskSet+0x16>
    {
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
 800d3be:	f000 fe55 	bl	800e06c <RegionEU433ChanMaskSet>
        default:
        {
            return false;
        }
    }
}
 800d3c2:	bd08      	pop	{r3, pc}
        US915_CHAN_MASK_SET( );
 800d3c4:	f001 fcb4 	bl	800ed30 <RegionUS915ChanMaskSet>
 800d3c8:	e7fb      	b.n	800d3c2 <RegionChanMaskSet+0x16>

0800d3ca <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d3ca:	b508      	push	{r3, lr}
 800d3cc:	4684      	mov	ip, r0
 800d3ce:	4608      	mov	r0, r1
 800d3d0:	4611      	mov	r1, r2
 800d3d2:	461a      	mov	r2, r3
    switch( region )
 800d3d4:	f1bc 0f04 	cmp.w	ip, #4
 800d3d8:	d006      	beq.n	800d3e8 <RegionComputeRxWindowParameters+0x1e>
 800d3da:	f1bc 0f08 	cmp.w	ip, #8
 800d3de:	d106      	bne.n	800d3ee <RegionComputeRxWindowParameters+0x24>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800d3e0:	9b02      	ldr	r3, [sp, #8]
 800d3e2:	f001 fce7 	bl	800edb4 <RegionUS915ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800d3e6:	e002      	b.n	800d3ee <RegionComputeRxWindowParameters+0x24>
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
 800d3e8:	9b02      	ldr	r3, [sp, #8]
 800d3ea:	f000 fe5d 	bl	800e0a8 <RegionEU433ComputeRxWindowParameters>
}
 800d3ee:	bd08      	pop	{r3, pc}

0800d3f0 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d3f0:	b508      	push	{r3, lr}
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	4608      	mov	r0, r1
 800d3f6:	4611      	mov	r1, r2
    switch( region )
 800d3f8:	2b04      	cmp	r3, #4
 800d3fa:	d003      	beq.n	800d404 <RegionRxConfig+0x14>
 800d3fc:	2b08      	cmp	r3, #8
 800d3fe:	d004      	beq.n	800d40a <RegionRxConfig+0x1a>
 800d400:	2000      	movs	r0, #0
 800d402:	e001      	b.n	800d408 <RegionRxConfig+0x18>
    {
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
 800d404:	f000 fe86 	bl	800e114 <RegionEU433RxConfig>
        default:
        {
            return false;
        }
    }
}
 800d408:	bd08      	pop	{r3, pc}
        US915_RX_CONFIG( );
 800d40a:	f001 fd01 	bl	800ee10 <RegionUS915RxConfig>
 800d40e:	e7fb      	b.n	800d408 <RegionRxConfig+0x18>

0800d410 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d410:	b508      	push	{r3, lr}
 800d412:	4684      	mov	ip, r0
 800d414:	4608      	mov	r0, r1
 800d416:	4611      	mov	r1, r2
 800d418:	461a      	mov	r2, r3
    switch( region )
 800d41a:	f1bc 0f04 	cmp.w	ip, #4
 800d41e:	d004      	beq.n	800d42a <RegionTxConfig+0x1a>
 800d420:	f1bc 0f08 	cmp.w	ip, #8
 800d424:	d004      	beq.n	800d430 <RegionTxConfig+0x20>
 800d426:	2000      	movs	r0, #0
 800d428:	e001      	b.n	800d42e <RegionTxConfig+0x1e>
    {
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
 800d42a:	f000 fef7 	bl	800e21c <RegionEU433TxConfig>
        default:
        {
            return false;
        }
    }
}
 800d42e:	bd08      	pop	{r3, pc}
        US915_TX_CONFIG( );
 800d430:	f001 fd48 	bl	800eec4 <RegionUS915TxConfig>
 800d434:	e7fb      	b.n	800d42e <RegionTxConfig+0x1e>

0800d436 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d436:	b500      	push	{lr}
 800d438:	b083      	sub	sp, #12
 800d43a:	4684      	mov	ip, r0
 800d43c:	4608      	mov	r0, r1
 800d43e:	4611      	mov	r1, r2
 800d440:	461a      	mov	r2, r3
    switch( region )
 800d442:	f1bc 0f04 	cmp.w	ip, #4
 800d446:	d004      	beq.n	800d452 <RegionLinkAdrReq+0x1c>
 800d448:	f1bc 0f08 	cmp.w	ip, #8
 800d44c:	d009      	beq.n	800d462 <RegionLinkAdrReq+0x2c>
 800d44e:	2000      	movs	r0, #0
 800d450:	e004      	b.n	800d45c <RegionLinkAdrReq+0x26>
    {
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
 800d452:	9b05      	ldr	r3, [sp, #20]
 800d454:	9300      	str	r3, [sp, #0]
 800d456:	9b04      	ldr	r3, [sp, #16]
 800d458:	f000 ff78 	bl	800e34c <RegionEU433LinkAdrReq>
        default:
        {
            return 0;
        }
    }
}
 800d45c:	b003      	add	sp, #12
 800d45e:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_LINK_ADR_REQ( );
 800d462:	9b05      	ldr	r3, [sp, #20]
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	9b04      	ldr	r3, [sp, #16]
 800d468:	f001 fda6 	bl	800efb8 <RegionUS915LinkAdrReq>
 800d46c:	e7f6      	b.n	800d45c <RegionLinkAdrReq+0x26>

0800d46e <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d46e:	b508      	push	{r3, lr}
 800d470:	4603      	mov	r3, r0
 800d472:	4608      	mov	r0, r1
    switch( region )
 800d474:	2b04      	cmp	r3, #4
 800d476:	d003      	beq.n	800d480 <RegionRxParamSetupReq+0x12>
 800d478:	2b08      	cmp	r3, #8
 800d47a:	d004      	beq.n	800d486 <RegionRxParamSetupReq+0x18>
 800d47c:	2000      	movs	r0, #0
 800d47e:	e001      	b.n	800d484 <RegionRxParamSetupReq+0x16>
    {
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
 800d480:	f001 f82a 	bl	800e4d8 <RegionEU433RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800d484:	bd08      	pop	{r3, pc}
        US915_RX_PARAM_SETUP_REQ( );
 800d486:	f001 fedb 	bl	800f240 <RegionUS915RxParamSetupReq>
 800d48a:	e7fb      	b.n	800d484 <RegionRxParamSetupReq+0x16>

0800d48c <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800d48c:	b508      	push	{r3, lr}
 800d48e:	4603      	mov	r3, r0
 800d490:	4608      	mov	r0, r1
    switch( region )
 800d492:	2b04      	cmp	r3, #4
 800d494:	d003      	beq.n	800d49e <RegionNewChannelReq+0x12>
 800d496:	2b08      	cmp	r3, #8
 800d498:	d004      	beq.n	800d4a4 <RegionNewChannelReq+0x18>
 800d49a:	2000      	movs	r0, #0
 800d49c:	e001      	b.n	800d4a2 <RegionNewChannelReq+0x16>
    {
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
 800d49e:	f001 f99a 	bl	800e7d6 <RegionEU433NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800d4a2:	bd08      	pop	{r3, pc}
        US915_NEW_CHANNEL_REQ( );
 800d4a4:	f001 fef7 	bl	800f296 <RegionUS915NewChannelReq>
 800d4a8:	e7fb      	b.n	800d4a2 <RegionNewChannelReq+0x16>

0800d4aa <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800d4aa:	b508      	push	{r3, lr}
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	4608      	mov	r0, r1
    switch( region )
 800d4b0:	2b04      	cmp	r3, #4
 800d4b2:	d003      	beq.n	800d4bc <RegionTxParamSetupReq+0x12>
 800d4b4:	2b08      	cmp	r3, #8
 800d4b6:	d004      	beq.n	800d4c2 <RegionTxParamSetupReq+0x18>
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	e001      	b.n	800d4c0 <RegionTxParamSetupReq+0x16>
    {
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
 800d4bc:	f001 f829 	bl	800e512 <RegionEU433TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800d4c0:	bd08      	pop	{r3, pc}
        US915_TX_PARAM_SETUP_REQ( );
 800d4c2:	f001 feeb 	bl	800f29c <RegionUS915TxParamSetupReq>
 800d4c6:	e7fb      	b.n	800d4c0 <RegionTxParamSetupReq+0x16>

0800d4c8 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800d4c8:	b508      	push	{r3, lr}
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	4608      	mov	r0, r1
    switch( region )
 800d4ce:	2b04      	cmp	r3, #4
 800d4d0:	d003      	beq.n	800d4da <RegionDlChannelReq+0x12>
 800d4d2:	2b08      	cmp	r3, #8
 800d4d4:	d004      	beq.n	800d4e0 <RegionDlChannelReq+0x18>
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	e001      	b.n	800d4de <RegionDlChannelReq+0x16>
    {
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
 800d4da:	f001 f81d 	bl	800e518 <RegionEU433DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800d4de:	bd08      	pop	{r3, pc}
        US915_DL_CHANNEL_REQ( );
 800d4e0:	f001 fedf 	bl	800f2a2 <RegionUS915DlChannelReq>
 800d4e4:	e7fb      	b.n	800d4de <RegionDlChannelReq+0x16>

0800d4e6 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800d4e6:	b508      	push	{r3, lr}
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	4608      	mov	r0, r1
 800d4ec:	4611      	mov	r1, r2
    switch( region )
 800d4ee:	2b04      	cmp	r3, #4
 800d4f0:	d003      	beq.n	800d4fa <RegionAlternateDr+0x14>
 800d4f2:	2b08      	cmp	r3, #8
 800d4f4:	d004      	beq.n	800d500 <RegionAlternateDr+0x1a>
 800d4f6:	2000      	movs	r0, #0
 800d4f8:	e001      	b.n	800d4fe <RegionAlternateDr+0x18>
    {
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
 800d4fa:	f001 f833 	bl	800e564 <RegionEU433AlternateDr>
        default:
        {
            return 0;
        }
    }
}
 800d4fe:	bd08      	pop	{r3, pc}
        US915_ALTERNATE_DR( );
 800d500:	f001 fed2 	bl	800f2a8 <RegionUS915AlternateDr>
 800d504:	e7fb      	b.n	800d4fe <RegionAlternateDr+0x18>

0800d506 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d506:	b508      	push	{r3, lr}
 800d508:	4684      	mov	ip, r0
 800d50a:	4608      	mov	r0, r1
 800d50c:	4611      	mov	r1, r2
 800d50e:	461a      	mov	r2, r3
    switch( region )
 800d510:	f1bc 0f04 	cmp.w	ip, #4
 800d514:	d004      	beq.n	800d520 <RegionNextChannel+0x1a>
 800d516:	f1bc 0f08 	cmp.w	ip, #8
 800d51a:	d005      	beq.n	800d528 <RegionNextChannel+0x22>
 800d51c:	2009      	movs	r0, #9
 800d51e:	e002      	b.n	800d526 <RegionNextChannel+0x20>
    {
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
 800d520:	9b02      	ldr	r3, [sp, #8]
 800d522:	f001 f821 	bl	800e568 <RegionEU433NextChannel>
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800d526:	bd08      	pop	{r3, pc}
        US915_NEXT_CHANNEL( );
 800d528:	9b02      	ldr	r3, [sp, #8]
 800d52a:	f001 fedf 	bl	800f2ec <RegionUS915NextChannel>
 800d52e:	e7fa      	b.n	800d526 <RegionNextChannel+0x20>

0800d530 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800d530:	b508      	push	{r3, lr}
 800d532:	4684      	mov	ip, r0
 800d534:	4608      	mov	r0, r1
 800d536:	4611      	mov	r1, r2
 800d538:	461a      	mov	r2, r3
    switch( region )
 800d53a:	f1bc 0f04 	cmp.w	ip, #4
 800d53e:	d004      	beq.n	800d54a <RegionApplyDrOffset+0x1a>
 800d540:	f1bc 0f08 	cmp.w	ip, #8
 800d544:	d004      	beq.n	800d550 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800d546:	b2c8      	uxtb	r0, r1
 800d548:	e001      	b.n	800d54e <RegionApplyDrOffset+0x1e>
        EU433_APPLY_DR_OFFSET( );
 800d54a:	f001 f96f 	bl	800e82c <RegionEU433ApplyDrOffset>
        }
    }
}
 800d54e:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800d550:	f001 ff78 	bl	800f444 <RegionUS915ApplyDrOffset>
 800d554:	e7fb      	b.n	800d54e <RegionApplyDrOffset+0x1e>
	...

0800d558 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800d558:	4800      	ldr	r0, [pc, #0]	@ (800d55c <RegionGetVersion+0x4>)
 800d55a:	4770      	bx	lr
 800d55c:	02010003 	.word	0x02010003

0800d560 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800d560:	468c      	mov	ip, r1
 800d562:	b1a9      	cbz	r1, 800d590 <FindAvailable125kHzChannels+0x30>
 800d564:	b1b2      	cbz	r2, 800d594 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800d566:	2300      	movs	r3, #0
 800d568:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800d56a:	e001      	b.n	800d570 <FindAvailable125kHzChannels+0x10>
 800d56c:	3301      	adds	r3, #1
 800d56e:	b2db      	uxtb	r3, r3
 800d570:	2b07      	cmp	r3, #7
 800d572:	d80b      	bhi.n	800d58c <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800d574:	fa40 f103 	asr.w	r1, r0, r3
 800d578:	f011 0f01 	tst.w	r1, #1
 800d57c:	d0f6      	beq.n	800d56c <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800d57e:	7811      	ldrb	r1, [r2, #0]
 800d580:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800d584:	7811      	ldrb	r1, [r2, #0]
 800d586:	3101      	adds	r1, #1
 800d588:	7011      	strb	r1, [r2, #0]
 800d58a:	e7ef      	b.n	800d56c <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800d58c:	2000      	movs	r0, #0
 800d58e:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d590:	2003      	movs	r0, #3
 800d592:	4770      	bx	lr
 800d594:	2003      	movs	r0, #3
}
 800d596:	4770      	bx	lr

0800d598 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800d598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d59a:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800d59c:	2300      	movs	r3, #0
 800d59e:	9302      	str	r3, [sp, #8]
 800d5a0:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800d5a2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	d03e      	beq.n	800d628 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800d5aa:	460d      	mov	r5, r1
 800d5ac:	4617      	mov	r7, r2
 800d5ae:	4606      	mov	r6, r0
 800d5b0:	2900      	cmp	r1, #0
 800d5b2:	d03b      	beq.n	800d62c <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800d5b4:	2a00      	cmp	r2, #0
 800d5b6:	d03b      	beq.n	800d630 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800d5b8:	780c      	ldrb	r4, [r1, #0]
 800d5ba:	e017      	b.n	800d5ec <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800d5bc:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800d5c0:	0a00      	lsrs	r0, r0, #8
 800d5c2:	e019      	b.n	800d5f8 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800d5c4:	3901      	subs	r1, #1
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	f002 fe66 	bl	8010298 <randr>
 800d5cc:	f100 0310 	add.w	r3, r0, #16
 800d5d0:	eb0d 0003 	add.w	r0, sp, r3
 800d5d4:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800d5d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d5dc:	703b      	strb	r3, [r7, #0]
 800d5de:	e016      	b.n	800d60e <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800d5e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d5e4:	b9cb      	cbnz	r3, 800d61a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800d5e6:	782a      	ldrb	r2, [r5, #0]
 800d5e8:	42a2      	cmp	r2, r4
 800d5ea:	d016      	beq.n	800d61a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800d5ec:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800d5ee:	f014 0f01 	tst.w	r4, #1
 800d5f2:	d1e3      	bne.n	800d5bc <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800d5f4:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800d5f8:	f10d 0207 	add.w	r2, sp, #7
 800d5fc:	a902      	add	r1, sp, #8
 800d5fe:	f7ff ffaf 	bl	800d560 <FindAvailable125kHzChannels>
 800d602:	2803      	cmp	r0, #3
 800d604:	d00b      	beq.n	800d61e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800d606:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d60a:	2900      	cmp	r1, #0
 800d60c:	d1da      	bne.n	800d5c4 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800d60e:	3401      	adds	r4, #1
 800d610:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800d612:	2c07      	cmp	r4, #7
 800d614:	d9e4      	bls.n	800d5e0 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800d616:	2400      	movs	r4, #0
 800d618:	e7e2      	b.n	800d5e0 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800d61a:	b913      	cbnz	r3, 800d622 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800d61c:	2003      	movs	r0, #3
}
 800d61e:	b005      	add	sp, #20
 800d620:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800d622:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800d624:	2000      	movs	r0, #0
 800d626:	e7fa      	b.n	800d61e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d628:	2003      	movs	r0, #3
 800d62a:	e7f8      	b.n	800d61e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800d62c:	2003      	movs	r0, #3
 800d62e:	e7f6      	b.n	800d61e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800d630:	2003      	movs	r0, #3
 800d632:	e7f4      	b.n	800d61e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800d634 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800d634:	fb02 1000 	mla	r0, r2, r0, r1
 800d638:	4770      	bx	lr

0800d63a <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800d63a:	b082      	sub	sp, #8
 800d63c:	f10d 0c08 	add.w	ip, sp, #8
 800d640:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800d644:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800d646:	b921      	cbnz	r1, 800d652 <GetDutyCycle+0x18>
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
#endif
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800d648:	2864      	cmp	r0, #100	@ 0x64
 800d64a:	bf38      	it	cc
 800d64c:	2064      	movcc	r0, #100	@ 0x64
    {
        dutyCycle = 1;
    }

    return dutyCycle;
}
 800d64e:	b002      	add	sp, #8
 800d650:	4770      	bx	lr
    if( dutyCycle == 0 )
 800d652:	2800      	cmp	r0, #0
 800d654:	d1fb      	bne.n	800d64e <GetDutyCycle+0x14>
        dutyCycle = 1;
 800d656:	2001      	movs	r0, #1
 800d658:	e7f9      	b.n	800d64e <GetDutyCycle+0x14>
	...

0800d65c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 800d65c:	b570      	push	{r4, r5, r6, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	4604      	mov	r4, r0
 800d662:	460d      	mov	r5, r1
 800d664:	46ec      	mov	ip, sp
 800d666:	e88c 000c 	stmia.w	ip, {r2, r3}
 800d66a:	f89d 6018 	ldrb.w	r6, [sp, #24]
    uint16_t dutyCycle = band->DCycle;
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800d66e:	e89c 000c 	ldmia.w	ip, {r2, r3}
 800d672:	f7ff ffe2 	bl	800d63a <GetDutyCycle>

    if( joined == false )
 800d676:	b94d      	cbnz	r5, 800d68c <SetMaxTimeCredits+0x30>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
		if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800d678:	9b00      	ldr	r3, [sp, #0]
 800d67a:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 800d67e:	d309      	bcc.n	800d694 <SetMaxTimeCredits+0x38>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800d680:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 800d684:	4293      	cmp	r3, r2
 800d686:	d809      	bhi.n	800d69c <SetMaxTimeCredits+0x40>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800d688:	4b06      	ldr	r3, [pc, #24]	@ (800d6a4 <SetMaxTimeCredits+0x48>)
 800d68a:	e004      	b.n	800d696 <SetMaxTimeCredits+0x3a>
#endif

    }
    else
    {
        if( dutyCycleEnabled == false )
 800d68c:	b946      	cbnz	r6, 800d6a0 <SetMaxTimeCredits+0x44>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 800d68e:	4b05      	ldr	r3, [pc, #20]	@ (800d6a4 <SetMaxTimeCredits+0x48>)
 800d690:	60e3      	str	r3, [r4, #12]
 800d692:	e000      	b.n	800d696 <SetMaxTimeCredits+0x3a>
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800d694:	4b03      	ldr	r3, [pc, #12]	@ (800d6a4 <SetMaxTimeCredits+0x48>)
    }
#endif 

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 800d696:	6123      	str	r3, [r4, #16]

    return dutyCycle;
}
 800d698:	b002      	add	sp, #8
 800d69a:	bd70      	pop	{r4, r5, r6, pc}
            maxCredits = DUTY_CYCLE_TIME_PERIOD_JOIN_BACKOFF_24H;
 800d69c:	4b02      	ldr	r3, [pc, #8]	@ (800d6a8 <SetMaxTimeCredits+0x4c>)
 800d69e:	e7fa      	b.n	800d696 <SetMaxTimeCredits+0x3a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800d6a0:	4b00      	ldr	r3, [pc, #0]	@ (800d6a4 <SetMaxTimeCredits+0x48>)
 800d6a2:	e7f8      	b.n	800d696 <SetMaxTimeCredits+0x3a>
 800d6a4:	0036ee80 	.word	0x0036ee80
 800d6a8:	000d4670 	.word	0x000d4670

0800d6ac <UpdateTimeCredits>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime, TimerTime_t lastBandUpdateTime )
{
 800d6ac:	b530      	push	{r4, r5, lr}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	460d      	mov	r5, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800d6b4:	9301      	str	r3, [sp, #4]
 800d6b6:	9200      	str	r2, [sp, #0]
 800d6b8:	ab06      	add	r3, sp, #24
 800d6ba:	cb0c      	ldmia	r3, {r2, r3}
 800d6bc:	f7ff ffce 	bl	800d65c <SetMaxTimeCredits>
                                            dutyCycleEnabled, lastTxIsJoinRequest );
    TimerTime_t observation = DUTY_CYCLE_TIME_PERIOD;

    if( joined == false )
 800d6c0:	b94d      	cbnz	r5, 800d6d6 <UpdateTimeCredits+0x2a>
    {
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800d6c2:	9b06      	ldr	r3, [sp, #24]
 800d6c4:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 800d6c8:	d313      	bcc.n	800d6f2 <UpdateTimeCredits+0x46>
        {
            observation = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S * 1000;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800d6ca:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d811      	bhi.n	800d6f6 <UpdateTimeCredits+0x4a>
        {
            observation = ( BACKOFF_DUTY_CYCLE_10_HOURS_IN_S * 1000 );
 800d6d2:	4b0c      	ldr	r3, [pc, #48]	@ (800d704 <UpdateTimeCredits+0x58>)
 800d6d4:	e000      	b.n	800d6d8 <UpdateTimeCredits+0x2c>
    TimerTime_t observation = DUTY_CYCLE_TIME_PERIOD;
 800d6d6:	4b0c      	ldr	r3, [pc, #48]	@ (800d708 <UpdateTimeCredits+0x5c>)
            observation = ( BACKOFF_DUTY_CYCLE_24_HOURS_IN_S * 1000 );
        }
    }

    // Apply new credits only if the observation period has been elapsed.
    if( ( observation <= lastBandUpdateTime ) ||
 800d6d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d902      	bls.n	800d6e4 <UpdateTimeCredits+0x38>
        ( band->LastMaxCreditAssignTime != observation ) ||
 800d6de:	68a2      	ldr	r2, [r4, #8]
    if( ( observation <= lastBandUpdateTime ) ||
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d00a      	beq.n	800d6fa <UpdateTimeCredits+0x4e>
        ( band->LastBandUpdateTime == 0 ) )
    {
        band->TimeCredits = band->MaxTimeCredits;
 800d6e4:	6922      	ldr	r2, [r4, #16]
 800d6e6:	60e2      	str	r2, [r4, #12]
        band->LastBandUpdateTime = currentTime;
 800d6e8:	9a08      	ldr	r2, [sp, #32]
 800d6ea:	6062      	str	r2, [r4, #4]
        band->LastMaxCreditAssignTime = observation;
 800d6ec:	60a3      	str	r3, [r4, #8]
    }
    return dutyCycle;
}
 800d6ee:	b003      	add	sp, #12
 800d6f0:	bd30      	pop	{r4, r5, pc}
            observation = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S * 1000;
 800d6f2:	4b05      	ldr	r3, [pc, #20]	@ (800d708 <UpdateTimeCredits+0x5c>)
 800d6f4:	e7f0      	b.n	800d6d8 <UpdateTimeCredits+0x2c>
            observation = ( BACKOFF_DUTY_CYCLE_24_HOURS_IN_S * 1000 );
 800d6f6:	4b05      	ldr	r3, [pc, #20]	@ (800d70c <UpdateTimeCredits+0x60>)
 800d6f8:	e7ee      	b.n	800d6d8 <UpdateTimeCredits+0x2c>
        ( band->LastBandUpdateTime == 0 ) )
 800d6fa:	6862      	ldr	r2, [r4, #4]
        ( band->LastMaxCreditAssignTime != observation ) ||
 800d6fc:	2a00      	cmp	r2, #0
 800d6fe:	d1f6      	bne.n	800d6ee <UpdateTimeCredits+0x42>
 800d700:	e7f0      	b.n	800d6e4 <UpdateTimeCredits+0x38>
 800d702:	bf00      	nop
 800d704:	025c3f80 	.word	0x025c3f80
 800d708:	0036ee80 	.word	0x0036ee80
 800d70c:	07829b80 	.word	0x07829b80

0800d710 <CountChannels>:
    return dutyCycle;
}
#endif

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800d710:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800d712:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800d714:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800d716:	e001      	b.n	800d71c <CountChannels+0xc>
 800d718:	3301      	adds	r3, #1
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	428b      	cmp	r3, r1
 800d71e:	d207      	bcs.n	800d730 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800d720:	2201      	movs	r2, #1
 800d722:	409a      	lsls	r2, r3
 800d724:	ea32 020c 	bics.w	r2, r2, ip
 800d728:	d1f6      	bne.n	800d718 <CountChannels+0x8>
        {
            nbActiveBits++;
 800d72a:	3001      	adds	r0, #1
 800d72c:	b2c0      	uxtb	r0, r0
 800d72e:	e7f3      	b.n	800d718 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800d730:	4770      	bx	lr

0800d732 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800d732:	4288      	cmp	r0, r1
 800d734:	db03      	blt.n	800d73e <RegionCommonValueInRange+0xc>
 800d736:	4290      	cmp	r0, r2
 800d738:	dd03      	ble.n	800d742 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800d73a:	2000      	movs	r0, #0
 800d73c:	4770      	bx	lr
 800d73e:	2000      	movs	r0, #0
 800d740:	4770      	bx	lr
        return 1;
 800d742:	2001      	movs	r0, #1
}
 800d744:	4770      	bx	lr

0800d746 <RegionCommonChanVerifyDr>:
{
 800d746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d74a:	4682      	mov	sl, r0
 800d74c:	460e      	mov	r6, r1
 800d74e:	4690      	mov	r8, r2
 800d750:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800d754:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800d758:	4619      	mov	r1, r3
 800d75a:	4640      	mov	r0, r8
 800d75c:	f7ff ffe9 	bl	800d732 <RegionCommonValueInRange>
 800d760:	b338      	cbz	r0, 800d7b2 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800d762:	2500      	movs	r5, #0
 800d764:	462f      	mov	r7, r5
 800d766:	e01e      	b.n	800d7a6 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800d768:	3401      	adds	r4, #1
 800d76a:	b2e4      	uxtb	r4, r4
 800d76c:	2c0f      	cmp	r4, #15
 800d76e:	d816      	bhi.n	800d79e <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800d770:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800d774:	4123      	asrs	r3, r4
 800d776:	f013 0f01 	tst.w	r3, #1
 800d77a:	d0f5      	beq.n	800d768 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800d77c:	193b      	adds	r3, r7, r4
 800d77e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d782:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800d786:	7a19      	ldrb	r1, [r3, #8]
 800d788:	090a      	lsrs	r2, r1, #4
 800d78a:	f001 010f 	and.w	r1, r1, #15
 800d78e:	4640      	mov	r0, r8
 800d790:	f7ff ffcf 	bl	800d732 <RegionCommonValueInRange>
 800d794:	2801      	cmp	r0, #1
 800d796:	d1e7      	bne.n	800d768 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800d798:	2001      	movs	r0, #1
}
 800d79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800d79e:	3710      	adds	r7, #16
 800d7a0:	b2ff      	uxtb	r7, r7
 800d7a2:	3501      	adds	r5, #1
 800d7a4:	b2ed      	uxtb	r5, r5
 800d7a6:	4557      	cmp	r7, sl
 800d7a8:	d201      	bcs.n	800d7ae <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800d7aa:	2400      	movs	r4, #0
 800d7ac:	e7de      	b.n	800d76c <RegionCommonChanVerifyDr+0x26>
    return false;
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	e7f3      	b.n	800d79a <RegionCommonChanVerifyDr+0x54>
        return false;
 800d7b2:	2000      	movs	r0, #0
 800d7b4:	e7f1      	b.n	800d79a <RegionCommonChanVerifyDr+0x54>

0800d7b6 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800d7b6:	0913      	lsrs	r3, r2, #4
 800d7b8:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800d7bc:	d313      	bcc.n	800d7e6 <RegionCommonChanDisable+0x30>
{
 800d7be:	b500      	push	{lr}
 800d7c0:	4684      	mov	ip, r0
 800d7c2:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800d7c6:	4291      	cmp	r1, r2
 800d7c8:	d20f      	bcs.n	800d7ea <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800d7ca:	f830 301e 	ldrh.w	r3, [r0, lr, lsl #1]
 800d7ce:	f001 010f 	and.w	r1, r1, #15
 800d7d2:	2001      	movs	r0, #1
 800d7d4:	fa00 f101 	lsl.w	r1, r0, r1
 800d7d8:	43c9      	mvns	r1, r1
 800d7da:	b209      	sxth	r1, r1
 800d7dc:	400b      	ands	r3, r1
 800d7de:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 800d7e2:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 800d7e6:	2000      	movs	r0, #0
}
 800d7e8:	4770      	bx	lr
        return false;
 800d7ea:	2000      	movs	r0, #0
 800d7ec:	e7f9      	b.n	800d7e2 <RegionCommonChanDisable+0x2c>

0800d7ee <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800d7ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800d7f0:	b188      	cbz	r0, 800d816 <RegionCommonCountChannels+0x28>
 800d7f2:	460c      	mov	r4, r1
 800d7f4:	4616      	mov	r6, r2
 800d7f6:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800d7f8:	2500      	movs	r5, #0
 800d7fa:	e008      	b.n	800d80e <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800d7fc:	2110      	movs	r1, #16
 800d7fe:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800d802:	f7ff ff85 	bl	800d710 <CountChannels>
 800d806:	4405      	add	r5, r0
 800d808:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800d80a:	3401      	adds	r4, #1
 800d80c:	b2e4      	uxtb	r4, r4
 800d80e:	42b4      	cmp	r4, r6
 800d810:	d3f4      	bcc.n	800d7fc <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800d812:	4628      	mov	r0, r5
 800d814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800d816:	2500      	movs	r5, #0
 800d818:	e7fb      	b.n	800d812 <RegionCommonCountChannels+0x24>

0800d81a <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800d81a:	4684      	mov	ip, r0
 800d81c:	b158      	cbz	r0, 800d836 <RegionCommonChanMaskCopy+0x1c>
 800d81e:	b109      	cbz	r1, 800d824 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800d820:	2300      	movs	r3, #0
 800d822:	e006      	b.n	800d832 <RegionCommonChanMaskCopy+0x18>
 800d824:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800d826:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800d82a:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800d82e:	3301      	adds	r3, #1
 800d830:	b2db      	uxtb	r3, r3
 800d832:	4293      	cmp	r3, r2
 800d834:	d3f7      	bcc.n	800d826 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800d836:	4770      	bx	lr

0800d838 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800d838:	b082      	sub	sp, #8
 800d83a:	b538      	push	{r3, r4, r5, lr}
 800d83c:	4604      	mov	r4, r0
 800d83e:	460d      	mov	r5, r1
 800d840:	4611      	mov	r1, r2
 800d842:	aa04      	add	r2, sp, #16
 800d844:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800d848:	ca0c      	ldmia	r2, {r2, r3}
 800d84a:	f7ff fef6 	bl	800d63a <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800d84e:	68e3      	ldr	r3, [r4, #12]
 800d850:	fb05 f100 	mul.w	r1, r5, r0
 800d854:	428b      	cmp	r3, r1
 800d856:	d905      	bls.n	800d864 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800d858:	1a5b      	subs	r3, r3, r1
 800d85a:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800d85c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d860:	b002      	add	sp, #8
 800d862:	4770      	bx	lr
        band->TimeCredits = 0;
 800d864:	2300      	movs	r3, #0
 800d866:	60e3      	str	r3, [r4, #12]
}
 800d868:	e7f8      	b.n	800d85c <RegionCommonSetBandTxDone+0x24>

0800d86a <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800d86a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86e:	b089      	sub	sp, #36	@ 0x24
 800d870:	4681      	mov	r9, r0
 800d872:	468b      	mov	fp, r1
 800d874:	4692      	mov	sl, r2
 800d876:	4698      	mov	r8, r3
 800d878:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 800d87c:	9306      	str	r3, [sp, #24]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800d87e:	f004 fec1 	bl	8012604 <UTIL_TIMER_GetCurrentTime>
 800d882:	9005      	str	r0, [sp, #20]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800d884:	2500      	movs	r5, #0
    uint8_t validBands = 0;
 800d886:	462f      	mov	r7, r5
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800d888:	f04f 33ff 	mov.w	r3, #4294967295
 800d88c:	9307      	str	r3, [sp, #28]
    for( uint8_t i = 0; i < nbBands; i++ )
 800d88e:	e005      	b.n	800d89c <RegionCommonUpdateBandTimeOff+0x32>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800d890:	2301      	movs	r3, #1
 800d892:	7523      	strb	r3, [r4, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800d894:	441f      	add	r7, r3
 800d896:	b2ff      	uxtb	r7, r7
    for( uint8_t i = 0; i < nbBands; i++ )
 800d898:	3501      	adds	r5, #1
 800d89a:	b2ed      	uxtb	r5, r5
 800d89c:	4555      	cmp	r5, sl
 800d89e:	d234      	bcs.n	800d90a <RegionCommonUpdateBandTimeOff+0xa0>
        TimerTime_t elapsedTime = TimerGetElapsedTime( bands[i].LastBandUpdateTime );
 800d8a0:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800d8a4:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800d8a8:	6860      	ldr	r0, [r4, #4]
 800d8aa:	f004 feb5 	bl	8012618 <UTIL_TIMER_GetElapsedTime>
 800d8ae:	4606      	mov	r6, r0
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800d8b0:	9003      	str	r0, [sp, #12]
 800d8b2:	9b05      	ldr	r3, [sp, #20]
 800d8b4:	9302      	str	r3, [sp, #8]
 800d8b6:	ab13      	add	r3, sp, #76	@ 0x4c
 800d8b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d8bc:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d8c0:	9b06      	ldr	r3, [sp, #24]
 800d8c2:	4642      	mov	r2, r8
 800d8c4:	4649      	mov	r1, r9
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	f7ff fef0 	bl	800d6ac <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800d8cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d8ce:	fb03 f000 	mul.w	r0, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800d8d2:	68e3      	ldr	r3, [r4, #12]
 800d8d4:	4283      	cmp	r3, r0
 800d8d6:	d8db      	bhi.n	800d890 <RegionCommonUpdateBandTimeOff+0x26>
 800d8d8:	f1b8 0f00 	cmp.w	r8, #0
 800d8dc:	d102      	bne.n	800d8e4 <RegionCommonUpdateBandTimeOff+0x7a>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800d8de:	f1b9 0f00 	cmp.w	r9, #0
 800d8e2:	d1d5      	bne.n	800d890 <RegionCommonUpdateBandTimeOff+0x26>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	7523      	strb	r3, [r4, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800d8e8:	6923      	ldr	r3, [r4, #16]
 800d8ea:	4283      	cmp	r3, r0
 800d8ec:	d9d4      	bls.n	800d898 <RegionCommonUpdateBandTimeOff+0x2e>
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
                TimerTime_t observationTimeDiff = 0;
                if( bands[i].LastMaxCreditAssignTime >= elapsedTime )
 800d8ee:	68a3      	ldr	r3, [r4, #8]
 800d8f0:	42b3      	cmp	r3, r6
 800d8f2:	d308      	bcc.n	800d906 <RegionCommonUpdateBandTimeOff+0x9c>
                {
                    observationTimeDiff = bands[i].LastMaxCreditAssignTime - elapsedTime;
 800d8f4:	1b9b      	subs	r3, r3, r6
                }
                minTimeToWait = MIN( minTimeToWait, observationTimeDiff );
 800d8f6:	9a07      	ldr	r2, [sp, #28]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	bf28      	it	cs
 800d8fc:	461a      	movcs	r2, r3
 800d8fe:	9207      	str	r2, [sp, #28]
#endif

                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800d900:	3701      	adds	r7, #1
 800d902:	b2ff      	uxtb	r7, r7
 800d904:	e7c8      	b.n	800d898 <RegionCommonUpdateBandTimeOff+0x2e>
                TimerTime_t observationTimeDiff = 0;
 800d906:	2300      	movs	r3, #0
 800d908:	e7f5      	b.n	800d8f6 <RegionCommonUpdateBandTimeOff+0x8c>
#endif

        }
    }

    if( validBands == 0 )
 800d90a:	b11f      	cbz	r7, 800d914 <RegionCommonUpdateBandTimeOff+0xaa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800d90c:	9807      	ldr	r0, [sp, #28]
 800d90e:	b009      	add	sp, #36	@ 0x24
 800d910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800d914:	f04f 33ff 	mov.w	r3, #4294967295
 800d918:	9307      	str	r3, [sp, #28]
 800d91a:	e7f7      	b.n	800d90c <RegionCommonUpdateBandTimeOff+0xa2>

0800d91c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800d91c:	7803      	ldrb	r3, [r0, #0]
 800d91e:	2b03      	cmp	r3, #3
 800d920:	d001      	beq.n	800d926 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800d922:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800d924:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800d926:	7843      	ldrb	r3, [r0, #1]
 800d928:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800d92c:	704a      	strb	r2, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800d92e:	f003 020f 	and.w	r2, r3, #15
 800d932:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800d934:	091b      	lsrs	r3, r3, #4
 800d936:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800d938:	7883      	ldrb	r3, [r0, #2]
 800d93a:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800d93c:	78c2      	ldrb	r2, [r0, #3]
 800d93e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d942:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800d944:	7903      	ldrb	r3, [r0, #4]
 800d946:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800d948:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800d94c:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800d94e:	f003 030f 	and.w	r3, r3, #15
 800d952:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800d954:	2005      	movs	r0, #5
 800d956:	4770      	bx	lr

0800d958 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800d958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d95c:	b085      	sub	sp, #20
 800d95e:	4604      	mov	r4, r0
 800d960:	460f      	mov	r7, r1
 800d962:	4616      	mov	r6, r2
 800d964:	461d      	mov	r5, r3
    uint8_t status = verifyParams->Status;
 800d966:	f890 8004 	ldrb.w	r8, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800d96a:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800d96e:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800d972:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800d976:	7943      	ldrb	r3, [r0, #5]
 800d978:	b92b      	cbnz	r3, 800d986 <RegionCommonLinkAdrReqVerifyParams+0x2e>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800d97a:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800d97e:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800d982:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800d986:	f1b8 0f00 	cmp.w	r8, #0
 800d98a:	d02d      	beq.n	800d9e8 <RegionCommonLinkAdrReqVerifyParams+0x90>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800d98c:	f1ba 0f0f 	cmp.w	sl, #15
 800d990:	d114      	bne.n	800d9bc <RegionCommonLinkAdrReqVerifyParams+0x64>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800d992:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800d996:	f1b9 0f0f 	cmp.w	r9, #15
 800d99a:	d020      	beq.n	800d9de <RegionCommonLinkAdrReqVerifyParams+0x86>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800d99c:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800d9a0:	9303      	str	r3, [sp, #12]
 800d9a2:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800d9a6:	461c      	mov	r4, r3
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	4648      	mov	r0, r9
 800d9ac:	f7ff fec1 	bl	800d732 <RegionCommonValueInRange>
 800d9b0:	b9b8      	cbnz	r0, 800d9e2 <RegionCommonLinkAdrReqVerifyParams+0x8a>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800d9b2:	454c      	cmp	r4, r9
 800d9b4:	dc22      	bgt.n	800d9fc <RegionCommonLinkAdrReqVerifyParams+0xa4>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800d9b6:	f008 08fb 	and.w	r8, r8, #251	@ 0xfb
 800d9ba:	e012      	b.n	800d9e2 <RegionCommonLinkAdrReqVerifyParams+0x8a>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800d9bc:	69a3      	ldr	r3, [r4, #24]
 800d9be:	9301      	str	r3, [sp, #4]
 800d9c0:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800d9c4:	9300      	str	r3, [sp, #0]
 800d9c6:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d9ca:	4652      	mov	r2, sl
 800d9cc:	6921      	ldr	r1, [r4, #16]
 800d9ce:	7b20      	ldrb	r0, [r4, #12]
 800d9d0:	f7ff feb9 	bl	800d746 <RegionCommonChanVerifyDr>
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	d1de      	bne.n	800d996 <RegionCommonLinkAdrReqVerifyParams+0x3e>
            status &= 0xFD; // Datarate KO
 800d9d8:	f008 08fd 	and.w	r8, r8, #253	@ 0xfd
 800d9dc:	e7db      	b.n	800d996 <RegionCommonLinkAdrReqVerifyParams+0x3e>
            txPower =  verifyParams->CurrentTxPower;
 800d9de:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800d9e2:	f1b8 0f07 	cmp.w	r8, #7
 800d9e6:	d00c      	beq.n	800da02 <RegionCommonLinkAdrReqVerifyParams+0xaa>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800d9e8:	f887 a000 	strb.w	sl, [r7]
    *txPow = txPower;
 800d9ec:	f886 9000 	strb.w	r9, [r6]
    *nbRep = nbRepetitions;
 800d9f0:	f885 b000 	strb.w	fp, [r5]

    return status;
}
 800d9f4:	4640      	mov	r0, r8
 800d9f6:	b005      	add	sp, #20
 800d9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800d9fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800da00:	e7ef      	b.n	800d9e2 <RegionCommonLinkAdrReqVerifyParams+0x8a>
        if( nbRepetitions == 0 )
 800da02:	f1bb 0f00 	cmp.w	fp, #0
 800da06:	d1ef      	bne.n	800d9e8 <RegionCommonLinkAdrReqVerifyParams+0x90>
            nbRepetitions = 1;
 800da08:	f04f 0b01 	mov.w	fp, #1
 800da0c:	e7ec      	b.n	800d9e8 <RegionCommonLinkAdrReqVerifyParams+0x90>
	...

0800da10 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800da10:	4b02      	ldr	r3, [pc, #8]	@ (800da1c <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800da12:	fa03 f000 	lsl.w	r0, r3, r0
}
 800da16:	fbb0 f0f1 	udiv	r0, r0, r1
 800da1a:	4770      	bx	lr
 800da1c:	000f4240 	.word	0x000f4240

0800da20 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800da20:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800da24:	fbb3 f0f0 	udiv	r0, r3, r0
 800da28:	4770      	bx	lr
	...

0800da2c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800da2c:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800da2e:	f1a1 0c04 	sub.w	ip, r1, #4
 800da32:	f44f 7e7a 	mov.w	lr, #1000	@ 0x3e8
 800da36:	fb0e f202 	mul.w	r2, lr, r2
 800da3a:	fb00 220c 	mla	r2, r0, ip, r2
 800da3e:	0052      	lsls	r2, r2, #1
 800da40:	d021      	beq.n	800da86 <RegionCommonComputeRxWindowParameters+0x5a>
 800da42:	4402      	add	r2, r0
 800da44:	3a01      	subs	r2, #1
 800da46:	fbb2 f2f0 	udiv	r2, r2, r0
 800da4a:	4291      	cmp	r1, r2
 800da4c:	bf38      	it	cc
 800da4e:	4611      	movcc	r1, r2
 800da50:	9a01      	ldr	r2, [sp, #4]
 800da52:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800da54:	0082      	lsls	r2, r0, #2
 800da56:	fb01 f000 	mul.w	r0, r1, r0
 800da5a:	b1b8      	cbz	r0, 800da8c <RegionCommonComputeRxWindowParameters+0x60>
 800da5c:	3001      	adds	r0, #1
 800da5e:	0840      	lsrs	r0, r0, #1
 800da60:	1a12      	subs	r2, r2, r0
 800da62:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800da66:	fb01 2313 	mls	r3, r1, r3, r2
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	dd10      	ble.n	800da90 <RegionCommonComputeRxWindowParameters+0x64>
 800da6e:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 800da72:	4a0b      	ldr	r2, [pc, #44]	@ (800daa0 <RegionCommonComputeRxWindowParameters+0x74>)
 800da74:	fb82 1203 	smull	r1, r2, r2, r3
 800da78:	17db      	asrs	r3, r3, #31
 800da7a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800da7e:	9a02      	ldr	r2, [sp, #8]
 800da80:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800da82:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800da86:	fbb2 f2f0 	udiv	r2, r2, r0
 800da8a:	e7de      	b.n	800da4a <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800da8c:	0840      	lsrs	r0, r0, #1
 800da8e:	e7e7      	b.n	800da60 <RegionCommonComputeRxWindowParameters+0x34>
 800da90:	4a03      	ldr	r2, [pc, #12]	@ (800daa0 <RegionCommonComputeRxWindowParameters+0x74>)
 800da92:	fb82 1203 	smull	r1, r2, r2, r3
 800da96:	17db      	asrs	r3, r3, #31
 800da98:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800da9c:	e7ef      	b.n	800da7e <RegionCommonComputeRxWindowParameters+0x52>
 800da9e:	bf00      	nop
 800daa0:	10624dd3 	.word	0x10624dd3

0800daa4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800daa4:	b538      	push	{r3, r4, r5, lr}
 800daa6:	460d      	mov	r5, r1
 800daa8:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800daaa:	0040      	lsls	r0, r0, #1
 800daac:	f7f3 f8bc 	bl	8000c28 <__aeabi_ui2f>
 800dab0:	4601      	mov	r1, r0
 800dab2:	4628      	mov	r0, r5
 800dab4:	f7f3 f806 	bl	8000ac4 <__aeabi_fsub>
 800dab8:	4621      	mov	r1, r4
 800daba:	f7f3 f803 	bl	8000ac4 <__aeabi_fsub>
 800dabe:	f7f2 fea5 	bl	800080c <__aeabi_f2d>
 800dac2:	f005 f86d 	bl	8012ba0 <floor>
 800dac6:	f7f2 ff81 	bl	80009cc <__aeabi_d2iz>

    return phyTxPower;
}
 800daca:	b240      	sxtb	r0, r0
 800dacc:	bd38      	pop	{r3, r4, r5, pc}

0800dace <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800dace:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad2:	b083      	sub	sp, #12
 800dad4:	4605      	mov	r5, r0
 800dad6:	468b      	mov	fp, r1
 800dad8:	9300      	str	r3, [sp, #0]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800dada:	2600      	movs	r6, #0
 800dadc:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800dade:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800dae0:	46b1      	mov	r9, r6
 800dae2:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800dae4:	e049      	b.n	800db7a <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800dae6:	7a3a      	ldrb	r2, [r7, #8]
 800dae8:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800daec:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800daf0:	b252      	sxtb	r2, r2
 800daf2:	b249      	sxtb	r1, r1
 800daf4:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800daf8:	f7ff fe1b 	bl	800d732 <RegionCommonValueInRange>
 800dafc:	b178      	cbz	r0, 800db1e <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800dafe:	68ea      	ldr	r2, [r5, #12]
 800db00:	7a7b      	ldrb	r3, [r7, #9]
 800db02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800db06:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800db0a:	7d13      	ldrb	r3, [r2, #20]
 800db0c:	b353      	cbz	r3, 800db64 <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800db0e:	f109 0301 	add.w	r3, r9, #1
 800db12:	eb08 0204 	add.w	r2, r8, r4
 800db16:	f80b 2009 	strb.w	r2, [fp, r9]
 800db1a:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800db1e:	3401      	adds	r4, #1
 800db20:	b2e4      	uxtb	r4, r4
 800db22:	2c0f      	cmp	r4, #15
 800db24:	d823      	bhi.n	800db6e <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800db26:	686b      	ldr	r3, [r5, #4]
 800db28:	0072      	lsls	r2, r6, #1
 800db2a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800db2e:	4123      	asrs	r3, r4
 800db30:	f013 0f01 	tst.w	r3, #1
 800db34:	d0f3      	beq.n	800db1e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800db36:	68a8      	ldr	r0, [r5, #8]
 800db38:	eb08 0304 	add.w	r3, r8, r4
 800db3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800db40:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800db44:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d0e8      	beq.n	800db1e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800db4c:	782b      	ldrb	r3, [r5, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d1c9      	bne.n	800dae6 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800db52:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800db54:	2b00      	cmp	r3, #0
 800db56:	d0c6      	beq.n	800dae6 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800db58:	5a9b      	ldrh	r3, [r3, r2]
 800db5a:	4123      	asrs	r3, r4
 800db5c:	f013 0f01 	tst.w	r3, #1
 800db60:	d1c1      	bne.n	800dae6 <RegionCommonCountNbOfEnabledChannels+0x18>
 800db62:	e7dc      	b.n	800db1e <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800db64:	f10a 0a01 	add.w	sl, sl, #1
 800db68:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800db6c:	e7d7      	b.n	800db1e <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800db6e:	f108 0810 	add.w	r8, r8, #16
 800db72:	fa5f f888 	uxtb.w	r8, r8
 800db76:	3601      	adds	r6, #1
 800db78:	b2f6      	uxtb	r6, r6
 800db7a:	8a2b      	ldrh	r3, [r5, #16]
 800db7c:	4598      	cmp	r8, r3
 800db7e:	d201      	bcs.n	800db84 <RegionCommonCountNbOfEnabledChannels+0xb6>
        for( uint8_t j = 0; j < 16; j++ )
 800db80:	2400      	movs	r4, #0
 800db82:	e7ce      	b.n	800db22 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800db84:	9f01      	ldr	r7, [sp, #4]
 800db86:	f887 9000 	strb.w	r9, [r7]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800db8a:	9b00      	ldr	r3, [sp, #0]
 800db8c:	f883 a000 	strb.w	sl, [r3]
}
 800db90:	b003      	add	sp, #12
 800db92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db96 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800db96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db9a:	b085      	sub	sp, #20
 800db9c:	4604      	mov	r4, r0
 800db9e:	460f      	mov	r7, r1
 800dba0:	4616      	mov	r6, r2
 800dba2:	461d      	mov	r5, r3
 800dba4:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800dba8:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800dbac:	6840      	ldr	r0, [r0, #4]
 800dbae:	f004 fd33 	bl	8012618 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800dbb2:	6823      	ldr	r3, [r4, #0]
 800dbb4:	1a1b      	subs	r3, r3, r0
 800dbb6:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800dbc4:	6863      	ldr	r3, [r4, #4]
 800dbc6:	b113      	cbz	r3, 800dbce <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800dbc8:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800dbca:	4283      	cmp	r3, r0
 800dbcc:	d81e      	bhi.n	800dc0c <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800dbd2:	69e3      	ldr	r3, [r4, #28]
 800dbd4:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800dbd8:	781f      	ldrb	r7, [r3, #0]
 800dbda:	69a3      	ldr	r3, [r4, #24]
 800dbdc:	9303      	str	r3, [sp, #12]
 800dbde:	ab01      	add	r3, sp, #4
 800dbe0:	f104 020c 	add.w	r2, r4, #12
 800dbe4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dbe8:	e883 0003 	stmia.w	r3, {r0, r1}
 800dbec:	7d23      	ldrb	r3, [r4, #20]
 800dbee:	9300      	str	r3, [sp, #0]
 800dbf0:	7a23      	ldrb	r3, [r4, #8]
 800dbf2:	7a62      	ldrb	r2, [r4, #9]
 800dbf4:	4661      	mov	r1, ip
 800dbf6:	4638      	mov	r0, r7
 800dbf8:	f7ff fe37 	bl	800d86a <RegionCommonUpdateBandTimeOff>
 800dbfc:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800dc00:	4643      	mov	r3, r8
 800dc02:	462a      	mov	r2, r5
 800dc04:	4631      	mov	r1, r6
 800dc06:	69e0      	ldr	r0, [r4, #28]
 800dc08:	f7ff ff61 	bl	800dace <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800dc0c:	782b      	ldrb	r3, [r5, #0]
 800dc0e:	b923      	cbnz	r3, 800dc1a <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800dc10:	f898 3000 	ldrb.w	r3, [r8]
 800dc14:	b13b      	cbz	r3, 800dc26 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800dc16:	200b      	movs	r0, #11
 800dc18:	e002      	b.n	800dc20 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800dc20:	b005      	add	sp, #20
 800dc22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800dc26:	200c      	movs	r0, #12
 800dc28:	e7fa      	b.n	800dc20 <RegionCommonIdentifyChannels+0x8a>

0800dc2a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800dc2a:	b570      	push	{r4, r5, r6, lr}
 800dc2c:	b082      	sub	sp, #8
 800dc2e:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800dc30:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800dc34:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800dc38:	42a6      	cmp	r6, r4
 800dc3a:	d011      	beq.n	800dc60 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800dc3c:	3c01      	subs	r4, #1
 800dc3e:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 800dc40:	42a6      	cmp	r6, r4
 800dc42:	d00e      	beq.n	800dc62 <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800dc44:	68ab      	ldr	r3, [r5, #8]
 800dc46:	9301      	str	r3, [sp, #4]
 800dc48:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800dc4c:	9300      	str	r3, [sp, #0]
 800dc4e:	4633      	mov	r3, r6
 800dc50:	4622      	mov	r2, r4
 800dc52:	6869      	ldr	r1, [r5, #4]
 800dc54:	78e8      	ldrb	r0, [r5, #3]
 800dc56:	f7ff fd76 	bl	800d746 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	d0ee      	beq.n	800dc3c <RegionCommonGetNextLowerTxDr+0x12>
 800dc5e:	e000      	b.n	800dc62 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800dc60:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800dc62:	4620      	mov	r0, r4
 800dc64:	b002      	add	sp, #8
 800dc66:	bd70      	pop	{r4, r5, r6, pc}

0800dc68 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800dc68:	4288      	cmp	r0, r1
 800dc6a:	bfb8      	it	lt
 800dc6c:	4608      	movlt	r0, r1
 800dc6e:	4770      	bx	lr

0800dc70 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800dc70:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800dc74:	4a05      	ldr	r2, [pc, #20]	@ (800dc8c <RegionCommonGetBandwidth+0x1c>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d004      	beq.n	800dc84 <RegionCommonGetBandwidth+0x14>
 800dc7a:	4a05      	ldr	r2, [pc, #20]	@ (800dc90 <RegionCommonGetBandwidth+0x20>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d103      	bne.n	800dc88 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800dc80:	2002      	movs	r0, #2
 800dc82:	4770      	bx	lr
            return 1;
 800dc84:	2001      	movs	r0, #1
 800dc86:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800dc88:	2000      	movs	r0, #0
    }
}
 800dc8a:	4770      	bx	lr
 800dc8c:	0003d090 	.word	0x0003d090
 800dc90:	0007a120 	.word	0x0007a120

0800dc94 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800dc94:	b500      	push	{lr}
 800dc96:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800dc98:	2805      	cmp	r0, #5
 800dc9a:	d80e      	bhi.n	800dcba <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800dc9c:	9202      	str	r2, [sp, #8]
 800dc9e:	9101      	str	r1, [sp, #4]
 800dca0:	4b0a      	ldr	r3, [pc, #40]	@ (800dccc <RegionCommonRxConfigPrint+0x38>)
 800dca2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	4b09      	ldr	r3, [pc, #36]	@ (800dcd0 <RegionCommonRxConfigPrint+0x3c>)
 800dcaa:	2201      	movs	r2, #1
 800dcac:	2100      	movs	r1, #0
 800dcae:	2002      	movs	r0, #2
 800dcb0:	f004 f9e2 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800dcb4:	b005      	add	sp, #20
 800dcb6:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800dcba:	9201      	str	r2, [sp, #4]
 800dcbc:	9100      	str	r1, [sp, #0]
 800dcbe:	4b05      	ldr	r3, [pc, #20]	@ (800dcd4 <RegionCommonRxConfigPrint+0x40>)
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	2002      	movs	r0, #2
 800dcc6:	f004 f9d7 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
}
 800dcca:	e7f3      	b.n	800dcb4 <RegionCommonRxConfigPrint+0x20>
 800dccc:	0801373c 	.word	0x0801373c
 800dcd0:	08013320 	.word	0x08013320
 800dcd4:	08013340 	.word	0x08013340

0800dcd8 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800dcd8:	b500      	push	{lr}
 800dcda:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800dcdc:	9101      	str	r1, [sp, #4]
 800dcde:	9000      	str	r0, [sp, #0]
 800dce0:	4b04      	ldr	r3, [pc, #16]	@ (800dcf4 <RegionCommonTxConfigPrint+0x1c>)
 800dce2:	2201      	movs	r2, #1
 800dce4:	2100      	movs	r1, #0
 800dce6:	2002      	movs	r0, #2
 800dce8:	f004 f9c6 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
}
 800dcec:	b003      	add	sp, #12
 800dcee:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcf2:	bf00      	nop
 800dcf4:	0801335c 	.word	0x0801335c

0800dcf8 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 800dcf8:	b510      	push	{r4, lr}
 800dcfa:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800dcfc:	4b05      	ldr	r3, [pc, #20]	@ (800dd14 <VerifyRfFreq+0x1c>)
 800dcfe:	6a1b      	ldr	r3, [r3, #32]
 800dd00:	4798      	blx	r3
 800dd02:	b120      	cbz	r0, 800dd0e <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < 433175000 ) || ( freq > 434665000 ) )
 800dd04:	4b04      	ldr	r3, [pc, #16]	@ (800dd18 <VerifyRfFreq+0x20>)
 800dd06:	4423      	add	r3, r4
 800dd08:	4a04      	ldr	r2, [pc, #16]	@ (800dd1c <VerifyRfFreq+0x24>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d800      	bhi.n	800dd10 <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 800dd0e:	bd10      	pop	{r4, pc}
        return false;
 800dd10:	2000      	movs	r0, #0
 800dd12:	e7fc      	b.n	800dd0e <VerifyRfFreq+0x16>
 800dd14:	08013b98 	.word	0x08013b98
 800dd18:	e62e4628 	.word	0xe62e4628
 800dd1c:	0016bc50 	.word	0x0016bc50

0800dd20 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800dd20:	b570      	push	{r4, r5, r6, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	4605      	mov	r5, r0
 800dd26:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU433[datarate];
 800dd28:	4b13      	ldr	r3, [pc, #76]	@ (800dd78 <GetTimeOnAir+0x58>)
 800dd2a:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU433 );
 800dd2c:	4913      	ldr	r1, [pc, #76]	@ (800dd7c <GetTimeOnAir+0x5c>)
 800dd2e:	f7ff ff9f 	bl	800dc70 <RegionCommonGetBandwidth>
 800dd32:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800dd34:	2d07      	cmp	r5, #7
 800dd36:	d00e      	beq.n	800dd56 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800dd38:	4b11      	ldr	r3, [pc, #68]	@ (800dd80 <GetTimeOnAir+0x60>)
 800dd3a:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800dd3c:	2001      	movs	r0, #1
 800dd3e:	9003      	str	r0, [sp, #12]
 800dd40:	b2e4      	uxtb	r4, r4
 800dd42:	9402      	str	r4, [sp, #8]
 800dd44:	2300      	movs	r3, #0
 800dd46:	9301      	str	r3, [sp, #4]
 800dd48:	2308      	movs	r3, #8
 800dd4a:	9300      	str	r3, [sp, #0]
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	4632      	mov	r2, r6
 800dd50:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800dd52:	b004      	add	sp, #16
 800dd54:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800dd56:	4b0a      	ldr	r3, [pc, #40]	@ (800dd80 <GetTimeOnAir+0x60>)
 800dd58:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	9303      	str	r3, [sp, #12]
 800dd5e:	b2e4      	uxtb	r4, r4
 800dd60:	9402      	str	r4, [sp, #8]
 800dd62:	2000      	movs	r0, #0
 800dd64:	9001      	str	r0, [sp, #4]
 800dd66:	2305      	movs	r3, #5
 800dd68:	9300      	str	r3, [sp, #0]
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dd70:	fb06 f202 	mul.w	r2, r6, r2
 800dd74:	47a8      	blx	r5
 800dd76:	e7ec      	b.n	800dd52 <GetTimeOnAir+0x32>
 800dd78:	08013784 	.word	0x08013784
 800dd7c:	08013764 	.word	0x08013764
 800dd80:	08013b98 	.word	0x08013b98

0800dd84 <RegionEU433GetPhyParam>:
#endif /* REGION_EU433 */

PhyParam_t RegionEU433GetPhyParam( GetPhyParams_t* getPhy )
{
 800dd84:	b500      	push	{lr}
 800dd86:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800dd88:	2300      	movs	r3, #0
 800dd8a:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU433 )
    switch( getPhy->Attribute )
 800dd8c:	7803      	ldrb	r3, [r0, #0]
 800dd8e:	3b0b      	subs	r3, #11
 800dd90:	2b2d      	cmp	r3, #45	@ 0x2d
 800dd92:	d82f      	bhi.n	800ddf4 <RegionEU433GetPhyParam+0x70>
 800dd94:	e8df f003 	tbb	[pc, r3]
 800dd98:	3f393633 	.word	0x3f393633
 800dd9c:	4d49452e 	.word	0x4d49452e
 800dda0:	2e595551 	.word	0x2e595551
 800dda4:	6b652e62 	.word	0x6b652e62
 800dda8:	2e2e7471 	.word	0x2e2e7471
 800ddac:	2e177b78 	.word	0x2e177b78
 800ddb0:	2e2e2e2e 	.word	0x2e2e2e2e
 800ddb4:	2e2e2e2e 	.word	0x2e2e2e2e
 800ddb8:	2e2e2e2e 	.word	0x2e2e2e2e
 800ddbc:	2e88817e 	.word	0x2e88817e
 800ddc0:	2e8e8b2e 	.word	0x2e8e8b2e
 800ddc4:	9791      	.short	0x9791
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800ddc6:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800ddca:	f88d 3004 	strb.w	r3, [sp, #4]
 800ddce:	2307      	movs	r3, #7
 800ddd0:	f88d 3005 	strb.w	r3, [sp, #5]
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	f88d 3006 	strb.w	r3, [sp, #6]
 800ddda:	2310      	movs	r3, #16
 800dddc:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU433_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU433_TX_MIN_DATARATE,
                .NbChannels = EU433_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800dde0:	4b3c      	ldr	r3, [pc, #240]	@ (800ded4 <RegionEU433GetPhyParam+0x150>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f503 7258 	add.w	r2, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800dde8:	9202      	str	r2, [sp, #8]
 800ddea:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800ddec:	a801      	add	r0, sp, #4
 800ddee:	f7ff ff1c 	bl	800dc2a <RegionCommonGetNextLowerTxDr>
 800ddf2:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU433 */
    return phyParam;
 800ddf4:	9804      	ldr	r0, [sp, #16]
 800ddf6:	9005      	str	r0, [sp, #20]
}
 800ddf8:	b007      	add	sp, #28
 800ddfa:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800ddfe:	2340      	movs	r3, #64	@ 0x40
 800de00:	9304      	str	r3, [sp, #16]
            break;
 800de02:	e7f7      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800de04:	2320      	movs	r3, #32
 800de06:	9304      	str	r3, [sp, #16]
            break;
 800de08:	e7f4      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU433[getPhy->Datarate];
 800de0a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800de0e:	4a32      	ldr	r2, [pc, #200]	@ (800ded8 <RegionEU433GetPhyParam+0x154>)
 800de10:	5cd3      	ldrb	r3, [r2, r3]
 800de12:	9304      	str	r3, [sp, #16]
            break;
 800de14:	e7ee      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU433[getPhy->Datarate];
 800de16:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800de1a:	4a30      	ldr	r2, [pc, #192]	@ (800dedc <RegionEU433GetPhyParam+0x158>)
 800de1c:	5cd3      	ldrb	r3, [r2, r3]
 800de1e:	9304      	str	r3, [sp, #16]
            break;
 800de20:	e7e8      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_MAX_RX_WINDOW;
 800de22:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800de26:	9304      	str	r3, [sp, #16]
            break;
 800de28:	e7e4      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800de2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800de2e:	9304      	str	r3, [sp, #16]
            break;
 800de30:	e7e0      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800de32:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800de36:	9304      	str	r3, [sp, #16]
            break;
 800de38:	e7dc      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800de3a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800de3e:	9304      	str	r3, [sp, #16]
            break;
 800de40:	e7d8      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800de42:	f241 7370 	movw	r3, #6000	@ 0x1770
 800de46:	9304      	str	r3, [sp, #16]
            break;
 800de48:	e7d4      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800de4a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800de4e:	4824      	ldr	r0, [pc, #144]	@ (800dee0 <RegionEU433GetPhyParam+0x15c>)
 800de50:	f002 fa22 	bl	8010298 <randr>
 800de54:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 800de58:	9004      	str	r0, [sp, #16]
            break;
 800de5a:	e7cb      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_RX_WND_2_FREQ;
 800de5c:	4b21      	ldr	r3, [pc, #132]	@ (800dee4 <RegionEU433GetPhyParam+0x160>)
 800de5e:	9304      	str	r3, [sp, #16]
            break;
 800de60:	e7c8      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800de62:	4b1c      	ldr	r3, [pc, #112]	@ (800ded4 <RegionEU433GetPhyParam+0x150>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800de6a:	9304      	str	r3, [sp, #16]
            break;
 800de6c:	e7c2      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800de6e:	4b19      	ldr	r3, [pc, #100]	@ (800ded4 <RegionEU433GetPhyParam+0x150>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 800de76:	9304      	str	r3, [sp, #16]
            break;
 800de78:	e7bc      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_MAX_NB_CHANNELS;
 800de7a:	2310      	movs	r3, #16
 800de7c:	9304      	str	r3, [sp, #16]
            break;
 800de7e:	e7b9      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800de80:	4b14      	ldr	r3, [pc, #80]	@ (800ded4 <RegionEU433GetPhyParam+0x150>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	9304      	str	r3, [sp, #16]
            break;
 800de86:	e7b5      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.fValue = EU433_DEFAULT_MAX_EIRP;
 800de88:	4b17      	ldr	r3, [pc, #92]	@ (800dee8 <RegionEU433GetPhyParam+0x164>)
 800de8a:	9304      	str	r3, [sp, #16]
            break;
 800de8c:	e7b2      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.fValue = EU433_DEFAULT_ANTENNA_GAIN;
 800de8e:	4b17      	ldr	r3, [pc, #92]	@ (800deec <RegionEU433GetPhyParam+0x168>)
 800de90:	9304      	str	r3, [sp, #16]
            break;
 800de92:	e7af      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_BEACON_CHANNEL_FREQ;
 800de94:	4b13      	ldr	r3, [pc, #76]	@ (800dee4 <RegionEU433GetPhyParam+0x160>)
 800de96:	9304      	str	r3, [sp, #16]
            break;
 800de98:	e7ac      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU433_BEACON_SIZE;
 800de9a:	2311      	movs	r3, #17
 800de9c:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU433_RFU1_SIZE;
 800dea0:	2301      	movs	r3, #1
 800dea2:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800dea6:	e7a5      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_BEACON_CHANNEL_DR;
 800dea8:	2303      	movs	r3, #3
 800deaa:	9304      	str	r3, [sp, #16]
            break;
 800deac:	e7a2      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_PING_SLOT_CHANNEL_FREQ;
 800deae:	4b0d      	ldr	r3, [pc, #52]	@ (800dee4 <RegionEU433GetPhyParam+0x160>)
 800deb0:	9304      	str	r3, [sp, #16]
            break;
 800deb2:	e79f      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_PING_SLOT_CHANNEL_DR;
 800deb4:	2303      	movs	r3, #3
 800deb6:	9304      	str	r3, [sp, #16]
            break;
 800deb8:	e79c      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = DataratesEU433[getPhy->Datarate];
 800deba:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800debe:	4a0c      	ldr	r2, [pc, #48]	@ (800def0 <RegionEU433GetPhyParam+0x16c>)
 800dec0:	5cd3      	ldrb	r3, [r2, r3]
 800dec2:	9304      	str	r3, [sp, #16]
            break;
 800dec4:	e796      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU433 );
 800dec6:	490b      	ldr	r1, [pc, #44]	@ (800def4 <RegionEU433GetPhyParam+0x170>)
 800dec8:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800decc:	f7ff fed0 	bl	800dc70 <RegionCommonGetBandwidth>
 800ded0:	9004      	str	r0, [sp, #16]
            break;
 800ded2:	e78f      	b.n	800ddf4 <RegionEU433GetPhyParam+0x70>
 800ded4:	20001644 	.word	0x20001644
 800ded8:	0801375c 	.word	0x0801375c
 800dedc:	08013754 	.word	0x08013754
 800dee0:	fffffc18 	.word	0xfffffc18
 800dee4:	19e87628 	.word	0x19e87628
 800dee8:	41426666 	.word	0x41426666
 800deec:	4009999a 	.word	0x4009999a
 800def0:	08013784 	.word	0x08013784
 800def4:	08013764 	.word	0x08013764

0800def8 <RegionEU433SetBandTxDone>:

void RegionEU433SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800def8:	b510      	push	{r4, lr}
 800defa:	b082      	sub	sp, #8
#if defined( REGION_EU433 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800defc:	4b0b      	ldr	r3, [pc, #44]	@ (800df2c <RegionEU433SetBandTxDone+0x34>)
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	7803      	ldrb	r3, [r0, #0]
 800df02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800df06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df0a:	7a5b      	ldrb	r3, [r3, #9]
 800df0c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800df10:	4b07      	ldr	r3, [pc, #28]	@ (800df30 <RegionEU433SetBandTxDone+0x38>)
 800df12:	681c      	ldr	r4, [r3, #0]
 800df14:	6903      	ldr	r3, [r0, #16]
 800df16:	9300      	str	r3, [sp, #0]
 800df18:	68c3      	ldr	r3, [r0, #12]
 800df1a:	7842      	ldrb	r2, [r0, #1]
 800df1c:	6881      	ldr	r1, [r0, #8]
 800df1e:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800df22:	f7ff fc89 	bl	800d838 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU433 */
}
 800df26:	b002      	add	sp, #8
 800df28:	bd10      	pop	{r4, pc}
 800df2a:	bf00      	nop
 800df2c:	20001644 	.word	0x20001644
 800df30:	20001640 	.word	0x20001640

0800df34 <RegionEU433InitDefaults>:

void RegionEU433InitDefaults( InitDefaultsParams_t* params )
{
 800df34:	b510      	push	{r4, lr}
 800df36:	b086      	sub	sp, #24
#if defined( REGION_EU433 )
    Band_t bands[EU433_MAX_NB_BANDS] =
 800df38:	2364      	movs	r3, #100	@ 0x64
 800df3a:	f8ad 3000 	strh.w	r3, [sp]
 800df3e:	2300      	movs	r3, #0
 800df40:	f88d 3002 	strb.w	r3, [sp, #2]
 800df44:	9301      	str	r3, [sp, #4]
 800df46:	9302      	str	r3, [sp, #8]
 800df48:	9303      	str	r3, [sp, #12]
 800df4a:	9304      	str	r3, [sp, #16]
 800df4c:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        EU433_BAND0
    };

    switch( params->Type )
 800df50:	7b03      	ldrb	r3, [r0, #12]
 800df52:	2b01      	cmp	r3, #1
 800df54:	d031      	beq.n	800dfba <RegionEU433InitDefaults+0x86>
 800df56:	2b02      	cmp	r3, #2
 800df58:	d03e      	beq.n	800dfd8 <RegionEU433InitDefaults+0xa4>
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d13a      	bne.n	800dfd4 <RegionEU433InitDefaults+0xa0>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800df5e:	6803      	ldr	r3, [r0, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d037      	beq.n	800dfd4 <RegionEU433InitDefaults+0xa0>
 800df64:	6843      	ldr	r3, [r0, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d034      	beq.n	800dfd4 <RegionEU433InitDefaults+0xa0>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU433_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800df6a:	4c20      	ldr	r4, [pc, #128]	@ (800dfec <RegionEU433InitDefaults+0xb8>)
 800df6c:	6023      	str	r3, [r4, #0]
            RegionBands = (Band_t*) params->Bands;
 800df6e:	6880      	ldr	r0, [r0, #8]
 800df70:	4b1f      	ldr	r3, [pc, #124]	@ (800dff0 <RegionEU433InitDefaults+0xbc>)
 800df72:	6018      	str	r0, [r3, #0]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU433_MAX_NB_BANDS );
 800df74:	2218      	movs	r2, #24
 800df76:	4669      	mov	r1, sp
 800df78:	f002 f99b 	bl	80102b2 <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU433_LC1;
 800df7c:	6824      	ldr	r4, [r4, #0]
 800df7e:	4b1d      	ldr	r3, [pc, #116]	@ (800dff4 <RegionEU433InitDefaults+0xc0>)
 800df80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU433_LC2;
 800df88:	f104 0c0c 	add.w	ip, r4, #12
 800df8c:	f103 020c 	add.w	r2, r3, #12
 800df90:	ca07      	ldmia	r2, {r0, r1, r2}
 800df92:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU433_LC3;
 800df96:	f104 0c18 	add.w	ip, r4, #24
 800df9a:	3318      	adds	r3, #24
 800df9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dfa0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}

            // Default ChannelsMask
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800dfa4:	2307      	movs	r3, #7
 800dfa6:	f8a4 336c 	strh.w	r3, [r4, #876]	@ 0x36c

            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800dfaa:	2201      	movs	r2, #1
 800dfac:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
 800dfb0:	f504 7058 	add.w	r0, r4, #864	@ 0x360
 800dfb4:	f7ff fc31 	bl	800d81a <RegionCommonChanMaskCopy>
            break;
 800dfb8:	e00c      	b.n	800dfd4 <RegionEU433InitDefaults+0xa0>
        }
        case INIT_TYPE_RESET_TO_DEFAULT_CHANNELS:
        {
            // Reset Channels Rx1Frequency to default 0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800dfba:	4b0c      	ldr	r3, [pc, #48]	@ (800dfec <RegionEU433InitDefaults+0xb8>)
 800dfbc:	6818      	ldr	r0, [r3, #0]
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800dfc2:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800dfc4:	61c3      	str	r3, [r0, #28]
            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	f500 715b 	add.w	r1, r0, #876	@ 0x36c
 800dfcc:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800dfd0:	f7ff fc23 	bl	800d81a <RegionCommonChanMaskCopy>
        {
            break;
        }
    }
#endif /* REGION_EU433 */
}
 800dfd4:	b006      	add	sp, #24
 800dfd6:	bd10      	pop	{r4, pc}
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800dfd8:	4b04      	ldr	r3, [pc, #16]	@ (800dfec <RegionEU433InitDefaults+0xb8>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 800dfe0:	f8b3 136c 	ldrh.w	r1, [r3, #876]	@ 0x36c
 800dfe4:	430a      	orrs	r2, r1
 800dfe6:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 800dfea:	e7f3      	b.n	800dfd4 <RegionEU433InitDefaults+0xa0>
 800dfec:	20001644 	.word	0x20001644
 800dff0:	20001640 	.word	0x20001640
 800dff4:	08012d00 	.word	0x08012d00

0800dff8 <RegionEU433Verify>:

bool RegionEU433Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800dff8:	b508      	push	{r3, lr}
#if defined( REGION_EU433 )
    switch( phyAttribute )
 800dffa:	290a      	cmp	r1, #10
 800dffc:	d833      	bhi.n	800e066 <RegionEU433Verify+0x6e>
 800dffe:	e8df f001 	tbb	[pc, r1]
 800e002:	3206      	.short	0x3206
 800e004:	0a323232 	.word	0x0a323232
 800e008:	28321e14 	.word	0x28321e14
 800e00c:	28          	.byte	0x28
 800e00d:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800e00e:	6800      	ldr	r0, [r0, #0]
 800e010:	f7ff fe72 	bl	800dcf8 <VerifyRfFreq>
 800e014:	e028      	b.n	800e068 <RegionEU433Verify+0x70>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE );
 800e016:	2207      	movs	r2, #7
 800e018:	2100      	movs	r1, #0
 800e01a:	f990 0000 	ldrsb.w	r0, [r0]
 800e01e:	f7ff fb88 	bl	800d732 <RegionCommonValueInRange>
 800e022:	3800      	subs	r0, #0
 800e024:	bf18      	it	ne
 800e026:	2001      	movne	r0, #1
 800e028:	e01e      	b.n	800e068 <RegionEU433Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800e02a:	2205      	movs	r2, #5
 800e02c:	2100      	movs	r1, #0
 800e02e:	f990 0000 	ldrsb.w	r0, [r0]
 800e032:	f7ff fb7e 	bl	800d732 <RegionCommonValueInRange>
 800e036:	3800      	subs	r0, #0
 800e038:	bf18      	it	ne
 800e03a:	2001      	movne	r0, #1
 800e03c:	e014      	b.n	800e068 <RegionEU433Verify+0x70>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU433_RX_MIN_DATARATE, EU433_RX_MAX_DATARATE );
 800e03e:	2207      	movs	r2, #7
 800e040:	2100      	movs	r1, #0
 800e042:	f990 0000 	ldrsb.w	r0, [r0]
 800e046:	f7ff fb74 	bl	800d732 <RegionCommonValueInRange>
 800e04a:	3800      	subs	r0, #0
 800e04c:	bf18      	it	ne
 800e04e:	2001      	movne	r0, #1
 800e050:	e00a      	b.n	800e068 <RegionEU433Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU433_MAX_TX_POWER, EU433_MIN_TX_POWER );
 800e052:	2205      	movs	r2, #5
 800e054:	2100      	movs	r1, #0
 800e056:	f990 0000 	ldrsb.w	r0, [r0]
 800e05a:	f7ff fb6a 	bl	800d732 <RegionCommonValueInRange>
 800e05e:	3800      	subs	r0, #0
 800e060:	bf18      	it	ne
 800e062:	2001      	movne	r0, #1
 800e064:	e000      	b.n	800e068 <RegionEU433Verify+0x70>
    switch( phyAttribute )
 800e066:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_EU433 */
}
 800e068:	bd08      	pop	{r3, pc}
	...

0800e06c <RegionEU433ChanMaskSet>:
    }
#endif /* REGION_EU433 */
}

bool RegionEU433ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800e06c:	b508      	push	{r3, lr}
#if defined( REGION_EU433 )
    switch( chanMaskSet->ChannelsMaskType )
 800e06e:	7903      	ldrb	r3, [r0, #4]
 800e070:	b11b      	cbz	r3, 800e07a <RegionEU433ChanMaskSet+0xe>
 800e072:	2b01      	cmp	r3, #1
 800e074:	d00b      	beq.n	800e08e <RegionEU433ChanMaskSet+0x22>
 800e076:	2000      	movs	r0, #0
 800e078:	e008      	b.n	800e08c <RegionEU433ChanMaskSet+0x20>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800e07a:	4b0a      	ldr	r3, [pc, #40]	@ (800e0a4 <RegionEU433ChanMaskSet+0x38>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2201      	movs	r2, #1
 800e080:	6801      	ldr	r1, [r0, #0]
 800e082:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 800e086:	f7ff fbc8 	bl	800d81a <RegionCommonChanMaskCopy>
            break;
        }
        default:
            return false;
    }
    return true;
 800e08a:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU433 */
}
 800e08c:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800e08e:	4b05      	ldr	r3, [pc, #20]	@ (800e0a4 <RegionEU433ChanMaskSet+0x38>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2201      	movs	r2, #1
 800e094:	6801      	ldr	r1, [r0, #0]
 800e096:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 800e09a:	f7ff fbbe 	bl	800d81a <RegionCommonChanMaskCopy>
    return true;
 800e09e:	2001      	movs	r0, #1
            break;
 800e0a0:	e7f4      	b.n	800e08c <RegionEU433ChanMaskSet+0x20>
 800e0a2:	bf00      	nop
 800e0a4:	20001644 	.word	0x20001644

0800e0a8 <RegionEU433ComputeRxWindowParameters>:

void RegionEU433ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800e0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0aa:	b083      	sub	sp, #12
 800e0ac:	460e      	mov	r6, r1
 800e0ae:	4617      	mov	r7, r2
 800e0b0:	461c      	mov	r4, r3
#if defined( REGION_EU433 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU433_RX_MAX_DATARATE );
 800e0b2:	2807      	cmp	r0, #7
 800e0b4:	bfa8      	it	ge
 800e0b6:	2007      	movge	r0, #7
 800e0b8:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU433 );
 800e0ba:	4913      	ldr	r1, [pc, #76]	@ (800e108 <RegionEU433ComputeRxWindowParameters+0x60>)
 800e0bc:	f7ff fdd8 	bl	800dc70 <RegionCommonGetBandwidth>
 800e0c0:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800e0c2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e0c6:	2b07      	cmp	r3, #7
 800e0c8:	d017      	beq.n	800e0fa <RegionEU433ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU433[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU433[rxConfigParams->Datarate], BandwidthsEU433[rxConfigParams->Datarate] );
 800e0ca:	4a0f      	ldr	r2, [pc, #60]	@ (800e108 <RegionEU433ComputeRxWindowParameters+0x60>)
 800e0cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e0d0:	4a0e      	ldr	r2, [pc, #56]	@ (800e10c <RegionEU433ComputeRxWindowParameters+0x64>)
 800e0d2:	5cd0      	ldrb	r0, [r2, r3]
 800e0d4:	f7ff fc9c 	bl	800da10 <RegionCommonComputeSymbolTimeLoRa>
 800e0d8:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800e0da:	4b0d      	ldr	r3, [pc, #52]	@ (800e110 <RegionEU433ComputeRxWindowParameters+0x68>)
 800e0dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e0de:	4798      	blx	r3
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	f104 020c 	add.w	r2, r4, #12
 800e0e6:	9201      	str	r2, [sp, #4]
 800e0e8:	3408      	adds	r4, #8
 800e0ea:	9400      	str	r4, [sp, #0]
 800e0ec:	463a      	mov	r2, r7
 800e0ee:	4631      	mov	r1, r6
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	f7ff fc9b 	bl	800da2c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU433 */
}
 800e0f6:	b003      	add	sp, #12
 800e0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU433[rxConfigParams->Datarate] );
 800e0fa:	4a04      	ldr	r2, [pc, #16]	@ (800e10c <RegionEU433ComputeRxWindowParameters+0x64>)
 800e0fc:	5cd0      	ldrb	r0, [r2, r3]
 800e0fe:	f7ff fc8f 	bl	800da20 <RegionCommonComputeSymbolTimeFsk>
 800e102:	4605      	mov	r5, r0
 800e104:	e7e9      	b.n	800e0da <RegionEU433ComputeRxWindowParameters+0x32>
 800e106:	bf00      	nop
 800e108:	08013764 	.word	0x08013764
 800e10c:	08013784 	.word	0x08013784
 800e110:	08013b98 	.word	0x08013b98

0800e114 <RegionEU433RxConfig>:

bool RegionEU433RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800e114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e118:	b08a      	sub	sp, #40	@ 0x28
 800e11a:	4604      	mov	r4, r0
 800e11c:	460f      	mov	r7, r1
#if defined( REGION_EU433 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800e11e:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800e122:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800e126:	4b37      	ldr	r3, [pc, #220]	@ (800e204 <RegionEU433RxConfig+0xf0>)
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	4798      	blx	r3
 800e12c:	2800      	cmp	r0, #0
 800e12e:	d167      	bne.n	800e200 <RegionEU433RxConfig+0xec>
 800e130:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800e132:	7ce3      	ldrb	r3, [r4, #19]
 800e134:	b983      	cbnz	r3, 800e158 <RegionEU433RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800e136:	4b34      	ldr	r3, [pc, #208]	@ (800e208 <RegionEU433RxConfig+0xf4>)
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	7823      	ldrb	r3, [r4, #0]
 800e13c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e140:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800e144:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e148:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e14c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800e150:	f1b8 0f00 	cmp.w	r8, #0
 800e154:	d100      	bne.n	800e158 <RegionEU433RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800e156:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU433[dr];
 800e158:	4b2c      	ldr	r3, [pc, #176]	@ (800e20c <RegionEU433RxConfig+0xf8>)
 800e15a:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800e15e:	4b29      	ldr	r3, [pc, #164]	@ (800e204 <RegionEU433RxConfig+0xf0>)
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	4640      	mov	r0, r8
 800e164:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800e166:	2d07      	cmp	r5, #7
 800e168:	d02b      	beq.n	800e1c2 <RegionEU433RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800e16a:	4b26      	ldr	r3, [pc, #152]	@ (800e204 <RegionEU433RxConfig+0xf0>)
 800e16c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800e170:	7ca3      	ldrb	r3, [r4, #18]
 800e172:	9309      	str	r3, [sp, #36]	@ 0x24
 800e174:	2601      	movs	r6, #1
 800e176:	9608      	str	r6, [sp, #32]
 800e178:	2300      	movs	r3, #0
 800e17a:	9307      	str	r3, [sp, #28]
 800e17c:	9306      	str	r3, [sp, #24]
 800e17e:	9305      	str	r3, [sp, #20]
 800e180:	9304      	str	r3, [sp, #16]
 800e182:	9303      	str	r3, [sp, #12]
 800e184:	8922      	ldrh	r2, [r4, #8]
 800e186:	9202      	str	r2, [sp, #8]
 800e188:	2208      	movs	r2, #8
 800e18a:	9201      	str	r2, [sp, #4]
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	4633      	mov	r3, r6
 800e190:	464a      	mov	r2, r9
 800e192:	78a1      	ldrb	r1, [r4, #2]
 800e194:	4630      	mov	r0, r6
 800e196:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 800e198:	7c63      	ldrb	r3, [r4, #17]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d02d      	beq.n	800e1fa <RegionEU433RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU433[dr];
 800e19e:	4b1c      	ldr	r3, [pc, #112]	@ (800e210 <RegionEU433RxConfig+0xfc>)
 800e1a0:	5d59      	ldrb	r1, [r3, r5]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU433[dr];
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800e1a2:	4b18      	ldr	r3, [pc, #96]	@ (800e204 <RegionEU433RxConfig+0xf0>)
 800e1a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1a6:	310d      	adds	r1, #13
 800e1a8:	b2c9      	uxtb	r1, r1
 800e1aa:	4630      	mov	r0, r6
 800e1ac:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800e1ae:	462a      	mov	r2, r5
 800e1b0:	4641      	mov	r1, r8
 800e1b2:	7ce0      	ldrb	r0, [r4, #19]
 800e1b4:	f7ff fd6e 	bl	800dc94 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800e1b8:	703d      	strb	r5, [r7, #0]
    return true;
 800e1ba:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU433 */
}
 800e1bc:	b00a      	add	sp, #40	@ 0x28
 800e1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800e1c2:	4b10      	ldr	r3, [pc, #64]	@ (800e204 <RegionEU433RxConfig+0xf0>)
 800e1c4:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800e1c8:	7ca3      	ldrb	r3, [r4, #18]
 800e1ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	9008      	str	r0, [sp, #32]
 800e1d0:	9007      	str	r0, [sp, #28]
 800e1d2:	9006      	str	r0, [sp, #24]
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	9305      	str	r3, [sp, #20]
 800e1d8:	9004      	str	r0, [sp, #16]
 800e1da:	9003      	str	r0, [sp, #12]
 800e1dc:	8923      	ldrh	r3, [r4, #8]
 800e1de:	9302      	str	r3, [sp, #8]
 800e1e0:	2305      	movs	r3, #5
 800e1e2:	9301      	str	r3, [sp, #4]
 800e1e4:	4b0b      	ldr	r3, [pc, #44]	@ (800e214 <RegionEU433RxConfig+0x100>)
 800e1e6:	9300      	str	r3, [sp, #0]
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e1ee:	fb02 f209 	mul.w	r2, r2, r9
 800e1f2:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e1f6:	47d0      	blx	sl
 800e1f8:	e7ce      	b.n	800e198 <RegionEU433RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU433[dr];
 800e1fa:	4b07      	ldr	r3, [pc, #28]	@ (800e218 <RegionEU433RxConfig+0x104>)
 800e1fc:	5d59      	ldrb	r1, [r3, r5]
 800e1fe:	e7d0      	b.n	800e1a2 <RegionEU433RxConfig+0x8e>
        return false;
 800e200:	2000      	movs	r0, #0
 800e202:	e7db      	b.n	800e1bc <RegionEU433RxConfig+0xa8>
 800e204:	08013b98 	.word	0x08013b98
 800e208:	20001644 	.word	0x20001644
 800e20c:	08013784 	.word	0x08013784
 800e210:	08013754 	.word	0x08013754
 800e214:	00014585 	.word	0x00014585
 800e218:	0801375c 	.word	0x0801375c

0800e21c <RegionEU433TxConfig>:

bool RegionEU433TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800e21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e220:	b08d      	sub	sp, #52	@ 0x34
 800e222:	4604      	mov	r4, r0
 800e224:	460f      	mov	r7, r1
 800e226:	4690      	mov	r8, r2
#if defined( REGION_EU433 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU433[txConfig->Datarate];
 800e228:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e22c:	4a42      	ldr	r2, [pc, #264]	@ (800e338 <RegionEU433TxConfig+0x11c>)
 800e22e:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800e232:	4d42      	ldr	r5, [pc, #264]	@ (800e33c <RegionEU433TxConfig+0x120>)
 800e234:	682a      	ldr	r2, [r5, #0]
 800e236:	7803      	ldrb	r3, [r0, #0]
 800e238:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e23c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e240:	7a53      	ldrb	r3, [r2, #9]
 800e242:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e246:	4a3e      	ldr	r2, [pc, #248]	@ (800e340 <RegionEU433TxConfig+0x124>)
 800e248:	6812      	ldr	r2, [r2, #0]
 800e24a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e24e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800e252:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800e256:	f7ff fd07 	bl	800dc68 <RegionCommonLimitTxPower>
 800e25a:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU433 );
 800e25c:	4939      	ldr	r1, [pc, #228]	@ (800e344 <RegionEU433TxConfig+0x128>)
 800e25e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e262:	f7ff fd05 	bl	800dc70 <RegionCommonGetBandwidth>
 800e266:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800e268:	68a2      	ldr	r2, [r4, #8]
 800e26a:	6861      	ldr	r1, [r4, #4]
 800e26c:	4630      	mov	r0, r6
 800e26e:	f7ff fc19 	bl	800daa4 <RegionCommonComputeTxPower>
 800e272:	900b      	str	r0, [sp, #44]	@ 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800e274:	4b34      	ldr	r3, [pc, #208]	@ (800e348 <RegionEU433TxConfig+0x12c>)
 800e276:	68da      	ldr	r2, [r3, #12]
 800e278:	6829      	ldr	r1, [r5, #0]
 800e27a:	7823      	ldrb	r3, [r4, #0]
 800e27c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e280:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800e284:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800e286:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e28a:	2b07      	cmp	r3, #7
 800e28c:	d031      	beq.n	800e2f2 <RegionEU433TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800e28e:	4b2e      	ldr	r3, [pc, #184]	@ (800e348 <RegionEU433TxConfig+0x12c>)
 800e290:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800e294:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800e298:	9308      	str	r3, [sp, #32]
 800e29a:	2200      	movs	r2, #0
 800e29c:	9207      	str	r2, [sp, #28]
 800e29e:	9206      	str	r2, [sp, #24]
 800e2a0:	9205      	str	r2, [sp, #20]
 800e2a2:	2501      	movs	r5, #1
 800e2a4:	9504      	str	r5, [sp, #16]
 800e2a6:	9203      	str	r2, [sp, #12]
 800e2a8:	2308      	movs	r3, #8
 800e2aa:	9302      	str	r3, [sp, #8]
 800e2ac:	9501      	str	r5, [sp, #4]
 800e2ae:	f8cd a000 	str.w	sl, [sp]
 800e2b2:	464b      	mov	r3, r9
 800e2b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800e2ba:	4b20      	ldr	r3, [pc, #128]	@ (800e33c <RegionEU433TxConfig+0x120>)
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	7823      	ldrb	r3, [r4, #0]
 800e2c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e2c4:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800e2c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e2cc:	f7ff fd04 	bl	800dcd8 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800e2d0:	89a1      	ldrh	r1, [r4, #12]
 800e2d2:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e2d6:	f7ff fd23 	bl	800dd20 <GetTimeOnAir>
 800e2da:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800e2de:	4b1a      	ldr	r3, [pc, #104]	@ (800e348 <RegionEU433TxConfig+0x12c>)
 800e2e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2e2:	7b21      	ldrb	r1, [r4, #12]
 800e2e4:	4628      	mov	r0, r5
 800e2e6:	4798      	blx	r3

    *txPower = txPowerLimited;
 800e2e8:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU433 */
}
 800e2ea:	2001      	movs	r0, #1
 800e2ec:	b00d      	add	sp, #52	@ 0x34
 800e2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800e2f2:	4b15      	ldr	r3, [pc, #84]	@ (800e348 <RegionEU433TxConfig+0x12c>)
 800e2f4:	69dd      	ldr	r5, [r3, #28]
 800e2f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e2fa:	fb03 f30a 	mul.w	r3, r3, sl
 800e2fe:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800e302:	9208      	str	r2, [sp, #32]
 800e304:	f04f 0a00 	mov.w	sl, #0
 800e308:	f8cd a01c 	str.w	sl, [sp, #28]
 800e30c:	f8cd a018 	str.w	sl, [sp, #24]
 800e310:	f8cd a014 	str.w	sl, [sp, #20]
 800e314:	2201      	movs	r2, #1
 800e316:	9204      	str	r2, [sp, #16]
 800e318:	f8cd a00c 	str.w	sl, [sp, #12]
 800e31c:	2205      	movs	r2, #5
 800e31e:	9202      	str	r2, [sp, #8]
 800e320:	f8cd a004 	str.w	sl, [sp, #4]
 800e324:	9300      	str	r3, [sp, #0]
 800e326:	464b      	mov	r3, r9
 800e328:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800e32c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e32e:	4650      	mov	r0, sl
 800e330:	47a8      	blx	r5
        modem = MODEM_FSK;
 800e332:	4655      	mov	r5, sl
 800e334:	e7c1      	b.n	800e2ba <RegionEU433TxConfig+0x9e>
 800e336:	bf00      	nop
 800e338:	08013784 	.word	0x08013784
 800e33c:	20001644 	.word	0x20001644
 800e340:	20001640 	.word	0x20001640
 800e344:	08013764 	.word	0x08013764
 800e348:	08013b98 	.word	0x08013b98

0800e34c <RegionEU433LinkAdrReq>:

uint8_t RegionEU433LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800e34c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e350:	b08f      	sub	sp, #60	@ 0x3c
 800e352:	4605      	mov	r5, r0
 800e354:	4689      	mov	r9, r1
 800e356:	4690      	mov	r8, r2
 800e358:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU433 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800e35a:	2400      	movs	r4, #0
 800e35c:	940c      	str	r4, [sp, #48]	@ 0x30
 800e35e:	f8ad 4034 	strh.w	r4, [sp, #52]	@ 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800e362:	f8ad 402e 	strh.w	r4, [sp, #46]	@ 0x2e
    uint8_t status = 0x07;
 800e366:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e368:	e030      	b.n	800e3cc <RegionEU433LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU433_MAX_NB_CHANNELS; i++ )
 800e36a:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800e36e:	2607      	movs	r6, #7
 800e370:	e012      	b.n	800e398 <RegionEU433LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800e372:	4a58      	ldr	r2, [pc, #352]	@ (800e4d4 <RegionEU433LinkAdrReq+0x188>)
 800e374:	6812      	ldr	r2, [r2, #0]
 800e376:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800e37a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e37e:	b13a      	cbz	r2, 800e390 <RegionEU433LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800e380:	2201      	movs	r2, #1
 800e382:	fa02 f20c 	lsl.w	r2, r2, ip
 800e386:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800e38a:	430a      	orrs	r2, r1
 800e38c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
            for( uint8_t i = 0; i < EU433_MAX_NB_CHANNELS; i++ )
 800e390:	f10c 0c01 	add.w	ip, ip, #1
 800e394:	fa5f fc8c 	uxtb.w	ip, ip
 800e398:	f1bc 0f0f 	cmp.w	ip, #15
 800e39c:	d816      	bhi.n	800e3cc <RegionEU433LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800e39e:	2b06      	cmp	r3, #6
 800e3a0:	d0e7      	beq.n	800e372 <RegionEU433LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800e3a2:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 800e3a6:	fa4e fe0c 	asr.w	lr, lr, ip
 800e3aa:	f01e 0f01 	tst.w	lr, #1
 800e3ae:	d0ef      	beq.n	800e390 <RegionEU433LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800e3b0:	4a48      	ldr	r2, [pc, #288]	@ (800e4d4 <RegionEU433LinkAdrReq+0x188>)
 800e3b2:	6812      	ldr	r2, [r2, #0]
 800e3b4:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800e3b8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800e3bc:	2a00      	cmp	r2, #0
 800e3be:	d1e7      	bne.n	800e390 <RegionEU433LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800e3c0:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800e3c4:	e7e4      	b.n	800e390 <RegionEU433LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800e3c6:	2606      	movs	r6, #6
 800e3c8:	e000      	b.n	800e3cc <RegionEU433LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800e3ca:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e3cc:	7a2b      	ldrb	r3, [r5, #8]
 800e3ce:	42a3      	cmp	r3, r4
 800e3d0:	d919      	bls.n	800e406 <RegionEU433LinkAdrReq+0xba>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800e3d2:	6868      	ldr	r0, [r5, #4]
 800e3d4:	a90c      	add	r1, sp, #48	@ 0x30
 800e3d6:	4420      	add	r0, r4
 800e3d8:	f7ff faa0 	bl	800d91c <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800e3dc:	4603      	mov	r3, r0
 800e3de:	b190      	cbz	r0, 800e406 <RegionEU433LinkAdrReq+0xba>
        bytesProcessed += nextIndex;
 800e3e0:	4423      	add	r3, r4
 800e3e2:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 800e3e4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800e3e8:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800e3ec:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800e3f0:	b90b      	cbnz	r3, 800e3f6 <RegionEU433LinkAdrReq+0xaa>
 800e3f2:	2a00      	cmp	r2, #0
 800e3f4:	d0e7      	beq.n	800e3c6 <RegionEU433LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800e3f6:	1e5a      	subs	r2, r3, #1
 800e3f8:	b2d2      	uxtb	r2, r2
 800e3fa:	2a04      	cmp	r2, #4
 800e3fc:	d9e5      	bls.n	800e3ca <RegionEU433LinkAdrReq+0x7e>
 800e3fe:	2b06      	cmp	r3, #6
 800e400:	d9b3      	bls.n	800e36a <RegionEU433LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800e402:	2606      	movs	r6, #6
 800e404:	e7e2      	b.n	800e3cc <RegionEU433LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800e406:	2302      	movs	r3, #2
 800e408:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800e40c:	7a6b      	ldrb	r3, [r5, #9]
 800e40e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
    phyParam = RegionEU433GetPhyParam( &getPhy );
 800e412:	a80a      	add	r0, sp, #40	@ 0x28
 800e414:	f7ff fcb6 	bl	800dd84 <RegionEU433GetPhyParam>
 800e418:	9009      	str	r0, [sp, #36]	@ 0x24

    linkAdrVerifyParams.Status = status;
 800e41a:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800e41e:	7aab      	ldrb	r3, [r5, #10]
 800e420:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800e424:	f99d 3031 	ldrsb.w	r3, [sp, #49]	@ 0x31
 800e428:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800e42c:	f99d 3032 	ldrsb.w	r3, [sp, #50]	@ 0x32
 800e430:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800e434:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800e438:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800e43c:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800e440:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800e444:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800e448:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800e44c:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800e450:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU433_MAX_NB_CHANNELS;
 800e454:	2310      	movs	r3, #16
 800e456:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800e45a:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 800e45e:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800e460:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU433_TX_MAX_DATARATE;
 800e464:	2307      	movs	r3, #7
 800e466:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800e46a:	4b1a      	ldr	r3, [pc, #104]	@ (800e4d4 <RegionEU433LinkAdrReq+0x188>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	9307      	str	r3, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU433_MIN_TX_POWER;
 800e470:	2305      	movs	r3, #5
 800e472:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU433_MAX_TX_POWER;
 800e476:	2300      	movs	r3, #0
 800e478:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800e47c:	682b      	ldr	r3, [r5, #0]
 800e47e:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e480:	ab0c      	add	r3, sp, #48	@ 0x30
 800e482:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800e486:	f10d 0131 	add.w	r1, sp, #49	@ 0x31
 800e48a:	a801      	add	r0, sp, #4
 800e48c:	f7ff fa64 	bl	800d958 <RegionCommonLinkAdrReqVerifyParams>
 800e490:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800e492:	2807      	cmp	r0, #7
 800e494:	d010      	beq.n	800e4b8 <RegionEU433LinkAdrReq+0x16c>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800e496:	f99d 3031 	ldrsb.w	r3, [sp, #49]	@ 0x31
 800e49a:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800e49e:	f99d 3032 	ldrsb.w	r3, [sp, #50]	@ 0x32
 800e4a2:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800e4a6:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800e4aa:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800e4ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e4ae:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU433 */
    return status;
}
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	b00f      	add	sp, #60	@ 0x3c
 800e4b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800e4b8:	4e06      	ldr	r6, [pc, #24]	@ (800e4d4 <RegionEU433LinkAdrReq+0x188>)
 800e4ba:	6830      	ldr	r0, [r6, #0]
 800e4bc:	220c      	movs	r2, #12
 800e4be:	2100      	movs	r1, #0
 800e4c0:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800e4c4:	f001 ff0d 	bl	80102e2 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800e4c8:	6833      	ldr	r3, [r6, #0]
 800e4ca:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 800e4ce:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
 800e4d2:	e7e0      	b.n	800e496 <RegionEU433LinkAdrReq+0x14a>
 800e4d4:	20001644 	.word	0x20001644

0800e4d8 <RegionEU433RxParamSetupReq>:

uint8_t RegionEU433RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800e4d8:	b538      	push	{r3, r4, r5, lr}
 800e4da:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU433 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800e4dc:	6840      	ldr	r0, [r0, #4]
 800e4de:	f7ff fc0b 	bl	800dcf8 <VerifyRfFreq>
 800e4e2:	b1a0      	cbz	r0, 800e50e <RegionEU433RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 800e4e4:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU433_RX_MIN_DATARATE, EU433_RX_MAX_DATARATE ) == false )
 800e4e6:	2207      	movs	r2, #7
 800e4e8:	2100      	movs	r1, #0
 800e4ea:	f994 0000 	ldrsb.w	r0, [r4]
 800e4ee:	f7ff f920 	bl	800d732 <RegionCommonValueInRange>
 800e4f2:	b908      	cbnz	r0, 800e4f8 <RegionEU433RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800e4f4:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU433_MIN_RX1_DR_OFFSET, EU433_MAX_RX1_DR_OFFSET ) == false )
 800e4f8:	2205      	movs	r2, #5
 800e4fa:	2100      	movs	r1, #0
 800e4fc:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e500:	f7ff f917 	bl	800d732 <RegionCommonValueInRange>
 800e504:	b908      	cbnz	r0, 800e50a <RegionEU433RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800e506:	f005 05fb 	and.w	r5, r5, #251	@ 0xfb
    }

#endif /* REGION_EU433 */
    return status;
}
 800e50a:	4628      	mov	r0, r5
 800e50c:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800e50e:	2506      	movs	r5, #6
 800e510:	e7e9      	b.n	800e4e6 <RegionEU433RxParamSetupReq+0xe>

0800e512 <RegionEU433TxParamSetupReq>:

int8_t RegionEU433TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800e512:	f04f 30ff 	mov.w	r0, #4294967295
 800e516:	4770      	bx	lr

0800e518 <RegionEU433DlChannelReq>:
int8_t RegionEU433DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    uint8_t status = 0x03;

#if defined( REGION_EU433 )
    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 800e518:	7803      	ldrb	r3, [r0, #0]
 800e51a:	2b0f      	cmp	r3, #15
 800e51c:	d901      	bls.n	800e522 <RegionEU433DlChannelReq+0xa>
    {
        return 0;
 800e51e:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU433 */
    return status;
}
 800e520:	4770      	bx	lr
{
 800e522:	b510      	push	{r4, lr}
 800e524:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 800e526:	6840      	ldr	r0, [r0, #4]
 800e528:	f7ff fbe6 	bl	800dcf8 <VerifyRfFreq>
 800e52c:	b160      	cbz	r0, 800e548 <RegionEU433DlChannelReq+0x30>
    uint8_t status = 0x03;
 800e52e:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800e530:	4b0b      	ldr	r3, [pc, #44]	@ (800e560 <RegionEU433DlChannelReq+0x48>)
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	7823      	ldrb	r3, [r4, #0]
 800e536:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e53a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800e53e:	b929      	cbnz	r1, 800e54c <RegionEU433DlChannelReq+0x34>
        status &= 0xFD;
 800e540:	f000 00fd 	and.w	r0, r0, #253	@ 0xfd
    return status;
 800e544:	b240      	sxtb	r0, r0
}
 800e546:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800e548:	2002      	movs	r0, #2
 800e54a:	e7f1      	b.n	800e530 <RegionEU433DlChannelReq+0x18>
    if( status == 0x03 )
 800e54c:	2803      	cmp	r0, #3
 800e54e:	d1f9      	bne.n	800e544 <RegionEU433DlChannelReq+0x2c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800e550:	6861      	ldr	r1, [r4, #4]
 800e552:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e556:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e55a:	6051      	str	r1, [r2, #4]
 800e55c:	e7f2      	b.n	800e544 <RegionEU433DlChannelReq+0x2c>
 800e55e:	bf00      	nop
 800e560:	20001644 	.word	0x20001644

0800e564 <RegionEU433AlternateDr>:
#if defined( REGION_EU433 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU433 */
}
 800e564:	4770      	bx	lr
	...

0800e568 <RegionEU433NextChannel>:

LoRaMacStatus_t RegionEU433NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800e568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e56a:	b097      	sub	sp, #92	@ 0x5c
 800e56c:	4604      	mov	r4, r0
 800e56e:	460f      	mov	r7, r1
 800e570:	4616      	mov	r6, r2
 800e572:	461d      	mov	r5, r3
#if defined( REGION_EU433 )
    uint8_t nbEnabledChannels = 0;
 800e574:	2100      	movs	r1, #0
 800e576:	f88d 1057 	strb.w	r1, [sp, #87]	@ 0x57
    uint8_t nbRestrictedChannels = 0;
 800e57a:	f88d 1056 	strb.w	r1, [sp, #86]	@ 0x56
    uint8_t enabledChannels[EU433_MAX_NB_CHANNELS] = { 0 };
 800e57e:	9111      	str	r1, [sp, #68]	@ 0x44
 800e580:	9112      	str	r1, [sp, #72]	@ 0x48
 800e582:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e584:	9114      	str	r1, [sp, #80]	@ 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU433_JOIN_CHANNELS;
 800e586:	2307      	movs	r3, #7
 800e588:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800e58c:	4b34      	ldr	r3, [pc, #208]	@ (800e660 <RegionEU433NextChannel+0xf8>)
 800e58e:	6818      	ldr	r0, [r3, #0]
 800e590:	2201      	movs	r2, #1
 800e592:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800e596:	f7ff f92a 	bl	800d7ee <RegionCommonCountChannels>
 800e59a:	b938      	cbnz	r0, 800e5ac <RegionEU433NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800e59c:	4b30      	ldr	r3, [pc, #192]	@ (800e660 <RegionEU433NextChannel+0xf8>)
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	f8b2 3360 	ldrh.w	r3, [r2, #864]	@ 0x360
 800e5a4:	f043 0307 	orr.w	r3, r3, #7
 800e5a8:	f8a2 3360 	strh.w	r3, [r2, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800e5ac:	7a63      	ldrb	r3, [r4, #9]
 800e5ae:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800e5b2:	7a23      	ldrb	r3, [r4, #8]
 800e5b4:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e5b8:	4b29      	ldr	r3, [pc, #164]	@ (800e660 <RegionEU433NextChannel+0xf8>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f503 7258 	add.w	r2, r3, #864	@ 0x360
 800e5c0:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800e5c2:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
 800e5c4:	4b27      	ldr	r3, [pc, #156]	@ (800e664 <RegionEU433NextChannel+0xfc>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU433_MAX_NB_CHANNELS;
 800e5ca:	2310      	movs	r3, #16
 800e5cc:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800e5d0:	f10d 030a 	add.w	r3, sp, #10
 800e5d4:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800e5d6:	6823      	ldr	r3, [r4, #0]
 800e5d8:	9309      	str	r3, [sp, #36]	@ 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800e5da:	6863      	ldr	r3, [r4, #4]
 800e5dc:	930a      	str	r3, [sp, #40]	@ 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800e5de:	7aa3      	ldrb	r3, [r4, #10]
 800e5e0:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    identifyChannelsParam.MaxBands = EU433_MAX_NB_BANDS;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800e5ea:	ab0c      	add	r3, sp, #48	@ 0x30
 800e5ec:	f104 020c 	add.w	r2, r4, #12
 800e5f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e5f4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800e5f8:	7d23      	ldrb	r3, [r4, #20]
 800e5fa:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800e5fe:	8ae1      	ldrh	r1, [r4, #22]
 800e600:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800e604:	f7ff fb8c 	bl	800dd20 <GetTimeOnAir>
 800e608:	900f      	str	r0, [sp, #60]	@ 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800e60a:	ab03      	add	r3, sp, #12
 800e60c:	9310      	str	r3, [sp, #64]	@ 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800e60e:	9601      	str	r6, [sp, #4]
 800e610:	f10d 0356 	add.w	r3, sp, #86	@ 0x56
 800e614:	9300      	str	r3, [sp, #0]
 800e616:	f10d 0357 	add.w	r3, sp, #87	@ 0x57
 800e61a:	aa11      	add	r2, sp, #68	@ 0x44
 800e61c:	4629      	mov	r1, r5
 800e61e:	a809      	add	r0, sp, #36	@ 0x24
 800e620:	f7ff fab9 	bl	800db96 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800e624:	4604      	mov	r4, r0
 800e626:	b120      	cbz	r0, 800e632 <RegionEU433NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800e628:	280c      	cmp	r0, #12
 800e62a:	d00f      	beq.n	800e64c <RegionEU433NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU433 */
}
 800e62c:	4620      	mov	r0, r4
 800e62e:	b017      	add	sp, #92	@ 0x5c
 800e630:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800e632:	f89d 1057 	ldrb.w	r1, [sp, #87]	@ 0x57
 800e636:	3901      	subs	r1, #1
 800e638:	f001 fe2e 	bl	8010298 <randr>
 800e63c:	f100 0358 	add.w	r3, r0, #88	@ 0x58
 800e640:	eb0d 0003 	add.w	r0, sp, r3
 800e644:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800e648:	703b      	strb	r3, [r7, #0]
 800e64a:	e7ef      	b.n	800e62c <RegionEU433NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800e64c:	4b04      	ldr	r3, [pc, #16]	@ (800e660 <RegionEU433NextChannel+0xf8>)
 800e64e:	681a      	ldr	r2, [r3, #0]
 800e650:	f8b2 3360 	ldrh.w	r3, [r2, #864]	@ 0x360
 800e654:	f043 0307 	orr.w	r3, r3, #7
 800e658:	f8a2 3360 	strh.w	r3, [r2, #864]	@ 0x360
 800e65c:	e7e6      	b.n	800e62c <RegionEU433NextChannel+0xc4>
 800e65e:	bf00      	nop
 800e660:	20001644 	.word	0x20001644
 800e664:	20001640 	.word	0x20001640

0800e668 <RegionEU433ChannelAdd>:

LoRaMacStatus_t RegionEU433ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800e668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_EU433 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800e66a:	7905      	ldrb	r5, [r0, #4]

    if( id < EU433_NUMB_DEFAULT_CHANNELS )
 800e66c:	2d02      	cmp	r5, #2
 800e66e:	d94a      	bls.n	800e706 <RegionEU433ChannelAdd+0x9e>
 800e670:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU433_MAX_NB_CHANNELS )
 800e672:	2d0f      	cmp	r5, #15
 800e674:	d849      	bhi.n	800e70a <RegionEU433ChannelAdd+0xa2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE ) == false )
 800e676:	6803      	ldr	r3, [r0, #0]
 800e678:	7a18      	ldrb	r0, [r3, #8]
 800e67a:	f340 0003 	sbfx	r0, r0, #0, #4
 800e67e:	2207      	movs	r2, #7
 800e680:	2100      	movs	r1, #0
 800e682:	b240      	sxtb	r0, r0
 800e684:	f7ff f855 	bl	800d732 <RegionCommonValueInRange>
 800e688:	b1f8      	cbz	r0, 800e6ca <RegionEU433ChannelAdd+0x62>
    bool drInvalid = false;
 800e68a:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE ) == false )
 800e68c:	6823      	ldr	r3, [r4, #0]
 800e68e:	7a18      	ldrb	r0, [r3, #8]
 800e690:	f340 1003 	sbfx	r0, r0, #4, #4
 800e694:	2207      	movs	r2, #7
 800e696:	2100      	movs	r1, #0
 800e698:	b240      	sxtb	r0, r0
 800e69a:	f7ff f84a 	bl	800d732 <RegionCommonValueInRange>
 800e69e:	b900      	cbnz	r0, 800e6a2 <RegionEU433ChannelAdd+0x3a>
    {
        drInvalid = true;
 800e6a0:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800e6a2:	6821      	ldr	r1, [r4, #0]
 800e6a4:	7a0b      	ldrb	r3, [r1, #8]
 800e6a6:	f343 0203 	sbfx	r2, r3, #0, #4
 800e6aa:	b252      	sxtb	r2, r2
 800e6ac:	f343 1303 	sbfx	r3, r3, #4, #4
 800e6b0:	b25b      	sxtb	r3, r3
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	dd00      	ble.n	800e6b8 <RegionEU433ChannelAdd+0x50>
    {
        drInvalid = true;
 800e6b6:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 800e6b8:	6808      	ldr	r0, [r1, #0]
 800e6ba:	f7ff fb1d 	bl	800dcf8 <VerifyRfFreq>
 800e6be:	b130      	cbz	r0, 800e6ce <RegionEU433ChannelAdd+0x66>
    bool freqInvalid = false;
 800e6c0:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800e6c2:	b136      	cbz	r6, 800e6d2 <RegionEU433ChannelAdd+0x6a>
 800e6c4:	b31b      	cbz	r3, 800e70e <RegionEU433ChannelAdd+0xa6>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800e6c6:	2006      	movs	r0, #6
 800e6c8:	e020      	b.n	800e70c <RegionEU433ChannelAdd+0xa4>
        drInvalid = true;
 800e6ca:	2601      	movs	r6, #1
 800e6cc:	e7de      	b.n	800e68c <RegionEU433ChannelAdd+0x24>
            freqInvalid = true;
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	e7f7      	b.n	800e6c2 <RegionEU433ChannelAdd+0x5a>
    }
    if( drInvalid == true )
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800e6d2:	b9f3      	cbnz	r3, 800e712 <RegionEU433ChannelAdd+0xaa>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800e6d4:	4f10      	ldr	r7, [pc, #64]	@ (800e718 <RegionEU433ChannelAdd+0xb0>)
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	006e      	lsls	r6, r5, #1
 800e6da:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800e6de:	220c      	movs	r2, #12
 800e6e0:	6821      	ldr	r1, [r4, #0]
 800e6e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e6e6:	f001 fde4 	bl	80102b2 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	442e      	add	r6, r5
 800e6ee:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800e6f6:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 800e6fa:	2101      	movs	r1, #1
 800e6fc:	40a9      	lsls	r1, r5
 800e6fe:	430a      	orrs	r2, r1
 800e700:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 800e704:	e002      	b.n	800e70c <RegionEU433ChannelAdd+0xa4>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800e706:	2006      	movs	r0, #6
 800e708:	e000      	b.n	800e70c <RegionEU433ChannelAdd+0xa4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e70a:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU433 */
}
 800e70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_DATARATE_INVALID;
 800e70e:	2005      	movs	r0, #5
 800e710:	e7fc      	b.n	800e70c <RegionEU433ChannelAdd+0xa4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800e712:	2004      	movs	r0, #4
 800e714:	e7fa      	b.n	800e70c <RegionEU433ChannelAdd+0xa4>
 800e716:	bf00      	nop
 800e718:	20001644 	.word	0x20001644

0800e71c <RegionEU433ChannelsRemove>:

bool RegionEU433ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU433 )
    uint8_t id = channelRemove->ChannelId;
 800e71c:	7801      	ldrb	r1, [r0, #0]

    if( id < EU433_NUMB_DEFAULT_CHANNELS )
 800e71e:	2902      	cmp	r1, #2
 800e720:	d801      	bhi.n	800e726 <RegionEU433ChannelsRemove+0xa>
    {
        return false;
 800e722:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU433_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU433 */
}
 800e724:	4770      	bx	lr
{
 800e726:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800e728:	4b09      	ldr	r3, [pc, #36]	@ (800e750 <RegionEU433ChannelsRemove+0x34>)
 800e72a:	6818      	ldr	r0, [r3, #0]
 800e72c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800e730:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800e734:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e738:	2200      	movs	r2, #0
 800e73a:	f840 200c 	str.w	r2, [r0, ip]
 800e73e:	605a      	str	r2, [r3, #4]
 800e740:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU433_MAX_NB_CHANNELS );
 800e742:	2210      	movs	r2, #16
 800e744:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800e748:	f7ff f835 	bl	800d7b6 <RegionCommonChanDisable>
}
 800e74c:	bd08      	pop	{r3, pc}
 800e74e:	bf00      	nop
 800e750:	20001644 	.word	0x20001644

0800e754 <RegionEU433ApplyCFList>:
{
 800e754:	b570      	push	{r4, r5, r6, lr}
 800e756:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800e758:	2350      	movs	r3, #80	@ 0x50
 800e75a:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800e75e:	7a03      	ldrb	r3, [r0, #8]
 800e760:	2b10      	cmp	r3, #16
 800e762:	d136      	bne.n	800e7d2 <RegionEU433ApplyCFList+0x7e>
 800e764:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800e766:	6843      	ldr	r3, [r0, #4]
 800e768:	7bdd      	ldrb	r5, [r3, #15]
 800e76a:	2d00      	cmp	r5, #0
 800e76c:	d131      	bne.n	800e7d2 <RegionEU433ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU433_NUMB_DEFAULT_CHANNELS; chanIdx < EU433_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800e76e:	2403      	movs	r4, #3
 800e770:	e01b      	b.n	800e7aa <RegionEU433ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800e772:	6872      	ldr	r2, [r6, #4]
 800e774:	5d53      	ldrb	r3, [r2, r5]
 800e776:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800e778:	442a      	add	r2, r5
 800e77a:	7851      	ldrb	r1, [r2, #1]
 800e77c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e780:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800e782:	7892      	ldrb	r2, [r2, #2]
 800e784:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e788:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800e78a:	2264      	movs	r2, #100	@ 0x64
 800e78c:	fb02 f303 	mul.w	r3, r2, r3
 800e790:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800e792:	2300      	movs	r3, #0
 800e794:	9304      	str	r3, [sp, #16]
 800e796:	e011      	b.n	800e7bc <RegionEU433ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800e798:	f88d 4000 	strb.w	r4, [sp]
            RegionEU433ChannelsRemove( &channelRemove );
 800e79c:	4668      	mov	r0, sp
 800e79e:	f7ff ffbd 	bl	800e71c <RegionEU433ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU433_NUMB_DEFAULT_CHANNELS; chanIdx < EU433_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800e7a2:	3503      	adds	r5, #3
 800e7a4:	b2ed      	uxtb	r5, r5
 800e7a6:	3401      	adds	r4, #1
 800e7a8:	b2e4      	uxtb	r4, r4
 800e7aa:	2c0f      	cmp	r4, #15
 800e7ac:	d811      	bhi.n	800e7d2 <RegionEU433ApplyCFList+0x7e>
        if( chanIdx < ( EU433_NUMB_CHANNELS_CF_LIST + EU433_NUMB_DEFAULT_CHANNELS ) )
 800e7ae:	2c07      	cmp	r4, #7
 800e7b0:	d9df      	bls.n	800e772 <RegionEU433ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800e7b6:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800e7ba:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800e7bc:	9b03      	ldr	r3, [sp, #12]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d0ea      	beq.n	800e798 <RegionEU433ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800e7c2:	ab03      	add	r3, sp, #12
 800e7c4:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800e7c6:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU433ChannelAdd( &channelAdd );
 800e7ca:	a801      	add	r0, sp, #4
 800e7cc:	f7ff ff4c 	bl	800e668 <RegionEU433ChannelAdd>
 800e7d0:	e7e7      	b.n	800e7a2 <RegionEU433ApplyCFList+0x4e>
}
 800e7d2:	b006      	add	sp, #24
 800e7d4:	bd70      	pop	{r4, r5, r6, pc}

0800e7d6 <RegionEU433NewChannelReq>:
{
 800e7d6:	b500      	push	{lr}
 800e7d8:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800e7da:	6803      	ldr	r3, [r0, #0]
 800e7dc:	681a      	ldr	r2, [r3, #0]
 800e7de:	b952      	cbnz	r2, 800e7f6 <RegionEU433NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800e7e0:	7903      	ldrb	r3, [r0, #4]
 800e7e2:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU433ChannelsRemove( &channelRemove ) == false )
 800e7e6:	a801      	add	r0, sp, #4
 800e7e8:	f7ff ff98 	bl	800e71c <RegionEU433ChannelsRemove>
 800e7ec:	b1d0      	cbz	r0, 800e824 <RegionEU433NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800e7ee:	2003      	movs	r0, #3
}
 800e7f0:	b005      	add	sp, #20
 800e7f2:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800e7f6:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800e7f8:	7903      	ldrb	r3, [r0, #4]
 800e7fa:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU433ChannelAdd( &channelAdd ) )
 800e7fe:	a802      	add	r0, sp, #8
 800e800:	f7ff ff32 	bl	800e668 <RegionEU433ChannelAdd>
 800e804:	2806      	cmp	r0, #6
 800e806:	d80b      	bhi.n	800e820 <RegionEU433NewChannelReq+0x4a>
 800e808:	e8df f000 	tbb	[pc, r0]
 800e80c:	0a0a0a04 	.word	0x0a0a0a04
 800e810:	060e      	.short	0x060e
 800e812:	08          	.byte	0x08
 800e813:	00          	.byte	0x00
 800e814:	2003      	movs	r0, #3
 800e816:	e7eb      	b.n	800e7f0 <RegionEU433NewChannelReq+0x1a>
                status &= 0xFD;
 800e818:	2001      	movs	r0, #1
                break;
 800e81a:	e7e9      	b.n	800e7f0 <RegionEU433NewChannelReq+0x1a>
                status &= 0xFC;
 800e81c:	2000      	movs	r0, #0
                break;
 800e81e:	e7e7      	b.n	800e7f0 <RegionEU433NewChannelReq+0x1a>
                status &= 0xFC;
 800e820:	2000      	movs	r0, #0
                break;
 800e822:	e7e5      	b.n	800e7f0 <RegionEU433NewChannelReq+0x1a>
            status &= 0xFC;
 800e824:	2000      	movs	r0, #0
 800e826:	e7e3      	b.n	800e7f0 <RegionEU433NewChannelReq+0x1a>
                status &= 0xFE;
 800e828:	2002      	movs	r0, #2
 800e82a:	e7e1      	b.n	800e7f0 <RegionEU433NewChannelReq+0x1a>

0800e82c <RegionEU433ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU433ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU433 )
    int8_t datarate = dr - drOffset;
 800e82c:	1a88      	subs	r0, r1, r2
 800e82e:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800e830:	2800      	cmp	r0, #0
 800e832:	db01      	blt.n	800e838 <RegionEU433ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU433 */
}
 800e834:	b2c0      	uxtb	r0, r0
 800e836:	4770      	bx	lr
        datarate = DR_0;
 800e838:	2000      	movs	r0, #0
 800e83a:	e7fb      	b.n	800e834 <RegionEU433ApplyDrOffset+0x8>

0800e83c <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800e83c:	b510      	push	{r4, lr}
 800e83e:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800e840:	4b10      	ldr	r3, [pc, #64]	@ (800e884 <VerifyRfFreq+0x48>)
 800e842:	6a1b      	ldr	r3, [r3, #32]
 800e844:	4798      	blx	r3
 800e846:	b1c8      	cbz	r0, 800e87c <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800e848:	4b0f      	ldr	r3, [pc, #60]	@ (800e888 <VerifyRfFreq+0x4c>)
 800e84a:	4423      	add	r3, r4
 800e84c:	4a0f      	ldr	r2, [pc, #60]	@ (800e88c <VerifyRfFreq+0x50>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d813      	bhi.n	800e87a <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800e852:	f102 42df 	add.w	r2, r2, #1870659584	@ 0x6f800000
 800e856:	f502 12c8 	add.w	r2, r2, #1638400	@ 0x190000
 800e85a:	f202 7245 	addw	r2, r2, #1861	@ 0x745
 800e85e:	fba2 1203 	umull	r1, r2, r2, r3
 800e862:	0c92      	lsrs	r2, r2, #18
 800e864:	490a      	ldr	r1, [pc, #40]	@ (800e890 <VerifyRfFreq+0x54>)
 800e866:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800e86a:	b942      	cbnz	r2, 800e87e <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800e86c:	4b09      	ldr	r3, [pc, #36]	@ (800e894 <VerifyRfFreq+0x58>)
 800e86e:	4423      	add	r3, r4
 800e870:	4a09      	ldr	r2, [pc, #36]	@ (800e898 <VerifyRfFreq+0x5c>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d902      	bls.n	800e87c <VerifyRfFreq+0x40>
    {
        return false;
 800e876:	2000      	movs	r0, #0
 800e878:	e000      	b.n	800e87c <VerifyRfFreq+0x40>
        return false;
 800e87a:	2000      	movs	r0, #0
    }
    return true;
}
 800e87c:	bd10      	pop	{r4, pc}
        return false;
 800e87e:	2000      	movs	r0, #0
 800e880:	e7fc      	b.n	800e87c <VerifyRfFreq+0x40>
 800e882:	bf00      	nop
 800e884:	08013b98 	.word	0x08013b98
 800e888:	c8f78f60 	.word	0xc8f78f60
 800e88c:	00401640 	.word	0x00401640
 800e890:	000927c0 	.word	0x000927c0
 800e894:	ca37fea0 	.word	0xca37fea0
 800e898:	01808580 	.word	0x01808580

0800e89c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800e89c:	b570      	push	{r4, r5, r6, lr}
 800e89e:	b084      	sub	sp, #16
 800e8a0:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800e8a2:	4b0a      	ldr	r3, [pc, #40]	@ (800e8cc <GetTimeOnAir+0x30>)
 800e8a4:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800e8a6:	490a      	ldr	r1, [pc, #40]	@ (800e8d0 <GetTimeOnAir+0x34>)
 800e8a8:	f7ff f9e2 	bl	800dc70 <RegionCommonGetBandwidth>
 800e8ac:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800e8ae:	4b09      	ldr	r3, [pc, #36]	@ (800e8d4 <GetTimeOnAir+0x38>)
 800e8b0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800e8b2:	2001      	movs	r0, #1
 800e8b4:	9003      	str	r0, [sp, #12]
 800e8b6:	b2e4      	uxtb	r4, r4
 800e8b8:	9402      	str	r4, [sp, #8]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	9201      	str	r2, [sp, #4]
 800e8be:	2208      	movs	r2, #8
 800e8c0:	9200      	str	r2, [sp, #0]
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	4632      	mov	r2, r6
 800e8c6:	47a8      	blx	r5
}
 800e8c8:	b004      	add	sp, #16
 800e8ca:	bd70      	pop	{r4, r5, r6, pc}
 800e8cc:	08013800 	.word	0x08013800
 800e8d0:	080137c0 	.word	0x080137c0
 800e8d4:	08013b98 	.word	0x08013b98

0800e8d8 <LimitTxPower>:
{
 800e8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8da:	4606      	mov	r6, r0
 800e8dc:	4615      	mov	r5, r2
 800e8de:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800e8e0:	f7ff f9c2 	bl	800dc68 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800e8e4:	2d04      	cmp	r5, #4
 800e8e6:	d105      	bne.n	800e8f4 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800e8e8:	4634      	mov	r4, r6
 800e8ea:	2e02      	cmp	r6, #2
 800e8ec:	bfb8      	it	lt
 800e8ee:	2402      	movlt	r4, #2
}
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8f4:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800e8f6:	2204      	movs	r2, #4
 800e8f8:	2100      	movs	r1, #0
 800e8fa:	4638      	mov	r0, r7
 800e8fc:	f7fe ff77 	bl	800d7ee <RegionCommonCountChannels>
 800e900:	2831      	cmp	r0, #49	@ 0x31
 800e902:	d8f5      	bhi.n	800e8f0 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800e904:	4634      	mov	r4, r6
 800e906:	2e05      	cmp	r6, #5
 800e908:	bfb8      	it	lt
 800e90a:	2405      	movlt	r4, #5
 800e90c:	e7f0      	b.n	800e8f0 <LimitTxPower+0x18>
	...

0800e910 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800e910:	b500      	push	{lr}
 800e912:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800e914:	2300      	movs	r3, #0
 800e916:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800e918:	7803      	ldrb	r3, [r0, #0]
 800e91a:	3b01      	subs	r3, #1
 800e91c:	2b37      	cmp	r3, #55	@ 0x37
 800e91e:	d81f      	bhi.n	800e960 <RegionUS915GetPhyParam+0x50>
 800e920:	e8df f003 	tbb	[pc, r3]
 800e924:	1e1e1e1c 	.word	0x1e1e1e1c
 800e928:	1e1e1e1e 	.word	0x1e1e1e1e
 800e92c:	3e3b1e1e 	.word	0x3e3b1e1e
 800e930:	4d1e4741 	.word	0x4d1e4741
 800e934:	5d595551 	.word	0x5d595551
 800e938:	6d6a1e61 	.word	0x6d6a1e61
 800e93c:	7f7c7670 	.word	0x7f7c7670
 800e940:	86831e1e 	.word	0x86831e1e
 800e944:	1e1e1e23 	.word	0x1e1e1e23
 800e948:	1e1e1e1e 	.word	0x1e1e1e1e
 800e94c:	1e1e1e1e 	.word	0x1e1e1e1e
 800e950:	90891e1e 	.word	0x90891e1e
 800e954:	a01e9d9a 	.word	0xa01e9d9a
 800e958:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800e95c:	2308      	movs	r3, #8
 800e95e:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800e960:	9804      	ldr	r0, [sp, #16]
 800e962:	9005      	str	r0, [sp, #20]
}
 800e964:	b007      	add	sp, #28
 800e966:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800e96a:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e96e:	f88d 3004 	strb.w	r3, [sp, #4]
 800e972:	2304      	movs	r3, #4
 800e974:	f88d 3005 	strb.w	r3, [sp, #5]
 800e978:	2300      	movs	r3, #0
 800e97a:	f88d 3006 	strb.w	r3, [sp, #6]
 800e97e:	2348      	movs	r3, #72	@ 0x48
 800e980:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800e984:	4b44      	ldr	r3, [pc, #272]	@ (800ea98 <RegionUS915GetPhyParam+0x188>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f503 7258 	add.w	r2, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e98c:	9202      	str	r2, [sp, #8]
 800e98e:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800e990:	a801      	add	r0, sp, #4
 800e992:	f7ff f94a 	bl	800dc2a <RegionCommonGetNextLowerTxDr>
 800e996:	9004      	str	r0, [sp, #16]
            break;
 800e998:	e7e2      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800e99a:	2340      	movs	r3, #64	@ 0x40
 800e99c:	9304      	str	r3, [sp, #16]
            break;
 800e99e:	e7df      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800e9a0:	2320      	movs	r3, #32
 800e9a2:	9304      	str	r3, [sp, #16]
            break;
 800e9a4:	e7dc      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800e9a6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e9aa:	4a3c      	ldr	r2, [pc, #240]	@ (800ea9c <RegionUS915GetPhyParam+0x18c>)
 800e9ac:	5cd3      	ldrb	r3, [r2, r3]
 800e9ae:	9304      	str	r3, [sp, #16]
            break;
 800e9b0:	e7d6      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800e9b2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e9b6:	4a3a      	ldr	r2, [pc, #232]	@ (800eaa0 <RegionUS915GetPhyParam+0x190>)
 800e9b8:	5cd3      	ldrb	r3, [r2, r3]
 800e9ba:	9304      	str	r3, [sp, #16]
            break;
 800e9bc:	e7d0      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800e9be:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800e9c2:	9304      	str	r3, [sp, #16]
            break;
 800e9c4:	e7cc      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800e9c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e9ca:	9304      	str	r3, [sp, #16]
            break;
 800e9cc:	e7c8      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800e9ce:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800e9d2:	9304      	str	r3, [sp, #16]
            break;
 800e9d4:	e7c4      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800e9d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e9da:	9304      	str	r3, [sp, #16]
            break;
 800e9dc:	e7c0      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800e9de:	f241 7370 	movw	r3, #6000	@ 0x1770
 800e9e2:	9304      	str	r3, [sp, #16]
            break;
 800e9e4:	e7bc      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800e9e6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e9ea:	482e      	ldr	r0, [pc, #184]	@ (800eaa4 <RegionUS915GetPhyParam+0x194>)
 800e9ec:	f001 fc54 	bl	8010298 <randr>
 800e9f0:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 800e9f4:	9004      	str	r0, [sp, #16]
            break;
 800e9f6:	e7b3      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800e9f8:	4b2b      	ldr	r3, [pc, #172]	@ (800eaa8 <RegionUS915GetPhyParam+0x198>)
 800e9fa:	9304      	str	r3, [sp, #16]
            break;
 800e9fc:	e7b0      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 800e9fe:	2308      	movs	r3, #8
 800ea00:	9304      	str	r3, [sp, #16]
            break;
 800ea02:	e7ad      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800ea04:	4b24      	ldr	r3, [pc, #144]	@ (800ea98 <RegionUS915GetPhyParam+0x188>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ea0c:	9304      	str	r3, [sp, #16]
            break;
 800ea0e:	e7a7      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800ea10:	4b21      	ldr	r3, [pc, #132]	@ (800ea98 <RegionUS915GetPhyParam+0x188>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 800ea18:	9304      	str	r3, [sp, #16]
            break;
 800ea1a:	e7a1      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800ea1c:	2348      	movs	r3, #72	@ 0x48
 800ea1e:	9304      	str	r3, [sp, #16]
            break;
 800ea20:	e79e      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800ea22:	4b1d      	ldr	r3, [pc, #116]	@ (800ea98 <RegionUS915GetPhyParam+0x188>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	9304      	str	r3, [sp, #16]
            break;
 800ea28:	e79a      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800ea2a:	4b20      	ldr	r3, [pc, #128]	@ (800eaac <RegionUS915GetPhyParam+0x19c>)
 800ea2c:	9304      	str	r3, [sp, #16]
            break;
 800ea2e:	e797      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 800ea30:	2300      	movs	r3, #0
 800ea32:	9304      	str	r3, [sp, #16]
            break;
 800ea34:	e794      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800ea36:	4a1e      	ldr	r2, [pc, #120]	@ (800eab0 <RegionUS915GetPhyParam+0x1a0>)
 800ea38:	491b      	ldr	r1, [pc, #108]	@ (800eaa8 <RegionUS915GetPhyParam+0x198>)
 800ea3a:	7900      	ldrb	r0, [r0, #4]
 800ea3c:	f7fe fdfa 	bl	800d634 <RegionBaseUSCalcDownlinkFrequency>
 800ea40:	9004      	str	r0, [sp, #16]
            break;
 800ea42:	e78d      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800ea44:	2317      	movs	r3, #23
 800ea46:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800ea4a:	2304      	movs	r3, #4
 800ea4c:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800ea50:	2303      	movs	r3, #3
 800ea52:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800ea56:	e783      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800ea58:	2308      	movs	r3, #8
 800ea5a:	9304      	str	r3, [sp, #16]
            break;
 800ea5c:	e780      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800ea5e:	2308      	movs	r3, #8
 800ea60:	9304      	str	r3, [sp, #16]
            break;
 800ea62:	e77d      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800ea64:	4a12      	ldr	r2, [pc, #72]	@ (800eab0 <RegionUS915GetPhyParam+0x1a0>)
 800ea66:	4910      	ldr	r1, [pc, #64]	@ (800eaa8 <RegionUS915GetPhyParam+0x198>)
 800ea68:	7900      	ldrb	r0, [r0, #4]
 800ea6a:	f7fe fde3 	bl	800d634 <RegionBaseUSCalcDownlinkFrequency>
 800ea6e:	9004      	str	r0, [sp, #16]
            break;
 800ea70:	e776      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800ea72:	2308      	movs	r3, #8
 800ea74:	9304      	str	r3, [sp, #16]
            break;
 800ea76:	e773      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800ea78:	2308      	movs	r3, #8
 800ea7a:	9304      	str	r3, [sp, #16]
            break;
 800ea7c:	e770      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800ea7e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ea82:	4a0c      	ldr	r2, [pc, #48]	@ (800eab4 <RegionUS915GetPhyParam+0x1a4>)
 800ea84:	5cd3      	ldrb	r3, [r2, r3]
 800ea86:	9304      	str	r3, [sp, #16]
            break;
 800ea88:	e76a      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800ea8a:	490b      	ldr	r1, [pc, #44]	@ (800eab8 <RegionUS915GetPhyParam+0x1a8>)
 800ea8c:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800ea90:	f7ff f8ee 	bl	800dc70 <RegionCommonGetBandwidth>
 800ea94:	9004      	str	r0, [sp, #16]
            break;
 800ea96:	e763      	b.n	800e960 <RegionUS915GetPhyParam+0x50>
 800ea98:	2000164c 	.word	0x2000164c
 800ea9c:	0801379c 	.word	0x0801379c
 800eaa0:	0801378c 	.word	0x0801378c
 800eaa4:	fffffc18 	.word	0xfffffc18
 800eaa8:	370870a0 	.word	0x370870a0
 800eaac:	4200999a 	.word	0x4200999a
 800eab0:	000927c0 	.word	0x000927c0
 800eab4:	08013800 	.word	0x08013800
 800eab8:	080137c0 	.word	0x080137c0

0800eabc <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800eabc:	b510      	push	{r4, lr}
 800eabe:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800eac0:	4b0b      	ldr	r3, [pc, #44]	@ (800eaf0 <RegionUS915SetBandTxDone+0x34>)
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	7803      	ldrb	r3, [r0, #0]
 800eac6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800eaca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eace:	7a5b      	ldrb	r3, [r3, #9]
 800ead0:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800ead4:	4b07      	ldr	r3, [pc, #28]	@ (800eaf4 <RegionUS915SetBandTxDone+0x38>)
 800ead6:	681c      	ldr	r4, [r3, #0]
 800ead8:	6903      	ldr	r3, [r0, #16]
 800eada:	9300      	str	r3, [sp, #0]
 800eadc:	68c3      	ldr	r3, [r0, #12]
 800eade:	7842      	ldrb	r2, [r0, #1]
 800eae0:	6881      	ldr	r1, [r0, #8]
 800eae2:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800eae6:	f7fe fea7 	bl	800d838 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 800eaea:	b002      	add	sp, #8
 800eaec:	bd10      	pop	{r4, pc}
 800eaee:	bf00      	nop
 800eaf0:	2000164c 	.word	0x2000164c
 800eaf4:	20001648 	.word	0x20001648

0800eaf8 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800eaf8:	b510      	push	{r4, lr}
 800eafa:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800eafc:	2301      	movs	r3, #1
 800eafe:	f8ad 3000 	strh.w	r3, [sp]
 800eb02:	2300      	movs	r3, #0
 800eb04:	f88d 3002 	strb.w	r3, [sp, #2]
 800eb08:	9301      	str	r3, [sp, #4]
 800eb0a:	9302      	str	r3, [sp, #8]
 800eb0c:	9303      	str	r3, [sp, #12]
 800eb0e:	9304      	str	r3, [sp, #16]
 800eb10:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800eb14:	7b04      	ldrb	r4, [r0, #12]
 800eb16:	b174      	cbz	r4, 800eb36 <RegionUS915InitDefaults+0x3e>
 800eb18:	3c01      	subs	r4, #1
 800eb1a:	b2e4      	uxtb	r4, r4
 800eb1c:	2c01      	cmp	r4, #1
 800eb1e:	d87e      	bhi.n	800ec1e <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800eb20:	4b40      	ldr	r3, [pc, #256]	@ (800ec24 <RegionUS915InitDefaults+0x12c>)
 800eb22:	6818      	ldr	r0, [r3, #0]
 800eb24:	2206      	movs	r2, #6
 800eb26:	f500 715b 	add.w	r1, r0, #876	@ 0x36c
 800eb2a:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800eb2e:	f7fe fe74 	bl	800d81a <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
            for( uint8_t i = 0; i < 6; i++ )
 800eb32:	2300      	movs	r3, #0
 800eb34:	e071      	b.n	800ec1a <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800eb36:	6803      	ldr	r3, [r0, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d070      	beq.n	800ec1e <RegionUS915InitDefaults+0x126>
 800eb3c:	6842      	ldr	r2, [r0, #4]
 800eb3e:	2a00      	cmp	r2, #0
 800eb40:	d06d      	beq.n	800ec1e <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800eb42:	4939      	ldr	r1, [pc, #228]	@ (800ec28 <RegionUS915InitDefaults+0x130>)
 800eb44:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800eb46:	4937      	ldr	r1, [pc, #220]	@ (800ec24 <RegionUS915InitDefaults+0x12c>)
 800eb48:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 800eb4a:	6880      	ldr	r0, [r0, #8]
 800eb4c:	4a37      	ldr	r2, [pc, #220]	@ (800ec2c <RegionUS915InitDefaults+0x134>)
 800eb4e:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800eb50:	2200      	movs	r2, #0
 800eb52:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800eb54:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800eb56:	2218      	movs	r2, #24
 800eb58:	4669      	mov	r1, sp
 800eb5a:	f001 fbaa 	bl	80102b2 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800eb5e:	e011      	b.n	800eb84 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800eb60:	4b30      	ldr	r3, [pc, #192]	@ (800ec24 <RegionUS915InitDefaults+0x12c>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4932      	ldr	r1, [pc, #200]	@ (800ec30 <RegionUS915InitDefaults+0x138>)
 800eb66:	4a33      	ldr	r2, [pc, #204]	@ (800ec34 <RegionUS915InitDefaults+0x13c>)
 800eb68:	fb01 2204 	mla	r2, r1, r4, r2
 800eb6c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800eb70:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800eb74:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800eb78:	2230      	movs	r2, #48	@ 0x30
 800eb7a:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800eb80:	3401      	adds	r4, #1
 800eb82:	b2e4      	uxtb	r4, r4
 800eb84:	2c3f      	cmp	r4, #63	@ 0x3f
 800eb86:	d9eb      	bls.n	800eb60 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800eb88:	2340      	movs	r3, #64	@ 0x40
 800eb8a:	2b47      	cmp	r3, #71	@ 0x47
 800eb8c:	d814      	bhi.n	800ebb8 <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800eb8e:	f1a3 0040 	sub.w	r0, r3, #64	@ 0x40
 800eb92:	4a24      	ldr	r2, [pc, #144]	@ (800ec24 <RegionUS915InitDefaults+0x12c>)
 800eb94:	6812      	ldr	r2, [r2, #0]
 800eb96:	4c28      	ldr	r4, [pc, #160]	@ (800ec38 <RegionUS915InitDefaults+0x140>)
 800eb98:	4928      	ldr	r1, [pc, #160]	@ (800ec3c <RegionUS915InitDefaults+0x144>)
 800eb9a:	fb04 1100 	mla	r1, r4, r0, r1
 800eb9e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800eba2:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800eba6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800ebaa:	2144      	movs	r1, #68	@ 0x44
 800ebac:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800ebae:	2100      	movs	r1, #0
 800ebb0:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	b2db      	uxtb	r3, r3
 800ebb6:	e7e8      	b.n	800eb8a <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800ebb8:	4c1a      	ldr	r4, [pc, #104]	@ (800ec24 <RegionUS915InitDefaults+0x12c>)
 800ebba:	6820      	ldr	r0, [r4, #0]
 800ebbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ebc0:	f8a0 336c 	strh.w	r3, [r0, #876]	@ 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800ebc4:	f8a0 336e 	strh.w	r3, [r0, #878]	@ 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800ebc8:	f8a0 3370 	strh.w	r3, [r0, #880]	@ 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800ebcc:	f8a0 3372 	strh.w	r3, [r0, #882]	@ 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800ebd0:	23ff      	movs	r3, #255	@ 0xff
 800ebd2:	f8a0 3374 	strh.w	r3, [r0, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	f8a0 3376 	strh.w	r3, [r0, #886]	@ 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ebdc:	2206      	movs	r2, #6
 800ebde:	f500 715b 	add.w	r1, r0, #876	@ 0x36c
 800ebe2:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800ebe6:	f7fe fe18 	bl	800d81a <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800ebea:	6821      	ldr	r1, [r4, #0]
 800ebec:	2206      	movs	r2, #6
 800ebee:	f501 7158 	add.w	r1, r1, #864	@ 0x360
 800ebf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ec28 <RegionUS915InitDefaults+0x130>)
 800ebf4:	6818      	ldr	r0, [r3, #0]
 800ebf6:	f7fe fe10 	bl	800d81a <RegionCommonChanMaskCopy>
            break;
 800ebfa:	e010      	b.n	800ec1e <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800ebfc:	4a0a      	ldr	r2, [pc, #40]	@ (800ec28 <RegionUS915InitDefaults+0x130>)
 800ebfe:	6811      	ldr	r1, [r2, #0]
 800ec00:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ec04:	4807      	ldr	r0, [pc, #28]	@ (800ec24 <RegionUS915InitDefaults+0x12c>)
 800ec06:	6800      	ldr	r0, [r0, #0]
 800ec08:	f503 74d8 	add.w	r4, r3, #432	@ 0x1b0
 800ec0c:	f830 0014 	ldrh.w	r0, [r0, r4, lsl #1]
 800ec10:	4002      	ands	r2, r0
 800ec12:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 800ec16:	3301      	adds	r3, #1
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	2b05      	cmp	r3, #5
 800ec1c:	d9ee      	bls.n	800ebfc <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800ec1e:	b006      	add	sp, #24
 800ec20:	bd10      	pop	{r4, pc}
 800ec22:	bf00      	nop
 800ec24:	2000164c 	.word	0x2000164c
 800ec28:	20001650 	.word	0x20001650
 800ec2c:	20001648 	.word	0x20001648
 800ec30:	00030d40 	.word	0x00030d40
 800ec34:	35c80160 	.word	0x35c80160
 800ec38:	00186a00 	.word	0x00186a00
 800ec3c:	35d2afc0 	.word	0x35d2afc0

0800ec40 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800ec40:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800ec42:	290a      	cmp	r1, #10
 800ec44:	d833      	bhi.n	800ecae <RegionUS915Verify+0x6e>
 800ec46:	e8df f001 	tbb	[pc, r1]
 800ec4a:	3206      	.short	0x3206
 800ec4c:	0a323232 	.word	0x0a323232
 800ec50:	28321e14 	.word	0x28321e14
 800ec54:	28          	.byte	0x28
 800ec55:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800ec56:	6800      	ldr	r0, [r0, #0]
 800ec58:	f7ff fdf0 	bl	800e83c <VerifyRfFreq>
 800ec5c:	e028      	b.n	800ecb0 <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800ec5e:	2204      	movs	r2, #4
 800ec60:	2100      	movs	r1, #0
 800ec62:	f990 0000 	ldrsb.w	r0, [r0]
 800ec66:	f7fe fd64 	bl	800d732 <RegionCommonValueInRange>
 800ec6a:	3800      	subs	r0, #0
 800ec6c:	bf18      	it	ne
 800ec6e:	2001      	movne	r0, #1
 800ec70:	e01e      	b.n	800ecb0 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800ec72:	2205      	movs	r2, #5
 800ec74:	2100      	movs	r1, #0
 800ec76:	f990 0000 	ldrsb.w	r0, [r0]
 800ec7a:	f7fe fd5a 	bl	800d732 <RegionCommonValueInRange>
 800ec7e:	3800      	subs	r0, #0
 800ec80:	bf18      	it	ne
 800ec82:	2001      	movne	r0, #1
 800ec84:	e014      	b.n	800ecb0 <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800ec86:	220d      	movs	r2, #13
 800ec88:	2108      	movs	r1, #8
 800ec8a:	f990 0000 	ldrsb.w	r0, [r0]
 800ec8e:	f7fe fd50 	bl	800d732 <RegionCommonValueInRange>
 800ec92:	3800      	subs	r0, #0
 800ec94:	bf18      	it	ne
 800ec96:	2001      	movne	r0, #1
 800ec98:	e00a      	b.n	800ecb0 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800ec9a:	220e      	movs	r2, #14
 800ec9c:	2100      	movs	r1, #0
 800ec9e:	f990 0000 	ldrsb.w	r0, [r0]
 800eca2:	f7fe fd46 	bl	800d732 <RegionCommonValueInRange>
 800eca6:	3800      	subs	r0, #0
 800eca8:	bf18      	it	ne
 800ecaa:	2001      	movne	r0, #1
 800ecac:	e000      	b.n	800ecb0 <RegionUS915Verify+0x70>
    switch( phyAttribute )
 800ecae:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800ecb0:	bd08      	pop	{r3, pc}
	...

0800ecb4 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800ecb4:	7a03      	ldrb	r3, [r0, #8]
 800ecb6:	2b10      	cmp	r3, #16
 800ecb8:	d134      	bne.n	800ed24 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800ecba:	6843      	ldr	r3, [r0, #4]
 800ecbc:	7bdb      	ldrb	r3, [r3, #15]
 800ecbe:	2b01      	cmp	r3, #1
 800ecc0:	d130      	bne.n	800ed24 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	4613      	mov	r3, r2
 800ecc6:	2a04      	cmp	r2, #4
 800ecc8:	d82b      	bhi.n	800ed22 <RegionUS915ApplyCFList+0x6e>
{
 800ecca:	b530      	push	{r4, r5, lr}
 800eccc:	e010      	b.n	800ecf0 <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800ecce:	4916      	ldr	r1, [pc, #88]	@ (800ed28 <RegionUS915ApplyCFList+0x74>)
 800ecd0:	680d      	ldr	r5, [r1, #0]
 800ecd2:	f835 101c 	ldrh.w	r1, [r5, ip, lsl #1]
 800ecd6:	f50c 7ed8 	add.w	lr, ip, #432	@ 0x1b0
 800ecda:	f834 401e 	ldrh.w	r4, [r4, lr, lsl #1]
 800ecde:	4021      	ands	r1, r4
 800ece0:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800ece4:	3301      	adds	r3, #1
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	3202      	adds	r2, #2
 800ecea:	b2d2      	uxtb	r2, r2
 800ecec:	2b04      	cmp	r3, #4
 800ecee:	d817      	bhi.n	800ed20 <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800ecf0:	6841      	ldr	r1, [r0, #4]
 800ecf2:	5c89      	ldrb	r1, [r1, r2]
 800ecf4:	4c0d      	ldr	r4, [pc, #52]	@ (800ed2c <RegionUS915ApplyCFList+0x78>)
 800ecf6:	6824      	ldr	r4, [r4, #0]
 800ecf8:	469c      	mov	ip, r3
 800ecfa:	f503 75d8 	add.w	r5, r3, #432	@ 0x1b0
 800ecfe:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800ed02:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800ed06:	4496      	add	lr, r2
 800ed08:	f89e e001 	ldrb.w	lr, [lr, #1]
 800ed0c:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 800ed10:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800ed14:	2b04      	cmp	r3, #4
 800ed16:	d1da      	bne.n	800ecce <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800ed18:	b2c9      	uxtb	r1, r1
 800ed1a:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 800ed1e:	e7d6      	b.n	800ecce <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800ed20:	bd30      	pop	{r4, r5, pc}
 800ed22:	4770      	bx	lr
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop
 800ed28:	20001650 	.word	0x20001650
 800ed2c:	2000164c 	.word	0x2000164c

0800ed30 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800ed30:	b570      	push	{r4, r5, r6, lr}
 800ed32:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800ed34:	2204      	movs	r2, #4
 800ed36:	2100      	movs	r1, #0
 800ed38:	6800      	ldr	r0, [r0, #0]
 800ed3a:	f7fe fd58 	bl	800d7ee <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800ed3e:	2801      	cmp	r0, #1
 800ed40:	d031      	beq.n	800eda6 <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800ed42:	792c      	ldrb	r4, [r5, #4]
 800ed44:	b11c      	cbz	r4, 800ed4e <RegionUS915ChanMaskSet+0x1e>
 800ed46:	2c01      	cmp	r4, #1
 800ed48:	d023      	beq.n	800ed92 <RegionUS915ChanMaskSet+0x62>
 800ed4a:	2000      	movs	r0, #0
 800ed4c:	e020      	b.n	800ed90 <RegionUS915ChanMaskSet+0x60>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800ed4e:	4e17      	ldr	r6, [pc, #92]	@ (800edac <RegionUS915ChanMaskSet+0x7c>)
 800ed50:	6830      	ldr	r0, [r6, #0]
 800ed52:	2206      	movs	r2, #6
 800ed54:	6829      	ldr	r1, [r5, #0]
 800ed56:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800ed5a:	f7fe fd5e 	bl	800d81a <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800ed5e:	6830      	ldr	r0, [r6, #0]
 800ed60:	f890 3374 	ldrb.w	r3, [r0, #884]	@ 0x374
 800ed64:	f8a0 3374 	strh.w	r3, [r0, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	f8a0 3376 	strh.w	r3, [r0, #886]	@ 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800ed6e:	e00c      	b.n	800ed8a <RegionUS915ChanMaskSet+0x5a>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800ed70:	4b0f      	ldr	r3, [pc, #60]	@ (800edb0 <RegionUS915ChanMaskSet+0x80>)
 800ed72:	681a      	ldr	r2, [r3, #0]
 800ed74:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800ed78:	f504 71d8 	add.w	r1, r4, #432	@ 0x1b0
 800ed7c:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 800ed80:	400b      	ands	r3, r1
 800ed82:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800ed86:	3401      	adds	r4, #1
 800ed88:	b2e4      	uxtb	r4, r4
 800ed8a:	2c05      	cmp	r4, #5
 800ed8c:	d9f0      	bls.n	800ed70 <RegionUS915ChanMaskSet+0x40>
            break;
        }
        default:
            return false;
    }
    return true;
 800ed8e:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800ed90:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800ed92:	4b06      	ldr	r3, [pc, #24]	@ (800edac <RegionUS915ChanMaskSet+0x7c>)
 800ed94:	6818      	ldr	r0, [r3, #0]
 800ed96:	2206      	movs	r2, #6
 800ed98:	6829      	ldr	r1, [r5, #0]
 800ed9a:	f500 705b 	add.w	r0, r0, #876	@ 0x36c
 800ed9e:	f7fe fd3c 	bl	800d81a <RegionCommonChanMaskCopy>
    return true;
 800eda2:	2001      	movs	r0, #1
            break;
 800eda4:	e7f4      	b.n	800ed90 <RegionUS915ChanMaskSet+0x60>
        return false;
 800eda6:	2000      	movs	r0, #0
 800eda8:	e7f2      	b.n	800ed90 <RegionUS915ChanMaskSet+0x60>
 800edaa:	bf00      	nop
 800edac:	2000164c 	.word	0x2000164c
 800edb0:	20001650 	.word	0x20001650

0800edb4 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800edb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edb6:	b083      	sub	sp, #12
 800edb8:	460e      	mov	r6, r1
 800edba:	4617      	mov	r7, r2
 800edbc:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800edbe:	280d      	cmp	r0, #13
 800edc0:	bfa8      	it	ge
 800edc2:	200d      	movge	r0, #13
 800edc4:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800edc6:	4d0f      	ldr	r5, [pc, #60]	@ (800ee04 <RegionUS915ComputeRxWindowParameters+0x50>)
 800edc8:	4629      	mov	r1, r5
 800edca:	f7fe ff51 	bl	800dc70 <RegionCommonGetBandwidth>
 800edce:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800edd0:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800edd4:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800edd8:	4a0b      	ldr	r2, [pc, #44]	@ (800ee08 <RegionUS915ComputeRxWindowParameters+0x54>)
 800edda:	5cd0      	ldrb	r0, [r2, r3]
 800eddc:	f7fe fe18 	bl	800da10 <RegionCommonComputeSymbolTimeLoRa>
 800ede0:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800ede2:	4b0a      	ldr	r3, [pc, #40]	@ (800ee0c <RegionUS915ComputeRxWindowParameters+0x58>)
 800ede4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ede6:	4798      	blx	r3
 800ede8:	4603      	mov	r3, r0
 800edea:	f104 020c 	add.w	r2, r4, #12
 800edee:	9201      	str	r2, [sp, #4]
 800edf0:	3408      	adds	r4, #8
 800edf2:	9400      	str	r4, [sp, #0]
 800edf4:	463a      	mov	r2, r7
 800edf6:	4631      	mov	r1, r6
 800edf8:	4628      	mov	r0, r5
 800edfa:	f7fe fe17 	bl	800da2c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800edfe:	b003      	add	sp, #12
 800ee00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee02:	bf00      	nop
 800ee04:	080137c0 	.word	0x080137c0
 800ee08:	08013800 	.word	0x08013800
 800ee0c:	08013b98 	.word	0x08013b98

0800ee10 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800ee10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee14:	b08b      	sub	sp, #44	@ 0x2c
 800ee16:	4604      	mov	r4, r0
 800ee18:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800ee1a:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800ee1e:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800ee20:	4b22      	ldr	r3, [pc, #136]	@ (800eeac <RegionUS915RxConfig+0x9c>)
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	4798      	blx	r3
 800ee26:	2800      	cmp	r0, #0
 800ee28:	d13d      	bne.n	800eea6 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800ee2a:	7ce3      	ldrb	r3, [r4, #19]
 800ee2c:	b933      	cbnz	r3, 800ee3c <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800ee2e:	7823      	ldrb	r3, [r4, #0]
 800ee30:	f003 0307 	and.w	r3, r3, #7
 800ee34:	4a1e      	ldr	r2, [pc, #120]	@ (800eeb0 <RegionUS915RxConfig+0xa0>)
 800ee36:	4f1f      	ldr	r7, [pc, #124]	@ (800eeb4 <RegionUS915RxConfig+0xa4>)
 800ee38:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800ee3c:	4b1e      	ldr	r3, [pc, #120]	@ (800eeb8 <RegionUS915RxConfig+0xa8>)
 800ee3e:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800ee42:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 800eeac <RegionUS915RxConfig+0x9c>
 800ee46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ee4a:	4638      	mov	r0, r7
 800ee4c:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800ee4e:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800ee52:	7ca3      	ldrb	r3, [r4, #18]
 800ee54:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee56:	2001      	movs	r0, #1
 800ee58:	9008      	str	r0, [sp, #32]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	9207      	str	r2, [sp, #28]
 800ee5e:	9206      	str	r2, [sp, #24]
 800ee60:	9205      	str	r2, [sp, #20]
 800ee62:	9204      	str	r2, [sp, #16]
 800ee64:	9203      	str	r2, [sp, #12]
 800ee66:	8923      	ldrh	r3, [r4, #8]
 800ee68:	9302      	str	r3, [sp, #8]
 800ee6a:	2308      	movs	r3, #8
 800ee6c:	9301      	str	r3, [sp, #4]
 800ee6e:	9200      	str	r2, [sp, #0]
 800ee70:	4603      	mov	r3, r0
 800ee72:	464a      	mov	r2, r9
 800ee74:	78a1      	ldrb	r1, [r4, #2]
 800ee76:	47c0      	blx	r8

    if( rxConfig->RepeaterSupport == true )
 800ee78:	7c63      	ldrb	r3, [r4, #17]
 800ee7a:	b18b      	cbz	r3, 800eea0 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800ee7c:	4b0f      	ldr	r3, [pc, #60]	@ (800eebc <RegionUS915RxConfig+0xac>)
 800ee7e:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800ee80:	4b0a      	ldr	r3, [pc, #40]	@ (800eeac <RegionUS915RxConfig+0x9c>)
 800ee82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee84:	310d      	adds	r1, #13
 800ee86:	b2c9      	uxtb	r1, r1
 800ee88:	2001      	movs	r0, #1
 800ee8a:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800ee8c:	4632      	mov	r2, r6
 800ee8e:	4639      	mov	r1, r7
 800ee90:	7ce0      	ldrb	r0, [r4, #19]
 800ee92:	f7fe feff 	bl	800dc94 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800ee96:	702e      	strb	r6, [r5, #0]
    return true;
 800ee98:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800ee9a:	b00b      	add	sp, #44	@ 0x2c
 800ee9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800eea0:	4b07      	ldr	r3, [pc, #28]	@ (800eec0 <RegionUS915RxConfig+0xb0>)
 800eea2:	5d99      	ldrb	r1, [r3, r6]
 800eea4:	e7ec      	b.n	800ee80 <RegionUS915RxConfig+0x70>
        return false;
 800eea6:	2000      	movs	r0, #0
 800eea8:	e7f7      	b.n	800ee9a <RegionUS915RxConfig+0x8a>
 800eeaa:	bf00      	nop
 800eeac:	08013b98 	.word	0x08013b98
 800eeb0:	000927c0 	.word	0x000927c0
 800eeb4:	370870a0 	.word	0x370870a0
 800eeb8:	08013800 	.word	0x08013800
 800eebc:	0801378c 	.word	0x0801378c
 800eec0:	0801379c 	.word	0x0801379c

0800eec4 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800eec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec8:	b08d      	sub	sp, #52	@ 0x34
 800eeca:	4604      	mov	r4, r0
 800eecc:	468b      	mov	fp, r1
 800eece:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800eed0:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800eed4:	4b32      	ldr	r3, [pc, #200]	@ (800efa0 <RegionUS915TxConfig+0xdc>)
 800eed6:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800eeda:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 800efa4 <RegionUS915TxConfig+0xe0>
 800eede:	f8d9 3000 	ldr.w	r3, [r9]
 800eee2:	7801      	ldrb	r1, [r0, #0]
 800eee4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800eee8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800eeec:	7a49      	ldrb	r1, [r1, #9]
 800eeee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800eef2:	482d      	ldr	r0, [pc, #180]	@ (800efa8 <RegionUS915TxConfig+0xe4>)
 800eef4:	6800      	ldr	r0, [r0, #0]
 800eef6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800eefa:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800eefe:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800ef02:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800ef06:	f7ff fce7 	bl	800e8d8 <LimitTxPower>
 800ef0a:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800ef0c:	4927      	ldr	r1, [pc, #156]	@ (800efac <RegionUS915TxConfig+0xe8>)
 800ef0e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ef12:	f7fe fead 	bl	800dc70 <RegionCommonGetBandwidth>
 800ef16:	900a      	str	r0, [sp, #40]	@ 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800ef18:	2200      	movs	r2, #0
 800ef1a:	4925      	ldr	r1, [pc, #148]	@ (800efb0 <RegionUS915TxConfig+0xec>)
 800ef1c:	4630      	mov	r0, r6
 800ef1e:	f7fe fdc1 	bl	800daa4 <RegionCommonComputeTxPower>
 800ef22:	900b      	str	r0, [sp, #44]	@ 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800ef24:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 800efb4 <RegionUS915TxConfig+0xf0>
 800ef28:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800ef2c:	f8d9 1000 	ldr.w	r1, [r9]
 800ef30:	7823      	ldrb	r3, [r4, #0]
 800ef32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ef36:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800ef3a:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800ef3c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800ef40:	9308      	str	r3, [sp, #32]
 800ef42:	2200      	movs	r2, #0
 800ef44:	9207      	str	r2, [sp, #28]
 800ef46:	9206      	str	r2, [sp, #24]
 800ef48:	9205      	str	r2, [sp, #20]
 800ef4a:	2501      	movs	r5, #1
 800ef4c:	9504      	str	r5, [sp, #16]
 800ef4e:	9203      	str	r2, [sp, #12]
 800ef50:	2308      	movs	r3, #8
 800ef52:	9302      	str	r3, [sp, #8]
 800ef54:	9501      	str	r5, [sp, #4]
 800ef56:	f8cd a000 	str.w	sl, [sp]
 800ef5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ef5e:	4628      	mov	r0, r5
 800ef60:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800ef64:	47e0      	blx	ip
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800ef66:	f8d9 2000 	ldr.w	r2, [r9]
 800ef6a:	7823      	ldrb	r3, [r4, #0]
 800ef6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ef70:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800ef74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ef78:	f7fe feae 	bl	800dcd8 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800ef7c:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 800ef80:	7b21      	ldrb	r1, [r4, #12]
 800ef82:	4628      	mov	r0, r5
 800ef84:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800ef86:	89a1      	ldrh	r1, [r4, #12]
 800ef88:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ef8c:	f7ff fc86 	bl	800e89c <GetTimeOnAir>
 800ef90:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800ef92:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800ef96:	4628      	mov	r0, r5
 800ef98:	b00d      	add	sp, #52	@ 0x34
 800ef9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef9e:	bf00      	nop
 800efa0:	08013800 	.word	0x08013800
 800efa4:	2000164c 	.word	0x2000164c
 800efa8:	20001648 	.word	0x20001648
 800efac:	080137c0 	.word	0x080137c0
 800efb0:	41f00000 	.word	0x41f00000
 800efb4:	08013b98 	.word	0x08013b98

0800efb8 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800efb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efbc:	b091      	sub	sp, #68	@ 0x44
 800efbe:	4605      	mov	r5, r0
 800efc0:	4688      	mov	r8, r1
 800efc2:	4617      	mov	r7, r2
 800efc4:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800efc6:	2400      	movs	r4, #0
 800efc8:	940e      	str	r4, [sp, #56]	@ 0x38
 800efca:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800efce:	940b      	str	r4, [sp, #44]	@ 0x2c
 800efd0:	940c      	str	r4, [sp, #48]	@ 0x30
 800efd2:	940d      	str	r4, [sp, #52]	@ 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800efd4:	4b98      	ldr	r3, [pc, #608]	@ (800f238 <RegionUS915LinkAdrReq+0x280>)
 800efd6:	6819      	ldr	r1, [r3, #0]
 800efd8:	2206      	movs	r2, #6
 800efda:	f501 7158 	add.w	r1, r1, #864	@ 0x360
 800efde:	a80b      	add	r0, sp, #44	@ 0x2c
 800efe0:	f7fe fc1b 	bl	800d81a <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800efe4:	e00d      	b.n	800f002 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800efe6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800efea:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
            channelsMask[1] = 0xFFFF;
 800efee:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
            channelsMask[2] = 0xFFFF;
 800eff2:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
            channelsMask[3] = 0xFFFF;
 800eff6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800effa:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 800effe:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800f002:	7a2b      	ldrb	r3, [r5, #8]
 800f004:	42a3      	cmp	r3, r4
 800f006:	f240 8084 	bls.w	800f112 <RegionUS915LinkAdrReq+0x15a>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800f00a:	6868      	ldr	r0, [r5, #4]
 800f00c:	a90e      	add	r1, sp, #56	@ 0x38
 800f00e:	4420      	add	r0, r4
 800f010:	f7fe fc84 	bl	800d91c <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800f014:	4603      	mov	r3, r0
 800f016:	2800      	cmp	r0, #0
 800f018:	d07b      	beq.n	800f112 <RegionUS915LinkAdrReq+0x15a>
        bytesProcessed += nextIndex;
 800f01a:	4423      	add	r3, r4
 800f01c:	b2dc      	uxtb	r4, r3
        if( linkAdrParams.ChMaskCtrl == 6 )
 800f01e:	f89d c03b 	ldrb.w	ip, [sp, #59]	@ 0x3b
 800f022:	f1bc 0f06 	cmp.w	ip, #6
 800f026:	d0de      	beq.n	800efe6 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800f028:	f1bc 0f07 	cmp.w	ip, #7
 800f02c:	d00a      	beq.n	800f044 <RegionUS915LinkAdrReq+0x8c>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800f02e:	f1bc 0f05 	cmp.w	ip, #5
 800f032:	d06a      	beq.n	800f10a <RegionUS915LinkAdrReq+0x152>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800f034:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800f038:	aa10      	add	r2, sp, #64	@ 0x40
 800f03a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800f03e:	f82c 3c14 	strh.w	r3, [ip, #-20]
 800f042:	e7de      	b.n	800f002 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800f044:	2300      	movs	r3, #0
 800f046:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
            channelsMask[1] = 0x0000;
 800f04a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
            channelsMask[2] = 0x0000;
 800f04e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
            channelsMask[3] = 0x0000;
 800f052:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800f056:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 800f05a:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800f05e:	e7d0      	b.n	800f002 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800f060:	aa10      	add	r2, sp, #64	@ 0x40
 800f062:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800f066:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800f06a:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 800f06e:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800f072:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800f076:	4313      	orrs	r3, r2
 800f078:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
                        cntChannelMask++;
 800f07c:	3101      	adds	r1, #1
 800f07e:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800f080:	f10c 0c01 	add.w	ip, ip, #1
 800f084:	fa5f fc8c 	uxtb.w	ip, ip
 800f088:	f1bc 0f07 	cmp.w	ip, #7
 800f08c:	d8b9      	bhi.n	800f002 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800f08e:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 800f092:	2301      	movs	r3, #1
 800f094:	fa03 f30c 	lsl.w	r3, r3, ip
 800f098:	421a      	tst	r2, r3
 800f09a:	d011      	beq.n	800f0c0 <RegionUS915LinkAdrReq+0x108>
                    if( ( i % 2 ) == 0 )
 800f09c:	f01c 0f01 	tst.w	ip, #1
 800f0a0:	d1de      	bne.n	800f060 <RegionUS915LinkAdrReq+0xa8>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800f0a2:	aa10      	add	r2, sp, #64	@ 0x40
 800f0a4:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800f0a8:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800f0ac:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 800f0b0:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800f0b4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800f0b8:	4313      	orrs	r3, r2
 800f0ba:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800f0be:	e7df      	b.n	800f080 <RegionUS915LinkAdrReq+0xc8>
                    if( ( i % 2 ) == 0 )
 800f0c0:	f01c 0f01 	tst.w	ip, #1
 800f0c4:	d110      	bne.n	800f0e8 <RegionUS915LinkAdrReq+0x130>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800f0c6:	aa10      	add	r2, sp, #64	@ 0x40
 800f0c8:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800f0cc:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800f0d0:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800f0d4:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800f0d8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800f0dc:	43db      	mvns	r3, r3
 800f0de:	b21b      	sxth	r3, r3
 800f0e0:	4013      	ands	r3, r2
 800f0e2:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800f0e6:	e7cb      	b.n	800f080 <RegionUS915LinkAdrReq+0xc8>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800f0e8:	aa10      	add	r2, sp, #64	@ 0x40
 800f0ea:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800f0ee:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800f0f2:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800f0f6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800f0fa:	43db      	mvns	r3, r3
 800f0fc:	b21b      	sxth	r3, r3
 800f0fe:	4013      	ands	r3, r2
 800f100:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
                        cntChannelMask++;
 800f104:	3101      	adds	r1, #1
 800f106:	b2c9      	uxtb	r1, r1
 800f108:	e7ba      	b.n	800f080 <RegionUS915LinkAdrReq+0xc8>
            for( uint8_t i = 0; i <= 7; i++ )
 800f10a:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 800f10e:	4661      	mov	r1, ip
 800f110:	e7ba      	b.n	800f088 <RegionUS915LinkAdrReq+0xd0>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800f112:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 800f116:	2b03      	cmp	r3, #3
 800f118:	dd58      	ble.n	800f1cc <RegionUS915LinkAdrReq+0x214>
 800f11a:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800f11e:	2302      	movs	r3, #2
 800f120:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800f124:	7a6b      	ldrb	r3, [r5, #9]
 800f126:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800f12a:	a809      	add	r0, sp, #36	@ 0x24
 800f12c:	f7ff fbf0 	bl	800e910 <RegionUS915GetPhyParam>
 800f130:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800f132:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800f136:	7aab      	ldrb	r3, [r5, #10]
 800f138:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800f13c:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 800f140:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800f144:	f99d 303a 	ldrsb.w	r3, [sp, #58]	@ 0x3a
 800f148:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800f14c:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 800f150:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800f154:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800f158:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800f15c:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800f160:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800f164:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800f168:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800f16c:	2348      	movs	r3, #72	@ 0x48
 800f16e:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800f172:	ab0b      	add	r3, sp, #44	@ 0x2c
 800f174:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800f176:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800f17a:	2304      	movs	r3, #4
 800f17c:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800f180:	4b2d      	ldr	r3, [pc, #180]	@ (800f238 <RegionUS915LinkAdrReq+0x280>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800f186:	230e      	movs	r3, #14
 800f188:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800f18c:	2300      	movs	r3, #0
 800f18e:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800f192:	682b      	ldr	r3, [r5, #0]
 800f194:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800f196:	ab0e      	add	r3, sp, #56	@ 0x38
 800f198:	f10d 023a 	add.w	r2, sp, #58	@ 0x3a
 800f19c:	f10d 0139 	add.w	r1, sp, #57	@ 0x39
 800f1a0:	4668      	mov	r0, sp
 800f1a2:	f7fe fbd9 	bl	800d958 <RegionCommonLinkAdrReqVerifyParams>
 800f1a6:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800f1a8:	2807      	cmp	r0, #7
 800f1aa:	d01c      	beq.n	800f1e6 <RegionUS915LinkAdrReq+0x22e>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800f1ac:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 800f1b0:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 800f1b4:	f99d 303a 	ldrsb.w	r3, [sp, #58]	@ 0x3a
 800f1b8:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800f1ba:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 800f1be:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 800f1c0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f1c2:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	b011      	add	sp, #68	@ 0x44
 800f1c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800f1cc:	2204      	movs	r2, #4
 800f1ce:	2100      	movs	r1, #0
 800f1d0:	a80b      	add	r0, sp, #44	@ 0x2c
 800f1d2:	f7fe fb0c 	bl	800d7ee <RegionCommonCountChannels>
 800f1d6:	2801      	cmp	r0, #1
 800f1d8:	d902      	bls.n	800f1e0 <RegionUS915LinkAdrReq+0x228>
 800f1da:	f04f 0907 	mov.w	r9, #7
 800f1de:	e79e      	b.n	800f11e <RegionUS915LinkAdrReq+0x166>
        status &= 0xFE; // Channel mask KO
 800f1e0:	f04f 0906 	mov.w	r9, #6
 800f1e4:	e79b      	b.n	800f11e <RegionUS915LinkAdrReq+0x166>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800f1e6:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 800f238 <RegionUS915LinkAdrReq+0x280>
 800f1ea:	f8d9 0000 	ldr.w	r0, [r9]
 800f1ee:	2206      	movs	r2, #6
 800f1f0:	a90b      	add	r1, sp, #44	@ 0x2c
 800f1f2:	f500 7058 	add.w	r0, r0, #864	@ 0x360
 800f1f6:	f7fe fb10 	bl	800d81a <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800f1fa:	4b10      	ldr	r3, [pc, #64]	@ (800f23c <RegionUS915LinkAdrReq+0x284>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	8819      	ldrh	r1, [r3, #0]
 800f200:	f8d9 2000 	ldr.w	r2, [r9]
 800f204:	f8b2 0360 	ldrh.w	r0, [r2, #864]	@ 0x360
 800f208:	4001      	ands	r1, r0
 800f20a:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800f20c:	8859      	ldrh	r1, [r3, #2]
 800f20e:	f8b2 0362 	ldrh.w	r0, [r2, #866]	@ 0x362
 800f212:	4001      	ands	r1, r0
 800f214:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800f216:	8899      	ldrh	r1, [r3, #4]
 800f218:	f8b2 0364 	ldrh.w	r0, [r2, #868]	@ 0x364
 800f21c:	4001      	ands	r1, r0
 800f21e:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800f220:	88d9      	ldrh	r1, [r3, #6]
 800f222:	f8b2 0366 	ldrh.w	r0, [r2, #870]	@ 0x366
 800f226:	4001      	ands	r1, r0
 800f228:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800f22a:	f8b2 1368 	ldrh.w	r1, [r2, #872]	@ 0x368
 800f22e:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800f230:	f8b2 236a 	ldrh.w	r2, [r2, #874]	@ 0x36a
 800f234:	815a      	strh	r2, [r3, #10]
 800f236:	e7b9      	b.n	800f1ac <RegionUS915LinkAdrReq+0x1f4>
 800f238:	2000164c 	.word	0x2000164c
 800f23c:	20001650 	.word	0x20001650

0800f240 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800f240:	b538      	push	{r3, r4, r5, lr}
 800f242:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800f244:	6840      	ldr	r0, [r0, #4]
 800f246:	f7ff faf9 	bl	800e83c <VerifyRfFreq>
 800f24a:	b310      	cbz	r0, 800f292 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800f24c:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800f24e:	220d      	movs	r2, #13
 800f250:	2108      	movs	r1, #8
 800f252:	f994 0000 	ldrsb.w	r0, [r4]
 800f256:	f7fe fa6c 	bl	800d732 <RegionCommonValueInRange>
 800f25a:	b908      	cbnz	r0, 800f260 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800f25c:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800f260:	2207      	movs	r2, #7
 800f262:	2105      	movs	r1, #5
 800f264:	f994 0000 	ldrsb.w	r0, [r4]
 800f268:	f7fe fa63 	bl	800d732 <RegionCommonValueInRange>
 800f26c:	2801      	cmp	r0, #1
 800f26e:	d003      	beq.n	800f278 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800f270:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800f274:	2b0d      	cmp	r3, #13
 800f276:	dd01      	ble.n	800f27c <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800f278:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800f27c:	2203      	movs	r2, #3
 800f27e:	2100      	movs	r1, #0
 800f280:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f284:	f7fe fa55 	bl	800d732 <RegionCommonValueInRange>
 800f288:	b908      	cbnz	r0, 800f28e <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800f28a:	f005 05fb 	and.w	r5, r5, #251	@ 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800f28e:	4628      	mov	r0, r5
 800f290:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800f292:	2506      	movs	r5, #6
 800f294:	e7db      	b.n	800f24e <RegionUS915RxParamSetupReq+0xe>

0800f296 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800f296:	f04f 30ff 	mov.w	r0, #4294967295
 800f29a:	4770      	bx	lr

0800f29c <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800f29c:	f04f 30ff 	mov.w	r0, #4294967295
 800f2a0:	4770      	bx	lr

0800f2a2 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800f2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2a6:	4770      	bx	lr

0800f2a8 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800f2a8:	b999      	cbnz	r1, 800f2d2 <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800f2aa:	4b0e      	ldr	r3, [pc, #56]	@ (800f2e4 <RegionUS915AlternateDr+0x3c>)
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	7b53      	ldrb	r3, [r2, #13]
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800f2b4:	4b0b      	ldr	r3, [pc, #44]	@ (800f2e4 <RegionUS915AlternateDr+0x3c>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	7b5a      	ldrb	r2, [r3, #13]
 800f2ba:	4b0b      	ldr	r3, [pc, #44]	@ (800f2e8 <RegionUS915AlternateDr+0x40>)
 800f2bc:	fba3 1302 	umull	r1, r3, r3, r2
 800f2c0:	085b      	lsrs	r3, r3, #1
 800f2c2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800f2c6:	1ad2      	subs	r2, r2, r3
 800f2c8:	f012 0fff 	tst.w	r2, #255	@ 0xff
 800f2cc:	d007      	beq.n	800f2de <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800f2ce:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800f2d0:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800f2d2:	4b04      	ldr	r3, [pc, #16]	@ (800f2e4 <RegionUS915AlternateDr+0x3c>)
 800f2d4:	681a      	ldr	r2, [r3, #0]
 800f2d6:	7b53      	ldrb	r3, [r2, #13]
 800f2d8:	3b01      	subs	r3, #1
 800f2da:	7353      	strb	r3, [r2, #13]
 800f2dc:	e7ea      	b.n	800f2b4 <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 800f2de:	2004      	movs	r0, #4
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop
 800f2e4:	20001650 	.word	0x20001650
 800f2e8:	38e38e39 	.word	0x38e38e39

0800f2ec <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800f2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2f0:	b0a4      	sub	sp, #144	@ 0x90
 800f2f2:	4604      	mov	r4, r0
 800f2f4:	460e      	mov	r6, r1
 800f2f6:	4690      	mov	r8, r2
 800f2f8:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800f2fa:	2500      	movs	r5, #0
 800f2fc:	f88d 508f 	strb.w	r5, [sp, #143]	@ 0x8f
    uint8_t nbRestrictedChannels = 0;
 800f300:	f88d 508e 	strb.w	r5, [sp, #142]	@ 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800f304:	2248      	movs	r2, #72	@ 0x48
 800f306:	4629      	mov	r1, r5
 800f308:	a811      	add	r0, sp, #68	@ 0x44
 800f30a:	f003 fc1d 	bl	8012b48 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800f30e:	2204      	movs	r2, #4
 800f310:	4629      	mov	r1, r5
 800f312:	4b49      	ldr	r3, [pc, #292]	@ (800f438 <RegionUS915NextChannel+0x14c>)
 800f314:	6818      	ldr	r0, [r3, #0]
 800f316:	f7fe fa6a 	bl	800d7ee <RegionCommonCountChannels>
 800f31a:	2800      	cmp	r0, #0
 800f31c:	d052      	beq.n	800f3c4 <RegionUS915NextChannel+0xd8>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800f31e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800f322:	2b03      	cmp	r3, #3
 800f324:	dd08      	ble.n	800f338 <RegionUS915NextChannel+0x4c>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800f326:	4b44      	ldr	r3, [pc, #272]	@ (800f438 <RegionUS915NextChannel+0x14c>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	7a1a      	ldrb	r2, [r3, #8]
 800f32c:	b922      	cbnz	r2, 800f338 <RegionUS915NextChannel+0x4c>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800f32e:	4a43      	ldr	r2, [pc, #268]	@ (800f43c <RegionUS915NextChannel+0x150>)
 800f330:	6812      	ldr	r2, [r2, #0]
 800f332:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 800f336:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800f338:	7a63      	ldrb	r3, [r4, #9]
 800f33a:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800f33e:	7a23      	ldrb	r3, [r4, #8]
 800f340:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800f344:	4b3c      	ldr	r3, [pc, #240]	@ (800f438 <RegionUS915NextChannel+0x14c>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800f34a:	4b3c      	ldr	r3, [pc, #240]	@ (800f43c <RegionUS915NextChannel+0x150>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
 800f350:	4b3b      	ldr	r3, [pc, #236]	@ (800f440 <RegionUS915NextChannel+0x154>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800f356:	2348      	movs	r3, #72	@ 0x48
 800f358:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800f35c:	2300      	movs	r3, #0
 800f35e:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800f360:	6823      	ldr	r3, [r4, #0]
 800f362:	9309      	str	r3, [sp, #36]	@ 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800f364:	6863      	ldr	r3, [r4, #4]
 800f366:	930a      	str	r3, [sp, #40]	@ 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800f368:	7aa3      	ldrb	r3, [r4, #10]
 800f36a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800f36e:	2301      	movs	r3, #1
 800f370:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800f374:	ab03      	add	r3, sp, #12
 800f376:	9310      	str	r3, [sp, #64]	@ 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800f378:	ab0c      	add	r3, sp, #48	@ 0x30
 800f37a:	f104 020c 	add.w	r2, r4, #12
 800f37e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f382:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800f386:	7d23      	ldrb	r3, [r4, #20]
 800f388:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800f38c:	8ae1      	ldrh	r1, [r4, #22]
 800f38e:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800f392:	f7ff fa83 	bl	800e89c <GetTimeOnAir>
 800f396:	900f      	str	r0, [sp, #60]	@ 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800f398:	f8cd 8004 	str.w	r8, [sp, #4]
 800f39c:	f10d 038e 	add.w	r3, sp, #142	@ 0x8e
 800f3a0:	9300      	str	r3, [sp, #0]
 800f3a2:	f10d 038f 	add.w	r3, sp, #143	@ 0x8f
 800f3a6:	aa11      	add	r2, sp, #68	@ 0x44
 800f3a8:	4639      	mov	r1, r7
 800f3aa:	a809      	add	r0, sp, #36	@ 0x24
 800f3ac:	f7fe fbf3 	bl	800db96 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800f3b0:	4605      	mov	r5, r0
 800f3b2:	2800      	cmp	r0, #0
 800f3b4:	d13c      	bne.n	800f430 <RegionUS915NextChannel+0x144>
    {
        if( nextChanParams->Joined == true )
 800f3b6:	7a63      	ldrb	r3, [r4, #9]
 800f3b8:	b98b      	cbnz	r3, 800f3de <RegionUS915NextChannel+0xf2>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800f3ba:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800f3be:	b1db      	cbz	r3, 800f3f8 <RegionUS915NextChannel+0x10c>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	e026      	b.n	800f412 <RegionUS915NextChannel+0x126>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800f3c4:	4d1c      	ldr	r5, [pc, #112]	@ (800f438 <RegionUS915NextChannel+0x14c>)
 800f3c6:	4b1d      	ldr	r3, [pc, #116]	@ (800f43c <RegionUS915NextChannel+0x150>)
 800f3c8:	6819      	ldr	r1, [r3, #0]
 800f3ca:	2204      	movs	r2, #4
 800f3cc:	f501 7158 	add.w	r1, r1, #864	@ 0x360
 800f3d0:	6828      	ldr	r0, [r5, #0]
 800f3d2:	f7fe fa22 	bl	800d81a <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800f3d6:	682b      	ldr	r3, [r5, #0]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	731a      	strb	r2, [r3, #12]
 800f3dc:	e79f      	b.n	800f31e <RegionUS915NextChannel+0x32>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800f3de:	f89d 108f 	ldrb.w	r1, [sp, #143]	@ 0x8f
 800f3e2:	3901      	subs	r1, #1
 800f3e4:	f000 ff58 	bl	8010298 <randr>
 800f3e8:	f100 0390 	add.w	r3, r0, #144	@ 0x90
 800f3ec:	eb0d 0003 	add.w	r0, sp, r3
 800f3f0:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800f3f4:	7033      	strb	r3, [r6, #0]
 800f3f6:	e015      	b.n	800f424 <RegionUS915NextChannel+0x138>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800f3f8:	4b0f      	ldr	r3, [pc, #60]	@ (800f438 <RegionUS915NextChannel+0x14c>)
 800f3fa:	6818      	ldr	r0, [r3, #0]
 800f3fc:	4632      	mov	r2, r6
 800f3fe:	f100 010c 	add.w	r1, r0, #12
 800f402:	f7fe f8c9 	bl	800d598 <RegionBaseUSComputeNext125kHzJoinChannel>
 800f406:	2803      	cmp	r0, #3
 800f408:	d10c      	bne.n	800f424 <RegionUS915NextChannel+0x138>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800f40a:	4605      	mov	r5, r0
 800f40c:	e010      	b.n	800f430 <RegionUS915NextChannel+0x144>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 800f40e:	3301      	adds	r3, #1
 800f410:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800f412:	4a09      	ldr	r2, [pc, #36]	@ (800f438 <RegionUS915NextChannel+0x14c>)
 800f414:	6812      	ldr	r2, [r2, #0]
 800f416:	7a10      	ldrb	r0, [r2, #8]
 800f418:	4118      	asrs	r0, r3
 800f41a:	f010 0f01 	tst.w	r0, #1
 800f41e:	d0f6      	beq.n	800f40e <RegionUS915NextChannel+0x122>
                }
                *channel = 64 + i;
 800f420:	3340      	adds	r3, #64	@ 0x40
 800f422:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800f424:	2248      	movs	r2, #72	@ 0x48
 800f426:	7831      	ldrb	r1, [r6, #0]
 800f428:	4b03      	ldr	r3, [pc, #12]	@ (800f438 <RegionUS915NextChannel+0x14c>)
 800f42a:	6818      	ldr	r0, [r3, #0]
 800f42c:	f7fe f9c3 	bl	800d7b6 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800f430:	4628      	mov	r0, r5
 800f432:	b024      	add	sp, #144	@ 0x90
 800f434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f438:	20001650 	.word	0x20001650
 800f43c:	2000164c 	.word	0x2000164c
 800f440:	20001648 	.word	0x20001648

0800f444 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800f444:	4b04      	ldr	r3, [pc, #16]	@ (800f458 <RegionUS915ApplyDrOffset+0x14>)
 800f446:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f44a:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800f44c:	2800      	cmp	r0, #0
 800f44e:	db01      	blt.n	800f454 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800f450:	b2c0      	uxtb	r0, r0
 800f452:	4770      	bx	lr
        datarate = DR_0;
 800f454:	2000      	movs	r0, #0
 800f456:	e7fb      	b.n	800f450 <RegionUS915ApplyDrOffset+0xc>
 800f458:	080137ac 	.word	0x080137ac

0800f45c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800f45c:	b510      	push	{r4, lr}
 800f45e:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800f460:	2210      	movs	r2, #16
 800f462:	2100      	movs	r1, #0
 800f464:	30f1      	adds	r0, #241	@ 0xf1
 800f466:	f000 ff3c 	bl	80102e2 <memset1>
    ctx->M_n = 0;
 800f46a:	2100      	movs	r1, #0
 800f46c:	f8c4 1114 	str.w	r1, [r4, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800f470:	22f0      	movs	r2, #240	@ 0xf0
 800f472:	4620      	mov	r0, r4
 800f474:	f000 ff35 	bl	80102e2 <memset1>
}
 800f478:	bd10      	pop	{r4, pc}

0800f47a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800f47a:	b508      	push	{r3, lr}
 800f47c:	4602      	mov	r2, r0
 800f47e:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800f480:	2110      	movs	r1, #16
 800f482:	f000 fb3b 	bl	800fafc <lorawan_aes_set_key>
}
 800f486:	bd08      	pop	{r3, pc}

0800f488 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800f488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f48c:	b084      	sub	sp, #16
 800f48e:	4604      	mov	r4, r0
 800f490:	460d      	mov	r5, r1
 800f492:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800f494:	f8d0 3114 	ldr.w	r3, [r0, #276]	@ 0x114
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d054      	beq.n	800f546 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800f49c:	f1c3 0810 	rsb	r8, r3, #16
 800f4a0:	4647      	mov	r7, r8
 800f4a2:	4590      	cmp	r8, r2
 800f4a4:	bf28      	it	cs
 800f4a6:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800f4a8:	f200 1001 	addw	r0, r0, #257	@ 0x101
 800f4ac:	b2ba      	uxth	r2, r7
 800f4ae:	4418      	add	r0, r3
 800f4b0:	f000 feff 	bl	80102b2 <memcpy1>
        ctx->M_n += mlen;
 800f4b4:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 800f4b8:	443b      	add	r3, r7
 800f4ba:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800f4be:	2b0f      	cmp	r3, #15
 800f4c0:	d94d      	bls.n	800f55e <AES_CMAC_Update+0xd6>
 800f4c2:	45b0      	cmp	r8, r6
 800f4c4:	d24b      	bcs.n	800f55e <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	e008      	b.n	800f4dc <AES_CMAC_Update+0x54>
 800f4ca:	18e2      	adds	r2, r4, r3
 800f4cc:	f892 10f1 	ldrb.w	r1, [r2, #241]	@ 0xf1
 800f4d0:	f892 0101 	ldrb.w	r0, [r2, #257]	@ 0x101
 800f4d4:	4041      	eors	r1, r0
 800f4d6:	f882 10f1 	strb.w	r1, [r2, #241]	@ 0xf1
 800f4da:	3301      	adds	r3, #1
 800f4dc:	2b0f      	cmp	r3, #15
 800f4de:	ddf4      	ble.n	800f4ca <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800f4e0:	f104 08f1 	add.w	r8, r4, #241	@ 0xf1
 800f4e4:	2210      	movs	r2, #16
 800f4e6:	4641      	mov	r1, r8
 800f4e8:	4668      	mov	r0, sp
 800f4ea:	f000 fee2 	bl	80102b2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800f4ee:	4622      	mov	r2, r4
 800f4f0:	4669      	mov	r1, sp
 800f4f2:	4668      	mov	r0, sp
 800f4f4:	f000 fb84 	bl	800fc00 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800f4f8:	2210      	movs	r2, #16
 800f4fa:	4669      	mov	r1, sp
 800f4fc:	4640      	mov	r0, r8
 800f4fe:	f000 fed8 	bl	80102b2 <memcpy1>

        data += mlen;
 800f502:	443d      	add	r5, r7
        len -= mlen;
 800f504:	1bf6      	subs	r6, r6, r7
 800f506:	e01e      	b.n	800f546 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800f508:	eb04 0e03 	add.w	lr, r4, r3
 800f50c:	f89e c0f1 	ldrb.w	ip, [lr, #241]	@ 0xf1
 800f510:	5cea      	ldrb	r2, [r5, r3]
 800f512:	ea8c 0c02 	eor.w	ip, ip, r2
 800f516:	f88e c0f1 	strb.w	ip, [lr, #241]	@ 0xf1
 800f51a:	3301      	adds	r3, #1
 800f51c:	2b0f      	cmp	r3, #15
 800f51e:	ddf3      	ble.n	800f508 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800f520:	f104 07f1 	add.w	r7, r4, #241	@ 0xf1
 800f524:	2210      	movs	r2, #16
 800f526:	4639      	mov	r1, r7
 800f528:	4668      	mov	r0, sp
 800f52a:	f000 fec2 	bl	80102b2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800f52e:	4622      	mov	r2, r4
 800f530:	4669      	mov	r1, sp
 800f532:	4668      	mov	r0, sp
 800f534:	f000 fb64 	bl	800fc00 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800f538:	2210      	movs	r2, #16
 800f53a:	4669      	mov	r1, sp
 800f53c:	4638      	mov	r0, r7
 800f53e:	f000 feb8 	bl	80102b2 <memcpy1>

        data += 16;
 800f542:	3510      	adds	r5, #16
        len -= 16;
 800f544:	3e10      	subs	r6, #16
    while( len > 16 )
 800f546:	2e10      	cmp	r6, #16
 800f548:	d901      	bls.n	800f54e <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800f54a:	2300      	movs	r3, #0
 800f54c:	e7e6      	b.n	800f51c <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800f54e:	b2b2      	uxth	r2, r6
 800f550:	4629      	mov	r1, r5
 800f552:	f204 1001 	addw	r0, r4, #257	@ 0x101
 800f556:	f000 feac 	bl	80102b2 <memcpy1>
    ctx->M_n = len;
 800f55a:	f8c4 6114 	str.w	r6, [r4, #276]	@ 0x114
}
 800f55e:	b004      	add	sp, #16
 800f560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f564 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800f564:	b530      	push	{r4, r5, lr}
 800f566:	b089      	sub	sp, #36	@ 0x24
 800f568:	4605      	mov	r5, r0
 800f56a:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800f56c:	2210      	movs	r2, #16
 800f56e:	2100      	movs	r1, #0
 800f570:	eb0d 0002 	add.w	r0, sp, r2
 800f574:	f000 feb5 	bl	80102e2 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800f578:	4622      	mov	r2, r4
 800f57a:	a904      	add	r1, sp, #16
 800f57c:	4608      	mov	r0, r1
 800f57e:	f000 fb3f 	bl	800fc00 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800f582:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800f586:	2b00      	cmp	r3, #0
 800f588:	db01      	blt.n	800f58e <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800f58a:	2300      	movs	r3, #0
 800f58c:	e030      	b.n	800f5f0 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800f58e:	2300      	movs	r3, #0
 800f590:	2b0e      	cmp	r3, #14
 800f592:	dc11      	bgt.n	800f5b8 <AES_CMAC_Final+0x54>
 800f594:	f103 0220 	add.w	r2, r3, #32
 800f598:	eb0d 0102 	add.w	r1, sp, r2
 800f59c:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	f103 0020 	add.w	r0, r3, #32
 800f5a6:	4468      	add	r0, sp
 800f5a8:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800f5ac:	0052      	lsls	r2, r2, #1
 800f5ae:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
 800f5b2:	f801 2c10 	strb.w	r2, [r1, #-16]
 800f5b6:	e7eb      	b.n	800f590 <AES_CMAC_Final+0x2c>
 800f5b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f5bc:	005b      	lsls	r3, r3, #1
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800f5c4:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 800f5c8:	f88d 301f 	strb.w	r3, [sp, #31]
 800f5cc:	e017      	b.n	800f5fe <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800f5ce:	f103 0220 	add.w	r2, r3, #32
 800f5d2:	eb0d 0102 	add.w	r1, sp, r2
 800f5d6:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800f5da:	3301      	adds	r3, #1
 800f5dc:	f103 0020 	add.w	r0, r3, #32
 800f5e0:	4468      	add	r0, sp
 800f5e2:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800f5e6:	0052      	lsls	r2, r2, #1
 800f5e8:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
 800f5ec:	f801 2c10 	strb.w	r2, [r1, #-16]
 800f5f0:	2b0e      	cmp	r3, #14
 800f5f2:	ddec      	ble.n	800f5ce <AES_CMAC_Final+0x6a>
 800f5f4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f5f8:	005b      	lsls	r3, r3, #1
 800f5fa:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800f5fe:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 800f602:	2810      	cmp	r0, #16
 800f604:	d014      	beq.n	800f630 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800f606:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	db30      	blt.n	800f670 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800f60e:	2300      	movs	r3, #0
 800f610:	e041      	b.n	800f696 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800f612:	18e1      	adds	r1, r4, r3
 800f614:	f891 2101 	ldrb.w	r2, [r1, #257]	@ 0x101
 800f618:	f103 0020 	add.w	r0, r3, #32
 800f61c:	4468      	add	r0, sp
 800f61e:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800f622:	4042      	eors	r2, r0
 800f624:	f881 2101 	strb.w	r2, [r1, #257]	@ 0x101
 800f628:	3301      	adds	r3, #1
 800f62a:	2b0f      	cmp	r3, #15
 800f62c:	ddf1      	ble.n	800f612 <AES_CMAC_Final+0xae>
 800f62e:	e059      	b.n	800f6e4 <AES_CMAC_Final+0x180>
 800f630:	2300      	movs	r3, #0
 800f632:	e7fa      	b.n	800f62a <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800f634:	f103 0220 	add.w	r2, r3, #32
 800f638:	eb0d 0102 	add.w	r1, sp, r2
 800f63c:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800f640:	3301      	adds	r3, #1
 800f642:	f103 0c20 	add.w	ip, r3, #32
 800f646:	44ec      	add	ip, sp
 800f648:	f81c cc10 	ldrb.w	ip, [ip, #-16]
 800f64c:	0052      	lsls	r2, r2, #1
 800f64e:	ea42 12dc 	orr.w	r2, r2, ip, lsr #7
 800f652:	f801 2c10 	strb.w	r2, [r1, #-16]
 800f656:	2b0e      	cmp	r3, #14
 800f658:	ddec      	ble.n	800f634 <AES_CMAC_Final+0xd0>
 800f65a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f65e:	005b      	lsls	r3, r3, #1
 800f660:	b2db      	uxtb	r3, r3
 800f662:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800f666:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 800f66a:	f88d 301f 	strb.w	r3, [sp, #31]
 800f66e:	e019      	b.n	800f6a4 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800f670:	2300      	movs	r3, #0
 800f672:	e7f0      	b.n	800f656 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800f674:	f103 0220 	add.w	r2, r3, #32
 800f678:	eb0d 0102 	add.w	r1, sp, r2
 800f67c:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800f680:	3301      	adds	r3, #1
 800f682:	f103 0c20 	add.w	ip, r3, #32
 800f686:	44ec      	add	ip, sp
 800f688:	f81c cc10 	ldrb.w	ip, [ip, #-16]
 800f68c:	0052      	lsls	r2, r2, #1
 800f68e:	ea42 12dc 	orr.w	r2, r2, ip, lsr #7
 800f692:	f801 2c10 	strb.w	r2, [r1, #-16]
 800f696:	2b0e      	cmp	r3, #14
 800f698:	ddec      	ble.n	800f674 <AES_CMAC_Final+0x110>
 800f69a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f69e:	005b      	lsls	r3, r3, #1
 800f6a0:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800f6a4:	4420      	add	r0, r4
 800f6a6:	2380      	movs	r3, #128	@ 0x80
 800f6a8:	f880 3101 	strb.w	r3, [r0, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800f6ac:	e003      	b.n	800f6b6 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800f6ae:	4423      	add	r3, r4
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800f6b6:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
 800f6c0:	2b0f      	cmp	r3, #15
 800f6c2:	d9f4      	bls.n	800f6ae <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	e00b      	b.n	800f6e0 <AES_CMAC_Final+0x17c>
 800f6c8:	18e1      	adds	r1, r4, r3
 800f6ca:	f891 2101 	ldrb.w	r2, [r1, #257]	@ 0x101
 800f6ce:	f103 0020 	add.w	r0, r3, #32
 800f6d2:	4468      	add	r0, sp
 800f6d4:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800f6d8:	4042      	eors	r2, r0
 800f6da:	f881 2101 	strb.w	r2, [r1, #257]	@ 0x101
 800f6de:	3301      	adds	r3, #1
 800f6e0:	2b0f      	cmp	r3, #15
 800f6e2:	ddf1      	ble.n	800f6c8 <AES_CMAC_Final+0x164>
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	e009      	b.n	800f6fc <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800f6e8:	18e2      	adds	r2, r4, r3
 800f6ea:	f892 c0f1 	ldrb.w	ip, [r2, #241]	@ 0xf1
 800f6ee:	f892 1101 	ldrb.w	r1, [r2, #257]	@ 0x101
 800f6f2:	ea8c 0c01 	eor.w	ip, ip, r1
 800f6f6:	f882 c0f1 	strb.w	ip, [r2, #241]	@ 0xf1
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	2b0f      	cmp	r3, #15
 800f6fe:	ddf3      	ble.n	800f6e8 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800f700:	2210      	movs	r2, #16
 800f702:	f104 01f1 	add.w	r1, r4, #241	@ 0xf1
 800f706:	4668      	mov	r0, sp
 800f708:	f000 fdd3 	bl	80102b2 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800f70c:	4622      	mov	r2, r4
 800f70e:	4629      	mov	r1, r5
 800f710:	4668      	mov	r0, sp
 800f712:	f000 fa75 	bl	800fc00 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800f716:	2210      	movs	r2, #16
 800f718:	2100      	movs	r1, #0
 800f71a:	eb0d 0002 	add.w	r0, sp, r2
 800f71e:	f000 fde0 	bl	80102e2 <memset1>
}
 800f722:	b009      	add	sp, #36	@ 0x24
 800f724:	bd30      	pop	{r4, r5, pc}

0800f726 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800f726:	780b      	ldrb	r3, [r1, #0]
 800f728:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800f72a:	784b      	ldrb	r3, [r1, #1]
 800f72c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800f72e:	788b      	ldrb	r3, [r1, #2]
 800f730:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800f732:	78cb      	ldrb	r3, [r1, #3]
 800f734:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800f736:	790b      	ldrb	r3, [r1, #4]
 800f738:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800f73a:	794b      	ldrb	r3, [r1, #5]
 800f73c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800f73e:	798b      	ldrb	r3, [r1, #6]
 800f740:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800f742:	79cb      	ldrb	r3, [r1, #7]
 800f744:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800f746:	7a0b      	ldrb	r3, [r1, #8]
 800f748:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800f74a:	7a4b      	ldrb	r3, [r1, #9]
 800f74c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800f74e:	7a8b      	ldrb	r3, [r1, #10]
 800f750:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800f752:	7acb      	ldrb	r3, [r1, #11]
 800f754:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800f756:	7b0b      	ldrb	r3, [r1, #12]
 800f758:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800f75a:	7b4b      	ldrb	r3, [r1, #13]
 800f75c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800f75e:	7b8b      	ldrb	r3, [r1, #14]
 800f760:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800f762:	7bcb      	ldrb	r3, [r1, #15]
 800f764:	73c3      	strb	r3, [r0, #15]
#endif
}
 800f766:	4770      	bx	lr

0800f768 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800f768:	e004      	b.n	800f774 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800f76a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f76e:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800f772:	461a      	mov	r2, r3
 800f774:	1e53      	subs	r3, r2, #1
 800f776:	b2db      	uxtb	r3, r3
 800f778:	2a00      	cmp	r2, #0
 800f77a:	d1f6      	bne.n	800f76a <copy_block_nn+0x2>
}
 800f77c:	4770      	bx	lr

0800f77e <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800f77e:	7803      	ldrb	r3, [r0, #0]
 800f780:	780a      	ldrb	r2, [r1, #0]
 800f782:	4053      	eors	r3, r2
 800f784:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800f786:	7843      	ldrb	r3, [r0, #1]
 800f788:	784a      	ldrb	r2, [r1, #1]
 800f78a:	4053      	eors	r3, r2
 800f78c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800f78e:	7883      	ldrb	r3, [r0, #2]
 800f790:	788a      	ldrb	r2, [r1, #2]
 800f792:	4053      	eors	r3, r2
 800f794:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800f796:	78c3      	ldrb	r3, [r0, #3]
 800f798:	78ca      	ldrb	r2, [r1, #3]
 800f79a:	4053      	eors	r3, r2
 800f79c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800f79e:	7903      	ldrb	r3, [r0, #4]
 800f7a0:	790a      	ldrb	r2, [r1, #4]
 800f7a2:	4053      	eors	r3, r2
 800f7a4:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800f7a6:	7943      	ldrb	r3, [r0, #5]
 800f7a8:	794a      	ldrb	r2, [r1, #5]
 800f7aa:	4053      	eors	r3, r2
 800f7ac:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800f7ae:	7983      	ldrb	r3, [r0, #6]
 800f7b0:	798a      	ldrb	r2, [r1, #6]
 800f7b2:	4053      	eors	r3, r2
 800f7b4:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800f7b6:	79c3      	ldrb	r3, [r0, #7]
 800f7b8:	79ca      	ldrb	r2, [r1, #7]
 800f7ba:	4053      	eors	r3, r2
 800f7bc:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800f7be:	7a03      	ldrb	r3, [r0, #8]
 800f7c0:	7a0a      	ldrb	r2, [r1, #8]
 800f7c2:	4053      	eors	r3, r2
 800f7c4:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800f7c6:	7a43      	ldrb	r3, [r0, #9]
 800f7c8:	7a4a      	ldrb	r2, [r1, #9]
 800f7ca:	4053      	eors	r3, r2
 800f7cc:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800f7ce:	7a83      	ldrb	r3, [r0, #10]
 800f7d0:	7a8a      	ldrb	r2, [r1, #10]
 800f7d2:	4053      	eors	r3, r2
 800f7d4:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800f7d6:	7ac3      	ldrb	r3, [r0, #11]
 800f7d8:	7aca      	ldrb	r2, [r1, #11]
 800f7da:	4053      	eors	r3, r2
 800f7dc:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800f7de:	7b03      	ldrb	r3, [r0, #12]
 800f7e0:	7b0a      	ldrb	r2, [r1, #12]
 800f7e2:	4053      	eors	r3, r2
 800f7e4:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800f7e6:	7b43      	ldrb	r3, [r0, #13]
 800f7e8:	7b4a      	ldrb	r2, [r1, #13]
 800f7ea:	4053      	eors	r3, r2
 800f7ec:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800f7ee:	7b83      	ldrb	r3, [r0, #14]
 800f7f0:	7b8a      	ldrb	r2, [r1, #14]
 800f7f2:	4053      	eors	r3, r2
 800f7f4:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800f7f6:	7bc3      	ldrb	r3, [r0, #15]
 800f7f8:	7bca      	ldrb	r2, [r1, #15]
 800f7fa:	4053      	eors	r3, r2
 800f7fc:	73c3      	strb	r3, [r0, #15]
#endif
}
 800f7fe:	4770      	bx	lr

0800f800 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800f800:	780b      	ldrb	r3, [r1, #0]
 800f802:	f892 c000 	ldrb.w	ip, [r2]
 800f806:	ea83 030c 	eor.w	r3, r3, ip
 800f80a:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800f80c:	784b      	ldrb	r3, [r1, #1]
 800f80e:	f892 c001 	ldrb.w	ip, [r2, #1]
 800f812:	ea83 030c 	eor.w	r3, r3, ip
 800f816:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800f818:	788b      	ldrb	r3, [r1, #2]
 800f81a:	f892 c002 	ldrb.w	ip, [r2, #2]
 800f81e:	ea83 030c 	eor.w	r3, r3, ip
 800f822:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800f824:	78cb      	ldrb	r3, [r1, #3]
 800f826:	f892 c003 	ldrb.w	ip, [r2, #3]
 800f82a:	ea83 030c 	eor.w	r3, r3, ip
 800f82e:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800f830:	790b      	ldrb	r3, [r1, #4]
 800f832:	f892 c004 	ldrb.w	ip, [r2, #4]
 800f836:	ea83 030c 	eor.w	r3, r3, ip
 800f83a:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800f83c:	794b      	ldrb	r3, [r1, #5]
 800f83e:	f892 c005 	ldrb.w	ip, [r2, #5]
 800f842:	ea83 030c 	eor.w	r3, r3, ip
 800f846:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800f848:	798b      	ldrb	r3, [r1, #6]
 800f84a:	f892 c006 	ldrb.w	ip, [r2, #6]
 800f84e:	ea83 030c 	eor.w	r3, r3, ip
 800f852:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800f854:	79cb      	ldrb	r3, [r1, #7]
 800f856:	f892 c007 	ldrb.w	ip, [r2, #7]
 800f85a:	ea83 030c 	eor.w	r3, r3, ip
 800f85e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800f860:	7a0b      	ldrb	r3, [r1, #8]
 800f862:	f892 c008 	ldrb.w	ip, [r2, #8]
 800f866:	ea83 030c 	eor.w	r3, r3, ip
 800f86a:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800f86c:	7a4b      	ldrb	r3, [r1, #9]
 800f86e:	f892 c009 	ldrb.w	ip, [r2, #9]
 800f872:	ea83 030c 	eor.w	r3, r3, ip
 800f876:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800f878:	7a8b      	ldrb	r3, [r1, #10]
 800f87a:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800f87e:	ea83 030c 	eor.w	r3, r3, ip
 800f882:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800f884:	7acb      	ldrb	r3, [r1, #11]
 800f886:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800f88a:	ea83 030c 	eor.w	r3, r3, ip
 800f88e:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800f890:	7b0b      	ldrb	r3, [r1, #12]
 800f892:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800f896:	ea83 030c 	eor.w	r3, r3, ip
 800f89a:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800f89c:	7b4b      	ldrb	r3, [r1, #13]
 800f89e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800f8a2:	ea83 030c 	eor.w	r3, r3, ip
 800f8a6:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800f8a8:	7b8b      	ldrb	r3, [r1, #14]
 800f8aa:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800f8ae:	ea83 030c 	eor.w	r3, r3, ip
 800f8b2:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800f8b4:	7bcb      	ldrb	r3, [r1, #15]
 800f8b6:	7bd2      	ldrb	r2, [r2, #15]
 800f8b8:	4053      	eors	r3, r2
 800f8ba:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800f8bc:	4770      	bx	lr

0800f8be <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800f8be:	b508      	push	{r3, lr}
    xor_block(d, k);
 800f8c0:	f7ff ff5d 	bl	800f77e <xor_block>
}
 800f8c4:	bd08      	pop	{r3, pc}
	...

0800f8c8 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800f8c8:	7802      	ldrb	r2, [r0, #0]
 800f8ca:	4b18      	ldr	r3, [pc, #96]	@ (800f92c <shift_sub_rows+0x64>)
 800f8cc:	5c9a      	ldrb	r2, [r3, r2]
 800f8ce:	7002      	strb	r2, [r0, #0]
 800f8d0:	7902      	ldrb	r2, [r0, #4]
 800f8d2:	5c9a      	ldrb	r2, [r3, r2]
 800f8d4:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800f8d6:	7a02      	ldrb	r2, [r0, #8]
 800f8d8:	5c9a      	ldrb	r2, [r3, r2]
 800f8da:	7202      	strb	r2, [r0, #8]
 800f8dc:	7b02      	ldrb	r2, [r0, #12]
 800f8de:	5c9a      	ldrb	r2, [r3, r2]
 800f8e0:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800f8e2:	7842      	ldrb	r2, [r0, #1]
 800f8e4:	7941      	ldrb	r1, [r0, #5]
 800f8e6:	5c59      	ldrb	r1, [r3, r1]
 800f8e8:	7041      	strb	r1, [r0, #1]
 800f8ea:	7a41      	ldrb	r1, [r0, #9]
 800f8ec:	5c59      	ldrb	r1, [r3, r1]
 800f8ee:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800f8f0:	7b41      	ldrb	r1, [r0, #13]
 800f8f2:	5c59      	ldrb	r1, [r3, r1]
 800f8f4:	7241      	strb	r1, [r0, #9]
 800f8f6:	5c9a      	ldrb	r2, [r3, r2]
 800f8f8:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800f8fa:	7882      	ldrb	r2, [r0, #2]
 800f8fc:	7a81      	ldrb	r1, [r0, #10]
 800f8fe:	5c59      	ldrb	r1, [r3, r1]
 800f900:	7081      	strb	r1, [r0, #2]
 800f902:	5c9a      	ldrb	r2, [r3, r2]
 800f904:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800f906:	7982      	ldrb	r2, [r0, #6]
 800f908:	7b81      	ldrb	r1, [r0, #14]
 800f90a:	5c59      	ldrb	r1, [r3, r1]
 800f90c:	7181      	strb	r1, [r0, #6]
 800f90e:	5c9a      	ldrb	r2, [r3, r2]
 800f910:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800f912:	7bc2      	ldrb	r2, [r0, #15]
 800f914:	7ac1      	ldrb	r1, [r0, #11]
 800f916:	5c59      	ldrb	r1, [r3, r1]
 800f918:	73c1      	strb	r1, [r0, #15]
 800f91a:	79c1      	ldrb	r1, [r0, #7]
 800f91c:	5c59      	ldrb	r1, [r3, r1]
 800f91e:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800f920:	78c1      	ldrb	r1, [r0, #3]
 800f922:	5c59      	ldrb	r1, [r3, r1]
 800f924:	71c1      	strb	r1, [r0, #7]
 800f926:	5c9b      	ldrb	r3, [r3, r2]
 800f928:	70c3      	strb	r3, [r0, #3]
}
 800f92a:	4770      	bx	lr
 800f92c:	08013a10 	.word	0x08013a10

0800f930 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800f930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f934:	b084      	sub	sp, #16
 800f936:	4604      	mov	r4, r0
    block_copy(st, dt);
 800f938:	4601      	mov	r1, r0
 800f93a:	4668      	mov	r0, sp
 800f93c:	f7ff fef3 	bl	800f726 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800f940:	f89d c000 	ldrb.w	ip, [sp]
 800f944:	4b6a      	ldr	r3, [pc, #424]	@ (800faf0 <mix_sub_columns+0x1c0>)
 800f946:	f813 000c 	ldrb.w	r0, [r3, ip]
 800f94a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800f94e:	4a69      	ldr	r2, [pc, #420]	@ (800faf4 <mix_sub_columns+0x1c4>)
 800f950:	f812 9008 	ldrb.w	r9, [r2, r8]
 800f954:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800f958:	4967      	ldr	r1, [pc, #412]	@ (800faf8 <mix_sub_columns+0x1c8>)
 800f95a:	f811 500e 	ldrb.w	r5, [r1, lr]
 800f95e:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800f962:	5dce      	ldrb	r6, [r1, r7]
 800f964:	ea80 0009 	eor.w	r0, r0, r9
 800f968:	4068      	eors	r0, r5
 800f96a:	4070      	eors	r0, r6
 800f96c:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800f96e:	f811 000c 	ldrb.w	r0, [r1, ip]
 800f972:	f813 a008 	ldrb.w	sl, [r3, r8]
 800f976:	f812 900e 	ldrb.w	r9, [r2, lr]
 800f97a:	ea80 0a0a 	eor.w	sl, r0, sl
 800f97e:	ea89 090a 	eor.w	r9, r9, sl
 800f982:	ea86 0609 	eor.w	r6, r6, r9
 800f986:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800f988:	f811 8008 	ldrb.w	r8, [r1, r8]
 800f98c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800f990:	5dd6      	ldrb	r6, [r2, r7]
 800f992:	ea80 0008 	eor.w	r0, r0, r8
 800f996:	ea8e 0000 	eor.w	r0, lr, r0
 800f99a:	4070      	eors	r0, r6
 800f99c:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800f99e:	f812 600c 	ldrb.w	r6, [r2, ip]
 800f9a2:	5dd8      	ldrb	r0, [r3, r7]
 800f9a4:	ea86 0608 	eor.w	r6, r6, r8
 800f9a8:	4075      	eors	r5, r6
 800f9aa:	4068      	eors	r0, r5
 800f9ac:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800f9ae:	f89d c004 	ldrb.w	ip, [sp, #4]
 800f9b2:	f813 000c 	ldrb.w	r0, [r3, ip]
 800f9b6:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800f9ba:	f812 9008 	ldrb.w	r9, [r2, r8]
 800f9be:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800f9c2:	f811 500e 	ldrb.w	r5, [r1, lr]
 800f9c6:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800f9ca:	5dce      	ldrb	r6, [r1, r7]
 800f9cc:	ea80 0009 	eor.w	r0, r0, r9
 800f9d0:	4068      	eors	r0, r5
 800f9d2:	4070      	eors	r0, r6
 800f9d4:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800f9d6:	f811 000c 	ldrb.w	r0, [r1, ip]
 800f9da:	f813 a008 	ldrb.w	sl, [r3, r8]
 800f9de:	f812 900e 	ldrb.w	r9, [r2, lr]
 800f9e2:	ea80 0a0a 	eor.w	sl, r0, sl
 800f9e6:	ea89 090a 	eor.w	r9, r9, sl
 800f9ea:	ea86 0609 	eor.w	r6, r6, r9
 800f9ee:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800f9f0:	f811 8008 	ldrb.w	r8, [r1, r8]
 800f9f4:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800f9f8:	5dd6      	ldrb	r6, [r2, r7]
 800f9fa:	ea80 0008 	eor.w	r0, r0, r8
 800f9fe:	ea8e 0000 	eor.w	r0, lr, r0
 800fa02:	4070      	eors	r0, r6
 800fa04:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800fa06:	f812 600c 	ldrb.w	r6, [r2, ip]
 800fa0a:	5dd8      	ldrb	r0, [r3, r7]
 800fa0c:	ea86 0608 	eor.w	r6, r6, r8
 800fa10:	4075      	eors	r5, r6
 800fa12:	4068      	eors	r0, r5
 800fa14:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800fa16:	f89d c008 	ldrb.w	ip, [sp, #8]
 800fa1a:	f813 000c 	ldrb.w	r0, [r3, ip]
 800fa1e:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800fa22:	f812 9008 	ldrb.w	r9, [r2, r8]
 800fa26:	f89d e002 	ldrb.w	lr, [sp, #2]
 800fa2a:	f811 500e 	ldrb.w	r5, [r1, lr]
 800fa2e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800fa32:	5dce      	ldrb	r6, [r1, r7]
 800fa34:	ea80 0009 	eor.w	r0, r0, r9
 800fa38:	4068      	eors	r0, r5
 800fa3a:	4070      	eors	r0, r6
 800fa3c:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800fa3e:	f811 000c 	ldrb.w	r0, [r1, ip]
 800fa42:	f813 a008 	ldrb.w	sl, [r3, r8]
 800fa46:	f812 900e 	ldrb.w	r9, [r2, lr]
 800fa4a:	ea80 0a0a 	eor.w	sl, r0, sl
 800fa4e:	ea89 090a 	eor.w	r9, r9, sl
 800fa52:	ea86 0609 	eor.w	r6, r6, r9
 800fa56:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800fa58:	f811 8008 	ldrb.w	r8, [r1, r8]
 800fa5c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800fa60:	5dd6      	ldrb	r6, [r2, r7]
 800fa62:	ea80 0008 	eor.w	r0, r0, r8
 800fa66:	ea8e 0000 	eor.w	r0, lr, r0
 800fa6a:	4070      	eors	r0, r6
 800fa6c:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800fa6e:	f812 600c 	ldrb.w	r6, [r2, ip]
 800fa72:	5dd8      	ldrb	r0, [r3, r7]
 800fa74:	ea86 0608 	eor.w	r6, r6, r8
 800fa78:	4075      	eors	r5, r6
 800fa7a:	4068      	eors	r0, r5
 800fa7c:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800fa7e:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800fa82:	5d98      	ldrb	r0, [r3, r6]
 800fa84:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800fa88:	f812 9008 	ldrb.w	r9, [r2, r8]
 800fa8c:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800fa90:	f811 c007 	ldrb.w	ip, [r1, r7]
 800fa94:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800fa98:	f811 e005 	ldrb.w	lr, [r1, r5]
 800fa9c:	ea80 0009 	eor.w	r0, r0, r9
 800faa0:	ea8c 0000 	eor.w	r0, ip, r0
 800faa4:	ea8e 0000 	eor.w	r0, lr, r0
 800faa8:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800faaa:	5d88      	ldrb	r0, [r1, r6]
 800faac:	f813 a008 	ldrb.w	sl, [r3, r8]
 800fab0:	f812 9007 	ldrb.w	r9, [r2, r7]
 800fab4:	ea80 0a0a 	eor.w	sl, r0, sl
 800fab8:	ea89 090a 	eor.w	r9, r9, sl
 800fabc:	ea8e 0e09 	eor.w	lr, lr, r9
 800fac0:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800fac4:	f811 1008 	ldrb.w	r1, [r1, r8]
 800fac8:	f813 e007 	ldrb.w	lr, [r3, r7]
 800facc:	5d57      	ldrb	r7, [r2, r5]
 800face:	4048      	eors	r0, r1
 800fad0:	ea8e 0000 	eor.w	r0, lr, r0
 800fad4:	4078      	eors	r0, r7
 800fad6:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800fad8:	5d92      	ldrb	r2, [r2, r6]
 800fada:	5d5b      	ldrb	r3, [r3, r5]
 800fadc:	4051      	eors	r1, r2
 800fade:	ea8c 0c01 	eor.w	ip, ip, r1
 800fae2:	ea83 030c 	eor.w	r3, r3, ip
 800fae6:	73e3      	strb	r3, [r4, #15]
  }
 800fae8:	b004      	add	sp, #16
 800faea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faee:	bf00      	nop
 800faf0:	08013910 	.word	0x08013910
 800faf4:	08013810 	.word	0x08013810
 800faf8:	08013a10 	.word	0x08013a10

0800fafc <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800fafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb00:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800fb02:	f1a1 0310 	sub.w	r3, r1, #16
 800fb06:	b2db      	uxtb	r3, r3
 800fb08:	2b10      	cmp	r3, #16
 800fb0a:	d81a      	bhi.n	800fb42 <lorawan_aes_set_key+0x46>
 800fb0c:	460d      	mov	r5, r1
 800fb0e:	4a3a      	ldr	r2, [pc, #232]	@ (800fbf8 <lorawan_aes_set_key+0xfc>)
 800fb10:	fa22 f303 	lsr.w	r3, r2, r3
 800fb14:	f013 0f01 	tst.w	r3, #1
 800fb18:	d013      	beq.n	800fb42 <lorawan_aes_set_key+0x46>
        break;
    default:
        ctx->rnd = 0;
        return ( uint8_t )-1;
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800fb1a:	460a      	mov	r2, r1
 800fb1c:	4601      	mov	r1, r0
 800fb1e:	4620      	mov	r0, r4
 800fb20:	f7ff fe22 	bl	800f768 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800fb24:	f105 031c 	add.w	r3, r5, #28
 800fb28:	b2db      	uxtb	r3, r3
 800fb2a:	009b      	lsls	r3, r3, #2
 800fb2c:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800fb30:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800fb34:	3b01      	subs	r3, #1
 800fb36:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800fb3a:	462b      	mov	r3, r5
 800fb3c:	f04f 0c01 	mov.w	ip, #1
 800fb40:	e029      	b.n	800fb96 <lorawan_aes_set_key+0x9a>
        ctx->rnd = 0;
 800fb42:	2300      	movs	r3, #0
 800fb44:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
        return ( uint8_t )-1;
 800fb48:	20ff      	movs	r0, #255	@ 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800fb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        else if( keylen > 24 && cc % keylen == 16 )
 800fb4e:	2d18      	cmp	r5, #24
 800fb50:	d901      	bls.n	800fb56 <lorawan_aes_set_key+0x5a>
 800fb52:	2a10      	cmp	r2, #16
 800fb54:	d047      	beq.n	800fbe6 <lorawan_aes_set_key+0xea>
        tt = cc - keylen;
 800fb56:	1b5a      	subs	r2, r3, r5
 800fb58:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800fb5a:	f814 9002 	ldrb.w	r9, [r4, r2]
 800fb5e:	ea89 0808 	eor.w	r8, r9, r8
 800fb62:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800fb66:	f102 0801 	add.w	r8, r2, #1
 800fb6a:	f814 8008 	ldrb.w	r8, [r4, r8]
 800fb6e:	f100 0901 	add.w	r9, r0, #1
 800fb72:	ea88 0707 	eor.w	r7, r8, r7
 800fb76:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800fb7a:	1c97      	adds	r7, r2, #2
 800fb7c:	5de7      	ldrb	r7, [r4, r7]
 800fb7e:	f100 0802 	add.w	r8, r0, #2
 800fb82:	407e      	eors	r6, r7
 800fb84:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800fb88:	3203      	adds	r2, #3
 800fb8a:	5ca6      	ldrb	r6, [r4, r2]
 800fb8c:	1cc2      	adds	r2, r0, #3
 800fb8e:	4071      	eors	r1, r6
 800fb90:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800fb92:	3304      	adds	r3, #4
 800fb94:	b2db      	uxtb	r3, r3
 800fb96:	4573      	cmp	r3, lr
 800fb98:	d22c      	bcs.n	800fbf4 <lorawan_aes_set_key+0xf8>
        t0 = ctx->ksch[cc - 4];
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	1f1a      	subs	r2, r3, #4
 800fb9e:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800fba2:	1eda      	subs	r2, r3, #3
 800fba4:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800fba6:	1e9a      	subs	r2, r3, #2
 800fba8:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800fbaa:	1e5a      	subs	r2, r3, #1
 800fbac:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800fbae:	fbb3 f2f5 	udiv	r2, r3, r5
 800fbb2:	fb05 3212 	mls	r2, r5, r2, r3
 800fbb6:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 800fbba:	d1c8      	bne.n	800fb4e <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 800fbbc:	4a0f      	ldr	r2, [pc, #60]	@ (800fbfc <lorawan_aes_set_key+0x100>)
 800fbbe:	f812 9007 	ldrb.w	r9, [r2, r7]
 800fbc2:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800fbc6:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800fbc8:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800fbca:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800fbce:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800fbd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fbd6:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800fbda:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 800fbde:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 800fbe2:	46c8      	mov	r8, r9
 800fbe4:	e7b7      	b.n	800fb56 <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 800fbe6:	4a05      	ldr	r2, [pc, #20]	@ (800fbfc <lorawan_aes_set_key+0x100>)
 800fbe8:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800fbec:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800fbee:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800fbf0:	5c51      	ldrb	r1, [r2, r1]
 800fbf2:	e7b0      	b.n	800fb56 <lorawan_aes_set_key+0x5a>
    return 0;
 800fbf4:	2000      	movs	r0, #0
 800fbf6:	e7a8      	b.n	800fb4a <lorawan_aes_set_key+0x4e>
 800fbf8:	00010101 	.word	0x00010101
 800fbfc:	08013a10 	.word	0x08013a10

0800fc00 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800fc00:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800fc04:	b31b      	cbz	r3, 800fc4e <lorawan_aes_encrypt+0x4e>
{
 800fc06:	b570      	push	{r4, r5, r6, lr}
 800fc08:	b084      	sub	sp, #16
 800fc0a:	460e      	mov	r6, r1
 800fc0c:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800fc0e:	4601      	mov	r1, r0
 800fc10:	4668      	mov	r0, sp
 800fc12:	f7ff fdf5 	bl	800f800 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800fc16:	2401      	movs	r4, #1
 800fc18:	e009      	b.n	800fc2e <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800fc1a:	4668      	mov	r0, sp
 800fc1c:	f7ff fe88 	bl	800f930 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800fc20:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800fc24:	4668      	mov	r0, sp
 800fc26:	f7ff fe4a 	bl	800f8be <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800fc2a:	3401      	adds	r4, #1
 800fc2c:	b2e4      	uxtb	r4, r4
 800fc2e:	f895 30f0 	ldrb.w	r3, [r5, #240]	@ 0xf0
 800fc32:	42a3      	cmp	r3, r4
 800fc34:	d8f1      	bhi.n	800fc1a <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800fc36:	4668      	mov	r0, sp
 800fc38:	f7ff fe46 	bl	800f8c8 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800fc3c:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800fc40:	4669      	mov	r1, sp
 800fc42:	4630      	mov	r0, r6
 800fc44:	f7ff fddc 	bl	800f800 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800fc48:	2000      	movs	r0, #0
}
 800fc4a:	b004      	add	sp, #16
 800fc4c:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800fc4e:	20ff      	movs	r0, #255	@ 0xff
}
 800fc50:	4770      	bx	lr
	...

0800fc54 <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fc54:	2300      	movs	r3, #0
 800fc56:	2b0a      	cmp	r3, #10
 800fc58:	d816      	bhi.n	800fc88 <GetKeyByID+0x34>
{
 800fc5a:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800fc5c:	4a0b      	ldr	r2, [pc, #44]	@ (800fc8c <GetKeyByID+0x38>)
 800fc5e:	6814      	ldr	r4, [r2, #0]
 800fc60:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800fc64:	4422      	add	r2, r4
 800fc66:	7e12      	ldrb	r2, [r2, #24]
 800fc68:	4282      	cmp	r2, r0
 800fc6a:	d006      	beq.n	800fc7a <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fc6c:	3301      	adds	r3, #1
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	2b0a      	cmp	r3, #10
 800fc72:	d9f3      	bls.n	800fc5c <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fc74:	2003      	movs	r0, #3
}
 800fc76:	bc10      	pop	{r4}
 800fc78:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800fc7a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800fc7e:	3318      	adds	r3, #24
 800fc80:	441c      	add	r4, r3
 800fc82:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800fc84:	2000      	movs	r0, #0
 800fc86:	e7f6      	b.n	800fc76 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fc88:	2003      	movs	r0, #3
}
 800fc8a:	4770      	bx	lr
 800fc8c:	20001654 	.word	0x20001654

0800fc90 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800fc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc94:	b0cc      	sub	sp, #304	@ 0x130
 800fc96:	9d52      	ldr	r5, [sp, #328]	@ 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800fc98:	b3a9      	cbz	r1, 800fd06 <ComputeCmac+0x76>
 800fc9a:	4607      	mov	r7, r0
 800fc9c:	4616      	mov	r6, r2
 800fc9e:	461c      	mov	r4, r3
 800fca0:	4688      	mov	r8, r1
 800fca2:	b395      	cbz	r5, 800fd0a <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800fca4:	a802      	add	r0, sp, #8
 800fca6:	f7ff fbd9 	bl	800f45c <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800fcaa:	a901      	add	r1, sp, #4
 800fcac:	4620      	mov	r0, r4
 800fcae:	f7ff ffd1 	bl	800fc54 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800fcb2:	4604      	mov	r4, r0
 800fcb4:	b118      	cbz	r0, 800fcbe <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	b04c      	add	sp, #304	@ 0x130
 800fcba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800fcbe:	9901      	ldr	r1, [sp, #4]
 800fcc0:	3101      	adds	r1, #1
 800fcc2:	a802      	add	r0, sp, #8
 800fcc4:	f7ff fbd9 	bl	800f47a <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800fcc8:	b127      	cbz	r7, 800fcd4 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800fcca:	2210      	movs	r2, #16
 800fccc:	4639      	mov	r1, r7
 800fcce:	a802      	add	r0, sp, #8
 800fcd0:	f7ff fbda 	bl	800f488 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800fcd4:	4632      	mov	r2, r6
 800fcd6:	4641      	mov	r1, r8
 800fcd8:	a802      	add	r0, sp, #8
 800fcda:	f7ff fbd5 	bl	800f488 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800fcde:	a902      	add	r1, sp, #8
 800fce0:	a848      	add	r0, sp, #288	@ 0x120
 800fce2:	f7ff fc3f 	bl	800f564 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800fce6:	f89d 3120 	ldrb.w	r3, [sp, #288]	@ 0x120
 800fcea:	f89d 2121 	ldrb.w	r2, [sp, #289]	@ 0x121
 800fcee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fcf2:	f89d 2122 	ldrb.w	r2, [sp, #290]	@ 0x122
 800fcf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fcfa:	f89d 2123 	ldrb.w	r2, [sp, #291]	@ 0x123
 800fcfe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fd02:	602b      	str	r3, [r5, #0]
 800fd04:	e7d7      	b.n	800fcb6 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800fd06:	2402      	movs	r4, #2
 800fd08:	e7d5      	b.n	800fcb6 <ComputeCmac+0x26>
 800fd0a:	2402      	movs	r4, #2
 800fd0c:	e7d3      	b.n	800fcb6 <ComputeCmac+0x26>
	...

0800fd10 <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 800fd10:	b140      	cbz	r0, 800fd24 <SecureElementInit+0x14>
{
 800fd12:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800fd14:	4a04      	ldr	r2, [pc, #16]	@ (800fd28 <SecureElementInit+0x18>)
 800fd16:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800fd18:	22d8      	movs	r2, #216	@ 0xd8
 800fd1a:	4904      	ldr	r1, [pc, #16]	@ (800fd2c <SecureElementInit+0x1c>)
 800fd1c:	f000 fac9 	bl	80102b2 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800fd20:	2000      	movs	r0, #0
}
 800fd22:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800fd24:	2002      	movs	r0, #2
}
 800fd26:	4770      	bx	lr
 800fd28:	20001654 	.word	0x20001654
 800fd2c:	0803e500 	.word	0x0803e500

0800fd30 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fd30:	2300      	movs	r3, #0
 800fd32:	2b0a      	cmp	r3, #10
 800fd34:	d816      	bhi.n	800fd64 <SecureElementGetKeyByID+0x34>
{
 800fd36:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800fd38:	4a0b      	ldr	r2, [pc, #44]	@ (800fd68 <SecureElementGetKeyByID+0x38>)
 800fd3a:	6814      	ldr	r4, [r2, #0]
 800fd3c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800fd40:	4422      	add	r2, r4
 800fd42:	7e12      	ldrb	r2, [r2, #24]
 800fd44:	4282      	cmp	r2, r0
 800fd46:	d006      	beq.n	800fd56 <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fd48:	3301      	adds	r3, #1
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	2b0a      	cmp	r3, #10
 800fd4e:	d9f3      	bls.n	800fd38 <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fd50:	2003      	movs	r0, #3
}
 800fd52:	bc10      	pop	{r4}
 800fd54:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800fd56:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800fd5a:	3318      	adds	r3, #24
 800fd5c:	441c      	add	r4, r3
 800fd5e:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800fd60:	2000      	movs	r0, #0
 800fd62:	e7f6      	b.n	800fd52 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fd64:	2003      	movs	r0, #3
}
 800fd66:	4770      	bx	lr
 800fd68:	20001654 	.word	0x20001654

0800fd6c <PrintKey>:
{
 800fd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd70:	b099      	sub	sp, #100	@ 0x64
 800fd72:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800fd74:	a917      	add	r1, sp, #92	@ 0x5c
 800fd76:	f7ff ffdb 	bl	800fd30 <SecureElementGetKeyByID>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2800      	cmp	r0, #0
 800fd7e:	d042      	beq.n	800fe06 <PrintKey+0x9a>
}
 800fd80:	b019      	add	sp, #100	@ 0x64
 800fd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 800fd86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fd8a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fd8e:	689b      	ldr	r3, [r3, #8]
 800fd90:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fd92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd94:	785a      	ldrb	r2, [r3, #1]
 800fd96:	9214      	str	r2, [sp, #80]	@ 0x50
 800fd98:	7899      	ldrb	r1, [r3, #2]
 800fd9a:	9115      	str	r1, [sp, #84]	@ 0x54
 800fd9c:	78da      	ldrb	r2, [r3, #3]
 800fd9e:	7919      	ldrb	r1, [r3, #4]
 800fda0:	7958      	ldrb	r0, [r3, #5]
 800fda2:	799c      	ldrb	r4, [r3, #6]
 800fda4:	79dd      	ldrb	r5, [r3, #7]
 800fda6:	7a1e      	ldrb	r6, [r3, #8]
 800fda8:	7a5f      	ldrb	r7, [r3, #9]
 800fdaa:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800fdae:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800fdb2:	f893 800c 	ldrb.w	r8, [r3, #12]
 800fdb6:	f893 900d 	ldrb.w	r9, [r3, #13]
 800fdba:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800fdbe:	f893 b00f 	ldrb.w	fp, [r3, #15]
 800fdc2:	7c1b      	ldrb	r3, [r3, #16]
 800fdc4:	9310      	str	r3, [sp, #64]	@ 0x40
 800fdc6:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 800fdca:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 800fdce:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800fdd2:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 800fdd6:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 800fdda:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800fdde:	9709      	str	r7, [sp, #36]	@ 0x24
 800fde0:	9608      	str	r6, [sp, #32]
 800fde2:	9507      	str	r5, [sp, #28]
 800fde4:	9406      	str	r4, [sp, #24]
 800fde6:	9005      	str	r0, [sp, #20]
 800fde8:	9104      	str	r1, [sp, #16]
 800fdea:	9203      	str	r2, [sp, #12]
 800fdec:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800fdee:	9102      	str	r1, [sp, #8]
 800fdf0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fdf2:	9201      	str	r2, [sp, #4]
 800fdf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fdf6:	9300      	str	r3, [sp, #0]
 800fdf8:	4b09      	ldr	r3, [pc, #36]	@ (800fe20 <PrintKey+0xb4>)
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	4611      	mov	r1, r2
 800fdfe:	2002      	movs	r0, #2
 800fe00:	f002 f93a 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800fe04:	e7bc      	b.n	800fd80 <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fe06:	2b0a      	cmp	r3, #10
 800fe08:	d8ba      	bhi.n	800fd80 <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 800fe0a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800fe0e:	4905      	ldr	r1, [pc, #20]	@ (800fe24 <PrintKey+0xb8>)
 800fe10:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 800fe14:	42a2      	cmp	r2, r4
 800fe16:	d0b6      	beq.n	800fd86 <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fe18:	3301      	adds	r3, #1
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	e7f3      	b.n	800fe06 <PrintKey+0x9a>
 800fe1e:	bf00      	nop
 800fe20:	08013388 	.word	0x08013388
 800fe24:	08013b10 	.word	0x08013b10

0800fe28 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 800fe28:	2b0b      	cmp	r3, #11
 800fe2a:	d80a      	bhi.n	800fe42 <SecureElementComputeAesCmac+0x1a>
{
 800fe2c:	b500      	push	{lr}
 800fe2e:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800fe30:	f8dd c010 	ldr.w	ip, [sp, #16]
 800fe34:	f8cd c000 	str.w	ip, [sp]
 800fe38:	f7ff ff2a 	bl	800fc90 <ComputeCmac>
}
 800fe3c:	b003      	add	sp, #12
 800fe3e:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fe42:	2003      	movs	r0, #3
}
 800fe44:	4770      	bx	lr

0800fe46 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800fe46:	b190      	cbz	r0, 800fe6e <SecureElementVerifyAesCmac+0x28>
{
 800fe48:	b510      	push	{r4, lr}
 800fe4a:	b084      	sub	sp, #16
 800fe4c:	468c      	mov	ip, r1
 800fe4e:	4614      	mov	r4, r2
 800fe50:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800fe52:	2000      	movs	r0, #0
 800fe54:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800fe56:	aa03      	add	r2, sp, #12
 800fe58:	9200      	str	r2, [sp, #0]
 800fe5a:	4662      	mov	r2, ip
 800fe5c:	f7ff ff18 	bl	800fc90 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800fe60:	b918      	cbnz	r0, 800fe6a <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800fe62:	9b03      	ldr	r3, [sp, #12]
 800fe64:	42a3      	cmp	r3, r4
 800fe66:	d000      	beq.n	800fe6a <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800fe68:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800fe6a:	b004      	add	sp, #16
 800fe6c:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800fe6e:	2002      	movs	r0, #2
}
 800fe70:	4770      	bx	lr

0800fe72 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800fe72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe76:	b0be      	sub	sp, #248	@ 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800fe78:	b348      	cbz	r0, 800fece <SecureElementAesEncrypt+0x5c>
 800fe7a:	460d      	mov	r5, r1
 800fe7c:	4614      	mov	r4, r2
 800fe7e:	461e      	mov	r6, r3
 800fe80:	4607      	mov	r7, r0
 800fe82:	b33b      	cbz	r3, 800fed4 <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800fe84:	f011 0f0f 	tst.w	r1, #15
 800fe88:	d127      	bne.n	800feda <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800fe8a:	22f0      	movs	r2, #240	@ 0xf0
 800fe8c:	2100      	movs	r1, #0
 800fe8e:	a801      	add	r0, sp, #4
 800fe90:	f000 fa27 	bl	80102e2 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800fe94:	4669      	mov	r1, sp
 800fe96:	4620      	mov	r0, r4
 800fe98:	f7ff fedc 	bl	800fc54 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800fe9c:	4680      	mov	r8, r0
 800fe9e:	b118      	cbz	r0, 800fea8 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800fea0:	4640      	mov	r0, r8
 800fea2:	b03e      	add	sp, #248	@ 0xf8
 800fea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800fea8:	aa01      	add	r2, sp, #4
 800feaa:	2110      	movs	r1, #16
 800feac:	9800      	ldr	r0, [sp, #0]
 800feae:	3001      	adds	r0, #1
 800feb0:	f7ff fe24 	bl	800fafc <lorawan_aes_set_key>
        uint8_t block = 0;
 800feb4:	4644      	mov	r4, r8
        while( size != 0 )
 800feb6:	e007      	b.n	800fec8 <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800feb8:	aa01      	add	r2, sp, #4
 800feba:	1931      	adds	r1, r6, r4
 800febc:	1938      	adds	r0, r7, r4
 800febe:	f7ff fe9f 	bl	800fc00 <lorawan_aes_encrypt>
            block = block + 16;
 800fec2:	3410      	adds	r4, #16
 800fec4:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 800fec6:	3d10      	subs	r5, #16
        while( size != 0 )
 800fec8:	2d00      	cmp	r5, #0
 800feca:	d1f5      	bne.n	800feb8 <SecureElementAesEncrypt+0x46>
 800fecc:	e7e8      	b.n	800fea0 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800fece:	f04f 0802 	mov.w	r8, #2
 800fed2:	e7e5      	b.n	800fea0 <SecureElementAesEncrypt+0x2e>
 800fed4:	f04f 0802 	mov.w	r8, #2
 800fed8:	e7e2      	b.n	800fea0 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800feda:	f04f 0805 	mov.w	r8, #5
 800fede:	e7df      	b.n	800fea0 <SecureElementAesEncrypt+0x2e>

0800fee0 <SecureElementSetKey>:
{
 800fee0:	b530      	push	{r4, r5, lr}
 800fee2:	b085      	sub	sp, #20
    if( key == NULL )
 800fee4:	2900      	cmp	r1, #0
 800fee6:	d038      	beq.n	800ff5a <SecureElementSetKey+0x7a>
 800fee8:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800feea:	2300      	movs	r3, #0
 800feec:	2b0a      	cmp	r3, #10
 800feee:	d830      	bhi.n	800ff52 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800fef0:	4a1b      	ldr	r2, [pc, #108]	@ (800ff60 <SecureElementSetKey+0x80>)
 800fef2:	6811      	ldr	r1, [r2, #0]
 800fef4:	461c      	mov	r4, r3
 800fef6:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800fefa:	440a      	add	r2, r1
 800fefc:	7e12      	ldrb	r2, [r2, #24]
 800fefe:	4282      	cmp	r2, r0
 800ff00:	d002      	beq.n	800ff08 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ff02:	3301      	adds	r3, #1
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	e7f1      	b.n	800feec <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 800ff08:	280d      	cmp	r0, #13
 800ff0a:	d00a      	beq.n	800ff22 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800ff0c:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 800ff10:	3418      	adds	r4, #24
 800ff12:	1908      	adds	r0, r1, r4
 800ff14:	2210      	movs	r2, #16
 800ff16:	4661      	mov	r1, ip
 800ff18:	3001      	adds	r0, #1
 800ff1a:	f000 f9ca 	bl	80102b2 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800ff1e:	2500      	movs	r5, #0
 800ff20:	e018      	b.n	800ff54 <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800ff22:	2300      	movs	r3, #0
 800ff24:	9300      	str	r3, [sp, #0]
 800ff26:	9301      	str	r3, [sp, #4]
 800ff28:	9302      	str	r3, [sp, #8]
 800ff2a:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800ff2c:	466b      	mov	r3, sp
 800ff2e:	220c      	movs	r2, #12
 800ff30:	2110      	movs	r1, #16
 800ff32:	4660      	mov	r0, ip
 800ff34:	f7ff ff9d 	bl	800fe72 <SecureElementAesEncrypt>
 800ff38:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800ff3a:	4b09      	ldr	r3, [pc, #36]	@ (800ff60 <SecureElementSetKey+0x80>)
 800ff3c:	6818      	ldr	r0, [r3, #0]
 800ff3e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800ff42:	3418      	adds	r4, #24
 800ff44:	4420      	add	r0, r4
 800ff46:	2210      	movs	r2, #16
 800ff48:	4669      	mov	r1, sp
 800ff4a:	3001      	adds	r0, #1
 800ff4c:	f000 f9b1 	bl	80102b2 <memcpy1>
                return retval;
 800ff50:	e000      	b.n	800ff54 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ff52:	2503      	movs	r5, #3
}
 800ff54:	4628      	mov	r0, r5
 800ff56:	b005      	add	sp, #20
 800ff58:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ff5a:	2502      	movs	r5, #2
 800ff5c:	e7fa      	b.n	800ff54 <SecureElementSetKey+0x74>
 800ff5e:	bf00      	nop
 800ff60:	20001654 	.word	0x20001654

0800ff64 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800ff64:	b1d0      	cbz	r0, 800ff9c <SecureElementDeriveAndStoreKey+0x38>
{
 800ff66:	b510      	push	{r4, lr}
 800ff68:	b084      	sub	sp, #16
 800ff6a:	4614      	mov	r4, r2
 800ff6c:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800ff6e:	2a0c      	cmp	r2, #12
 800ff70:	d101      	bne.n	800ff76 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800ff72:	290b      	cmp	r1, #11
 800ff74:	d114      	bne.n	800ffa0 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800ff76:	2300      	movs	r3, #0
 800ff78:	9300      	str	r3, [sp, #0]
 800ff7a:	9301      	str	r3, [sp, #4]
 800ff7c:	9302      	str	r3, [sp, #8]
 800ff7e:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800ff80:	466b      	mov	r3, sp
 800ff82:	460a      	mov	r2, r1
 800ff84:	2110      	movs	r1, #16
 800ff86:	4660      	mov	r0, ip
 800ff88:	f7ff ff73 	bl	800fe72 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ff8c:	b108      	cbz	r0, 800ff92 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ff8e:	b004      	add	sp, #16
 800ff90:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800ff92:	4669      	mov	r1, sp
 800ff94:	4620      	mov	r0, r4
 800ff96:	f7ff ffa3 	bl	800fee0 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ff9a:	e7f8      	b.n	800ff8e <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800ff9c:	2002      	movs	r0, #2
}
 800ff9e:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ffa0:	2003      	movs	r0, #3
 800ffa2:	e7f4      	b.n	800ff8e <SecureElementDeriveAndStoreKey+0x2a>

0800ffa4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800ffa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffa6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800ffaa:	9c07      	ldr	r4, [sp, #28]
 800ffac:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800ffae:	b35b      	cbz	r3, 8010008 <SecureElementProcessJoinAccept+0x64>
 800ffb0:	461f      	mov	r7, r3
 800ffb2:	b35c      	cbz	r4, 801000c <SecureElementProcessJoinAccept+0x68>
 800ffb4:	b366      	cbz	r6, 8010010 <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800ffb6:	2d21      	cmp	r5, #33	@ 0x21
 800ffb8:	d82c      	bhi.n	8010014 <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800ffba:	462a      	mov	r2, r5
 800ffbc:	4619      	mov	r1, r3
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f000 f977 	bl	80102b2 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800ffc4:	1c63      	adds	r3, r4, #1
 800ffc6:	2201      	movs	r2, #1
 800ffc8:	1e69      	subs	r1, r5, #1
 800ffca:	18b8      	adds	r0, r7, r2
 800ffcc:	f7ff ff51 	bl	800fe72 <SecureElementAesEncrypt>
 800ffd0:	bb10      	cbnz	r0, 8010018 <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800ffd2:	7ae3      	ldrb	r3, [r4, #11]
 800ffd4:	09db      	lsrs	r3, r3, #7
 800ffd6:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800ffd8:	1961      	adds	r1, r4, r5
 800ffda:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 800ffde:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800ffe2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800ffe6:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 800ffea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800ffee:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 800fff2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800fff6:	b98b      	cbnz	r3, 801001c <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800fff8:	2301      	movs	r3, #1
 800fffa:	1f29      	subs	r1, r5, #4
 800fffc:	4620      	mov	r0, r4
 800fffe:	f7ff ff22 	bl	800fe46 <SecureElementVerifyAesCmac>
 8010002:	b140      	cbz	r0, 8010016 <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 8010004:	2001      	movs	r0, #1
 8010006:	e006      	b.n	8010016 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 8010008:	2002      	movs	r0, #2
 801000a:	e004      	b.n	8010016 <SecureElementProcessJoinAccept+0x72>
 801000c:	2002      	movs	r0, #2
 801000e:	e002      	b.n	8010016 <SecureElementProcessJoinAccept+0x72>
 8010010:	2002      	movs	r0, #2
 8010012:	e000      	b.n	8010016 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010014:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8010016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8010018:	2007      	movs	r0, #7
 801001a:	e7fc      	b.n	8010016 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 801001c:	2004      	movs	r0, #4
 801001e:	e7fa      	b.n	8010016 <SecureElementProcessJoinAccept+0x72>

08010020 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8010020:	b140      	cbz	r0, 8010034 <SecureElementSetDevEui+0x14>
{
 8010022:	b508      	push	{r3, lr}
 8010024:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 8010026:	2208      	movs	r2, #8
 8010028:	4b03      	ldr	r3, [pc, #12]	@ (8010038 <SecureElementSetDevEui+0x18>)
 801002a:	6818      	ldr	r0, [r3, #0]
 801002c:	f000 f941 	bl	80102b2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010030:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010032:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010034:	2002      	movs	r0, #2
}
 8010036:	4770      	bx	lr
 8010038:	20001654 	.word	0x20001654

0801003c <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 801003c:	b138      	cbz	r0, 801004e <SecureElementGetDevEui+0x12>
{
 801003e:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8010040:	2208      	movs	r2, #8
 8010042:	4904      	ldr	r1, [pc, #16]	@ (8010054 <SecureElementGetDevEui+0x18>)
 8010044:	6809      	ldr	r1, [r1, #0]
 8010046:	f000 f934 	bl	80102b2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 801004a:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 801004c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801004e:	2002      	movs	r0, #2
}
 8010050:	4770      	bx	lr
 8010052:	bf00      	nop
 8010054:	20001654 	.word	0x20001654

08010058 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8010058:	b148      	cbz	r0, 801006e <SecureElementSetJoinEui+0x16>
{
 801005a:	b508      	push	{r3, lr}
 801005c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 801005e:	4b05      	ldr	r3, [pc, #20]	@ (8010074 <SecureElementSetJoinEui+0x1c>)
 8010060:	6818      	ldr	r0, [r3, #0]
 8010062:	2208      	movs	r2, #8
 8010064:	4410      	add	r0, r2
 8010066:	f000 f924 	bl	80102b2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 801006a:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 801006c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801006e:	2002      	movs	r0, #2
}
 8010070:	4770      	bx	lr
 8010072:	bf00      	nop
 8010074:	20001654 	.word	0x20001654

08010078 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8010078:	b140      	cbz	r0, 801008c <SecureElementGetJoinEui+0x14>
{
 801007a:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 801007c:	4a04      	ldr	r2, [pc, #16]	@ (8010090 <SecureElementGetJoinEui+0x18>)
 801007e:	6811      	ldr	r1, [r2, #0]
 8010080:	2208      	movs	r2, #8
 8010082:	4411      	add	r1, r2
 8010084:	f000 f915 	bl	80102b2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010088:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 801008a:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801008c:	2002      	movs	r0, #2
}
 801008e:	4770      	bx	lr
 8010090:	20001654 	.word	0x20001654

08010094 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8010094:	2802      	cmp	r0, #2
 8010096:	d004      	beq.n	80100a2 <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8010098:	4b04      	ldr	r3, [pc, #16]	@ (80100ac <SecureElementSetDevAddr+0x18>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 801009e:	2000      	movs	r0, #0
 80100a0:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 80100a2:	4b02      	ldr	r3, [pc, #8]	@ (80100ac <SecureElementSetDevAddr+0x18>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	6119      	str	r1, [r3, #16]
 80100a8:	e7f9      	b.n	801009e <SecureElementSetDevAddr+0xa>
 80100aa:	bf00      	nop
 80100ac:	20001654 	.word	0x20001654

080100b0 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 80100b0:	b169      	cbz	r1, 80100ce <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 80100b2:	2802      	cmp	r0, #2
 80100b4:	d005      	beq.n	80100c2 <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 80100b6:	4a07      	ldr	r2, [pc, #28]	@ (80100d4 <SecureElementGetDevAddr+0x24>)
 80100b8:	6812      	ldr	r2, [r2, #0]
 80100ba:	6952      	ldr	r2, [r2, #20]
 80100bc:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 80100be:	2000      	movs	r0, #0
 80100c0:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 80100c2:	4a04      	ldr	r2, [pc, #16]	@ (80100d4 <SecureElementGetDevAddr+0x24>)
 80100c4:	6812      	ldr	r2, [r2, #0]
 80100c6:	6912      	ldr	r2, [r2, #16]
 80100c8:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 80100ca:	2000      	movs	r0, #0
 80100cc:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 80100ce:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80100d0:	4770      	bx	lr
 80100d2:	bf00      	nop
 80100d4:	20001654 	.word	0x20001654

080100d8 <SecureElementInitMcuID>:
{
 80100d8:	b530      	push	{r4, r5, lr}
 80100da:	b085      	sub	sp, #20
 80100dc:	4605      	mov	r5, r0
 80100de:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 80100e0:	2300      	movs	r3, #0
 80100e2:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 80100e4:	a802      	add	r0, sp, #8
 80100e6:	f7ff ffa9 	bl	801003c <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 80100ea:	a901      	add	r1, sp, #4
 80100ec:	2001      	movs	r0, #1
 80100ee:	f7ff ffdf 	bl	80100b0 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 80100f2:	b195      	cbz	r5, 801011a <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 80100f4:	2300      	movs	r3, #0
 80100f6:	2b07      	cmp	r3, #7
 80100f8:	d808      	bhi.n	801010c <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 80100fa:	f103 0210 	add.w	r2, r3, #16
 80100fe:	446a      	add	r2, sp
 8010100:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8010104:	b9aa      	cbnz	r2, 8010132 <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8010106:	3301      	adds	r3, #1
 8010108:	b2db      	uxtb	r3, r3
 801010a:	e7f4      	b.n	80100f6 <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 801010c:	2300      	movs	r3, #0
        if( id_init == false )
 801010e:	b923      	cbnz	r3, 801011a <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 8010110:	a802      	add	r0, sp, #8
 8010112:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 8010114:	a802      	add	r0, sp, #8
 8010116:	f7ff ff83 	bl	8010020 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 801011a:	b13c      	cbz	r4, 801012c <SecureElementInitMcuID+0x54>
 801011c:	9b01      	ldr	r3, [sp, #4]
 801011e:	b92b      	cbnz	r3, 801012c <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 8010120:	a801      	add	r0, sp, #4
 8010122:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 8010124:	9901      	ldr	r1, [sp, #4]
 8010126:	2001      	movs	r0, #1
 8010128:	f7ff ffb4 	bl	8010094 <SecureElementSetDevAddr>
}
 801012c:	2000      	movs	r0, #0
 801012e:	b005      	add	sp, #20
 8010130:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 8010132:	2301      	movs	r3, #1
 8010134:	e7eb      	b.n	801010e <SecureElementInitMcuID+0x36>
	...

08010138 <PrintIds>:
{
 8010138:	b5f0      	push	{r4, r5, r6, r7, lr}
 801013a:	b08f      	sub	sp, #60	@ 0x3c
 801013c:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 801013e:	2400      	movs	r4, #0
 8010140:	9409      	str	r4, [sp, #36]	@ 0x24
    SecureElementGetDevEui( devEui );
 8010142:	a80a      	add	r0, sp, #40	@ 0x28
 8010144:	f7ff ff7a 	bl	801003c <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 8010148:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801014c:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8010150:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
 8010154:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 8010158:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 801015c:	f89d 702d 	ldrb.w	r7, [sp, #45]	@ 0x2d
 8010160:	f89d c02e 	ldrb.w	ip, [sp, #46]	@ 0x2e
 8010164:	f89d e02f 	ldrb.w	lr, [sp, #47]	@ 0x2f
 8010168:	f8cd e01c 	str.w	lr, [sp, #28]
 801016c:	f8cd c018 	str.w	ip, [sp, #24]
 8010170:	9705      	str	r7, [sp, #20]
 8010172:	9604      	str	r6, [sp, #16]
 8010174:	9003      	str	r0, [sp, #12]
 8010176:	9102      	str	r1, [sp, #8]
 8010178:	9201      	str	r2, [sp, #4]
 801017a:	9300      	str	r3, [sp, #0]
 801017c:	4b20      	ldr	r3, [pc, #128]	@ (8010200 <PrintIds+0xc8>)
 801017e:	4622      	mov	r2, r4
 8010180:	4621      	mov	r1, r4
 8010182:	2002      	movs	r0, #2
 8010184:	f001 ff78 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 8010188:	a80c      	add	r0, sp, #48	@ 0x30
 801018a:	f7ff ff75 	bl	8010078 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 801018e:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8010192:	f89d 2031 	ldrb.w	r2, [sp, #49]	@ 0x31
 8010196:	f89d 1032 	ldrb.w	r1, [sp, #50]	@ 0x32
 801019a:	f89d 0033 	ldrb.w	r0, [sp, #51]	@ 0x33
 801019e:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 80101a2:	f89d 7035 	ldrb.w	r7, [sp, #53]	@ 0x35
 80101a6:	f89d c036 	ldrb.w	ip, [sp, #54]	@ 0x36
 80101aa:	f89d e037 	ldrb.w	lr, [sp, #55]	@ 0x37
 80101ae:	f8cd e01c 	str.w	lr, [sp, #28]
 80101b2:	f8cd c018 	str.w	ip, [sp, #24]
 80101b6:	9705      	str	r7, [sp, #20]
 80101b8:	9604      	str	r6, [sp, #16]
 80101ba:	9003      	str	r0, [sp, #12]
 80101bc:	9102      	str	r1, [sp, #8]
 80101be:	9201      	str	r2, [sp, #4]
 80101c0:	9300      	str	r3, [sp, #0]
 80101c2:	4b10      	ldr	r3, [pc, #64]	@ (8010204 <PrintIds+0xcc>)
 80101c4:	4622      	mov	r2, r4
 80101c6:	4621      	mov	r1, r4
 80101c8:	2002      	movs	r0, #2
 80101ca:	f001 ff55 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 80101ce:	a909      	add	r1, sp, #36	@ 0x24
 80101d0:	4628      	mov	r0, r5
 80101d2:	f7ff ff6d 	bl	80100b0 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 80101d6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80101da:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80101de:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
 80101e2:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 80101e6:	9003      	str	r0, [sp, #12]
 80101e8:	9102      	str	r1, [sp, #8]
 80101ea:	9201      	str	r2, [sp, #4]
 80101ec:	9300      	str	r3, [sp, #0]
 80101ee:	4b06      	ldr	r3, [pc, #24]	@ (8010208 <PrintIds+0xd0>)
 80101f0:	4622      	mov	r2, r4
 80101f2:	4621      	mov	r1, r4
 80101f4:	2002      	movs	r0, #2
 80101f6:	f001 ff3f 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
}
 80101fa:	b00f      	add	sp, #60	@ 0x3c
 80101fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101fe:	bf00      	nop
 8010200:	080133e4 	.word	0x080133e4
 8010204:	08013424 	.word	0x08013424
 8010208:	08013464 	.word	0x08013464

0801020c <SecureElementPrintKeys>:
{
 801020c:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 801020e:	2000      	movs	r0, #0
 8010210:	f7ff fdac 	bl	800fd6c <PrintKey>
    PrintKey( NWK_KEY );
 8010214:	2001      	movs	r0, #1
 8010216:	f7ff fda9 	bl	800fd6c <PrintKey>
    PrintKey( APP_S_KEY );
 801021a:	2009      	movs	r0, #9
 801021c:	f7ff fda6 	bl	800fd6c <PrintKey>
    PrintKey( NWK_S_KEY );
 8010220:	2008      	movs	r0, #8
 8010222:	f7ff fda3 	bl	800fd6c <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 8010226:	2000      	movs	r0, #0
 8010228:	f7ff ff86 	bl	8010138 <PrintIds>
}
 801022c:	2000      	movs	r0, #0
 801022e:	bd08      	pop	{r3, pc}

08010230 <SecureElementPrintSessionKeys>:
{
 8010230:	b510      	push	{r4, lr}
 8010232:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 8010234:	200b      	movs	r0, #11
 8010236:	f7ff fd99 	bl	800fd6c <PrintKey>
    PrintKey( MC_KE_KEY );
 801023a:	200c      	movs	r0, #12
 801023c:	f7ff fd96 	bl	800fd6c <PrintKey>
    PrintKey( APP_S_KEY );
 8010240:	2009      	movs	r0, #9
 8010242:	f7ff fd93 	bl	800fd6c <PrintKey>
    PrintKey( NWK_S_KEY );
 8010246:	2008      	movs	r0, #8
 8010248:	f7ff fd90 	bl	800fd6c <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 801024c:	200a      	movs	r0, #10
 801024e:	f7ff fd8d 	bl	800fd6c <PrintKey>
    PrintIds( mode );
 8010252:	4620      	mov	r0, r4
 8010254:	f7ff ff70 	bl	8010138 <PrintIds>
}
 8010258:	2000      	movs	r0, #0
 801025a:	bd10      	pop	{r4, pc}

0801025c <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801025c:	4b09      	ldr	r3, [pc, #36]	@ (8010284 <rand1+0x28>)
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	4909      	ldr	r1, [pc, #36]	@ (8010288 <rand1+0x2c>)
 8010262:	f243 0039 	movw	r0, #12345	@ 0x3039
 8010266:	fb01 0002 	mla	r0, r1, r2, r0
 801026a:	6018      	str	r0, [r3, #0]
 801026c:	2303      	movs	r3, #3
 801026e:	fba3 2300 	umull	r2, r3, r3, r0
 8010272:	1ac2      	subs	r2, r0, r3
 8010274:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8010278:	0f9b      	lsrs	r3, r3, #30
 801027a:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 801027e:	1ac0      	subs	r0, r0, r3
 8010280:	4770      	bx	lr
 8010282:	bf00      	nop
 8010284:	20000114 	.word	0x20000114
 8010288:	41c64e6d 	.word	0x41c64e6d

0801028c <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 801028c:	4b01      	ldr	r3, [pc, #4]	@ (8010294 <srand1+0x8>)
 801028e:	6018      	str	r0, [r3, #0]
}
 8010290:	4770      	bx	lr
 8010292:	bf00      	nop
 8010294:	20000114 	.word	0x20000114

08010298 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8010298:	b538      	push	{r3, r4, r5, lr}
 801029a:	4605      	mov	r5, r0
 801029c:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801029e:	f7ff ffdd 	bl	801025c <rand1>
 80102a2:	1b61      	subs	r1, r4, r5
 80102a4:	3101      	adds	r1, #1
 80102a6:	fb90 f3f1 	sdiv	r3, r0, r1
 80102aa:	fb01 0013 	mls	r0, r1, r3, r0
}
 80102ae:	4428      	add	r0, r5
 80102b0:	bd38      	pop	{r3, r4, r5, pc}

080102b2 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 80102b2:	e004      	b.n	80102be <memcpy1+0xc>
    {
        *dst++ = *src++;
 80102b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80102b8:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 80102bc:	461a      	mov	r2, r3
 80102be:	1e53      	subs	r3, r2, #1
 80102c0:	b29b      	uxth	r3, r3
 80102c2:	2a00      	cmp	r2, #0
 80102c4:	d1f6      	bne.n	80102b4 <memcpy1+0x2>
    }
}
 80102c6:	4770      	bx	lr

080102c8 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 80102c8:	1e53      	subs	r3, r2, #1
 80102ca:	4418      	add	r0, r3
    while( size-- )
 80102cc:	e004      	b.n	80102d8 <memcpyr+0x10>
    {
        *dst-- = *src++;
 80102ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80102d2:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 80102d6:	461a      	mov	r2, r3
 80102d8:	1e53      	subs	r3, r2, #1
 80102da:	b29b      	uxth	r3, r3
 80102dc:	2a00      	cmp	r2, #0
 80102de:	d1f6      	bne.n	80102ce <memcpyr+0x6>
    }
}
 80102e0:	4770      	bx	lr

080102e2 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 80102e2:	e002      	b.n	80102ea <memset1+0x8>
    {
        *dst++ = value;
 80102e4:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 80102e8:	461a      	mov	r2, r3
 80102ea:	1e53      	subs	r3, r2, #1
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	2a00      	cmp	r2, #0
 80102f0:	d1f8      	bne.n	80102e4 <memset1+0x2>
    }
}
 80102f2:	4770      	bx	lr

080102f4 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 80102f4:	b1f0      	cbz	r0, 8010334 <Crc32+0x40>
{
 80102f6:	b510      	push	{r4, lr}
 80102f8:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 80102fa:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 80102fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010302:	e00e      	b.n	8010322 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8010304:	f340 0c00 	sbfx	ip, r0, #0, #1
 8010308:	4a0b      	ldr	r2, [pc, #44]	@ (8010338 <Crc32+0x44>)
 801030a:	ea0c 0202 	and.w	r2, ip, r2
 801030e:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8010312:	3301      	adds	r3, #1
 8010314:	b29b      	uxth	r3, r3
 8010316:	2b07      	cmp	r3, #7
 8010318:	d9f4      	bls.n	8010304 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 801031a:	f10e 0e01 	add.w	lr, lr, #1
 801031e:	fa1f fe8e 	uxth.w	lr, lr
 8010322:	458e      	cmp	lr, r1
 8010324:	d204      	bcs.n	8010330 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 8010326:	f814 300e 	ldrb.w	r3, [r4, lr]
 801032a:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 801032c:	2300      	movs	r3, #0
 801032e:	e7f2      	b.n	8010316 <Crc32+0x22>
        }
    }

    return ~crc;
 8010330:	43c0      	mvns	r0, r0
}
 8010332:	bd10      	pop	{r4, pc}
        return 0;
 8010334:	2000      	movs	r0, #0
}
 8010336:	4770      	bx	lr
 8010338:	edb88320 	.word	0xedb88320

0801033c <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 801033c:	2001      	movs	r0, #1
 801033e:	4770      	bx	lr

08010340 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8010340:	280a      	cmp	r0, #10
 8010342:	d807      	bhi.n	8010354 <RadioGetLoRaBandwidthInHz+0x14>
 8010344:	e8df f000 	tbb	[pc, r0]
 8010348:	17110b20 	.word	0x17110b20
 801034c:	061e1c1a 	.word	0x061e1c1a
 8010350:	0e08      	.short	0x0e08
 8010352:	14          	.byte	0x14
 8010353:	00          	.byte	0x00
 8010354:	2000      	movs	r0, #0
 8010356:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8010358:	f642 00b1 	movw	r0, #10417	@ 0x28b1
        break;
 801035c:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801035e:	f643 5009 	movw	r0, #15625	@ 0x3d09
        break;
 8010362:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8010364:	f245 1061 	movw	r0, #20833	@ 0x5161
        break;
 8010368:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801036a:	f647 2012 	movw	r0, #31250	@ 0x7a12
        break;
 801036e:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8010370:	f24a 20c3 	movw	r0, #41667	@ 0xa2c3
        break;
 8010374:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8010376:	f24f 4024 	movw	r0, #62500	@ 0xf424
        break;
 801037a:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801037c:	4804      	ldr	r0, [pc, #16]	@ (8010390 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 801037e:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8010380:	4804      	ldr	r0, [pc, #16]	@ (8010394 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8010382:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8010384:	4804      	ldr	r0, [pc, #16]	@ (8010398 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8010386:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8010388:	f641 6084 	movw	r0, #7812	@ 0x1e84
    }

    return bandwidthInHz;
}
 801038c:	4770      	bx	lr
 801038e:	bf00      	nop
 8010390:	0001e848 	.word	0x0001e848
 8010394:	0003d090 	.word	0x0003d090
 8010398:	0007a120 	.word	0x0007a120

0801039c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801039c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 80103a0:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80103a2:	b953      	cbnz	r3, 80103ba <RadioGetGfskTimeOnAirNumerator+0x1e>
 80103a4:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 80103a6:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80103a8:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80103aa:	b141      	cbz	r1, 80103be <RadioGetGfskTimeOnAirNumerator+0x22>
 80103ac:	2302      	movs	r3, #2
 80103ae:	f89d 0000 	ldrb.w	r0, [sp]
 80103b2:	4418      	add	r0, r3
}
 80103b4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80103b8:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80103ba:	2300      	movs	r3, #0
 80103bc:	e7f3      	b.n	80103a6 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80103be:	2300      	movs	r3, #0
 80103c0:	e7f5      	b.n	80103ae <RadioGetGfskTimeOnAirNumerator+0x12>

080103c2 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80103c2:	b570      	push	{r4, r5, r6, lr}
 80103c4:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80103c8:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 80103cc:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80103ce:	f1a1 0c05 	sub.w	ip, r1, #5
 80103d2:	f1bc 0f01 	cmp.w	ip, #1
 80103d6:	d931      	bls.n	801043c <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80103d8:	b918      	cbnz	r0, 80103e2 <RadioGetLoRaTimeOnAirNumerator+0x20>
 80103da:	f1a1 060b 	sub.w	r6, r1, #11
 80103de:	2e01      	cmp	r6, #1
 80103e0:	d934      	bls.n	801044c <RadioGetLoRaTimeOnAirNumerator+0x8a>
 80103e2:	2801      	cmp	r0, #1
 80103e4:	d02e      	beq.n	8010444 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 80103e6:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80103e8:	f89d c014 	ldrb.w	ip, [sp, #20]
 80103ec:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 80103f0:	b385      	cbz	r5, 8010454 <RadioGetLoRaTimeOnAirNumerator+0x92>
 80103f2:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80103f4:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 80103f6:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 80103f8:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 80103fc:	b364      	cbz	r4, 8010458 <RadioGetLoRaTimeOnAirNumerator+0x96>
 80103fe:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 8010402:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8010404:	2906      	cmp	r1, #6
 8010406:	d904      	bls.n	8010412 <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8010408:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 801040c:	b10e      	cbz	r6, 8010412 <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801040e:	1e88      	subs	r0, r1, #2
 8010410:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8010412:	f1bc 0f00 	cmp.w	ip, #0
 8010416:	db22      	blt.n	801045e <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8010418:	4484      	add	ip, r0
 801041a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801041e:	fb9c fcf0 	sdiv	ip, ip, r0
 8010422:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8010426:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 801042a:	2906      	cmp	r1, #6
 801042c:	d801      	bhi.n	8010432 <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 801042e:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8010432:	0080      	lsls	r0, r0, #2
 8010434:	3001      	adds	r0, #1
 8010436:	3902      	subs	r1, #2
}
 8010438:	4088      	lsls	r0, r1
 801043a:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 801043c:	2b0b      	cmp	r3, #11
 801043e:	d8cb      	bhi.n	80103d8 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8010440:	230c      	movs	r3, #12
 8010442:	e7c9      	b.n	80103d8 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010444:	290c      	cmp	r1, #12
 8010446:	d003      	beq.n	8010450 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 8010448:	2600      	movs	r6, #0
 801044a:	e7cd      	b.n	80103e8 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 801044c:	2601      	movs	r6, #1
 801044e:	e7cb      	b.n	80103e8 <RadioGetLoRaTimeOnAirNumerator+0x26>
 8010450:	2601      	movs	r6, #1
 8010452:	e7c9      	b.n	80103e8 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8010454:	2000      	movs	r0, #0
 8010456:	e7cd      	b.n	80103f4 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 8010458:	f04f 0e14 	mov.w	lr, #20
 801045c:	e7d1      	b.n	8010402 <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 801045e:	f04f 0c00 	mov.w	ip, #0
 8010462:	e7d9      	b.n	8010418 <RadioGetLoRaTimeOnAirNumerator+0x56>

08010464 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8010464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010466:	b085      	sub	sp, #20
 8010468:	460e      	mov	r6, r1
 801046a:	4615      	mov	r5, r2
 801046c:	4619      	mov	r1, r3
 801046e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8010472:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8010476:	f89d 4030 	ldrb.w	r4, [sp, #48]	@ 0x30
 801047a:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 801047e:	b120      	cbz	r0, 801048a <RadioTimeOnAir+0x26>
 8010480:	2801      	cmp	r0, #1
 8010482:	d011      	beq.n	80104a8 <RadioTimeOnAir+0x44>
 8010484:	2501      	movs	r5, #1
 8010486:	2400      	movs	r4, #0
 8010488:	e008      	b.n	801049c <RadioTimeOnAir+0x38>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801048a:	9701      	str	r7, [sp, #4]
 801048c:	9400      	str	r4, [sp, #0]
 801048e:	4628      	mov	r0, r5
 8010490:	f7ff ff84 	bl	801039c <RadioGetGfskTimeOnAirNumerator>
 8010494:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010498:	fb03 f400 	mul.w	r4, r3, r0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801049c:	1960      	adds	r0, r4, r5
 801049e:	3801      	subs	r0, #1
}
 80104a0:	fbb0 f0f5 	udiv	r0, r0, r5
 80104a4:	b005      	add	sp, #20
 80104a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80104a8:	9702      	str	r7, [sp, #8]
 80104aa:	9401      	str	r4, [sp, #4]
 80104ac:	9300      	str	r3, [sp, #0]
 80104ae:	4613      	mov	r3, r2
 80104b0:	460a      	mov	r2, r1
 80104b2:	4629      	mov	r1, r5
 80104b4:	4630      	mov	r0, r6
 80104b6:	f7ff ff84 	bl	80103c2 <RadioGetLoRaTimeOnAirNumerator>
 80104ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80104be:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80104c2:	4b03      	ldr	r3, [pc, #12]	@ (80104d0 <RadioTimeOnAir+0x6c>)
 80104c4:	5d98      	ldrb	r0, [r3, r6]
 80104c6:	f7ff ff3b 	bl	8010340 <RadioGetLoRaBandwidthInHz>
 80104ca:	4605      	mov	r5, r0
        break;
 80104cc:	e7e6      	b.n	801049c <RadioTimeOnAir+0x38>
 80104ce:	bf00      	nop
 80104d0:	08013b94 	.word	0x08013b94

080104d4 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 80104d4:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80104d6:	4b05      	ldr	r3, [pc, #20]	@ (80104ec <RadioOnTxTimeoutProcess+0x18>)
 80104d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80104dc:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80104de:	4b04      	ldr	r3, [pc, #16]	@ (80104f0 <RadioOnTxTimeoutProcess+0x1c>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	b113      	cbz	r3, 80104ea <RadioOnTxTimeoutProcess+0x16>
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	b103      	cbz	r3, 80104ea <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 80104e8:	4798      	blx	r3
    }
}
 80104ea:	bd08      	pop	{r3, pc}
 80104ec:	48000400 	.word	0x48000400
 80104f0:	200016e4 	.word	0x200016e4

080104f4 <RadioOnTxTimeoutIrq>:
{
 80104f4:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 80104f6:	f7ff ffed 	bl	80104d4 <RadioOnTxTimeoutProcess>
}
 80104fa:	bd08      	pop	{r3, pc}

080104fc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80104fc:	b508      	push	{r3, lr}
 80104fe:	4b05      	ldr	r3, [pc, #20]	@ (8010514 <RadioOnRxTimeoutProcess+0x18>)
 8010500:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8010504:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8010506:	4b04      	ldr	r3, [pc, #16]	@ (8010518 <RadioOnRxTimeoutProcess+0x1c>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	b113      	cbz	r3, 8010512 <RadioOnRxTimeoutProcess+0x16>
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	b103      	cbz	r3, 8010512 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8010510:	4798      	blx	r3
    }
}
 8010512:	bd08      	pop	{r3, pc}
 8010514:	48000400 	.word	0x48000400
 8010518:	200016e4 	.word	0x200016e4

0801051c <RadioOnRxTimeoutIrq>:
{
 801051c:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 801051e:	f7ff ffed 	bl	80104fc <RadioOnRxTimeoutProcess>
}
 8010522:	bd08      	pop	{r3, pc}

08010524 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8010524:	f04f 30ff 	mov.w	r0, #4294967295
 8010528:	4770      	bx	lr

0801052a <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801052a:	f04f 30ff 	mov.w	r0, #4294967295
 801052e:	4770      	bx	lr

08010530 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8010530:	2001      	movs	r0, #1
 8010532:	4770      	bx	lr

08010534 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8010534:	2001      	movs	r0, #1
 8010536:	4770      	bx	lr

08010538 <RadioWrite>:
{
 8010538:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 801053a:	f000 fe3f 	bl	80111bc <SUBGRF_WriteRegister>
}
 801053e:	bd08      	pop	{r3, pc}

08010540 <RadioTxCw>:
{
 8010540:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8010542:	f001 fbd7 	bl	8011cf4 <SUBGRF_SetRfTxPower>
 8010546:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8010548:	210e      	movs	r1, #14
 801054a:	f640 101f 	movw	r0, #2335	@ 0x91f
 801054e:	f000 fe35 	bl	80111bc <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8010552:	2101      	movs	r1, #1
 8010554:	4620      	mov	r0, r4
 8010556:	f001 fbb9 	bl	8011ccc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801055a:	f001 f807 	bl	801156c <SUBGRF_SetTxContinuousWave>
}
 801055e:	bd10      	pop	{r4, pc}

08010560 <RadioTxPrbs>:
{
 8010560:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8010562:	2101      	movs	r1, #1
 8010564:	4b07      	ldr	r3, [pc, #28]	@ (8010584 <RadioTxPrbs+0x24>)
 8010566:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 801056a:	f001 fbaf 	bl	8011ccc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801056e:	212d      	movs	r1, #45	@ 0x2d
 8010570:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8010574:	f7ff ffe0 	bl	8010538 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8010578:	f000 ffff 	bl	801157a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801057c:	4802      	ldr	r0, [pc, #8]	@ (8010588 <RadioTxPrbs+0x28>)
 801057e:	f000 ff35 	bl	80113ec <SUBGRF_SetTx>
}
 8010582:	bd08      	pop	{r3, pc}
 8010584:	20001688 	.word	0x20001688
 8010588:	000fffff 	.word	0x000fffff

0801058c <RadioSetRxDutyCycle>:
{
 801058c:	b570      	push	{r4, r5, r6, lr}
 801058e:	4604      	mov	r4, r0
 8010590:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8010592:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8010596:	4e09      	ldr	r6, [pc, #36]	@ (80105bc <RadioSetRxDutyCycle+0x30>)
 8010598:	65b3      	str	r3, [r6, #88]	@ 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801059a:	2300      	movs	r3, #0
 801059c:	461a      	mov	r2, r3
 801059e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80105a2:	4608      	mov	r0, r1
 80105a4:	f001 f8b5 	bl	8011712 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80105a8:	2100      	movs	r1, #0
 80105aa:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 80105ae:	f001 fb8d 	bl	8011ccc <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80105b2:	4629      	mov	r1, r5
 80105b4:	4620      	mov	r0, r4
 80105b6:	f000 ffa9 	bl	801150c <SUBGRF_SetRxDutyCycle>
}
 80105ba:	bd70      	pop	{r4, r5, r6, pc}
 80105bc:	20001688 	.word	0x20001688

080105c0 <RadioRxBoosted>:
{
 80105c0:	b538      	push	{r3, r4, r5, lr}
 80105c2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 80105c4:	f001 fc71 	bl	8011eaa <RFW_Is_Init>
 80105c8:	2801      	cmp	r0, #1
 80105ca:	d019      	beq.n	8010600 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80105cc:	2300      	movs	r3, #0
 80105ce:	461a      	mov	r2, r3
 80105d0:	f240 2162 	movw	r1, #610	@ 0x262
 80105d4:	4608      	mov	r0, r1
 80105d6:	f001 f89c 	bl	8011712 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80105da:	b9a4      	cbnz	r4, 8010606 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80105dc:	4c11      	ldr	r4, [pc, #68]	@ (8010624 <RadioRxBoosted+0x64>)
 80105de:	2100      	movs	r1, #0
 80105e0:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80105e2:	4b11      	ldr	r3, [pc, #68]	@ (8010628 <RadioRxBoosted+0x68>)
 80105e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80105e8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80105ea:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 80105ee:	f001 fb6d 	bl	8011ccc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80105f2:	7863      	ldrb	r3, [r4, #1]
 80105f4:	b183      	cbz	r3, 8010618 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80105f6:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80105fa:	f000 ff69 	bl	80114d0 <SUBGRF_SetRxBoosted>
}
 80105fe:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8010600:	f001 fc5b 	bl	8011eba <RFW_ReceiveInit>
 8010604:	e7e9      	b.n	80105da <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8010606:	4d09      	ldr	r5, [pc, #36]	@ (801062c <RadioRxBoosted+0x6c>)
 8010608:	4621      	mov	r1, r4
 801060a:	4628      	mov	r0, r5
 801060c:	f002 f8da 	bl	80127c4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8010610:	4628      	mov	r0, r5
 8010612:	f002 f891 	bl	8012738 <UTIL_TIMER_Start>
 8010616:	e7e1      	b.n	80105dc <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8010618:	4b02      	ldr	r3, [pc, #8]	@ (8010624 <RadioRxBoosted+0x64>)
 801061a:	6898      	ldr	r0, [r3, #8]
 801061c:	0180      	lsls	r0, r0, #6
 801061e:	f000 ff57 	bl	80114d0 <SUBGRF_SetRxBoosted>
}
 8010622:	e7ec      	b.n	80105fe <RadioRxBoosted+0x3e>
 8010624:	20001688 	.word	0x20001688
 8010628:	48000400 	.word	0x48000400
 801062c:	20001658 	.word	0x20001658

08010630 <RadioStandby>:
{
 8010630:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8010632:	2000      	movs	r0, #0
 8010634:	f000 fec0 	bl	80113b8 <SUBGRF_SetStandby>
}
 8010638:	bd08      	pop	{r3, pc}

0801063a <RadioRead>:
{
 801063a:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 801063c:	f000 fdd2 	bl	80111e4 <SUBGRF_ReadRegister>
}
 8010640:	bd08      	pop	{r3, pc}

08010642 <RadioGetStatus>:
{
 8010642:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8010644:	f000 fdae 	bl	80111a4 <SUBGRF_GetOperatingMode>
 8010648:	2805      	cmp	r0, #5
 801064a:	d005      	beq.n	8010658 <RadioGetStatus+0x16>
 801064c:	2807      	cmp	r0, #7
 801064e:	d005      	beq.n	801065c <RadioGetStatus+0x1a>
 8010650:	2804      	cmp	r0, #4
 8010652:	d105      	bne.n	8010660 <RadioGetStatus+0x1e>
 8010654:	2002      	movs	r0, #2
 8010656:	e002      	b.n	801065e <RadioGetStatus+0x1c>
            return RF_RX_RUNNING;
 8010658:	2001      	movs	r0, #1
 801065a:	e000      	b.n	801065e <RadioGetStatus+0x1c>
            return RF_CAD;
 801065c:	2003      	movs	r0, #3
}
 801065e:	bd08      	pop	{r3, pc}
            return RF_IDLE;
 8010660:	2000      	movs	r0, #0
 8010662:	e7fc      	b.n	801065e <RadioGetStatus+0x1c>

08010664 <RadioIrqProcess>:
{
 8010664:	b530      	push	{r4, r5, lr}
 8010666:	b083      	sub	sp, #12
    uint8_t size = 0;
 8010668:	2300      	movs	r3, #0
 801066a:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 801066e:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8010670:	4ba5      	ldr	r3, [pc, #660]	@ (8010908 <RadioIrqProcess+0x2a4>)
 8010672:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8010676:	2b20      	cmp	r3, #32
 8010678:	d829      	bhi.n	80106ce <RadioIrqProcess+0x6a>
 801067a:	b21a      	sxth	r2, r3
 801067c:	2a00      	cmp	r2, #0
 801067e:	f000 8140 	beq.w	8010902 <RadioIrqProcess+0x29e>
 8010682:	3b01      	subs	r3, #1
 8010684:	2b1f      	cmp	r3, #31
 8010686:	f200 813c 	bhi.w	8010902 <RadioIrqProcess+0x29e>
 801068a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801068e:	0063      	.short	0x0063
 8010690:	013a007f 	.word	0x013a007f
 8010694:	013a00f7 	.word	0x013a00f7
 8010698:	013a013a 	.word	0x013a013a
 801069c:	013a0127 	.word	0x013a0127
 80106a0:	013a013a 	.word	0x013a013a
 80106a4:	013a013a 	.word	0x013a013a
 80106a8:	013a013a 	.word	0x013a013a
 80106ac:	013a0134 	.word	0x013a0134
 80106b0:	013a013a 	.word	0x013a013a
 80106b4:	013a013a 	.word	0x013a013a
 80106b8:	013a013a 	.word	0x013a013a
 80106bc:	013a013a 	.word	0x013a013a
 80106c0:	013a013a 	.word	0x013a013a
 80106c4:	013a013a 	.word	0x013a013a
 80106c8:	013a013a 	.word	0x013a013a
 80106cc:	0155      	.short	0x0155
 80106ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80106d2:	f000 80b3 	beq.w	801083c <RadioIrqProcess+0x1d8>
 80106d6:	d814      	bhi.n	8010702 <RadioIrqProcess+0x9e>
 80106d8:	2b40      	cmp	r3, #64	@ 0x40
 80106da:	f000 8146 	beq.w	801096a <RadioIrqProcess+0x306>
 80106de:	2b80      	cmp	r3, #128	@ 0x80
 80106e0:	f040 810f 	bne.w	8010902 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 80106e4:	2000      	movs	r0, #0
 80106e6:	f000 fe67 	bl	80113b8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80106ea:	4b88      	ldr	r3, [pc, #544]	@ (801090c <RadioIrqProcess+0x2a8>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	f000 8107 	beq.w	8010902 <RadioIrqProcess+0x29e>
 80106f4:	699b      	ldr	r3, [r3, #24]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	f000 8103 	beq.w	8010902 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 80106fc:	2000      	movs	r0, #0
 80106fe:	4798      	blx	r3
 8010700:	e0ff      	b.n	8010902 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8010702:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010706:	f040 80fc 	bne.w	8010902 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801070a:	4b81      	ldr	r3, [pc, #516]	@ (8010910 <RadioIrqProcess+0x2ac>)
 801070c:	2201      	movs	r2, #1
 801070e:	2100      	movs	r1, #0
 8010710:	2002      	movs	r0, #2
 8010712:	f001 fcb1 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8010716:	f000 fd45 	bl	80111a4 <SUBGRF_GetOperatingMode>
 801071a:	2804      	cmp	r0, #4
 801071c:	f000 809b 	beq.w	8010856 <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8010720:	f000 fd40 	bl	80111a4 <SUBGRF_GetOperatingMode>
 8010724:	2805      	cmp	r0, #5
 8010726:	f040 80ec 	bne.w	8010902 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 801072a:	4b7a      	ldr	r3, [pc, #488]	@ (8010914 <RadioIrqProcess+0x2b0>)
 801072c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8010730:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &RxTimeoutTimer );
 8010732:	4879      	ldr	r0, [pc, #484]	@ (8010918 <RadioIrqProcess+0x2b4>)
 8010734:	f001 ffa6 	bl	8012684 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8010738:	2000      	movs	r0, #0
 801073a:	f000 fe3d 	bl	80113b8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801073e:	4b73      	ldr	r3, [pc, #460]	@ (801090c <RadioIrqProcess+0x2a8>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	f000 80dd 	beq.w	8010902 <RadioIrqProcess+0x29e>
 8010748:	68db      	ldr	r3, [r3, #12]
 801074a:	2b00      	cmp	r3, #0
 801074c:	f000 80d9 	beq.w	8010902 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 8010750:	4798      	blx	r3
 8010752:	e0d6      	b.n	8010902 <RadioIrqProcess+0x29e>
 8010754:	4b6f      	ldr	r3, [pc, #444]	@ (8010914 <RadioIrqProcess+0x2b0>)
 8010756:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801075a:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &TxTimeoutTimer );
 801075c:	486f      	ldr	r0, [pc, #444]	@ (801091c <RadioIrqProcess+0x2b8>)
 801075e:	f001 ff91 	bl	8012684 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8010762:	2000      	movs	r0, #0
 8010764:	f000 fe28 	bl	80113b8 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8010768:	f001 fba1 	bl	8011eae <RFW_Is_LongPacketModeEnabled>
 801076c:	2801      	cmp	r0, #1
 801076e:	d00a      	beq.n	8010786 <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8010770:	4b66      	ldr	r3, [pc, #408]	@ (801090c <RadioIrqProcess+0x2a8>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	2b00      	cmp	r3, #0
 8010776:	f000 80c4 	beq.w	8010902 <RadioIrqProcess+0x29e>
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	2b00      	cmp	r3, #0
 801077e:	f000 80c0 	beq.w	8010902 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 8010782:	4798      	blx	r3
 8010784:	e0bd      	b.n	8010902 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 8010786:	f001 fb9b 	bl	8011ec0 <RFW_DeInit_TxLongPacket>
 801078a:	e7f1      	b.n	8010770 <RadioIrqProcess+0x10c>
 801078c:	4b61      	ldr	r3, [pc, #388]	@ (8010914 <RadioIrqProcess+0x2b0>)
 801078e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8010792:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &RxTimeoutTimer );
 8010794:	4860      	ldr	r0, [pc, #384]	@ (8010918 <RadioIrqProcess+0x2b4>)
 8010796:	f001 ff75 	bl	8012684 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801079a:	4b5b      	ldr	r3, [pc, #364]	@ (8010908 <RadioIrqProcess+0x2a4>)
 801079c:	785b      	ldrb	r3, [r3, #1]
 801079e:	b303      	cbz	r3, 80107e2 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80107a0:	22ff      	movs	r2, #255	@ 0xff
 80107a2:	f10d 0107 	add.w	r1, sp, #7
 80107a6:	485e      	ldr	r0, [pc, #376]	@ (8010920 <RadioIrqProcess+0x2bc>)
 80107a8:	f001 fa3a 	bl	8011c20 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80107ac:	485d      	ldr	r0, [pc, #372]	@ (8010924 <RadioIrqProcess+0x2c0>)
 80107ae:	f001 fa51 	bl	8011c54 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80107b2:	4b56      	ldr	r3, [pc, #344]	@ (801090c <RadioIrqProcess+0x2a8>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	f000 80a3 	beq.w	8010902 <RadioIrqProcess+0x29e>
 80107bc:	689c      	ldr	r4, [r3, #8]
 80107be:	2c00      	cmp	r4, #0
 80107c0:	f000 809f 	beq.w	8010902 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 80107c4:	4b50      	ldr	r3, [pc, #320]	@ (8010908 <RadioIrqProcess+0x2a4>)
 80107c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80107ca:	2b01      	cmp	r3, #1
 80107cc:	d11d      	bne.n	801080a <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 80107ce:	4a4e      	ldr	r2, [pc, #312]	@ (8010908 <RadioIrqProcess+0x2a4>)
 80107d0:	f992 3031 	ldrsb.w	r3, [r2, #49]	@ 0x31
 80107d4:	f992 2030 	ldrsb.w	r2, [r2, #48]	@ 0x30
 80107d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80107dc:	4850      	ldr	r0, [pc, #320]	@ (8010920 <RadioIrqProcess+0x2bc>)
 80107de:	47a0      	blx	r4
                break;
 80107e0:	e08f      	b.n	8010902 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80107e2:	2000      	movs	r0, #0
 80107e4:	f000 fde8 	bl	80113b8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80107e8:	2100      	movs	r1, #0
 80107ea:	f640 1002 	movw	r0, #2306	@ 0x902
 80107ee:	f000 fce5 	bl	80111bc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80107f2:	f640 1044 	movw	r0, #2372	@ 0x944
 80107f6:	f000 fcf5 	bl	80111e4 <SUBGRF_ReadRegister>
 80107fa:	f040 0102 	orr.w	r1, r0, #2
 80107fe:	b2c9      	uxtb	r1, r1
 8010800:	f640 1044 	movw	r0, #2372	@ 0x944
 8010804:	f000 fcda 	bl	80111bc <SUBGRF_WriteRegister>
 8010808:	e7ca      	b.n	80107a0 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801080a:	4c3f      	ldr	r4, [pc, #252]	@ (8010908 <RadioIrqProcess+0x2a4>)
 801080c:	4669      	mov	r1, sp
 801080e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8010810:	f001 fb00 	bl	8011e14 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8010814:	4b3d      	ldr	r3, [pc, #244]	@ (801090c <RadioIrqProcess+0x2a8>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	689d      	ldr	r5, [r3, #8]
 801081a:	9b00      	ldr	r3, [sp, #0]
 801081c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8010820:	4a41      	ldr	r2, [pc, #260]	@ (8010928 <RadioIrqProcess+0x2c4>)
 8010822:	fb82 1203 	smull	r1, r2, r2, r3
 8010826:	17db      	asrs	r3, r3, #31
 8010828:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801082c:	b25b      	sxtb	r3, r3
 801082e:	f994 2029 	ldrsb.w	r2, [r4, #41]	@ 0x29
 8010832:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010836:	483a      	ldr	r0, [pc, #232]	@ (8010920 <RadioIrqProcess+0x2bc>)
 8010838:	47a8      	blx	r5
                break;
 801083a:	e062      	b.n	8010902 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 801083c:	2000      	movs	r0, #0
 801083e:	f000 fdbb 	bl	80113b8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8010842:	4b32      	ldr	r3, [pc, #200]	@ (801090c <RadioIrqProcess+0x2a8>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d05b      	beq.n	8010902 <RadioIrqProcess+0x29e>
 801084a:	699b      	ldr	r3, [r3, #24]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d058      	beq.n	8010902 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8010850:	2001      	movs	r0, #1
 8010852:	4798      	blx	r3
 8010854:	e055      	b.n	8010902 <RadioIrqProcess+0x29e>
 8010856:	4b2f      	ldr	r3, [pc, #188]	@ (8010914 <RadioIrqProcess+0x2b0>)
 8010858:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801085c:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &TxTimeoutTimer );
 801085e:	482f      	ldr	r0, [pc, #188]	@ (801091c <RadioIrqProcess+0x2b8>)
 8010860:	f001 ff10 	bl	8012684 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8010864:	2000      	movs	r0, #0
 8010866:	f000 fda7 	bl	80113b8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801086a:	4b28      	ldr	r3, [pc, #160]	@ (801090c <RadioIrqProcess+0x2a8>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d047      	beq.n	8010902 <RadioIrqProcess+0x29e>
 8010872:	685b      	ldr	r3, [r3, #4]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d044      	beq.n	8010902 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 8010878:	4798      	blx	r3
 801087a:	e042      	b.n	8010902 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801087c:	4b2b      	ldr	r3, [pc, #172]	@ (801092c <RadioIrqProcess+0x2c8>)
 801087e:	2201      	movs	r2, #1
 8010880:	2100      	movs	r1, #0
 8010882:	2002      	movs	r0, #2
 8010884:	f001 fbf8 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8010888:	4b1f      	ldr	r3, [pc, #124]	@ (8010908 <RadioIrqProcess+0x2a4>)
 801088a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801088c:	b3c9      	cbz	r1, 8010902 <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801088e:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8010892:	f640 1003 	movw	r0, #2307	@ 0x903
 8010896:	f7ff fe4f 	bl	8010538 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801089a:	4c1b      	ldr	r4, [pc, #108]	@ (8010908 <RadioIrqProcess+0x2a4>)
 801089c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80108a0:	f640 1004 	movw	r0, #2308	@ 0x904
 80108a4:	f7ff fe48 	bl	8010538 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80108a8:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 80108ac:	f640 1005 	movw	r0, #2309	@ 0x905
 80108b0:	f7ff fe42 	bl	8010538 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80108b4:	f640 1002 	movw	r0, #2306	@ 0x902
 80108b8:	f7ff febf 	bl	801063a <RadioRead>
 80108bc:	f040 0101 	orr.w	r1, r0, #1
 80108c0:	b2c9      	uxtb	r1, r1
 80108c2:	f640 1002 	movw	r0, #2306	@ 0x902
 80108c6:	f7ff fe37 	bl	8010538 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80108ca:	2200      	movs	r2, #0
 80108cc:	65a2      	str	r2, [r4, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80108ce:	4613      	mov	r3, r2
 80108d0:	f240 2162 	movw	r1, #610	@ 0x262
 80108d4:	4608      	mov	r0, r1
 80108d6:	f000 ff1c 	bl	8011712 <SUBGRF_SetDioIrqParams>
 80108da:	e012      	b.n	8010902 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80108dc:	4b14      	ldr	r3, [pc, #80]	@ (8010930 <RadioIrqProcess+0x2cc>)
 80108de:	2201      	movs	r2, #1
 80108e0:	2100      	movs	r1, #0
 80108e2:	2002      	movs	r0, #2
 80108e4:	f001 fbc8 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80108e8:	f001 fadf 	bl	8011eaa <RFW_Is_Init>
 80108ec:	2801      	cmp	r0, #1
 80108ee:	d108      	bne.n	8010902 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 80108f0:	f001 fae7 	bl	8011ec2 <RFW_ReceivePayload>
 80108f4:	e005      	b.n	8010902 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80108f6:	4b0f      	ldr	r3, [pc, #60]	@ (8010934 <RadioIrqProcess+0x2d0>)
 80108f8:	2201      	movs	r2, #1
 80108fa:	2100      	movs	r1, #0
 80108fc:	2002      	movs	r0, #2
 80108fe:	f001 fbbb 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
}
 8010902:	b003      	add	sp, #12
 8010904:	bd30      	pop	{r4, r5, pc}
 8010906:	bf00      	nop
 8010908:	20001688 	.word	0x20001688
 801090c:	200016e4 	.word	0x200016e4
 8010910:	08013520 	.word	0x08013520
 8010914:	48000400 	.word	0x48000400
 8010918:	20001658 	.word	0x20001658
 801091c:	20001670 	.word	0x20001670
 8010920:	200016e8 	.word	0x200016e8
 8010924:	200016ac 	.word	0x200016ac
 8010928:	10624dd3 	.word	0x10624dd3
 801092c:	08013534 	.word	0x08013534
 8010930:	08013540 	.word	0x08013540
 8010934:	0801354c 	.word	0x0801354c
        TimerStop( &RxTimeoutTimer );
 8010938:	4817      	ldr	r0, [pc, #92]	@ (8010998 <RadioIrqProcess+0x334>)
 801093a:	f001 fea3 	bl	8012684 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801093e:	4b17      	ldr	r3, [pc, #92]	@ (801099c <RadioIrqProcess+0x338>)
 8010940:	785b      	ldrb	r3, [r3, #1]
 8010942:	b173      	cbz	r3, 8010962 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8010944:	4b16      	ldr	r3, [pc, #88]	@ (80109a0 <RadioIrqProcess+0x33c>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d0da      	beq.n	8010902 <RadioIrqProcess+0x29e>
 801094c:	68db      	ldr	r3, [r3, #12]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d0d7      	beq.n	8010902 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 8010952:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8010954:	4b13      	ldr	r3, [pc, #76]	@ (80109a4 <RadioIrqProcess+0x340>)
 8010956:	2201      	movs	r2, #1
 8010958:	2100      	movs	r1, #0
 801095a:	2002      	movs	r0, #2
 801095c:	f001 fb8c 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
 8010960:	e7cf      	b.n	8010902 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8010962:	2000      	movs	r0, #0
 8010964:	f000 fd28 	bl	80113b8 <SUBGRF_SetStandby>
 8010968:	e7ec      	b.n	8010944 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801096a:	4b0f      	ldr	r3, [pc, #60]	@ (80109a8 <RadioIrqProcess+0x344>)
 801096c:	2201      	movs	r2, #1
 801096e:	2100      	movs	r1, #0
 8010970:	2002      	movs	r0, #2
 8010972:	f001 fb81 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8010976:	4b09      	ldr	r3, [pc, #36]	@ (801099c <RadioIrqProcess+0x338>)
 8010978:	785b      	ldrb	r3, [r3, #1]
 801097a:	b143      	cbz	r3, 801098e <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801097c:	4b08      	ldr	r3, [pc, #32]	@ (80109a0 <RadioIrqProcess+0x33c>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d0be      	beq.n	8010902 <RadioIrqProcess+0x29e>
 8010984:	691b      	ldr	r3, [r3, #16]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d0bb      	beq.n	8010902 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 801098a:	4798      	blx	r3
}
 801098c:	e7b9      	b.n	8010902 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 801098e:	2000      	movs	r0, #0
 8010990:	f000 fd12 	bl	80113b8 <SUBGRF_SetStandby>
 8010994:	e7f2      	b.n	801097c <RadioIrqProcess+0x318>
 8010996:	bf00      	nop
 8010998:	20001658 	.word	0x20001658
 801099c:	20001688 	.word	0x20001688
 80109a0:	200016e4 	.word	0x200016e4
 80109a4:	08013558 	.word	0x08013558
 80109a8:	08013564 	.word	0x08013564

080109ac <RadioOnDioIrq>:
{
 80109ac:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 80109ae:	4b03      	ldr	r3, [pc, #12]	@ (80109bc <RadioOnDioIrq+0x10>)
 80109b0:	f8a3 0054 	strh.w	r0, [r3, #84]	@ 0x54
    RADIO_IRQ_PROCESS();
 80109b4:	f7ff fe56 	bl	8010664 <RadioIrqProcess>
}
 80109b8:	bd08      	pop	{r3, pc}
 80109ba:	bf00      	nop
 80109bc:	20001688 	.word	0x20001688

080109c0 <RadioGetWakeupTime>:
{
 80109c0:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80109c2:	f001 f9ae 	bl	8011d22 <SUBGRF_GetRadioWakeUpTime>
}
 80109c6:	3003      	adds	r0, #3
 80109c8:	bd08      	pop	{r3, pc}
	...

080109cc <RadioSetMaxPayloadLength>:
{
 80109cc:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 80109ce:	2801      	cmp	r0, #1
 80109d0:	d004      	beq.n	80109dc <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80109d2:	4b0a      	ldr	r3, [pc, #40]	@ (80109fc <RadioSetMaxPayloadLength+0x30>)
 80109d4:	7d5b      	ldrb	r3, [r3, #21]
 80109d6:	2b01      	cmp	r3, #1
 80109d8:	d008      	beq.n	80109ec <RadioSetMaxPayloadLength+0x20>
}
 80109da:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80109dc:	4b08      	ldr	r3, [pc, #32]	@ (8010a00 <RadioSetMaxPayloadLength+0x34>)
 80109de:	7019      	strb	r1, [r3, #0]
 80109e0:	4806      	ldr	r0, [pc, #24]	@ (80109fc <RadioSetMaxPayloadLength+0x30>)
 80109e2:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80109e4:	300e      	adds	r0, #14
 80109e6:	f001 f85d 	bl	8011aa4 <SUBGRF_SetPacketParams>
 80109ea:	e7f6      	b.n	80109da <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80109ec:	4b04      	ldr	r3, [pc, #16]	@ (8010a00 <RadioSetMaxPayloadLength+0x34>)
 80109ee:	7019      	strb	r1, [r3, #0]
 80109f0:	4802      	ldr	r0, [pc, #8]	@ (80109fc <RadioSetMaxPayloadLength+0x30>)
 80109f2:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80109f4:	300e      	adds	r0, #14
 80109f6:	f001 f855 	bl	8011aa4 <SUBGRF_SetPacketParams>
}
 80109fa:	e7ee      	b.n	80109da <RadioSetMaxPayloadLength+0xe>
 80109fc:	20001688 	.word	0x20001688
 8010a00:	20000118 	.word	0x20000118

08010a04 <RadioReadRegisters>:
{
 8010a04:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8010a06:	f000 fc6f 	bl	80112e8 <SUBGRF_ReadRegisters>
}
 8010a0a:	bd08      	pop	{r3, pc}

08010a0c <RadioWriteRegisters>:
{
 8010a0c:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8010a0e:	f000 fc29 	bl	8011264 <SUBGRF_WriteRegisters>
}
 8010a12:	bd08      	pop	{r3, pc}

08010a14 <RadioRssi>:
{
 8010a14:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8010a16:	f001 f8d3 	bl	8011bc0 <SUBGRF_GetRssiInst>
}
 8010a1a:	bd08      	pop	{r3, pc}

08010a1c <RadioSetTxContinuousWave>:
{
 8010a1c:	b538      	push	{r3, r4, r5, lr}
 8010a1e:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8010a20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a24:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 8010a28:	f000 fee6 	bl	80117f8 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8010a2c:	4628      	mov	r0, r5
 8010a2e:	f001 f961 	bl	8011cf4 <SUBGRF_SetRfTxPower>
 8010a32:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8010a34:	210e      	movs	r1, #14
 8010a36:	f640 101f 	movw	r0, #2335	@ 0x91f
 8010a3a:	f000 fbbf 	bl	80111bc <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8010a3e:	2101      	movs	r1, #1
 8010a40:	4628      	mov	r0, r5
 8010a42:	f001 f943 	bl	8011ccc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8010a46:	f000 fd91 	bl	801156c <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8010a4a:	4d04      	ldr	r5, [pc, #16]	@ (8010a5c <RadioSetTxContinuousWave+0x40>)
 8010a4c:	4621      	mov	r1, r4
 8010a4e:	4628      	mov	r0, r5
 8010a50:	f001 feb8 	bl	80127c4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8010a54:	4628      	mov	r0, r5
 8010a56:	f001 fe6f 	bl	8012738 <UTIL_TIMER_Start>
}
 8010a5a:	bd38      	pop	{r3, r4, r5, pc}
 8010a5c:	20001670 	.word	0x20001670

08010a60 <RadioSetChannel>:
{
 8010a60:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8010a62:	f000 fec9 	bl	80117f8 <SUBGRF_SetRfFrequency>
}
 8010a66:	bd08      	pop	{r3, pc}

08010a68 <RadioStartCad>:
{
 8010a68:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8010a6a:	2100      	movs	r1, #0
 8010a6c:	4b07      	ldr	r3, [pc, #28]	@ (8010a8c <RadioStartCad+0x24>)
 8010a6e:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 8010a72:	f001 f92b 	bl	8011ccc <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8010a76:	2300      	movs	r3, #0
 8010a78:	461a      	mov	r2, r3
 8010a7a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8010a7e:	4608      	mov	r0, r1
 8010a80:	f000 fe47 	bl	8011712 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8010a84:	f000 fd66 	bl	8011554 <SUBGRF_SetCad>
}
 8010a88:	bd08      	pop	{r3, pc}
 8010a8a:	bf00      	nop
 8010a8c:	20001688 	.word	0x20001688

08010a90 <RadioRx>:
{
 8010a90:	b538      	push	{r3, r4, r5, lr}
 8010a92:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8010a94:	f001 fa09 	bl	8011eaa <RFW_Is_Init>
 8010a98:	2801      	cmp	r0, #1
 8010a9a:	d019      	beq.n	8010ad0 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	f240 2162 	movw	r1, #610	@ 0x262
 8010aa4:	4608      	mov	r0, r1
 8010aa6:	f000 fe34 	bl	8011712 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8010aaa:	b9a4      	cbnz	r4, 8010ad6 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8010aac:	4c11      	ldr	r4, [pc, #68]	@ (8010af4 <RadioRx+0x64>)
 8010aae:	2100      	movs	r1, #0
 8010ab0:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8010ab2:	4b11      	ldr	r3, [pc, #68]	@ (8010af8 <RadioRx+0x68>)
 8010ab4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8010ab8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8010aba:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 8010abe:	f001 f905 	bl	8011ccc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8010ac2:	7863      	ldrb	r3, [r4, #1]
 8010ac4:	b183      	cbz	r3, 8010ae8 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8010ac6:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8010aca:	f000 fcb1 	bl	8011430 <SUBGRF_SetRx>
}
 8010ace:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8010ad0:	f001 f9f3 	bl	8011eba <RFW_ReceiveInit>
 8010ad4:	e7e9      	b.n	8010aaa <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8010ad6:	4d09      	ldr	r5, [pc, #36]	@ (8010afc <RadioRx+0x6c>)
 8010ad8:	4621      	mov	r1, r4
 8010ada:	4628      	mov	r0, r5
 8010adc:	f001 fe72 	bl	80127c4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	f001 fe29 	bl	8012738 <UTIL_TIMER_Start>
 8010ae6:	e7e1      	b.n	8010aac <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8010ae8:	4b02      	ldr	r3, [pc, #8]	@ (8010af4 <RadioRx+0x64>)
 8010aea:	6898      	ldr	r0, [r3, #8]
 8010aec:	0180      	lsls	r0, r0, #6
 8010aee:	f000 fc9f 	bl	8011430 <SUBGRF_SetRx>
}
 8010af2:	e7ec      	b.n	8010ace <RadioRx+0x3e>
 8010af4:	20001688 	.word	0x20001688
 8010af8:	48000400 	.word	0x48000400
 8010afc:	20001658 	.word	0x20001658

08010b00 <RadioSleep>:
{
 8010b00:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8010b02:	f04f 0004 	mov.w	r0, #4
 8010b06:	f000 fc37 	bl	8011378 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8010b0a:	2002      	movs	r0, #2
 8010b0c:	f7f1 fac4 	bl	8002098 <HAL_Delay>
}
 8010b10:	bd08      	pop	{r3, pc}
	...

08010b14 <RadioSend>:
{
 8010b14:	b570      	push	{r4, r5, r6, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	4605      	mov	r5, r0
 8010b1a:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	461a      	mov	r2, r3
 8010b20:	f240 2101 	movw	r1, #513	@ 0x201
 8010b24:	4608      	mov	r0, r1
 8010b26:	f000 fdf4 	bl	8011712 <SUBGRF_SetDioIrqParams>
 8010b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8010c28 <RadioSend+0x114>)
 8010b2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8010b30:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8010b32:	4e3e      	ldr	r6, [pc, #248]	@ (8010c2c <RadioSend+0x118>)
 8010b34:	2101      	movs	r1, #1
 8010b36:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 8010b3a:	f001 f8c7 	bl	8011ccc <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8010b3e:	7833      	ldrb	r3, [r6, #0]
 8010b40:	2b01      	cmp	r3, #1
 8010b42:	d103      	bne.n	8010b4c <RadioSend+0x38>
 8010b44:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 8010b48:	2b06      	cmp	r3, #6
 8010b4a:	d012      	beq.n	8010b72 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8010b4c:	f640 0089 	movw	r0, #2185	@ 0x889
 8010b50:	f000 fb48 	bl	80111e4 <SUBGRF_ReadRegister>
 8010b54:	f040 0104 	orr.w	r1, r0, #4
 8010b58:	b2c9      	uxtb	r1, r1
 8010b5a:	f640 0089 	movw	r0, #2185	@ 0x889
 8010b5e:	f000 fb2d 	bl	80111bc <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 8010b62:	4b32      	ldr	r3, [pc, #200]	@ (8010c2c <RadioSend+0x118>)
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	2b03      	cmp	r3, #3
 8010b68:	d818      	bhi.n	8010b9c <RadioSend+0x88>
 8010b6a:	e8df f003 	tbb	[pc, r3]
 8010b6e:	0d23      	.short	0x0d23
 8010b70:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8010b72:	f640 0089 	movw	r0, #2185	@ 0x889
 8010b76:	f000 fb35 	bl	80111e4 <SUBGRF_ReadRegister>
 8010b7a:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8010b7e:	f640 0089 	movw	r0, #2185	@ 0x889
 8010b82:	f000 fb1b 	bl	80111bc <SUBGRF_WriteRegister>
 8010b86:	e7ec      	b.n	8010b62 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8010b88:	4828      	ldr	r0, [pc, #160]	@ (8010c2c <RadioSend+0x118>)
 8010b8a:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010b8c:	300e      	adds	r0, #14
 8010b8e:	f000 ff89 	bl	8011aa4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8010b92:	2200      	movs	r2, #0
 8010b94:	4621      	mov	r1, r4
 8010b96:	4628      	mov	r0, r5
 8010b98:	f000 fc42 	bl	8011420 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8010b9c:	4c24      	ldr	r4, [pc, #144]	@ (8010c30 <RadioSend+0x11c>)
 8010b9e:	4b23      	ldr	r3, [pc, #140]	@ (8010c2c <RadioSend+0x118>)
 8010ba0:	6859      	ldr	r1, [r3, #4]
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	f001 fe0e 	bl	80127c4 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8010ba8:	4620      	mov	r0, r4
 8010baa:	f001 fdc5 	bl	8012738 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 8010bae:	2000      	movs	r0, #0
}
 8010bb0:	b002      	add	sp, #8
 8010bb2:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8010bb4:	f001 f979 	bl	8011eaa <RFW_Is_Init>
 8010bb8:	2801      	cmp	r0, #1
 8010bba:	d00a      	beq.n	8010bd2 <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8010bbc:	481b      	ldr	r0, [pc, #108]	@ (8010c2c <RadioSend+0x118>)
 8010bbe:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010bc0:	300e      	adds	r0, #14
 8010bc2:	f000 ff6f 	bl	8011aa4 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	4621      	mov	r1, r4
 8010bca:	4628      	mov	r0, r5
 8010bcc:	f000 fc28 	bl	8011420 <SUBGRF_SendPayload>
 8010bd0:	e7e4      	b.n	8010b9c <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8010bd2:	f10d 0207 	add.w	r2, sp, #7
 8010bd6:	4621      	mov	r1, r4
 8010bd8:	4628      	mov	r0, r5
 8010bda:	f001 f96b 	bl	8011eb4 <RFW_TransmitInit>
 8010bde:	b968      	cbnz	r0, 8010bfc <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8010be0:	4812      	ldr	r0, [pc, #72]	@ (8010c2c <RadioSend+0x118>)
 8010be2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010be6:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010be8:	300e      	adds	r0, #14
 8010bea:	f000 ff5b 	bl	8011aa4 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8010bee:	2200      	movs	r2, #0
 8010bf0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010bf4:	4628      	mov	r0, r5
 8010bf6:	f000 fc13 	bl	8011420 <SUBGRF_SendPayload>
 8010bfa:	e7cf      	b.n	8010b9c <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8010bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8010c34 <RadioSend+0x120>)
 8010bfe:	2201      	movs	r2, #1
 8010c00:	2100      	movs	r1, #0
 8010c02:	2002      	movs	r0, #2
 8010c04:	f001 fa38 	bl	8012078 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8010c08:	2003      	movs	r0, #3
 8010c0a:	e7d1      	b.n	8010bb0 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8010c0c:	4807      	ldr	r0, [pc, #28]	@ (8010c2c <RadioSend+0x118>)
 8010c0e:	2302      	movs	r3, #2
 8010c10:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8010c12:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010c14:	300e      	adds	r0, #14
 8010c16:	f000 ff45 	bl	8011aa4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	4621      	mov	r1, r4
 8010c1e:	4628      	mov	r0, r5
 8010c20:	f000 fbfe 	bl	8011420 <SUBGRF_SendPayload>
            break;
 8010c24:	e7ba      	b.n	8010b9c <RadioSend+0x88>
 8010c26:	bf00      	nop
 8010c28:	48000400 	.word	0x48000400
 8010c2c:	20001688 	.word	0x20001688
 8010c30:	20001670 	.word	0x20001670
 8010c34:	08013574 	.word	0x08013574

08010c38 <RadioRandom>:
{
 8010c38:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	4619      	mov	r1, r3
 8010c40:	4618      	mov	r0, r3
 8010c42:	f000 fd66 	bl	8011712 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8010c46:	f000 fc0d 	bl	8011464 <SUBGRF_GetRandom>
}
 8010c4a:	bd08      	pop	{r3, pc}

08010c4c <RadioSetModem>:
{
 8010c4c:	b510      	push	{r4, lr}
 8010c4e:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8010c50:	4b14      	ldr	r3, [pc, #80]	@ (8010ca4 <RadioSetModem+0x58>)
 8010c52:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8010c54:	f001 f936 	bl	8011ec4 <RFW_SetRadioModem>
    switch( modem )
 8010c58:	2c01      	cmp	r4, #1
 8010c5a:	d010      	beq.n	8010c7e <RadioSetModem+0x32>
 8010c5c:	2c03      	cmp	r4, #3
 8010c5e:	d01a      	beq.n	8010c96 <RadioSetModem+0x4a>
 8010c60:	b134      	cbz	r4, 8010c70 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8010c62:	2003      	movs	r0, #3
 8010c64:	f000 fdf4 	bl	8011850 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010c68:	4b0e      	ldr	r3, [pc, #56]	@ (8010ca4 <RadioSetModem+0x58>)
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	735a      	strb	r2, [r3, #13]
}
 8010c6e:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8010c70:	2000      	movs	r0, #0
 8010c72:	f000 fded 	bl	8011850 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010c76:	4b0b      	ldr	r3, [pc, #44]	@ (8010ca4 <RadioSetModem+0x58>)
 8010c78:	2200      	movs	r2, #0
 8010c7a:	735a      	strb	r2, [r3, #13]
        break;
 8010c7c:	e7f7      	b.n	8010c6e <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8010c7e:	2001      	movs	r0, #1
 8010c80:	f000 fde6 	bl	8011850 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8010c84:	4b07      	ldr	r3, [pc, #28]	@ (8010ca4 <RadioSetModem+0x58>)
 8010c86:	7b5a      	ldrb	r2, [r3, #13]
 8010c88:	7b18      	ldrb	r0, [r3, #12]
 8010c8a:	4282      	cmp	r2, r0
 8010c8c:	d0ef      	beq.n	8010c6e <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8010c8e:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8010c90:	f000 f80a 	bl	8010ca8 <RadioSetPublicNetwork>
 8010c94:	e7eb      	b.n	8010c6e <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8010c96:	2002      	movs	r0, #2
 8010c98:	f000 fdda 	bl	8011850 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010c9c:	4b01      	ldr	r3, [pc, #4]	@ (8010ca4 <RadioSetModem+0x58>)
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	735a      	strb	r2, [r3, #13]
}
 8010ca2:	e7e4      	b.n	8010c6e <RadioSetModem+0x22>
 8010ca4:	20001688 	.word	0x20001688

08010ca8 <RadioSetPublicNetwork>:
{
 8010ca8:	b510      	push	{r4, lr}
 8010caa:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8010cac:	4b0e      	ldr	r3, [pc, #56]	@ (8010ce8 <RadioSetPublicNetwork+0x40>)
 8010cae:	7318      	strb	r0, [r3, #12]
 8010cb0:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8010cb2:	2001      	movs	r0, #1
 8010cb4:	f7ff ffca 	bl	8010c4c <RadioSetModem>
    if( enable == true )
 8010cb8:	b154      	cbz	r4, 8010cd0 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8010cba:	2134      	movs	r1, #52	@ 0x34
 8010cbc:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8010cc0:	f000 fa7c 	bl	80111bc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8010cc4:	2144      	movs	r1, #68	@ 0x44
 8010cc6:	f240 7041 	movw	r0, #1857	@ 0x741
 8010cca:	f000 fa77 	bl	80111bc <SUBGRF_WriteRegister>
}
 8010cce:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8010cd0:	2114      	movs	r1, #20
 8010cd2:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8010cd6:	f000 fa71 	bl	80111bc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8010cda:	2124      	movs	r1, #36	@ 0x24
 8010cdc:	f240 7041 	movw	r0, #1857	@ 0x741
 8010ce0:	f000 fa6c 	bl	80111bc <SUBGRF_WriteRegister>
}
 8010ce4:	e7f3      	b.n	8010cce <RadioSetPublicNetwork+0x26>
 8010ce6:	bf00      	nop
 8010ce8:	20001688 	.word	0x20001688

08010cec <RadioSetTxConfig>:
{
 8010cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf0:	b083      	sub	sp, #12
 8010cf2:	4604      	mov	r4, r0
 8010cf4:	460e      	mov	r6, r1
 8010cf6:	4617      	mov	r7, r2
 8010cf8:	461d      	mov	r5, r3
 8010cfa:	f8bd 8038 	ldrh.w	r8, [sp, #56]	@ 0x38
 8010cfe:	f89d 903c 	ldrb.w	r9, [sp, #60]	@ 0x3c
 8010d02:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
    RFW_DeInit();
 8010d06:	f001 f8cf 	bl	8011ea8 <RFW_DeInit>
    switch( modem )
 8010d0a:	2c00      	cmp	r4, #0
 8010d0c:	d043      	beq.n	8010d96 <RadioSetTxConfig+0xaa>
 8010d0e:	2c01      	cmp	r4, #1
 8010d10:	f040 8083 	bne.w	8010e1a <RadioSetTxConfig+0x12e>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010d14:	4a57      	ldr	r2, [pc, #348]	@ (8010e74 <RadioSetTxConfig+0x188>)
 8010d16:	2301      	movs	r3, #1
 8010d18:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8010d1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8010d24:	4954      	ldr	r1, [pc, #336]	@ (8010e78 <RadioSetTxConfig+0x18c>)
 8010d26:	5d49      	ldrb	r1, [r1, r5]
 8010d28:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8010d2c:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 8010d30:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010d34:	b925      	cbnz	r5, 8010d40 <RadioSetTxConfig+0x54>
 8010d36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010d38:	3a0b      	subs	r2, #11
 8010d3a:	2a01      	cmp	r2, #1
 8010d3c:	f240 8089 	bls.w	8010e52 <RadioSetTxConfig+0x166>
 8010d40:	2d01      	cmp	r5, #1
 8010d42:	f000 8082 	beq.w	8010e4a <RadioSetTxConfig+0x15e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8010d46:	4a4b      	ldr	r2, [pc, #300]	@ (8010e74 <RadioSetTxConfig+0x188>)
 8010d48:	2100      	movs	r1, #0
 8010d4a:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8010d4e:	4a49      	ldr	r2, [pc, #292]	@ (8010e74 <RadioSetTxConfig+0x188>)
 8010d50:	2101      	movs	r1, #1
 8010d52:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010d54:	3b05      	subs	r3, #5
 8010d56:	b2db      	uxtb	r3, r3
 8010d58:	428b      	cmp	r3, r1
 8010d5a:	d97f      	bls.n	8010e5c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010d5c:	4b45      	ldr	r3, [pc, #276]	@ (8010e74 <RadioSetTxConfig+0x188>)
 8010d5e:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8010d62:	4c44      	ldr	r4, [pc, #272]	@ (8010e74 <RadioSetTxConfig+0x188>)
 8010d64:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8010d68:	4b44      	ldr	r3, [pc, #272]	@ (8010e7c <RadioSetTxConfig+0x190>)
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8010d6e:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8010d72:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8010d76:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 8010d7a:	f7ff fc59 	bl	8010630 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8010d7e:	2001      	movs	r0, #1
 8010d80:	f7ff ff64 	bl	8010c4c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010d84:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8010d88:	f000 fe0a 	bl	80119a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010d8c:	f104 000e 	add.w	r0, r4, #14
 8010d90:	f000 fe88 	bl	8011aa4 <SUBGRF_SetPacketParams>
            break;
 8010d94:	e041      	b.n	8010e1a <RadioSetTxConfig+0x12e>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010d96:	4c37      	ldr	r4, [pc, #220]	@ (8010e74 <RadioSetTxConfig+0x188>)
 8010d98:	f04f 0b00 	mov.w	fp, #0
 8010d9c:	f884 b038 	strb.w	fp, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8010da0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010da2:	63e3      	str	r3, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8010da4:	230b      	movs	r3, #11
 8010da6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8010daa:	4628      	mov	r0, r5
 8010dac:	f001 f81a 	bl	8011de4 <SUBGRF_GetFskBandwidthRegValue>
 8010db0:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8010db4:	6427      	str	r7, [r4, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010db6:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8010dba:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8010dbe:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8010dc2:	2304      	movs	r3, #4
 8010dc4:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8010dc6:	2318      	movs	r3, #24
 8010dc8:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8010dca:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8010dce:	f089 0901 	eor.w	r9, r9, #1
 8010dd2:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8010dd6:	f1ba 0f00 	cmp.w	sl, #0
 8010dda:	d032      	beq.n	8010e42 <RadioSetTxConfig+0x156>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8010ddc:	22f2      	movs	r2, #242	@ 0xf2
 8010dde:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8010de0:	4c24      	ldr	r4, [pc, #144]	@ (8010e74 <RadioSetTxConfig+0x188>)
 8010de2:	2301      	movs	r3, #1
 8010de4:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8010de6:	f7ff fc23 	bl	8010630 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8010dea:	2000      	movs	r0, #0
 8010dec:	f7ff ff2e 	bl	8010c4c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010df0:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8010df4:	f000 fdd4 	bl	80119a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010df8:	f104 000e 	add.w	r0, r4, #14
 8010dfc:	f000 fe52 	bl	8011aa4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8010e00:	4a1f      	ldr	r2, [pc, #124]	@ (8010e80 <RadioSetTxConfig+0x194>)
 8010e02:	466b      	mov	r3, sp
 8010e04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e08:	e883 0003 	stmia.w	r3, {r0, r1}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f000 fa39 	bl	8011284 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010e12:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8010e16:	f000 fa0c 	bl	8011232 <SUBGRF_SetWhiteningSeed>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8010e1a:	4630      	mov	r0, r6
 8010e1c:	f000 ff6a 	bl	8011cf4 <SUBGRF_SetRfTxPower>
 8010e20:	4c14      	ldr	r4, [pc, #80]	@ (8010e74 <RadioSetTxConfig+0x188>)
 8010e22:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8010e26:	210e      	movs	r1, #14
 8010e28:	f640 101f 	movw	r0, #2335	@ 0x91f
 8010e2c:	f000 f9c6 	bl	80111bc <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8010e30:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 8010e34:	f001 f83d 	bl	8011eb2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8010e38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010e3a:	6063      	str	r3, [r4, #4]
}
 8010e3c:	b003      	add	sp, #12
 8010e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8010e42:	4b0c      	ldr	r3, [pc, #48]	@ (8010e74 <RadioSetTxConfig+0x188>)
 8010e44:	2201      	movs	r2, #1
 8010e46:	75da      	strb	r2, [r3, #23]
 8010e48:	e7ca      	b.n	8010de0 <RadioSetTxConfig+0xf4>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010e4a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010e4c:	2a0c      	cmp	r2, #12
 8010e4e:	f47f af7a 	bne.w	8010d46 <RadioSetTxConfig+0x5a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8010e52:	4a08      	ldr	r2, [pc, #32]	@ (8010e74 <RadioSetTxConfig+0x188>)
 8010e54:	2101      	movs	r1, #1
 8010e56:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 8010e5a:	e778      	b.n	8010d4e <RadioSetTxConfig+0x62>
                if( preambleLen < 12 )
 8010e5c:	f1b8 0f0b 	cmp.w	r8, #11
 8010e60:	d803      	bhi.n	8010e6a <RadioSetTxConfig+0x17e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8010e62:	4613      	mov	r3, r2
 8010e64:	220c      	movs	r2, #12
 8010e66:	839a      	strh	r2, [r3, #28]
 8010e68:	e77b      	b.n	8010d62 <RadioSetTxConfig+0x76>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010e6a:	4b02      	ldr	r3, [pc, #8]	@ (8010e74 <RadioSetTxConfig+0x188>)
 8010e6c:	f8a3 801c 	strh.w	r8, [r3, #28]
 8010e70:	e777      	b.n	8010d62 <RadioSetTxConfig+0x76>
 8010e72:	bf00      	nop
 8010e74:	20001688 	.word	0x20001688
 8010e78:	08013b94 	.word	0x08013b94
 8010e7c:	20000118 	.word	0x20000118
 8010e80:	08012d24 	.word	0x08012d24

08010e84 <RadioSetRxConfig>:
{
 8010e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e88:	b085      	sub	sp, #20
 8010e8a:	4604      	mov	r4, r0
 8010e8c:	460d      	mov	r5, r1
 8010e8e:	4616      	mov	r6, r2
 8010e90:	9301      	str	r3, [sp, #4]
 8010e92:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 8010e96:	f8bd a040 	ldrh.w	sl, [sp, #64]	@ 0x40
 8010e9a:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 8010e9e:	f89d b04c 	ldrb.w	fp, [sp, #76]	@ 0x4c
 8010ea2:	f89d 805c 	ldrb.w	r8, [sp, #92]	@ 0x5c
    SubgRf.RxContinuous = rxContinuous;
 8010ea6:	4b76      	ldr	r3, [pc, #472]	@ (8011080 <RadioSetRxConfig+0x1fc>)
 8010ea8:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 8010eac:	f000 fffc 	bl	8011ea8 <RFW_DeInit>
    if( rxContinuous == true )
 8010eb0:	f1b8 0f00 	cmp.w	r8, #0
 8010eb4:	d001      	beq.n	8010eba <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8010eb6:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8010eba:	2f00      	cmp	r7, #0
 8010ebc:	d06b      	beq.n	8010f96 <RadioSetRxConfig+0x112>
        MaxPayloadLength = payloadLen;
 8010ebe:	f89d 2048 	ldrb.w	r2, [sp, #72]	@ 0x48
 8010ec2:	4b70      	ldr	r3, [pc, #448]	@ (8011084 <RadioSetRxConfig+0x200>)
 8010ec4:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8010ec6:	2c00      	cmp	r4, #0
 8010ec8:	d069      	beq.n	8010f9e <RadioSetRxConfig+0x11a>
 8010eca:	2c01      	cmp	r4, #1
 8010ecc:	f040 80b3 	bne.w	8011036 <RadioSetRxConfig+0x1b2>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8010ed0:	2000      	movs	r0, #0
 8010ed2:	f000 fb59 	bl	8011588 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010ed6:	4a6a      	ldr	r2, [pc, #424]	@ (8011080 <RadioSetRxConfig+0x1fc>)
 8010ed8:	2301      	movs	r3, #1
 8010eda:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8010ede:	b2f3      	uxtb	r3, r6
 8010ee0:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8010ee4:	4968      	ldr	r1, [pc, #416]	@ (8011088 <RadioSetRxConfig+0x204>)
 8010ee6:	5d49      	ldrb	r1, [r1, r5]
 8010ee8:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8010eec:	9901      	ldr	r1, [sp, #4]
 8010eee:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010ef2:	b925      	cbnz	r5, 8010efe <RadioSetRxConfig+0x7a>
 8010ef4:	f1a6 020b 	sub.w	r2, r6, #11
 8010ef8:	2a01      	cmp	r2, #1
 8010efa:	f240 80a6 	bls.w	801104a <RadioSetRxConfig+0x1c6>
 8010efe:	2d01      	cmp	r5, #1
 8010f00:	f000 80a0 	beq.w	8011044 <RadioSetRxConfig+0x1c0>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8010f04:	4a5e      	ldr	r2, [pc, #376]	@ (8011080 <RadioSetRxConfig+0x1fc>)
 8010f06:	2100      	movs	r1, #0
 8010f08:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8010f0c:	4a5c      	ldr	r2, [pc, #368]	@ (8011080 <RadioSetRxConfig+0x1fc>)
 8010f0e:	2101      	movs	r1, #1
 8010f10:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010f12:	3b05      	subs	r3, #5
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	428b      	cmp	r3, r1
 8010f18:	f240 809c 	bls.w	8011054 <RadioSetRxConfig+0x1d0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010f1c:	4b58      	ldr	r3, [pc, #352]	@ (8011080 <RadioSetRxConfig+0x1fc>)
 8010f1e:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8010f22:	4c57      	ldr	r4, [pc, #348]	@ (8011080 <RadioSetRxConfig+0x1fc>)
 8010f24:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8010f26:	4b57      	ldr	r3, [pc, #348]	@ (8011084 <RadioSetRxConfig+0x200>)
 8010f28:	781b      	ldrb	r3, [r3, #0]
 8010f2a:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8010f2c:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8010f30:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8010f34:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 8010f38:	f7ff fb7a 	bl	8010630 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8010f3c:	2001      	movs	r0, #1
 8010f3e:	f7ff fe85 	bl	8010c4c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010f42:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8010f46:	f000 fd2b 	bl	80119a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010f4a:	f104 000e 	add.w	r0, r4, #14
 8010f4e:	f000 fda9 	bl	8011aa4 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8010f52:	fa5f f08a 	uxtb.w	r0, sl
 8010f56:	f000 fb24 	bl	80115a2 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8010f5a:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8010f5e:	f000 f941 	bl	80111e4 <SUBGRF_ReadRegister>
 8010f62:	f000 0101 	and.w	r1, r0, #1
 8010f66:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8010f6a:	f000 f927 	bl	80111bc <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8010f6e:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8010f72:	2b01      	cmp	r3, #1
 8010f74:	d079      	beq.n	801106a <RadioSetRxConfig+0x1e6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8010f76:	f240 7036 	movw	r0, #1846	@ 0x736
 8010f7a:	f000 f933 	bl	80111e4 <SUBGRF_ReadRegister>
 8010f7e:	f040 0104 	orr.w	r1, r0, #4
 8010f82:	b2c9      	uxtb	r1, r1
 8010f84:	f240 7036 	movw	r0, #1846	@ 0x736
 8010f88:	f000 f918 	bl	80111bc <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8010f8c:	4b3c      	ldr	r3, [pc, #240]	@ (8011080 <RadioSetRxConfig+0x1fc>)
 8010f8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010f92:	609a      	str	r2, [r3, #8]
}
 8010f94:	e04f      	b.n	8011036 <RadioSetRxConfig+0x1b2>
        MaxPayloadLength = 0xFF;
 8010f96:	4b3b      	ldr	r3, [pc, #236]	@ (8011084 <RadioSetRxConfig+0x200>)
 8010f98:	22ff      	movs	r2, #255	@ 0xff
 8010f9a:	701a      	strb	r2, [r3, #0]
 8010f9c:	e793      	b.n	8010ec6 <RadioSetRxConfig+0x42>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8010f9e:	2000      	movs	r0, #0
 8010fa0:	f000 faf2 	bl	8011588 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010fa4:	4c36      	ldr	r4, [pc, #216]	@ (8011080 <RadioSetRxConfig+0x1fc>)
 8010fa6:	f04f 0800 	mov.w	r8, #0
 8010faa:	f884 8038 	strb.w	r8, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8010fae:	63e6      	str	r6, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8010fb0:	230b      	movs	r3, #11
 8010fb2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8010fb6:	4628      	mov	r0, r5
 8010fb8:	f000 ff14 	bl	8011de4 <SUBGRF_GetFskBandwidthRegValue>
 8010fbc:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010fc0:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8010fc4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8010fc8:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8010fcc:	2304      	movs	r3, #4
 8010fce:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8010fd0:	2318      	movs	r3, #24
 8010fd2:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8010fd4:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8010fd8:	f087 0701 	eor.w	r7, r7, #1
 8010fdc:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8010fde:	4b29      	ldr	r3, [pc, #164]	@ (8011084 <RadioSetRxConfig+0x200>)
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8010fe4:	f1bb 0f00 	cmp.w	fp, #0
 8010fe8:	d028      	beq.n	801103c <RadioSetRxConfig+0x1b8>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8010fea:	22f2      	movs	r2, #242	@ 0xf2
 8010fec:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8010fee:	4c24      	ldr	r4, [pc, #144]	@ (8011080 <RadioSetRxConfig+0x1fc>)
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8010ff4:	f7ff fb1c 	bl	8010630 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8010ff8:	2000      	movs	r0, #0
 8010ffa:	f7ff fe27 	bl	8010c4c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010ffe:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8011002:	f000 fccd 	bl	80119a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011006:	f104 000e 	add.w	r0, r4, #14
 801100a:	f000 fd4b 	bl	8011aa4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801100e:	4a1f      	ldr	r2, [pc, #124]	@ (801108c <RadioSetRxConfig+0x208>)
 8011010:	ab02      	add	r3, sp, #8
 8011012:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011016:	e883 0003 	stmia.w	r3, {r0, r1}
 801101a:	4618      	mov	r0, r3
 801101c:	f000 f932 	bl	8011284 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8011020:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8011024:	f000 f905 	bl	8011232 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8011028:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 801102c:	fb03 f30a 	mul.w	r3, r3, sl
 8011030:	fbb3 f3f6 	udiv	r3, r3, r6
 8011034:	60a3      	str	r3, [r4, #8]
}
 8011036:	b005      	add	sp, #20
 8011038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801103c:	4b10      	ldr	r3, [pc, #64]	@ (8011080 <RadioSetRxConfig+0x1fc>)
 801103e:	2201      	movs	r2, #1
 8011040:	75da      	strb	r2, [r3, #23]
 8011042:	e7d4      	b.n	8010fee <RadioSetRxConfig+0x16a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8011044:	2e0c      	cmp	r6, #12
 8011046:	f47f af5d 	bne.w	8010f04 <RadioSetRxConfig+0x80>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801104a:	4a0d      	ldr	r2, [pc, #52]	@ (8011080 <RadioSetRxConfig+0x1fc>)
 801104c:	2101      	movs	r1, #1
 801104e:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 8011052:	e75b      	b.n	8010f0c <RadioSetRxConfig+0x88>
                if( preambleLen < 12 )
 8011054:	f1b9 0f0b 	cmp.w	r9, #11
 8011058:	d803      	bhi.n	8011062 <RadioSetRxConfig+0x1de>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801105a:	4613      	mov	r3, r2
 801105c:	220c      	movs	r2, #12
 801105e:	839a      	strh	r2, [r3, #28]
 8011060:	e75f      	b.n	8010f22 <RadioSetRxConfig+0x9e>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011062:	4b07      	ldr	r3, [pc, #28]	@ (8011080 <RadioSetRxConfig+0x1fc>)
 8011064:	f8a3 901c 	strh.w	r9, [r3, #28]
 8011068:	e75b      	b.n	8010f22 <RadioSetRxConfig+0x9e>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801106a:	f240 7036 	movw	r0, #1846	@ 0x736
 801106e:	f000 f8b9 	bl	80111e4 <SUBGRF_ReadRegister>
 8011072:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8011076:	f240 7036 	movw	r0, #1846	@ 0x736
 801107a:	f000 f89f 	bl	80111bc <SUBGRF_WriteRegister>
 801107e:	e785      	b.n	8010f8c <RadioSetRxConfig+0x108>
 8011080:	20001688 	.word	0x20001688
 8011084:	20000118 	.word	0x20000118
 8011088:	08013b94 	.word	0x08013b94
 801108c:	08012d24 	.word	0x08012d24

08011090 <RadioIsChannelFree>:
{
 8011090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011092:	b08b      	sub	sp, #44	@ 0x2c
 8011094:	4604      	mov	r4, r0
 8011096:	460f      	mov	r7, r1
 8011098:	4616      	mov	r6, r2
 801109a:	461d      	mov	r5, r3
    RadioStandby( );
 801109c:	f7ff fac8 	bl	8010630 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 80110a0:	2000      	movs	r0, #0
 80110a2:	f7ff fdd3 	bl	8010c4c <RadioSetModem>
    RadioSetChannel( freq );
 80110a6:	4620      	mov	r0, r4
 80110a8:	f7ff fcda 	bl	8010a60 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80110ac:	2301      	movs	r3, #1
 80110ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80110b0:	2400      	movs	r4, #0
 80110b2:	9408      	str	r4, [sp, #32]
 80110b4:	9407      	str	r4, [sp, #28]
 80110b6:	9406      	str	r4, [sp, #24]
 80110b8:	9405      	str	r4, [sp, #20]
 80110ba:	9404      	str	r4, [sp, #16]
 80110bc:	9403      	str	r4, [sp, #12]
 80110be:	9402      	str	r4, [sp, #8]
 80110c0:	2303      	movs	r3, #3
 80110c2:	9301      	str	r3, [sp, #4]
 80110c4:	9700      	str	r7, [sp, #0]
 80110c6:	4623      	mov	r3, r4
 80110c8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80110cc:	4639      	mov	r1, r7
 80110ce:	4620      	mov	r0, r4
 80110d0:	f7ff fed8 	bl	8010e84 <RadioSetRxConfig>
    RadioRx( 0 );
 80110d4:	4620      	mov	r0, r4
 80110d6:	f7ff fcdb 	bl	8010a90 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80110da:	f7ff fc71 	bl	80109c0 <RadioGetWakeupTime>
 80110de:	f7f0 ffdb 	bl	8002098 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80110e2:	f001 fa8f 	bl	8012604 <UTIL_TIMER_GetCurrentTime>
 80110e6:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80110e8:	4620      	mov	r0, r4
 80110ea:	f001 fa95 	bl	8012618 <UTIL_TIMER_GetElapsedTime>
 80110ee:	42a8      	cmp	r0, r5
 80110f0:	d206      	bcs.n	8011100 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 80110f2:	2000      	movs	r0, #0
 80110f4:	f7ff fc8e 	bl	8010a14 <RadioRssi>
        if( rssi > rssiThresh )
 80110f8:	42b0      	cmp	r0, r6
 80110fa:	ddf5      	ble.n	80110e8 <RadioIsChannelFree+0x58>
            status = false;
 80110fc:	2400      	movs	r4, #0
 80110fe:	e000      	b.n	8011102 <RadioIsChannelFree+0x72>
    bool status = true;
 8011100:	2401      	movs	r4, #1
    RadioStandby( );
 8011102:	f7ff fa95 	bl	8010630 <RadioStandby>
}
 8011106:	4620      	mov	r0, r4
 8011108:	b00b      	add	sp, #44	@ 0x2c
 801110a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801110c <RadioInit>:
{
 801110c:	b570      	push	{r4, r5, r6, lr}
 801110e:	b082      	sub	sp, #8
    RadioEvents = events;
 8011110:	4b1d      	ldr	r3, [pc, #116]	@ (8011188 <RadioInit+0x7c>)
 8011112:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8011114:	4d1d      	ldr	r5, [pc, #116]	@ (801118c <RadioInit+0x80>)
 8011116:	2400      	movs	r4, #0
 8011118:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 801111a:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 801111c:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801111e:	65ac      	str	r4, [r5, #88]	@ 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8011120:	481b      	ldr	r0, [pc, #108]	@ (8011190 <RadioInit+0x84>)
 8011122:	f000 fb2f 	bl	8011784 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8011126:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8011128:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 801112a:	f000 fa5b 	bl	80115e4 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801112e:	4621      	mov	r1, r4
 8011130:	4620      	mov	r0, r4
 8011132:	f000 fd27 	bl	8011b84 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8011136:	2204      	movs	r2, #4
 8011138:	4621      	mov	r1, r4
 801113a:	2001      	movs	r0, #1
 801113c:	f000 fba2 	bl	8011884 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011140:	4623      	mov	r3, r4
 8011142:	4622      	mov	r2, r4
 8011144:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011148:	4608      	mov	r0, r1
 801114a:	f000 fae2 	bl	8011712 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 801114e:	f7ff fcd7 	bl	8010b00 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8011152:	4e10      	ldr	r6, [pc, #64]	@ (8011194 <RadioInit+0x88>)
 8011154:	9400      	str	r4, [sp, #0]
 8011156:	4b10      	ldr	r3, [pc, #64]	@ (8011198 <RadioInit+0x8c>)
 8011158:	4622      	mov	r2, r4
 801115a:	f04f 31ff 	mov.w	r1, #4294967295
 801115e:	4630      	mov	r0, r6
 8011160:	f001 fa32 	bl	80125c8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8011164:	4d0d      	ldr	r5, [pc, #52]	@ (801119c <RadioInit+0x90>)
 8011166:	9400      	str	r4, [sp, #0]
 8011168:	4b0d      	ldr	r3, [pc, #52]	@ (80111a0 <RadioInit+0x94>)
 801116a:	4622      	mov	r2, r4
 801116c:	f04f 31ff 	mov.w	r1, #4294967295
 8011170:	4628      	mov	r0, r5
 8011172:	f001 fa29 	bl	80125c8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8011176:	4630      	mov	r0, r6
 8011178:	f001 fa84 	bl	8012684 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801117c:	4628      	mov	r0, r5
 801117e:	f001 fa81 	bl	8012684 <UTIL_TIMER_Stop>
}
 8011182:	b002      	add	sp, #8
 8011184:	bd70      	pop	{r4, r5, r6, pc}
 8011186:	bf00      	nop
 8011188:	200016e4 	.word	0x200016e4
 801118c:	20001688 	.word	0x20001688
 8011190:	080109ad 	.word	0x080109ad
 8011194:	20001670 	.word	0x20001670
 8011198:	080104f5 	.word	0x080104f5
 801119c:	20001658 	.word	0x20001658
 80111a0:	0801051d 	.word	0x0801051d

080111a4 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 80111a4:	4b01      	ldr	r3, [pc, #4]	@ (80111ac <SUBGRF_GetOperatingMode+0x8>)
 80111a6:	7818      	ldrb	r0, [r3, #0]
 80111a8:	4770      	bx	lr
 80111aa:	bf00      	nop
 80111ac:	200017f6 	.word	0x200017f6

080111b0 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 80111b0:	4b01      	ldr	r3, [pc, #4]	@ (80111b8 <SUBGRF_GetPacketType+0x8>)
 80111b2:	7818      	ldrb	r0, [r3, #0]
 80111b4:	4770      	bx	lr
 80111b6:	bf00      	nop
 80111b8:	200017f5 	.word	0x200017f5

080111bc <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80111bc:	b510      	push	{r4, lr}
 80111be:	b082      	sub	sp, #8
 80111c0:	f88d 1007 	strb.w	r1, [sp, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111c4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80111c8:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80111ca:	2301      	movs	r3, #1
 80111cc:	f10d 0207 	add.w	r2, sp, #7
 80111d0:	4601      	mov	r1, r0
 80111d2:	4803      	ldr	r0, [pc, #12]	@ (80111e0 <SUBGRF_WriteRegister+0x24>)
 80111d4:	f7f5 f876 	bl	80062c4 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80111d8:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 80111dc:	b002      	add	sp, #8
 80111de:	bd10      	pop	{r4, pc}
 80111e0:	20000244 	.word	0x20000244

080111e4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80111e4:	b510      	push	{r4, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	4601      	mov	r1, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111ea:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80111ee:	b672      	cpsid	i
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80111f0:	2301      	movs	r3, #1
 80111f2:	f10d 0207 	add.w	r2, sp, #7
 80111f6:	4804      	ldr	r0, [pc, #16]	@ (8011208 <SUBGRF_ReadRegister+0x24>)
 80111f8:	f7f5 f8b4 	bl	8006364 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80111fc:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
    return data;
}
 8011200:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011204:	b002      	add	sp, #8
 8011206:	bd10      	pop	{r4, pc}
 8011208:	20000244 	.word	0x20000244

0801120c <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 801120c:	b510      	push	{r4, lr}
 801120e:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8011210:	f7f2 f8e8 	bl	80033e4 <RBI_IsDCDC>
 8011214:	2801      	cmp	r0, #1
 8011216:	d000      	beq.n	801121a <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8011218:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801121a:	f640 1023 	movw	r0, #2339	@ 0x923
 801121e:	f7ff ffe1 	bl	80111e4 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8011222:	f000 01f9 	and.w	r1, r0, #249	@ 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8011226:	4321      	orrs	r1, r4
 8011228:	f640 1023 	movw	r0, #2339	@ 0x923
 801122c:	f7ff ffc6 	bl	80111bc <SUBGRF_WriteRegister>
}
 8011230:	e7f2      	b.n	8011218 <Radio_SMPS_Set+0xc>

08011232 <SUBGRF_SetWhiteningSeed>:
{
 8011232:	b510      	push	{r4, lr}
 8011234:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8011236:	f7ff ffbb 	bl	80111b0 <SUBGRF_GetPacketType>
 801123a:	b100      	cbz	r0, 801123e <SUBGRF_SetWhiteningSeed+0xc>
}
 801123c:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801123e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8011242:	f7ff ffcf 	bl	80111e4 <SUBGRF_ReadRegister>
 8011246:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801124a:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801124e:	4301      	orrs	r1, r0
 8011250:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8011254:	f7ff ffb2 	bl	80111bc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8011258:	b2e1      	uxtb	r1, r4
 801125a:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801125e:	f7ff ffad 	bl	80111bc <SUBGRF_WriteRegister>
}
 8011262:	e7eb      	b.n	801123c <SUBGRF_SetWhiteningSeed+0xa>

08011264 <SUBGRF_WriteRegisters>:
{
 8011264:	b510      	push	{r4, lr}
 8011266:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011268:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801126c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801126e:	460a      	mov	r2, r1
 8011270:	4601      	mov	r1, r0
 8011272:	4803      	ldr	r0, [pc, #12]	@ (8011280 <SUBGRF_WriteRegisters+0x1c>)
 8011274:	f7f5 f826 	bl	80062c4 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011278:	f384 8810 	msr	PRIMASK, r4
}
 801127c:	bd10      	pop	{r4, pc}
 801127e:	bf00      	nop
 8011280:	20000244 	.word	0x20000244

08011284 <SUBGRF_SetSyncWord>:
{
 8011284:	b508      	push	{r3, lr}
 8011286:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8011288:	2208      	movs	r2, #8
 801128a:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801128e:	f7ff ffe9 	bl	8011264 <SUBGRF_WriteRegisters>
}
 8011292:	2000      	movs	r0, #0
 8011294:	bd08      	pop	{r3, pc}

08011296 <SUBGRF_SetCrcSeed>:
{
 8011296:	b500      	push	{lr}
 8011298:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801129a:	0a03      	lsrs	r3, r0, #8
 801129c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80112a0:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80112a4:	f7ff ff84 	bl	80111b0 <SUBGRF_GetPacketType>
 80112a8:	b110      	cbz	r0, 80112b0 <SUBGRF_SetCrcSeed+0x1a>
}
 80112aa:	b003      	add	sp, #12
 80112ac:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80112b0:	2202      	movs	r2, #2
 80112b2:	a901      	add	r1, sp, #4
 80112b4:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80112b8:	f7ff ffd4 	bl	8011264 <SUBGRF_WriteRegisters>
}
 80112bc:	e7f5      	b.n	80112aa <SUBGRF_SetCrcSeed+0x14>

080112be <SUBGRF_SetCrcPolynomial>:
{
 80112be:	b500      	push	{lr}
 80112c0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80112c2:	0a03      	lsrs	r3, r0, #8
 80112c4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80112c8:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80112cc:	f7ff ff70 	bl	80111b0 <SUBGRF_GetPacketType>
 80112d0:	b110      	cbz	r0, 80112d8 <SUBGRF_SetCrcPolynomial+0x1a>
}
 80112d2:	b003      	add	sp, #12
 80112d4:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80112d8:	2202      	movs	r2, #2
 80112da:	a901      	add	r1, sp, #4
 80112dc:	f240 60be 	movw	r0, #1726	@ 0x6be
 80112e0:	f7ff ffc0 	bl	8011264 <SUBGRF_WriteRegisters>
}
 80112e4:	e7f5      	b.n	80112d2 <SUBGRF_SetCrcPolynomial+0x14>
	...

080112e8 <SUBGRF_ReadRegisters>:
{
 80112e8:	b510      	push	{r4, lr}
 80112ea:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80112ec:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80112f0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80112f2:	460a      	mov	r2, r1
 80112f4:	4601      	mov	r1, r0
 80112f6:	4803      	ldr	r0, [pc, #12]	@ (8011304 <SUBGRF_ReadRegisters+0x1c>)
 80112f8:	f7f5 f834 	bl	8006364 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80112fc:	f384 8810 	msr	PRIMASK, r4
}
 8011300:	bd10      	pop	{r4, pc}
 8011302:	bf00      	nop
 8011304:	20000244 	.word	0x20000244

08011308 <SUBGRF_WriteBuffer>:
{
 8011308:	b510      	push	{r4, lr}
 801130a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801130c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011310:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8011312:	460a      	mov	r2, r1
 8011314:	4601      	mov	r1, r0
 8011316:	4803      	ldr	r0, [pc, #12]	@ (8011324 <SUBGRF_WriteBuffer+0x1c>)
 8011318:	f7f5 f986 	bl	8006628 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801131c:	f384 8810 	msr	PRIMASK, r4
}
 8011320:	bd10      	pop	{r4, pc}
 8011322:	bf00      	nop
 8011324:	20000244 	.word	0x20000244

08011328 <SUBGRF_SetPayload>:
{
 8011328:	b508      	push	{r3, lr}
 801132a:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801132c:	4601      	mov	r1, r0
 801132e:	2000      	movs	r0, #0
 8011330:	f7ff ffea 	bl	8011308 <SUBGRF_WriteBuffer>
}
 8011334:	bd08      	pop	{r3, pc}
	...

08011338 <SUBGRF_ReadBuffer>:
{
 8011338:	b510      	push	{r4, lr}
 801133a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801133c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011340:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8011342:	460a      	mov	r2, r1
 8011344:	4601      	mov	r1, r0
 8011346:	4803      	ldr	r0, [pc, #12]	@ (8011354 <SUBGRF_ReadBuffer+0x1c>)
 8011348:	f7f5 f9b8 	bl	80066bc <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801134c:	f384 8810 	msr	PRIMASK, r4
}
 8011350:	bd10      	pop	{r4, pc}
 8011352:	bf00      	nop
 8011354:	20000244 	.word	0x20000244

08011358 <SUBGRF_WriteCommand>:
{
 8011358:	b510      	push	{r4, lr}
 801135a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801135c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011360:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8011362:	460a      	mov	r2, r1
 8011364:	4601      	mov	r1, r0
 8011366:	4803      	ldr	r0, [pc, #12]	@ (8011374 <SUBGRF_WriteCommand+0x1c>)
 8011368:	f7f5 f850 	bl	800640c <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801136c:	f384 8810 	msr	PRIMASK, r4
}
 8011370:	bd10      	pop	{r4, pc}
 8011372:	bf00      	nop
 8011374:	20000244 	.word	0x20000244

08011378 <SUBGRF_SetSleep>:
{
 8011378:	b510      	push	{r4, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801137e:	2000      	movs	r0, #0
 8011380:	f7f2 f824 	bl	80033cc <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8011384:	2002      	movs	r0, #2
 8011386:	f7ff ff41 	bl	801120c <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801138a:	f004 0304 	and.w	r3, r4, #4
 801138e:	f004 0202 	and.w	r2, r4, #2
 8011392:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8011394:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8011398:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801139a:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801139e:	2201      	movs	r2, #1
 80113a0:	f10d 0107 	add.w	r1, sp, #7
 80113a4:	2084      	movs	r0, #132	@ 0x84
 80113a6:	f7ff ffd7 	bl	8011358 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80113aa:	4b02      	ldr	r3, [pc, #8]	@ (80113b4 <SUBGRF_SetSleep+0x3c>)
 80113ac:	2200      	movs	r2, #0
 80113ae:	701a      	strb	r2, [r3, #0]
}
 80113b0:	b002      	add	sp, #8
 80113b2:	bd10      	pop	{r4, pc}
 80113b4:	200017f6 	.word	0x200017f6

080113b8 <SUBGRF_SetStandby>:
{
 80113b8:	b500      	push	{lr}
 80113ba:	b083      	sub	sp, #12
 80113bc:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80113c0:	2201      	movs	r2, #1
 80113c2:	f10d 0107 	add.w	r1, sp, #7
 80113c6:	2080      	movs	r0, #128	@ 0x80
 80113c8:	f7ff ffc6 	bl	8011358 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80113cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80113d0:	b92b      	cbnz	r3, 80113de <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 80113d2:	4b05      	ldr	r3, [pc, #20]	@ (80113e8 <SUBGRF_SetStandby+0x30>)
 80113d4:	2201      	movs	r2, #1
 80113d6:	701a      	strb	r2, [r3, #0]
}
 80113d8:	b003      	add	sp, #12
 80113da:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 80113de:	4b02      	ldr	r3, [pc, #8]	@ (80113e8 <SUBGRF_SetStandby+0x30>)
 80113e0:	2202      	movs	r2, #2
 80113e2:	701a      	strb	r2, [r3, #0]
}
 80113e4:	e7f8      	b.n	80113d8 <SUBGRF_SetStandby+0x20>
 80113e6:	bf00      	nop
 80113e8:	200017f6 	.word	0x200017f6

080113ec <SUBGRF_SetTx>:
{
 80113ec:	b500      	push	{lr}
 80113ee:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 80113f0:	4b0a      	ldr	r3, [pc, #40]	@ (801141c <SUBGRF_SetTx+0x30>)
 80113f2:	2204      	movs	r2, #4
 80113f4:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80113f6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80113fa:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80113fe:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011402:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011406:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801140a:	2203      	movs	r2, #3
 801140c:	a901      	add	r1, sp, #4
 801140e:	2083      	movs	r0, #131	@ 0x83
 8011410:	f7ff ffa2 	bl	8011358 <SUBGRF_WriteCommand>
}
 8011414:	b003      	add	sp, #12
 8011416:	f85d fb04 	ldr.w	pc, [sp], #4
 801141a:	bf00      	nop
 801141c:	200017f6 	.word	0x200017f6

08011420 <SUBGRF_SendPayload>:
{
 8011420:	b510      	push	{r4, lr}
 8011422:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8011424:	f7ff ff80 	bl	8011328 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8011428:	4620      	mov	r0, r4
 801142a:	f7ff ffdf 	bl	80113ec <SUBGRF_SetTx>
}
 801142e:	bd10      	pop	{r4, pc}

08011430 <SUBGRF_SetRx>:
{
 8011430:	b500      	push	{lr}
 8011432:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8011434:	4b0a      	ldr	r3, [pc, #40]	@ (8011460 <SUBGRF_SetRx+0x30>)
 8011436:	2205      	movs	r2, #5
 8011438:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801143a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801143e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011442:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011446:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801144a:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801144e:	2203      	movs	r2, #3
 8011450:	a901      	add	r1, sp, #4
 8011452:	2082      	movs	r0, #130	@ 0x82
 8011454:	f7ff ff80 	bl	8011358 <SUBGRF_WriteCommand>
}
 8011458:	b003      	add	sp, #12
 801145a:	f85d fb04 	ldr.w	pc, [sp], #4
 801145e:	bf00      	nop
 8011460:	200017f6 	.word	0x200017f6

08011464 <SUBGRF_GetRandom>:
{
 8011464:	b570      	push	{r4, r5, r6, lr}
 8011466:	b082      	sub	sp, #8
    uint32_t number = 0;
 8011468:	2600      	movs	r6, #0
 801146a:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801146c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8011470:	f7ff feb8 	bl	80111e4 <SUBGRF_ReadRegister>
 8011474:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8011476:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
 801147a:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801147e:	f7ff fe9d 	bl	80111bc <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8011482:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8011486:	f7ff fead 	bl	80111e4 <SUBGRF_ReadRegister>
 801148a:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801148c:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 8011490:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8011494:	f7ff fe92 	bl	80111bc <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8011498:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801149c:	f7ff ffc8 	bl	8011430 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80114a0:	2204      	movs	r2, #4
 80114a2:	eb0d 0102 	add.w	r1, sp, r2
 80114a6:	f640 0019 	movw	r0, #2073	@ 0x819
 80114aa:	f7ff ff1d 	bl	80112e8 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 80114ae:	4630      	mov	r0, r6
 80114b0:	f7ff ff82 	bl	80113b8 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80114b4:	4629      	mov	r1, r5
 80114b6:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80114ba:	f7ff fe7f 	bl	80111bc <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80114be:	4621      	mov	r1, r4
 80114c0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80114c4:	f7ff fe7a 	bl	80111bc <SUBGRF_WriteRegister>
}
 80114c8:	9801      	ldr	r0, [sp, #4]
 80114ca:	b002      	add	sp, #8
 80114cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080114d0 <SUBGRF_SetRxBoosted>:
{
 80114d0:	b510      	push	{r4, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 80114d6:	4b0c      	ldr	r3, [pc, #48]	@ (8011508 <SUBGRF_SetRxBoosted+0x38>)
 80114d8:	2205      	movs	r2, #5
 80114da:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80114dc:	2197      	movs	r1, #151	@ 0x97
 80114de:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 80114e2:	f7ff fe6b 	bl	80111bc <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80114e6:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80114ea:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80114ee:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80114f2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80114f6:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80114fa:	2203      	movs	r2, #3
 80114fc:	a901      	add	r1, sp, #4
 80114fe:	2082      	movs	r0, #130	@ 0x82
 8011500:	f7ff ff2a 	bl	8011358 <SUBGRF_WriteCommand>
}
 8011504:	b002      	add	sp, #8
 8011506:	bd10      	pop	{r4, pc}
 8011508:	200017f6 	.word	0x200017f6

0801150c <SUBGRF_SetRxDutyCycle>:
{
 801150c:	b500      	push	{lr}
 801150e:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8011510:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011514:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8011518:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801151c:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8011520:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8011524:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011528:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801152c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8011530:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8011534:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8011538:	2206      	movs	r2, #6
 801153a:	4669      	mov	r1, sp
 801153c:	2094      	movs	r0, #148	@ 0x94
 801153e:	f7ff ff0b 	bl	8011358 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8011542:	4b03      	ldr	r3, [pc, #12]	@ (8011550 <SUBGRF_SetRxDutyCycle+0x44>)
 8011544:	2206      	movs	r2, #6
 8011546:	701a      	strb	r2, [r3, #0]
}
 8011548:	b003      	add	sp, #12
 801154a:	f85d fb04 	ldr.w	pc, [sp], #4
 801154e:	bf00      	nop
 8011550:	200017f6 	.word	0x200017f6

08011554 <SUBGRF_SetCad>:
{
 8011554:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8011556:	2200      	movs	r2, #0
 8011558:	4611      	mov	r1, r2
 801155a:	20c5      	movs	r0, #197	@ 0xc5
 801155c:	f7ff fefc 	bl	8011358 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8011560:	4b01      	ldr	r3, [pc, #4]	@ (8011568 <SUBGRF_SetCad+0x14>)
 8011562:	2207      	movs	r2, #7
 8011564:	701a      	strb	r2, [r3, #0]
}
 8011566:	bd08      	pop	{r3, pc}
 8011568:	200017f6 	.word	0x200017f6

0801156c <SUBGRF_SetTxContinuousWave>:
{
 801156c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801156e:	2200      	movs	r2, #0
 8011570:	4611      	mov	r1, r2
 8011572:	20d1      	movs	r0, #209	@ 0xd1
 8011574:	f7ff fef0 	bl	8011358 <SUBGRF_WriteCommand>
}
 8011578:	bd08      	pop	{r3, pc}

0801157a <SUBGRF_SetTxInfinitePreamble>:
{
 801157a:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801157c:	2200      	movs	r2, #0
 801157e:	4611      	mov	r1, r2
 8011580:	20d2      	movs	r0, #210	@ 0xd2
 8011582:	f7ff fee9 	bl	8011358 <SUBGRF_WriteCommand>
}
 8011586:	bd08      	pop	{r3, pc}

08011588 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8011588:	b500      	push	{lr}
 801158a:	b083      	sub	sp, #12
 801158c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8011590:	2201      	movs	r2, #1
 8011592:	f10d 0107 	add.w	r1, sp, #7
 8011596:	209f      	movs	r0, #159	@ 0x9f
 8011598:	f7ff fede 	bl	8011358 <SUBGRF_WriteCommand>
}
 801159c:	b003      	add	sp, #12
 801159e:	f85d fb04 	ldr.w	pc, [sp], #4

080115a2 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 80115a2:	b500      	push	{lr}
 80115a4:	b083      	sub	sp, #12
 80115a6:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80115aa:	2201      	movs	r2, #1
 80115ac:	f10d 0107 	add.w	r1, sp, #7
 80115b0:	20a0      	movs	r0, #160	@ 0xa0
 80115b2:	f7ff fed1 	bl	8011358 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 80115b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80115ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80115bc:	d90f      	bls.n	80115de <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 80115be:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 80115c0:	2200      	movs	r2, #0
        while( mant > 31 )
 80115c2:	e002      	b.n	80115ca <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 80115c4:	089b      	lsrs	r3, r3, #2
            exp++;
 80115c6:	3201      	adds	r2, #1
 80115c8:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 80115ca:	2b1f      	cmp	r3, #31
 80115cc:	d8fa      	bhi.n	80115c4 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 80115ce:	00d9      	lsls	r1, r3, #3
 80115d0:	b2c9      	uxtb	r1, r1
 80115d2:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80115d4:	b2c9      	uxtb	r1, r1
 80115d6:	f240 7006 	movw	r0, #1798	@ 0x706
 80115da:	f7ff fdef 	bl	80111bc <SUBGRF_WriteRegister>
}
 80115de:	b003      	add	sp, #12
 80115e0:	f85d fb04 	ldr.w	pc, [sp], #4

080115e4 <SUBGRF_SetRegulatorMode>:
{
 80115e4:	b500      	push	{lr}
 80115e6:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80115e8:	f7f1 fefc 	bl	80033e4 <RBI_IsDCDC>
 80115ec:	2801      	cmp	r0, #1
 80115ee:	d00b      	beq.n	8011608 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 80115f0:	2300      	movs	r3, #0
 80115f2:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80115f6:	2201      	movs	r2, #1
 80115f8:	f10d 0107 	add.w	r1, sp, #7
 80115fc:	2096      	movs	r0, #150	@ 0x96
 80115fe:	f7ff feab 	bl	8011358 <SUBGRF_WriteCommand>
}
 8011602:	b003      	add	sp, #12
 8011604:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8011608:	2301      	movs	r3, #1
 801160a:	f88d 3007 	strb.w	r3, [sp, #7]
 801160e:	e7f2      	b.n	80115f6 <SUBGRF_SetRegulatorMode+0x12>

08011610 <SUBGRF_Calibrate>:
{
 8011610:	b500      	push	{lr}
 8011612:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8011614:	f000 0340 	and.w	r3, r0, #64	@ 0x40
 8011618:	f000 0220 	and.w	r2, r0, #32
 801161c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801161e:	f000 0210 	and.w	r2, r0, #16
 8011622:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8011624:	f000 0208 	and.w	r2, r0, #8
 8011628:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801162a:	f000 0204 	and.w	r2, r0, #4
 801162e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8011630:	f000 0202 	and.w	r2, r0, #2
 8011634:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8011636:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801163a:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801163c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8011640:	2201      	movs	r2, #1
 8011642:	f10d 0107 	add.w	r1, sp, #7
 8011646:	2089      	movs	r0, #137	@ 0x89
 8011648:	f7ff fe86 	bl	8011358 <SUBGRF_WriteCommand>
}
 801164c:	b003      	add	sp, #12
 801164e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011654 <SUBGRF_CalibrateImage>:
{
 8011654:	b500      	push	{lr}
 8011656:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8011658:	4b1f      	ldr	r3, [pc, #124]	@ (80116d8 <SUBGRF_CalibrateImage+0x84>)
 801165a:	4298      	cmp	r0, r3
 801165c:	d90d      	bls.n	801167a <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 801165e:	23e1      	movs	r3, #225	@ 0xe1
 8011660:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8011664:	23e9      	movs	r3, #233	@ 0xe9
 8011666:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801166a:	2202      	movs	r2, #2
 801166c:	a901      	add	r1, sp, #4
 801166e:	2098      	movs	r0, #152	@ 0x98
 8011670:	f7ff fe72 	bl	8011358 <SUBGRF_WriteCommand>
}
 8011674:	b003      	add	sp, #12
 8011676:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 801167a:	4b18      	ldr	r3, [pc, #96]	@ (80116dc <SUBGRF_CalibrateImage+0x88>)
 801167c:	4298      	cmp	r0, r3
 801167e:	d906      	bls.n	801168e <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8011680:	23d7      	movs	r3, #215	@ 0xd7
 8011682:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8011686:	23db      	movs	r3, #219	@ 0xdb
 8011688:	f88d 3005 	strb.w	r3, [sp, #5]
 801168c:	e7ed      	b.n	801166a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 801168e:	4b14      	ldr	r3, [pc, #80]	@ (80116e0 <SUBGRF_CalibrateImage+0x8c>)
 8011690:	4298      	cmp	r0, r3
 8011692:	d906      	bls.n	80116a2 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8011694:	23c1      	movs	r3, #193	@ 0xc1
 8011696:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 801169a:	23c5      	movs	r3, #197	@ 0xc5
 801169c:	f88d 3005 	strb.w	r3, [sp, #5]
 80116a0:	e7e3      	b.n	801166a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 80116a2:	4b10      	ldr	r3, [pc, #64]	@ (80116e4 <SUBGRF_CalibrateImage+0x90>)
 80116a4:	4298      	cmp	r0, r3
 80116a6:	d906      	bls.n	80116b6 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 80116a8:	2375      	movs	r3, #117	@ 0x75
 80116aa:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 80116ae:	2381      	movs	r3, #129	@ 0x81
 80116b0:	f88d 3005 	strb.w	r3, [sp, #5]
 80116b4:	e7d9      	b.n	801166a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 80116b6:	4b0c      	ldr	r3, [pc, #48]	@ (80116e8 <SUBGRF_CalibrateImage+0x94>)
 80116b8:	4298      	cmp	r0, r3
 80116ba:	d906      	bls.n	80116ca <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 80116bc:	236b      	movs	r3, #107	@ 0x6b
 80116be:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 80116c2:	236f      	movs	r3, #111	@ 0x6f
 80116c4:	f88d 3005 	strb.w	r3, [sp, #5]
 80116c8:	e7cf      	b.n	801166a <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 80116ca:	2329      	movs	r3, #41	@ 0x29
 80116cc:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 80116d0:	232b      	movs	r3, #43	@ 0x2b
 80116d2:	f88d 3005 	strb.w	r3, [sp, #5]
 80116d6:	e7c8      	b.n	801166a <SUBGRF_CalibrateImage+0x16>
 80116d8:	35a4e900 	.word	0x35a4e900
 80116dc:	32a9f880 	.word	0x32a9f880
 80116e0:	2de54480 	.word	0x2de54480
 80116e4:	1b6b0b00 	.word	0x1b6b0b00
 80116e8:	1954fc40 	.word	0x1954fc40

080116ec <SUBGRF_SetPaConfig>:
{
 80116ec:	b500      	push	{lr}
 80116ee:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 80116f0:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 80116f4:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 80116f8:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 80116fc:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8011700:	2204      	movs	r2, #4
 8011702:	eb0d 0102 	add.w	r1, sp, r2
 8011706:	2095      	movs	r0, #149	@ 0x95
 8011708:	f7ff fe26 	bl	8011358 <SUBGRF_WriteCommand>
}
 801170c:	b003      	add	sp, #12
 801170e:	f85d fb04 	ldr.w	pc, [sp], #4

08011712 <SUBGRF_SetDioIrqParams>:
{
 8011712:	b500      	push	{lr}
 8011714:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8011716:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 801171a:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801171e:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8011722:	0a08      	lsrs	r0, r1, #8
 8011724:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8011728:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801172c:	0a11      	lsrs	r1, r2, #8
 801172e:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8011732:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8011736:	0a1a      	lsrs	r2, r3, #8
 8011738:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801173c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8011740:	2208      	movs	r2, #8
 8011742:	4669      	mov	r1, sp
 8011744:	4610      	mov	r0, r2
 8011746:	f7ff fe07 	bl	8011358 <SUBGRF_WriteCommand>
}
 801174a:	b003      	add	sp, #12
 801174c:	f85d fb04 	ldr.w	pc, [sp], #4

08011750 <SUBGRF_SetTcxoMode>:
{
 8011750:	b500      	push	{lr}
 8011752:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8011754:	f000 0007 	and.w	r0, r0, #7
 8011758:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801175c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011760:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011764:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8011768:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801176c:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8011770:	2204      	movs	r2, #4
 8011772:	eb0d 0102 	add.w	r1, sp, r2
 8011776:	2097      	movs	r0, #151	@ 0x97
 8011778:	f7ff fdee 	bl	8011358 <SUBGRF_WriteCommand>
}
 801177c:	b003      	add	sp, #12
 801177e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011784 <SUBGRF_Init>:
{
 8011784:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8011786:	b108      	cbz	r0, 801178c <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8011788:	4a18      	ldr	r2, [pc, #96]	@ (80117ec <SUBGRF_Init+0x68>)
 801178a:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 801178c:	f7f0 fb78 	bl	8001e80 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8011790:	2002      	movs	r0, #2
 8011792:	f7ff fd3b 	bl	801120c <Radio_SMPS_Set>
    ImageCalibrated = false;
 8011796:	2000      	movs	r0, #0
 8011798:	4b15      	ldr	r3, [pc, #84]	@ (80117f0 <SUBGRF_Init+0x6c>)
 801179a:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 801179c:	f7ff fe0c 	bl	80113b8 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 80117a0:	f7f1 fe1c 	bl	80033dc <RBI_IsTCXO>
 80117a4:	2801      	cmp	r0, #1
 80117a6:	d014      	beq.n	80117d2 <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80117a8:	2120      	movs	r1, #32
 80117aa:	f640 1011 	movw	r0, #2321	@ 0x911
 80117ae:	f7ff fd05 	bl	80111bc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80117b2:	2120      	movs	r1, #32
 80117b4:	f640 1012 	movw	r0, #2322	@ 0x912
 80117b8:	f7ff fd00 	bl	80111bc <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80117bc:	210e      	movs	r1, #14
 80117be:	f640 101f 	movw	r0, #2335	@ 0x91f
 80117c2:	f7ff fcfb 	bl	80111bc <SUBGRF_WriteRegister>
    RBI_Init();
 80117c6:	f7f1 fdfd 	bl	80033c4 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 80117ca:	4b0a      	ldr	r3, [pc, #40]	@ (80117f4 <SUBGRF_Init+0x70>)
 80117cc:	2201      	movs	r2, #1
 80117ce:	701a      	strb	r2, [r3, #0]
}
 80117d0:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80117d2:	2140      	movs	r1, #64	@ 0x40
 80117d4:	f7ff ffbc 	bl	8011750 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80117d8:	2100      	movs	r1, #0
 80117da:	f640 1011 	movw	r0, #2321	@ 0x911
 80117de:	f7ff fced 	bl	80111bc <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 80117e2:	f04f 007f 	mov.w	r0, #127	@ 0x7f
 80117e6:	f7ff ff13 	bl	8011610 <SUBGRF_Calibrate>
 80117ea:	e7e7      	b.n	80117bc <SUBGRF_Init+0x38>
 80117ec:	200017e8 	.word	0x200017e8
 80117f0:	200017ec 	.word	0x200017ec
 80117f4:	200017f6 	.word	0x200017f6

080117f8 <SUBGRF_SetRfFrequency>:
{
 80117f8:	b510      	push	{r4, lr}
 80117fa:	b082      	sub	sp, #8
 80117fc:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 80117fe:	4b12      	ldr	r3, [pc, #72]	@ (8011848 <SUBGRF_SetRfFrequency+0x50>)
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	b1d3      	cbz	r3, 801183a <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8011804:	4a11      	ldr	r2, [pc, #68]	@ (801184c <SUBGRF_SetRfFrequency+0x54>)
 8011806:	2300      	movs	r3, #0
 8011808:	0660      	lsls	r0, r4, #25
 801180a:	09e1      	lsrs	r1, r4, #7
 801180c:	f7ef fb20 	bl	8000e50 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8011810:	0e03      	lsrs	r3, r0, #24
 8011812:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8011816:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801181a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801181e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011822:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8011826:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801182a:	2204      	movs	r2, #4
 801182c:	eb0d 0102 	add.w	r1, sp, r2
 8011830:	2086      	movs	r0, #134	@ 0x86
 8011832:	f7ff fd91 	bl	8011358 <SUBGRF_WriteCommand>
}
 8011836:	b002      	add	sp, #8
 8011838:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 801183a:	f7ff ff0b 	bl	8011654 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801183e:	4b02      	ldr	r3, [pc, #8]	@ (8011848 <SUBGRF_SetRfFrequency+0x50>)
 8011840:	2201      	movs	r2, #1
 8011842:	701a      	strb	r2, [r3, #0]
 8011844:	e7de      	b.n	8011804 <SUBGRF_SetRfFrequency+0xc>
 8011846:	bf00      	nop
 8011848:	200017ec 	.word	0x200017ec
 801184c:	01e84800 	.word	0x01e84800

08011850 <SUBGRF_SetPacketType>:
{
 8011850:	b500      	push	{lr}
 8011852:	b083      	sub	sp, #12
 8011854:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8011858:	b2c3      	uxtb	r3, r0
 801185a:	4a09      	ldr	r2, [pc, #36]	@ (8011880 <SUBGRF_SetPacketType+0x30>)
 801185c:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 801185e:	b143      	cbz	r3, 8011872 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8011860:	2201      	movs	r2, #1
 8011862:	f10d 0107 	add.w	r1, sp, #7
 8011866:	208a      	movs	r0, #138	@ 0x8a
 8011868:	f7ff fd76 	bl	8011358 <SUBGRF_WriteCommand>
}
 801186c:	b003      	add	sp, #12
 801186e:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8011872:	2100      	movs	r1, #0
 8011874:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8011878:	f7ff fca0 	bl	80111bc <SUBGRF_WriteRegister>
 801187c:	e7f0      	b.n	8011860 <SUBGRF_SetPacketType+0x10>
 801187e:	bf00      	nop
 8011880:	200017f5 	.word	0x200017f5

08011884 <SUBGRF_SetTxParams>:
{
 8011884:	b570      	push	{r4, r5, r6, lr}
 8011886:	b082      	sub	sp, #8
 8011888:	460c      	mov	r4, r1
 801188a:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 801188c:	2801      	cmp	r0, #1
 801188e:	d035      	beq.n	80118fc <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8011890:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8011894:	f7ff fca6 	bl	80111e4 <SUBGRF_ReadRegister>
 8011898:	f040 011e 	orr.w	r1, r0, #30
 801189c:	b2c9      	uxtb	r1, r1
 801189e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80118a2:	f7ff fc8b 	bl	80111bc <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80118a6:	2001      	movs	r0, #1
 80118a8:	f7f1 fda0 	bl	80033ec <RBI_GetRFOMaxPowerConfig>
 80118ac:	4605      	mov	r5, r0
        if (power > max_power)
 80118ae:	4284      	cmp	r4, r0
 80118b0:	dd00      	ble.n	80118b4 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 80118b2:	b244      	sxtb	r4, r0
        if (max_power == 20)
 80118b4:	2d14      	cmp	r5, #20
 80118b6:	d054      	beq.n	8011962 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 80118b8:	2d11      	cmp	r5, #17
 80118ba:	d05c      	beq.n	8011976 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 80118bc:	2d0e      	cmp	r5, #14
 80118be:	d064      	beq.n	801198a <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80118c0:	2301      	movs	r3, #1
 80118c2:	2200      	movs	r2, #0
 80118c4:	2107      	movs	r1, #7
 80118c6:	2004      	movs	r0, #4
 80118c8:	f7ff ff10 	bl	80116ec <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80118cc:	1b64      	subs	r4, r4, r5
 80118ce:	3416      	adds	r4, #22
 80118d0:	b265      	sxtb	r5, r4
        if (power < -9)
 80118d2:	f115 0f09 	cmn.w	r5, #9
 80118d6:	da01      	bge.n	80118dc <SUBGRF_SetTxParams+0x58>
            power = -9;
 80118d8:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80118dc:	2138      	movs	r1, #56	@ 0x38
 80118de:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80118e2:	f7ff fc6b 	bl	80111bc <SUBGRF_WriteRegister>
    buf[0] = power;
 80118e6:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 80118ea:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80118ee:	2202      	movs	r2, #2
 80118f0:	a901      	add	r1, sp, #4
 80118f2:	208e      	movs	r0, #142	@ 0x8e
 80118f4:	f7ff fd30 	bl	8011358 <SUBGRF_WriteCommand>
}
 80118f8:	b002      	add	sp, #8
 80118fa:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80118fc:	2000      	movs	r0, #0
 80118fe:	f7f1 fd75 	bl	80033ec <RBI_GetRFOMaxPowerConfig>
 8011902:	4605      	mov	r5, r0
        if (power >  max_power)
 8011904:	4284      	cmp	r4, r0
 8011906:	dd00      	ble.n	801190a <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8011908:	b244      	sxtb	r4, r0
        if (max_power == 14)
 801190a:	2d0e      	cmp	r5, #14
 801190c:	d015      	beq.n	801193a <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 801190e:	2d0a      	cmp	r5, #10
 8011910:	d01d      	beq.n	801194e <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8011912:	2301      	movs	r3, #1
 8011914:	461a      	mov	r2, r3
 8011916:	2100      	movs	r1, #0
 8011918:	2007      	movs	r0, #7
 801191a:	f7ff fee7 	bl	80116ec <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801191e:	1b65      	subs	r5, r4, r5
 8011920:	350e      	adds	r5, #14
 8011922:	b26d      	sxtb	r5, r5
        if (power < -17)
 8011924:	f115 0f11 	cmn.w	r5, #17
 8011928:	da01      	bge.n	801192e <SUBGRF_SetTxParams+0xaa>
            power = -17;
 801192a:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801192e:	2118      	movs	r1, #24
 8011930:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8011934:	f7ff fc42 	bl	80111bc <SUBGRF_WriteRegister>
 8011938:	e7d5      	b.n	80118e6 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801193a:	2301      	movs	r3, #1
 801193c:	461a      	mov	r2, r3
 801193e:	2100      	movs	r1, #0
 8011940:	2004      	movs	r0, #4
 8011942:	f7ff fed3 	bl	80116ec <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8011946:	1b65      	subs	r5, r4, r5
 8011948:	350e      	adds	r5, #14
 801194a:	b26d      	sxtb	r5, r5
 801194c:	e7ea      	b.n	8011924 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801194e:	2301      	movs	r3, #1
 8011950:	461a      	mov	r2, r3
 8011952:	2100      	movs	r1, #0
 8011954:	4618      	mov	r0, r3
 8011956:	f7ff fec9 	bl	80116ec <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801195a:	1b65      	subs	r5, r4, r5
 801195c:	350d      	adds	r5, #13
 801195e:	b26d      	sxtb	r5, r5
 8011960:	e7e0      	b.n	8011924 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8011962:	2301      	movs	r3, #1
 8011964:	2200      	movs	r2, #0
 8011966:	2105      	movs	r1, #5
 8011968:	2003      	movs	r0, #3
 801196a:	f7ff febf 	bl	80116ec <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801196e:	1b65      	subs	r5, r4, r5
 8011970:	3516      	adds	r5, #22
 8011972:	b26d      	sxtb	r5, r5
 8011974:	e7ad      	b.n	80118d2 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8011976:	2301      	movs	r3, #1
 8011978:	2200      	movs	r2, #0
 801197a:	2103      	movs	r1, #3
 801197c:	2002      	movs	r0, #2
 801197e:	f7ff feb5 	bl	80116ec <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8011982:	1b65      	subs	r5, r4, r5
 8011984:	3516      	adds	r5, #22
 8011986:	b26d      	sxtb	r5, r5
 8011988:	e7a3      	b.n	80118d2 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801198a:	2301      	movs	r3, #1
 801198c:	2200      	movs	r2, #0
 801198e:	2102      	movs	r1, #2
 8011990:	4608      	mov	r0, r1
 8011992:	f7ff feab 	bl	80116ec <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8011996:	1b65      	subs	r5, r4, r5
 8011998:	350e      	adds	r5, #14
 801199a:	b26d      	sxtb	r5, r5
 801199c:	e799      	b.n	80118d2 <SUBGRF_SetTxParams+0x4e>
	...

080119a0 <SUBGRF_SetModulationParams>:
{
 80119a0:	b510      	push	{r4, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80119a6:	2300      	movs	r3, #0
 80119a8:	9300      	str	r3, [sp, #0]
 80119aa:	9301      	str	r3, [sp, #4]
    if( PacketType != modulationParams->PacketType )
 80119ac:	7800      	ldrb	r0, [r0, #0]
 80119ae:	4b3a      	ldr	r3, [pc, #232]	@ (8011a98 <SUBGRF_SetModulationParams+0xf8>)
 80119b0:	781b      	ldrb	r3, [r3, #0]
 80119b2:	4298      	cmp	r0, r3
 80119b4:	d106      	bne.n	80119c4 <SUBGRF_SetModulationParams+0x24>
    switch( modulationParams->PacketType )
 80119b6:	7823      	ldrb	r3, [r4, #0]
 80119b8:	2b03      	cmp	r3, #3
 80119ba:	d82c      	bhi.n	8011a16 <SUBGRF_SetModulationParams+0x76>
 80119bc:	e8df f003 	tbb	[pc, r3]
 80119c0:	542d4205 	.word	0x542d4205
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80119c4:	f7ff ff44 	bl	8011850 <SUBGRF_SetPacketType>
 80119c8:	e7f5      	b.n	80119b6 <SUBGRF_SetModulationParams+0x16>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80119ca:	6862      	ldr	r2, [r4, #4]
 80119cc:	4b33      	ldr	r3, [pc, #204]	@ (8011a9c <SUBGRF_SetModulationParams+0xfc>)
 80119ce:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80119d2:	0c1a      	lsrs	r2, r3, #16
 80119d4:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80119d8:	0a1a      	lsrs	r2, r3, #8
 80119da:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80119de:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80119e2:	7b23      	ldrb	r3, [r4, #12]
 80119e4:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80119e8:	7b63      	ldrb	r3, [r4, #13]
 80119ea:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80119ee:	68a1      	ldr	r1, [r4, #8]
 80119f0:	4a2b      	ldr	r2, [pc, #172]	@ (8011aa0 <SUBGRF_SetModulationParams+0x100>)
 80119f2:	2300      	movs	r3, #0
 80119f4:	0648      	lsls	r0, r1, #25
 80119f6:	09c9      	lsrs	r1, r1, #7
 80119f8:	f7ef fa2a 	bl	8000e50 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80119fc:	0c03      	lsrs	r3, r0, #16
 80119fe:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8011a02:	0a03      	lsrs	r3, r0, #8
 8011a04:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8011a08:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011a0c:	2208      	movs	r2, #8
 8011a0e:	4669      	mov	r1, sp
 8011a10:	208b      	movs	r0, #139	@ 0x8b
 8011a12:	f7ff fca1 	bl	8011358 <SUBGRF_WriteCommand>
}
 8011a16:	b002      	add	sp, #8
 8011a18:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8011a1a:	6922      	ldr	r2, [r4, #16]
 8011a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8011a9c <SUBGRF_SetModulationParams+0xfc>)
 8011a1e:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011a22:	0c1a      	lsrs	r2, r3, #16
 8011a24:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8011a28:	0a1a      	lsrs	r2, r3, #8
 8011a2a:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8011a2e:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8011a32:	7d23      	ldrb	r3, [r4, #20]
 8011a34:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011a38:	2204      	movs	r2, #4
 8011a3a:	4669      	mov	r1, sp
 8011a3c:	208b      	movs	r0, #139	@ 0x8b
 8011a3e:	f7ff fc8b 	bl	8011358 <SUBGRF_WriteCommand>
        break;
 8011a42:	e7e8      	b.n	8011a16 <SUBGRF_SetModulationParams+0x76>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8011a44:	7e23      	ldrb	r3, [r4, #24]
 8011a46:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8011a4a:	7e63      	ldrb	r3, [r4, #25]
 8011a4c:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8011a50:	7ea3      	ldrb	r3, [r4, #26]
 8011a52:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8011a56:	7ee3      	ldrb	r3, [r4, #27]
 8011a58:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011a5c:	2204      	movs	r2, #4
 8011a5e:	4669      	mov	r1, sp
 8011a60:	208b      	movs	r0, #139	@ 0x8b
 8011a62:	f7ff fc79 	bl	8011358 <SUBGRF_WriteCommand>
        break;
 8011a66:	e7d6      	b.n	8011a16 <SUBGRF_SetModulationParams+0x76>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8011a68:	6862      	ldr	r2, [r4, #4]
 8011a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8011a9c <SUBGRF_SetModulationParams+0xfc>)
 8011a6c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011a70:	0c1a      	lsrs	r2, r3, #16
 8011a72:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8011a76:	0a1a      	lsrs	r2, r3, #8
 8011a78:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8011a7c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8011a80:	7b23      	ldrb	r3, [r4, #12]
 8011a82:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8011a86:	7b63      	ldrb	r3, [r4, #13]
 8011a88:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011a8c:	2205      	movs	r2, #5
 8011a8e:	4669      	mov	r1, sp
 8011a90:	208b      	movs	r0, #139	@ 0x8b
 8011a92:	f7ff fc61 	bl	8011358 <SUBGRF_WriteCommand>
}
 8011a96:	e7be      	b.n	8011a16 <SUBGRF_SetModulationParams+0x76>
 8011a98:	200017f5 	.word	0x200017f5
 8011a9c:	3d090000 	.word	0x3d090000
 8011aa0:	01e84800 	.word	0x01e84800

08011aa4 <SUBGRF_SetPacketParams>:
{
 8011aa4:	b510      	push	{r4, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8011aaa:	2300      	movs	r3, #0
 8011aac:	9301      	str	r3, [sp, #4]
 8011aae:	9302      	str	r3, [sp, #8]
 8011ab0:	f88d 300c 	strb.w	r3, [sp, #12]
    if( PacketType != packetParams->PacketType )
 8011ab4:	7800      	ldrb	r0, [r0, #0]
 8011ab6:	4b31      	ldr	r3, [pc, #196]	@ (8011b7c <SUBGRF_SetPacketParams+0xd8>)
 8011ab8:	781b      	ldrb	r3, [r3, #0]
 8011aba:	4298      	cmp	r0, r3
 8011abc:	d106      	bne.n	8011acc <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8011abe:	7823      	ldrb	r3, [r4, #0]
 8011ac0:	2b03      	cmp	r3, #3
 8011ac2:	d82a      	bhi.n	8011b1a <SUBGRF_SetPacketParams+0x76>
 8011ac4:	e8df f003 	tbb	[pc, r3]
 8011ac8:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8011acc:	f7ff fec0 	bl	8011850 <SUBGRF_SetPacketType>
 8011ad0:	e7f5      	b.n	8011abe <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8011ad2:	7a63      	ldrb	r3, [r4, #9]
 8011ad4:	2bf1      	cmp	r3, #241	@ 0xf1
 8011ad6:	d022      	beq.n	8011b1e <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8011ad8:	2bf2      	cmp	r3, #242	@ 0xf2
 8011ada:	d02a      	beq.n	8011b32 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8011adc:	8862      	ldrh	r2, [r4, #2]
 8011ade:	0a11      	lsrs	r1, r2, #8
 8011ae0:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8011ae4:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8011ae8:	7922      	ldrb	r2, [r4, #4]
 8011aea:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8011aee:	7962      	ldrb	r2, [r4, #5]
 8011af0:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8011af4:	79a2      	ldrb	r2, [r4, #6]
 8011af6:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8011afa:	79e2      	ldrb	r2, [r4, #7]
 8011afc:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8011b00:	7a22      	ldrb	r2, [r4, #8]
 8011b02:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8011b06:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8011b0a:	7aa3      	ldrb	r3, [r4, #10]
 8011b0c:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8011b10:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8011b12:	a901      	add	r1, sp, #4
 8011b14:	208c      	movs	r0, #140	@ 0x8c
 8011b16:	f7ff fc1f 	bl	8011358 <SUBGRF_WriteCommand>
}
 8011b1a:	b004      	add	sp, #16
 8011b1c:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8011b1e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8011b22:	f7ff fbb8 	bl	8011296 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8011b26:	f248 0005 	movw	r0, #32773	@ 0x8005
 8011b2a:	f7ff fbc8 	bl	80112be <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8011b2e:	2302      	movs	r3, #2
 8011b30:	e7d4      	b.n	8011adc <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8011b32:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8011b36:	f7ff fbae 	bl	8011296 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8011b3a:	f241 0021 	movw	r0, #4129	@ 0x1021
 8011b3e:	f7ff fbbe 	bl	80112be <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8011b42:	2306      	movs	r3, #6
 8011b44:	e7ca      	b.n	8011adc <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8011b46:	7b23      	ldrb	r3, [r4, #12]
 8011b48:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8011b4c:	2201      	movs	r2, #1
        break;
 8011b4e:	e7e0      	b.n	8011b12 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8011b50:	89e3      	ldrh	r3, [r4, #14]
 8011b52:	0a1a      	lsrs	r2, r3, #8
 8011b54:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8011b58:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8011b5c:	7c23      	ldrb	r3, [r4, #16]
 8011b5e:	4a08      	ldr	r2, [pc, #32]	@ (8011b80 <SUBGRF_SetPacketParams+0xdc>)
 8011b60:	7013      	strb	r3, [r2, #0]
 8011b62:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8011b66:	7c63      	ldrb	r3, [r4, #17]
 8011b68:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8011b6c:	7ca3      	ldrb	r3, [r4, #18]
 8011b6e:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8011b72:	7ce3      	ldrb	r3, [r4, #19]
 8011b74:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8011b78:	2206      	movs	r2, #6
        break;
 8011b7a:	e7ca      	b.n	8011b12 <SUBGRF_SetPacketParams+0x6e>
 8011b7c:	200017f5 	.word	0x200017f5
 8011b80:	200017f4 	.word	0x200017f4

08011b84 <SUBGRF_SetBufferBaseAddress>:
{
 8011b84:	b500      	push	{lr}
 8011b86:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8011b88:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8011b8c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8011b90:	2202      	movs	r2, #2
 8011b92:	a901      	add	r1, sp, #4
 8011b94:	208f      	movs	r0, #143	@ 0x8f
 8011b96:	f7ff fbdf 	bl	8011358 <SUBGRF_WriteCommand>
}
 8011b9a:	b003      	add	sp, #12
 8011b9c:	f85d fb04 	ldr.w	pc, [sp], #4

08011ba0 <SUBGRF_ReadCommand>:
{
 8011ba0:	b510      	push	{r4, lr}
 8011ba2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ba4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011ba8:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8011baa:	460a      	mov	r2, r1
 8011bac:	4601      	mov	r1, r0
 8011bae:	4803      	ldr	r0, [pc, #12]	@ (8011bbc <SUBGRF_ReadCommand+0x1c>)
 8011bb0:	f7f4 fc82 	bl	80064b8 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011bb4:	f384 8810 	msr	PRIMASK, r4
}
 8011bb8:	bd10      	pop	{r4, pc}
 8011bba:	bf00      	nop
 8011bbc:	20000244 	.word	0x20000244

08011bc0 <SUBGRF_GetRssiInst>:
{
 8011bc0:	b500      	push	{lr}
 8011bc2:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8011bc4:	2201      	movs	r2, #1
 8011bc6:	a901      	add	r1, sp, #4
 8011bc8:	2015      	movs	r0, #21
 8011bca:	f7ff ffe9 	bl	8011ba0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8011bce:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8011bd2:	4240      	negs	r0, r0
}
 8011bd4:	1040      	asrs	r0, r0, #1
 8011bd6:	b003      	add	sp, #12
 8011bd8:	f85d fb04 	ldr.w	pc, [sp], #4

08011bdc <SUBGRF_GetRxBufferStatus>:
{
 8011bdc:	b530      	push	{r4, r5, lr}
 8011bde:	b083      	sub	sp, #12
 8011be0:	4605      	mov	r5, r0
 8011be2:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8011be4:	2202      	movs	r2, #2
 8011be6:	a901      	add	r1, sp, #4
 8011be8:	2013      	movs	r0, #19
 8011bea:	f7ff ffd9 	bl	8011ba0 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8011bee:	f7ff fadf 	bl	80111b0 <SUBGRF_GetPacketType>
 8011bf2:	2801      	cmp	r0, #1
 8011bf4:	d007      	beq.n	8011c06 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8011bf6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011bfa:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8011bfc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011c00:	7023      	strb	r3, [r4, #0]
}
 8011c02:	b003      	add	sp, #12
 8011c04:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8011c06:	4b05      	ldr	r3, [pc, #20]	@ (8011c1c <SUBGRF_GetRxBufferStatus+0x40>)
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	b2db      	uxtb	r3, r3
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d1f2      	bne.n	8011bf6 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8011c10:	f240 7002 	movw	r0, #1794	@ 0x702
 8011c14:	f7ff fae6 	bl	80111e4 <SUBGRF_ReadRegister>
 8011c18:	7028      	strb	r0, [r5, #0]
 8011c1a:	e7ef      	b.n	8011bfc <SUBGRF_GetRxBufferStatus+0x20>
 8011c1c:	200017f4 	.word	0x200017f4

08011c20 <SUBGRF_GetPayload>:
{
 8011c20:	b570      	push	{r4, r5, r6, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	4606      	mov	r6, r0
 8011c26:	460c      	mov	r4, r1
 8011c28:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8011c30:	f10d 0107 	add.w	r1, sp, #7
 8011c34:	4620      	mov	r0, r4
 8011c36:	f7ff ffd1 	bl	8011bdc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8011c3a:	7822      	ldrb	r2, [r4, #0]
 8011c3c:	42aa      	cmp	r2, r5
 8011c3e:	d902      	bls.n	8011c46 <SUBGRF_GetPayload+0x26>
        return 1;
 8011c40:	2001      	movs	r0, #1
}
 8011c42:	b002      	add	sp, #8
 8011c44:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8011c46:	4631      	mov	r1, r6
 8011c48:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011c4c:	f7ff fb74 	bl	8011338 <SUBGRF_ReadBuffer>
    return 0;
 8011c50:	2000      	movs	r0, #0
 8011c52:	e7f6      	b.n	8011c42 <SUBGRF_GetPayload+0x22>

08011c54 <SUBGRF_GetPacketStatus>:
{
 8011c54:	b510      	push	{r4, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8011c5a:	2203      	movs	r2, #3
 8011c5c:	a901      	add	r1, sp, #4
 8011c5e:	2014      	movs	r0, #20
 8011c60:	f7ff ff9e 	bl	8011ba0 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8011c64:	f7ff faa4 	bl	80111b0 <SUBGRF_GetPacketType>
 8011c68:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8011c6a:	b148      	cbz	r0, 8011c80 <SUBGRF_GetPacketStatus+0x2c>
 8011c6c:	2801      	cmp	r0, #1
 8011c6e:	d018      	beq.n	8011ca2 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8011c70:	2214      	movs	r2, #20
 8011c72:	2100      	movs	r1, #0
 8011c74:	4620      	mov	r0, r4
 8011c76:	f000 fb20 	bl	80122ba <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8011c7a:	230f      	movs	r3, #15
 8011c7c:	7023      	strb	r3, [r4, #0]
}
 8011c7e:	e00e      	b.n	8011c9e <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8011c80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011c84:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8011c86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011c8a:	425b      	negs	r3, r3
 8011c8c:	105b      	asrs	r3, r3, #1
 8011c8e:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8011c90:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011c94:	425b      	negs	r3, r3
 8011c96:	105b      	asrs	r3, r3, #1
 8011c98:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	60a3      	str	r3, [r4, #8]
}
 8011c9e:	b002      	add	sp, #8
 8011ca0:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8011ca2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011ca6:	425b      	negs	r3, r3
 8011ca8:	105b      	asrs	r3, r3, #1
 8011caa:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8011cac:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8011cb0:	3302      	adds	r3, #2
 8011cb2:	109b      	asrs	r3, r3, #2
 8011cb4:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8011cb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011cba:	425b      	negs	r3, r3
 8011cbc:	105b      	asrs	r3, r3, #1
 8011cbe:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8011cc0:	4b01      	ldr	r3, [pc, #4]	@ (8011cc8 <SUBGRF_GetPacketStatus+0x74>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	6123      	str	r3, [r4, #16]
            break;
 8011cc6:	e7ea      	b.n	8011c9e <SUBGRF_GetPacketStatus+0x4a>
 8011cc8:	200017f0 	.word	0x200017f0

08011ccc <SUBGRF_SetSwitch>:
{
 8011ccc:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8011cce:	2901      	cmp	r1, #1
 8011cd0:	d003      	beq.n	8011cda <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8011cd2:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8011cd4:	f7f1 fb7a 	bl	80033cc <RBI_ConfigRFSwitch>
}
 8011cd8:	bd10      	pop	{r4, pc}
 8011cda:	4604      	mov	r4, r0
 8011cdc:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8011cde:	2c01      	cmp	r4, #1
 8011ce0:	d003      	beq.n	8011cea <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8011ce2:	2c02      	cmp	r4, #2
 8011ce4:	d1f6      	bne.n	8011cd4 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8011ce6:	2003      	movs	r0, #3
 8011ce8:	e7f4      	b.n	8011cd4 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8011cea:	2004      	movs	r0, #4
 8011cec:	f7ff fa8e 	bl	801120c <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8011cf0:	2002      	movs	r0, #2
 8011cf2:	e7f6      	b.n	8011ce2 <SUBGRF_SetSwitch+0x16>

08011cf4 <SUBGRF_SetRfTxPower>:
{
 8011cf4:	b538      	push	{r3, r4, r5, lr}
 8011cf6:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8011cf8:	f7f1 fb6c 	bl	80033d4 <RBI_GetTxConfig>
    switch (TxConfig)
 8011cfc:	b148      	cbz	r0, 8011d12 <SUBGRF_SetRfTxPower+0x1e>
 8011cfe:	2802      	cmp	r0, #2
 8011d00:	d10d      	bne.n	8011d1e <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8011d02:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8011d04:	2202      	movs	r2, #2
 8011d06:	4621      	mov	r1, r4
 8011d08:	4628      	mov	r0, r5
 8011d0a:	f7ff fdbb 	bl	8011884 <SUBGRF_SetTxParams>
}
 8011d0e:	4628      	mov	r0, r5
 8011d10:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8011d12:	2c0f      	cmp	r4, #15
 8011d14:	dc01      	bgt.n	8011d1a <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8011d16:	2501      	movs	r5, #1
 8011d18:	e7f4      	b.n	8011d04 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8011d1a:	2502      	movs	r5, #2
 8011d1c:	e7f2      	b.n	8011d04 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8011d1e:	2501      	movs	r5, #1
 8011d20:	e7f0      	b.n	8011d04 <SUBGRF_SetRfTxPower+0x10>

08011d22 <SUBGRF_GetRadioWakeUpTime>:
}
 8011d22:	2001      	movs	r0, #1
 8011d24:	4770      	bx	lr
	...

08011d28 <HAL_SUBGHZ_TxCpltCallback>:
{
 8011d28:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8011d2a:	4b02      	ldr	r3, [pc, #8]	@ (8011d34 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	2001      	movs	r0, #1
 8011d30:	4798      	blx	r3
}
 8011d32:	bd08      	pop	{r3, pc}
 8011d34:	200017e8 	.word	0x200017e8

08011d38 <HAL_SUBGHZ_RxCpltCallback>:
{
 8011d38:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8011d3a:	4b02      	ldr	r3, [pc, #8]	@ (8011d44 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	2002      	movs	r0, #2
 8011d40:	4798      	blx	r3
}
 8011d42:	bd08      	pop	{r3, pc}
 8011d44:	200017e8 	.word	0x200017e8

08011d48 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8011d48:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8011d4a:	4b02      	ldr	r3, [pc, #8]	@ (8011d54 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	2040      	movs	r0, #64	@ 0x40
 8011d50:	4798      	blx	r3
}
 8011d52:	bd08      	pop	{r3, pc}
 8011d54:	200017e8 	.word	0x200017e8

08011d58 <HAL_SUBGHZ_CADStatusCallback>:
{
 8011d58:	b508      	push	{r3, lr}
    switch (cadstatus)
 8011d5a:	b139      	cbz	r1, 8011d6c <HAL_SUBGHZ_CADStatusCallback+0x14>
 8011d5c:	2901      	cmp	r1, #1
 8011d5e:	d109      	bne.n	8011d74 <HAL_SUBGHZ_CADStatusCallback+0x1c>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8011d60:	4b05      	ldr	r3, [pc, #20]	@ (8011d78 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8011d68:	4798      	blx	r3
}
 8011d6a:	e003      	b.n	8011d74 <HAL_SUBGHZ_CADStatusCallback+0x1c>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8011d6c:	4b02      	ldr	r3, [pc, #8]	@ (8011d78 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	2080      	movs	r0, #128	@ 0x80
 8011d72:	4798      	blx	r3
}
 8011d74:	bd08      	pop	{r3, pc}
 8011d76:	bf00      	nop
 8011d78:	200017e8 	.word	0x200017e8

08011d7c <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8011d7c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8011d7e:	4b03      	ldr	r3, [pc, #12]	@ (8011d8c <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8011d86:	4798      	blx	r3
}
 8011d88:	bd08      	pop	{r3, pc}
 8011d8a:	bf00      	nop
 8011d8c:	200017e8 	.word	0x200017e8

08011d90 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8011d90:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8011d92:	4b02      	ldr	r3, [pc, #8]	@ (8011d9c <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	2020      	movs	r0, #32
 8011d98:	4798      	blx	r3
}
 8011d9a:	bd08      	pop	{r3, pc}
 8011d9c:	200017e8 	.word	0x200017e8

08011da0 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8011da0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8011da2:	4b02      	ldr	r3, [pc, #8]	@ (8011dac <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	2004      	movs	r0, #4
 8011da8:	4798      	blx	r3
}
 8011daa:	bd08      	pop	{r3, pc}
 8011dac:	200017e8 	.word	0x200017e8

08011db0 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8011db0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8011db2:	4b02      	ldr	r3, [pc, #8]	@ (8011dbc <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	2008      	movs	r0, #8
 8011db8:	4798      	blx	r3
}
 8011dba:	bd08      	pop	{r3, pc}
 8011dbc:	200017e8 	.word	0x200017e8

08011dc0 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8011dc0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8011dc2:	4b02      	ldr	r3, [pc, #8]	@ (8011dcc <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	2010      	movs	r0, #16
 8011dc8:	4798      	blx	r3
}
 8011dca:	bd08      	pop	{r3, pc}
 8011dcc:	200017e8 	.word	0x200017e8

08011dd0 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8011dd0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8011dd2:	4b03      	ldr	r3, [pc, #12]	@ (8011de0 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8011dda:	4798      	blx	r3
}
 8011ddc:	bd08      	pop	{r3, pc}
 8011dde:	bf00      	nop
 8011de0:	200017e8 	.word	0x200017e8

08011de4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8011de4:	4601      	mov	r1, r0
 8011de6:	b180      	cbz	r0, 8011e0a <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8011de8:	2300      	movs	r3, #0
 8011dea:	2b15      	cmp	r3, #21
 8011dec:	d80c      	bhi.n	8011e08 <SUBGRF_GetFskBandwidthRegValue+0x24>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8011dee:	4a08      	ldr	r2, [pc, #32]	@ (8011e10 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8011df0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011df4:	428a      	cmp	r2, r1
 8011df6:	d802      	bhi.n	8011dfe <SUBGRF_GetFskBandwidthRegValue+0x1a>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8011df8:	3301      	adds	r3, #1
 8011dfa:	b2db      	uxtb	r3, r3
 8011dfc:	e7f5      	b.n	8011dea <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8011dfe:	4a04      	ldr	r2, [pc, #16]	@ (8011e10 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8011e00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011e04:	7918      	ldrb	r0, [r3, #4]
 8011e06:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8011e08:	e7fe      	b.n	8011e08 <SUBGRF_GetFskBandwidthRegValue+0x24>
        return( 0x1F );
 8011e0a:	201f      	movs	r0, #31
}
 8011e0c:	4770      	bx	lr
 8011e0e:	bf00      	nop
 8011e10:	08013c24 	.word	0x08013c24

08011e14 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8011e14:	b570      	push	{r4, r5, r6, lr}
 8011e16:	b082      	sub	sp, #8
 8011e18:	4605      	mov	r5, r0
 8011e1a:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8011e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8011e94 <SUBGRF_GetCFO+0x80>)
 8011e1e:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8011e20:	f640 0007 	movw	r0, #2055	@ 0x807
 8011e24:	f7ff f9de 	bl	80111e4 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8011e28:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8011e2c:	3308      	adds	r3, #8
 8011e2e:	446b      	add	r3, sp
 8011e30:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8011e34:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8011e38:	3301      	adds	r3, #1
 8011e3a:	409a      	lsls	r2, r3
 8011e3c:	4b16      	ldr	r3, [pc, #88]	@ (8011e98 <SUBGRF_GetCFO+0x84>)
 8011e3e:	fbb3 f3f2 	udiv	r3, r3, r2
  uint32_t cf_osr = cf_fs / bitRate;
 8011e42:	fbb3 f0f5 	udiv	r0, r3, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8011e46:	2807      	cmp	r0, #7
 8011e48:	d804      	bhi.n	8011e54 <SUBGRF_GetCFO+0x40>
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8011e4a:	0040      	lsls	r0, r0, #1
 8011e4c:	2803      	cmp	r0, #3
 8011e4e:	d91e      	bls.n	8011e8e <SUBGRF_GetCFO+0x7a>
 8011e50:	2502      	movs	r5, #2
 8011e52:	e000      	b.n	8011e56 <SUBGRF_GetCFO+0x42>
  uint8_t interp = 1;
 8011e54:	2501      	movs	r5, #1
  {
    interp = 4;
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8011e56:	fb03 f505 	mul.w	r5, r3, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8011e5a:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 8011e5e:	f7ff f9c1 	bl	80111e4 <SUBGRF_ReadRegister>
 8011e62:	0206      	lsls	r6, r0, #8
 8011e64:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8011e68:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 8011e6c:	f7ff f9ba 	bl	80111e4 <SUBGRF_ReadRegister>
 8011e70:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8011e72:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8011e76:	d003      	beq.n	8011e80 <SUBGRF_GetCFO+0x6c>
  {
    cfo_bin |= 0xFFFFF000;
 8011e78:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8011e7c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8011e80:	096d      	lsrs	r5, r5, #5
 8011e82:	fb05 f000 	mul.w	r0, r5, r0
 8011e86:	11c0      	asrs	r0, r0, #7
 8011e88:	6020      	str	r0, [r4, #0]
}
 8011e8a:	b002      	add	sp, #8
 8011e8c:	bd70      	pop	{r4, r5, r6, pc}
    interp = 4;
 8011e8e:	2504      	movs	r5, #4
 8011e90:	e7e1      	b.n	8011e56 <SUBGRF_GetCFO+0x42>
 8011e92:	bf00      	nop
 8011e94:	0c0a0804 	.word	0x0c0a0804
 8011e98:	01e84800 	.word	0x01e84800

08011e9c <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8011e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011ea0:	4770      	bx	lr

08011ea2 <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8011ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ea6:	4770      	bx	lr

08011ea8 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8011ea8:	4770      	bx	lr

08011eaa <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8011eaa:	2000      	movs	r0, #0
 8011eac:	4770      	bx	lr

08011eae <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8011eae:	2000      	movs	r0, #0
 8011eb0:	4770      	bx	lr

08011eb2 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8011eb2:	4770      	bx	lr

08011eb4 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 8011eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8011eb8:	4770      	bx	lr

08011eba <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8011eba:	f04f 30ff 	mov.w	r0, #4294967295
 8011ebe:	4770      	bx	lr

08011ec0 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8011ec0:	4770      	bx	lr

08011ec2 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8011ec2:	4770      	bx	lr

08011ec4 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8011ec4:	4770      	bx	lr
	...

08011ec8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8011ec8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011eca:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011ece:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8011ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8011f4c <TRACE_AllocateBufer+0x84>)
 8011ed2:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 8011ed6:	8a1a      	ldrh	r2, [r3, #16]
 8011ed8:	4596      	cmp	lr, r2
 8011eda:	d011      	beq.n	8011f00 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8011edc:	4596      	cmp	lr, r2
 8011ede:	d921      	bls.n	8011f24 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8011ee0:	f5ce 6380 	rsb	r3, lr, #1024	@ 0x400
 8011ee4:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8011ee6:	4283      	cmp	r3, r0
 8011ee8:	d81f      	bhi.n	8011f2a <TRACE_AllocateBufer+0x62>
 8011eea:	4282      	cmp	r2, r0
 8011eec:	d91d      	bls.n	8011f2a <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8011eee:	4b17      	ldr	r3, [pc, #92]	@ (8011f4c <TRACE_AllocateBufer+0x84>)
 8011ef0:	2401      	movs	r4, #1
 8011ef2:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8011ef4:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8011ef8:	2400      	movs	r4, #0
 8011efa:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8011efc:	4613      	mov	r3, r2
 8011efe:	e014      	b.n	8011f2a <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8011f00:	f5ce 6380 	rsb	r3, lr, #1024	@ 0x400
 8011f04:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8011f06:	4298      	cmp	r0, r3
 8011f08:	d30f      	bcc.n	8011f2a <TRACE_AllocateBufer+0x62>
 8011f0a:	4282      	cmp	r2, r0
 8011f0c:	d90d      	bls.n	8011f2a <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8011f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8011f4c <TRACE_AllocateBufer+0x84>)
 8011f10:	2401      	movs	r4, #1
 8011f12:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8011f14:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8011f18:	f04f 0e00 	mov.w	lr, #0
 8011f1c:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8011f20:	4613      	mov	r3, r2
 8011f22:	e002      	b.n	8011f2a <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8011f24:	eba2 020e 	sub.w	r2, r2, lr
 8011f28:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8011f2a:	4283      	cmp	r3, r0
 8011f2c:	d90a      	bls.n	8011f44 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8011f2e:	4a07      	ldr	r2, [pc, #28]	@ (8011f4c <TRACE_AllocateBufer+0x84>)
 8011f30:	8a53      	ldrh	r3, [r2, #18]
 8011f32:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8011f34:	4403      	add	r3, r0
 8011f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011f3a:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8011f3c:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f3e:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8011f42:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8011f44:	f04f 30ff 	mov.w	r0, #4294967295
 8011f48:	e7f9      	b.n	8011f3e <TRACE_AllocateBufer+0x76>
 8011f4a:	bf00      	nop
 8011f4c:	20001df8 	.word	0x20001df8

08011f50 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f50:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011f54:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8011f56:	4a03      	ldr	r2, [pc, #12]	@ (8011f64 <TRACE_Lock+0x14>)
 8011f58:	8ad3      	ldrh	r3, [r2, #22]
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f5e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8011f62:	4770      	bx	lr
 8011f64:	20001df8 	.word	0x20001df8

08011f68 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f68:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011f6c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8011f6e:	4a03      	ldr	r2, [pc, #12]	@ (8011f7c <TRACE_UnLock+0x14>)
 8011f70:	8ad3      	ldrh	r3, [r2, #22]
 8011f72:	3b01      	subs	r3, #1
 8011f74:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f76:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8011f7a:	4770      	bx	lr
 8011f7c:	20001df8 	.word	0x20001df8

08011f80 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8011f80:	4b02      	ldr	r3, [pc, #8]	@ (8011f8c <TRACE_IsLocked+0xc>)
 8011f82:	8ad8      	ldrh	r0, [r3, #22]
}
 8011f84:	3800      	subs	r0, #0
 8011f86:	bf18      	it	ne
 8011f88:	2001      	movne	r0, #1
 8011f8a:	4770      	bx	lr
 8011f8c:	20001df8 	.word	0x20001df8

08011f90 <UTIL_ADV_TRACE_Init>:
{
 8011f90:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8011f92:	2218      	movs	r2, #24
 8011f94:	2100      	movs	r1, #0
 8011f96:	4807      	ldr	r0, [pc, #28]	@ (8011fb4 <UTIL_ADV_TRACE_Init+0x24>)
 8011f98:	f000 f98f 	bl	80122ba <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8011f9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8011fa0:	2100      	movs	r1, #0
 8011fa2:	4805      	ldr	r0, [pc, #20]	@ (8011fb8 <UTIL_ADV_TRACE_Init+0x28>)
 8011fa4:	f000 f989 	bl	80122ba <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8011fa8:	4b04      	ldr	r3, [pc, #16]	@ (8011fbc <UTIL_ADV_TRACE_Init+0x2c>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	4804      	ldr	r0, [pc, #16]	@ (8011fc0 <UTIL_ADV_TRACE_Init+0x30>)
 8011fae:	4798      	blx	r3
}
 8011fb0:	bd08      	pop	{r3, pc}
 8011fb2:	bf00      	nop
 8011fb4:	20001df8 	.word	0x20001df8
 8011fb8:	200019f8 	.word	0x200019f8
 8011fbc:	0801363c 	.word	0x0801363c
 8011fc0:	08012141 	.word	0x08012141

08011fc4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8011fc4:	4b01      	ldr	r3, [pc, #4]	@ (8011fcc <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8011fc6:	6058      	str	r0, [r3, #4]
}
 8011fc8:	4770      	bx	lr
 8011fca:	bf00      	nop
 8011fcc:	20001df8 	.word	0x20001df8

08011fd0 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8011fd0:	4b01      	ldr	r3, [pc, #4]	@ (8011fd8 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8011fd2:	7218      	strb	r0, [r3, #8]
}
 8011fd4:	4770      	bx	lr
 8011fd6:	bf00      	nop
 8011fd8:	20001df8 	.word	0x20001df8

08011fdc <TRACE_Send>:
{
 8011fdc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fde:	f3ef 8310 	mrs	r3, PRIMASK
 8011fe2:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8011fe4:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8011fe6:	f7ff ffcb 	bl	8011f80 <TRACE_IsLocked>
 8011fea:	b118      	cbz	r0, 8011ff4 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fec:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8011ff0:	2000      	movs	r0, #0
}
 8011ff2:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8011ff4:	f7ff ffac 	bl	8011f50 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8011ff8:	4b1c      	ldr	r3, [pc, #112]	@ (801206c <TRACE_Send+0x90>)
 8011ffa:	8a1a      	ldrh	r2, [r3, #16]
 8011ffc:	8a5b      	ldrh	r3, [r3, #18]
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d02e      	beq.n	8012060 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012002:	491a      	ldr	r1, [pc, #104]	@ (801206c <TRACE_Send+0x90>)
 8012004:	7889      	ldrb	r1, [r1, #2]
 8012006:	2901      	cmp	r1, #1
 8012008:	d017      	beq.n	801203a <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801200a:	4a18      	ldr	r2, [pc, #96]	@ (801206c <TRACE_Send+0x90>)
 801200c:	7892      	ldrb	r2, [r2, #2]
 801200e:	b932      	cbnz	r2, 801201e <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012010:	4a16      	ldr	r2, [pc, #88]	@ (801206c <TRACE_Send+0x90>)
 8012012:	8a12      	ldrh	r2, [r2, #16]
 8012014:	4293      	cmp	r3, r2
 8012016:	d91e      	bls.n	8012056 <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8012018:	1a9b      	subs	r3, r3, r2
 801201a:	4a14      	ldr	r2, [pc, #80]	@ (801206c <TRACE_Send+0x90>)
 801201c:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801201e:	4e13      	ldr	r6, [pc, #76]	@ (801206c <TRACE_Send+0x90>)
 8012020:	8a35      	ldrh	r5, [r6, #16]
 8012022:	4b13      	ldr	r3, [pc, #76]	@ (8012070 <TRACE_Send+0x94>)
 8012024:	441d      	add	r5, r3
 8012026:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 801202a:	f7f0 f81b 	bl	8002064 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801202e:	4b11      	ldr	r3, [pc, #68]	@ (8012074 <TRACE_Send+0x98>)
 8012030:	68db      	ldr	r3, [r3, #12]
 8012032:	8ab1      	ldrh	r1, [r6, #20]
 8012034:	4628      	mov	r0, r5
 8012036:	4798      	blx	r3
 8012038:	e7db      	b.n	8011ff2 <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801203a:	480c      	ldr	r0, [pc, #48]	@ (801206c <TRACE_Send+0x90>)
 801203c:	8801      	ldrh	r1, [r0, #0]
 801203e:	1a8a      	subs	r2, r1, r2
 8012040:	b292      	uxth	r2, r2
 8012042:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8012044:	2102      	movs	r1, #2
 8012046:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8012048:	2100      	movs	r1, #0
 801204a:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801204c:	2a00      	cmp	r2, #0
 801204e:	d1dc      	bne.n	801200a <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012050:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012052:	8201      	strh	r1, [r0, #16]
 8012054:	e7d9      	b.n	801200a <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8012056:	f5c2 6280 	rsb	r2, r2, #1024	@ 0x400
 801205a:	4b04      	ldr	r3, [pc, #16]	@ (801206c <TRACE_Send+0x90>)
 801205c:	829a      	strh	r2, [r3, #20]
 801205e:	e7de      	b.n	801201e <TRACE_Send+0x42>
      TRACE_UnLock();
 8012060:	f7ff ff82 	bl	8011f68 <TRACE_UnLock>
 8012064:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8012068:	2000      	movs	r0, #0
}
 801206a:	e7c2      	b.n	8011ff2 <TRACE_Send+0x16>
 801206c:	20001df8 	.word	0x20001df8
 8012070:	200019f8 	.word	0x200019f8
 8012074:	0801363c 	.word	0x0801363c

08012078 <UTIL_ADV_TRACE_COND_FSend>:
{
 8012078:	b408      	push	{r3}
 801207a:	b530      	push	{r4, r5, lr}
 801207c:	b086      	sub	sp, #24
 801207e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  uint16_t timestamp_size = 0u;
 8012080:	2300      	movs	r3, #0
 8012082:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8012086:	4b2b      	ldr	r3, [pc, #172]	@ (8012134 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8012088:	7a1b      	ldrb	r3, [r3, #8]
 801208a:	4283      	cmp	r3, r0
 801208c:	d34c      	bcc.n	8012128 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801208e:	4b29      	ldr	r3, [pc, #164]	@ (8012134 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	4399      	bics	r1, r3
 8012094:	d14b      	bne.n	801212e <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8012096:	4b27      	ldr	r3, [pc, #156]	@ (8012134 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8012098:	685b      	ldr	r3, [r3, #4]
 801209a:	b123      	cbz	r3, 80120a6 <UTIL_ADV_TRACE_COND_FSend+0x2e>
 801209c:	b11a      	cbz	r2, 80120a6 <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801209e:	f10d 0102 	add.w	r1, sp, #2
 80120a2:	a801      	add	r0, sp, #4
 80120a4:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 80120a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80120a8:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80120aa:	4622      	mov	r2, r4
 80120ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80120b0:	4821      	ldr	r0, [pc, #132]	@ (8012138 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80120b2:	f000 fc85 	bl	80129c0 <tiny_vsnprintf_like>
 80120b6:	b285      	uxth	r5, r0
  TRACE_Lock();
 80120b8:	f7ff ff4a 	bl	8011f50 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 80120bc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80120c0:	18e8      	adds	r0, r5, r3
 80120c2:	4669      	mov	r1, sp
 80120c4:	b280      	uxth	r0, r0
 80120c6:	f7ff feff 	bl	8011ec8 <TRACE_AllocateBufer>
 80120ca:	f1b0 3fff 	cmp.w	r0, #4294967295
 80120ce:	d026      	beq.n	801211e <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 80120d0:	2300      	movs	r3, #0
 80120d2:	e00d      	b.n	80120f0 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80120d4:	f8bd 2000 	ldrh.w	r2, [sp]
 80120d8:	f103 0118 	add.w	r1, r3, #24
 80120dc:	4469      	add	r1, sp
 80120de:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 80120e2:	4916      	ldr	r1, [pc, #88]	@ (801213c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80120e4:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 80120e6:	3201      	adds	r2, #1
 80120e8:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 80120ec:	3301      	adds	r3, #1
 80120ee:	b29b      	uxth	r3, r3
 80120f0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80120f4:	429a      	cmp	r2, r3
 80120f6:	d8ed      	bhi.n	80120d4 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80120f8:	f8bd 0000 	ldrh.w	r0, [sp]
 80120fc:	9b05      	ldr	r3, [sp, #20]
 80120fe:	4622      	mov	r2, r4
 8012100:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012104:	4c0d      	ldr	r4, [pc, #52]	@ (801213c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8012106:	4420      	add	r0, r4
 8012108:	f000 fc5a 	bl	80129c0 <tiny_vsnprintf_like>
    TRACE_UnLock();
 801210c:	f7ff ff2c 	bl	8011f68 <TRACE_UnLock>
    return TRACE_Send();
 8012110:	f7ff ff64 	bl	8011fdc <TRACE_Send>
}
 8012114:	b006      	add	sp, #24
 8012116:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801211a:	b001      	add	sp, #4
 801211c:	4770      	bx	lr
  TRACE_UnLock();
 801211e:	f7ff ff23 	bl	8011f68 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8012122:	f06f 0002 	mvn.w	r0, #2
 8012126:	e7f5      	b.n	8012114 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8012128:	f06f 0004 	mvn.w	r0, #4
 801212c:	e7f2      	b.n	8012114 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 801212e:	f06f 0005 	mvn.w	r0, #5
 8012132:	e7ef      	b.n	8012114 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8012134:	20001df8 	.word	0x20001df8
 8012138:	200017f8 	.word	0x200017f8
 801213c:	200019f8 	.word	0x200019f8

08012140 <TRACE_TxCpltCallback>:
{
 8012140:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012142:	f3ef 8310 	mrs	r3, PRIMASK
 8012146:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8012148:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801214a:	4b26      	ldr	r3, [pc, #152]	@ (80121e4 <TRACE_TxCpltCallback+0xa4>)
 801214c:	789b      	ldrb	r3, [r3, #2]
 801214e:	2b02      	cmp	r3, #2
 8012150:	d016      	beq.n	8012180 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8012152:	4a24      	ldr	r2, [pc, #144]	@ (80121e4 <TRACE_TxCpltCallback+0xa4>)
 8012154:	8a13      	ldrh	r3, [r2, #16]
 8012156:	8a90      	ldrh	r0, [r2, #20]
 8012158:	4403      	add	r3, r0
 801215a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801215e:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8012160:	4b20      	ldr	r3, [pc, #128]	@ (80121e4 <TRACE_TxCpltCallback+0xa4>)
 8012162:	8a1a      	ldrh	r2, [r3, #16]
 8012164:	8a5b      	ldrh	r3, [r3, #18]
 8012166:	429a      	cmp	r2, r3
 8012168:	d003      	beq.n	8012172 <TRACE_TxCpltCallback+0x32>
 801216a:	481e      	ldr	r0, [pc, #120]	@ (80121e4 <TRACE_TxCpltCallback+0xa4>)
 801216c:	8ac0      	ldrh	r0, [r0, #22]
 801216e:	2801      	cmp	r0, #1
 8012170:	d00b      	beq.n	801218a <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012172:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8012176:	f7ef ff7b 	bl	8002070 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801217a:	f7ff fef5 	bl	8011f68 <TRACE_UnLock>
}
 801217e:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012180:	4b18      	ldr	r3, [pc, #96]	@ (80121e4 <TRACE_TxCpltCallback+0xa4>)
 8012182:	2200      	movs	r2, #0
 8012184:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012186:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8012188:	e7ea      	b.n	8012160 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801218a:	4816      	ldr	r0, [pc, #88]	@ (80121e4 <TRACE_TxCpltCallback+0xa4>)
 801218c:	7880      	ldrb	r0, [r0, #2]
 801218e:	2801      	cmp	r0, #1
 8012190:	d014      	beq.n	80121bc <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8012192:	4a14      	ldr	r2, [pc, #80]	@ (80121e4 <TRACE_TxCpltCallback+0xa4>)
 8012194:	7892      	ldrb	r2, [r2, #2]
 8012196:	b932      	cbnz	r2, 80121a6 <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012198:	4a12      	ldr	r2, [pc, #72]	@ (80121e4 <TRACE_TxCpltCallback+0xa4>)
 801219a:	8a12      	ldrh	r2, [r2, #16]
 801219c:	4293      	cmp	r3, r2
 801219e:	d91b      	bls.n	80121d8 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80121a0:	1a9b      	subs	r3, r3, r2
 80121a2:	4a10      	ldr	r2, [pc, #64]	@ (80121e4 <TRACE_TxCpltCallback+0xa4>)
 80121a4:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80121a6:	4b0f      	ldr	r3, [pc, #60]	@ (80121e4 <TRACE_TxCpltCallback+0xa4>)
 80121a8:	8a18      	ldrh	r0, [r3, #16]
 80121aa:	4a0f      	ldr	r2, [pc, #60]	@ (80121e8 <TRACE_TxCpltCallback+0xa8>)
 80121ac:	4410      	add	r0, r2
 80121ae:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80121b2:	4a0e      	ldr	r2, [pc, #56]	@ (80121ec <TRACE_TxCpltCallback+0xac>)
 80121b4:	68d2      	ldr	r2, [r2, #12]
 80121b6:	8a99      	ldrh	r1, [r3, #20]
 80121b8:	4790      	blx	r2
 80121ba:	e7e0      	b.n	801217e <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80121bc:	4c09      	ldr	r4, [pc, #36]	@ (80121e4 <TRACE_TxCpltCallback+0xa4>)
 80121be:	8820      	ldrh	r0, [r4, #0]
 80121c0:	1a82      	subs	r2, r0, r2
 80121c2:	b292      	uxth	r2, r2
 80121c4:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80121c6:	2002      	movs	r0, #2
 80121c8:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 80121ca:	2000      	movs	r0, #0
 80121cc:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80121ce:	2a00      	cmp	r2, #0
 80121d0:	d1df      	bne.n	8012192 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80121d2:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 80121d4:	8220      	strh	r0, [r4, #16]
 80121d6:	e7dc      	b.n	8012192 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80121d8:	f5c2 6280 	rsb	r2, r2, #1024	@ 0x400
 80121dc:	4b01      	ldr	r3, [pc, #4]	@ (80121e4 <TRACE_TxCpltCallback+0xa4>)
 80121de:	829a      	strh	r2, [r3, #20]
 80121e0:	e7e1      	b.n	80121a6 <TRACE_TxCpltCallback+0x66>
 80121e2:	bf00      	nop
 80121e4:	20001df8 	.word	0x20001df8
 80121e8:	200019f8 	.word	0x200019f8
 80121ec:	0801363c 	.word	0x0801363c

080121f0 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80121f0:	2300      	movs	r3, #0
 80121f2:	4a02      	ldr	r2, [pc, #8]	@ (80121fc <UTIL_LPM_Init+0xc>)
 80121f4:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80121f6:	4a02      	ldr	r2, [pc, #8]	@ (8012200 <UTIL_LPM_Init+0x10>)
 80121f8:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80121fa:	4770      	bx	lr
 80121fc:	20001e14 	.word	0x20001e14
 8012200:	20001e10 	.word	0x20001e10

08012204 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012204:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012208:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 801220a:	b141      	cbz	r1, 801221e <UTIL_LPM_SetStopMode+0x1a>
 801220c:	2901      	cmp	r1, #1
 801220e:	d103      	bne.n	8012218 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8012210:	4906      	ldr	r1, [pc, #24]	@ (801222c <UTIL_LPM_SetStopMode+0x28>)
 8012212:	680a      	ldr	r2, [r1, #0]
 8012214:	4302      	orrs	r2, r0
 8012216:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012218:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801221c:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 801221e:	4903      	ldr	r1, [pc, #12]	@ (801222c <UTIL_LPM_SetStopMode+0x28>)
 8012220:	680a      	ldr	r2, [r1, #0]
 8012222:	ea22 0200 	bic.w	r2, r2, r0
 8012226:	600a      	str	r2, [r1, #0]
      break;
 8012228:	e7f6      	b.n	8012218 <UTIL_LPM_SetStopMode+0x14>
 801222a:	bf00      	nop
 801222c:	20001e14 	.word	0x20001e14

08012230 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012230:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012234:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8012236:	b141      	cbz	r1, 801224a <UTIL_LPM_SetOffMode+0x1a>
 8012238:	2901      	cmp	r1, #1
 801223a:	d103      	bne.n	8012244 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801223c:	4906      	ldr	r1, [pc, #24]	@ (8012258 <UTIL_LPM_SetOffMode+0x28>)
 801223e:	680a      	ldr	r2, [r1, #0]
 8012240:	4302      	orrs	r2, r0
 8012242:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012244:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012248:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 801224a:	4903      	ldr	r1, [pc, #12]	@ (8012258 <UTIL_LPM_SetOffMode+0x28>)
 801224c:	680a      	ldr	r2, [r1, #0]
 801224e:	ea22 0200 	bic.w	r2, r2, r0
 8012252:	600a      	str	r2, [r1, #0]
      break;
 8012254:	e7f6      	b.n	8012244 <UTIL_LPM_SetOffMode+0x14>
 8012256:	bf00      	nop
 8012258:	20001e10 	.word	0x20001e10

0801225c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801225c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801225e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012262:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8012264:	4b0c      	ldr	r3, [pc, #48]	@ (8012298 <UTIL_LPM_EnterLowPower+0x3c>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	b13b      	cbz	r3, 801227a <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801226a:	4d0c      	ldr	r5, [pc, #48]	@ (801229c <UTIL_LPM_EnterLowPower+0x40>)
 801226c:	682b      	ldr	r3, [r5, #0]
 801226e:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8012270:	686b      	ldr	r3, [r5, #4]
 8012272:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012274:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8012278:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801227a:	4b09      	ldr	r3, [pc, #36]	@ (80122a0 <UTIL_LPM_EnterLowPower+0x44>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	b12b      	cbz	r3, 801228c <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8012280:	4d06      	ldr	r5, [pc, #24]	@ (801229c <UTIL_LPM_EnterLowPower+0x40>)
 8012282:	68ab      	ldr	r3, [r5, #8]
 8012284:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8012286:	68eb      	ldr	r3, [r5, #12]
 8012288:	4798      	blx	r3
 801228a:	e7f3      	b.n	8012274 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 801228c:	4d03      	ldr	r5, [pc, #12]	@ (801229c <UTIL_LPM_EnterLowPower+0x40>)
 801228e:	692b      	ldr	r3, [r5, #16]
 8012290:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8012292:	696b      	ldr	r3, [r5, #20]
 8012294:	4798      	blx	r3
 8012296:	e7ed      	b.n	8012274 <UTIL_LPM_EnterLowPower+0x18>
 8012298:	20001e14 	.word	0x20001e14
 801229c:	080135e4 	.word	0x080135e4
 80122a0:	20001e10 	.word	0x20001e10

080122a4 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80122a4:	e004      	b.n	80122b0 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 80122a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122aa:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 80122ae:	461a      	mov	r2, r3
 80122b0:	1e53      	subs	r3, r2, #1
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	2a00      	cmp	r2, #0
 80122b6:	d1f6      	bne.n	80122a6 <UTIL_MEM_cpy_8+0x2>
    }
}
 80122b8:	4770      	bx	lr

080122ba <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80122ba:	e002      	b.n	80122c2 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 80122bc:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 80122c0:	461a      	mov	r2, r3
 80122c2:	1e53      	subs	r3, r2, #1
 80122c4:	b29b      	uxth	r3, r3
 80122c6:	2a00      	cmp	r2, #0
 80122c8:	d1f8      	bne.n	80122bc <UTIL_MEM_set_8+0x2>
  }
}
 80122ca:	4770      	bx	lr

080122cc <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80122cc:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80122d0:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 80122d2:	4a06      	ldr	r2, [pc, #24]	@ (80122ec <UTIL_SEQ_SetTask+0x20>)
 80122d4:	6813      	ldr	r3, [r2, #0]
 80122d6:	4303      	orrs	r3, r0
 80122d8:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80122da:	4a05      	ldr	r2, [pc, #20]	@ (80122f0 <UTIL_SEQ_SetTask+0x24>)
 80122dc:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 80122e0:	4303      	orrs	r3, r0
 80122e2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80122e6:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80122ea:	4770      	bx	lr
 80122ec:	20001e3c 	.word	0x20001e3c
 80122f0:	20001e18 	.word	0x20001e18

080122f4 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80122f4:	4770      	bx	lr

080122f6 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80122f6:	4770      	bx	lr

080122f8 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80122f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80122fc:	d216      	bcs.n	801232c <SEQ_BitPosition+0x34>
 80122fe:	0400      	lsls	r0, r0, #16
 8012300:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8012302:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8012306:	d202      	bcs.n	801230e <SEQ_BitPosition+0x16>
 8012308:	3308      	adds	r3, #8
 801230a:	b2db      	uxtb	r3, r3
 801230c:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801230e:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8012312:	d202      	bcs.n	801231a <SEQ_BitPosition+0x22>
 8012314:	3304      	adds	r3, #4
 8012316:	b2db      	uxtb	r3, r3
 8012318:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801231a:	0f00      	lsrs	r0, r0, #28
 801231c:	4a04      	ldr	r2, [pc, #16]	@ (8012330 <SEQ_BitPosition+0x38>)
 801231e:	5c10      	ldrb	r0, [r2, r0]
 8012320:	4418      	add	r0, r3
 8012322:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8012324:	f1c0 001f 	rsb	r0, r0, #31
}
 8012328:	b2c0      	uxtb	r0, r0
 801232a:	4770      	bx	lr
uint8_t n = 0U;
 801232c:	2300      	movs	r3, #0
 801232e:	e7e8      	b.n	8012302 <SEQ_BitPosition+0xa>
 8012330:	08013cd4 	.word	0x08013cd4

08012334 <UTIL_SEQ_Run>:
{
 8012334:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8012336:	4b42      	ldr	r3, [pc, #264]	@ (8012440 <UTIL_SEQ_Run+0x10c>)
 8012338:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 801233a:	4020      	ands	r0, r4
 801233c:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 801233e:	4b41      	ldr	r3, [pc, #260]	@ (8012444 <UTIL_SEQ_Run+0x110>)
 8012340:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 8012342:	4b41      	ldr	r3, [pc, #260]	@ (8012448 <UTIL_SEQ_Run+0x114>)
 8012344:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8012346:	4941      	ldr	r1, [pc, #260]	@ (801244c <UTIL_SEQ_Run+0x118>)
 8012348:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 801234a:	4941      	ldr	r1, [pc, #260]	@ (8012450 <UTIL_SEQ_Run+0x11c>)
 801234c:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801234e:	e02f      	b.n	80123b0 <UTIL_SEQ_Run+0x7c>
      counter++;
 8012350:	3301      	adds	r3, #1
 8012352:	e034      	b.n	80123be <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8012354:	4d3f      	ldr	r5, [pc, #252]	@ (8012454 <UTIL_SEQ_Run+0x120>)
 8012356:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801235a:	6868      	ldr	r0, [r5, #4]
 801235c:	4010      	ands	r0, r2
 801235e:	f7ff ffcb 	bl	80122f8 <SEQ_BitPosition>
 8012362:	4e3d      	ldr	r6, [pc, #244]	@ (8012458 <UTIL_SEQ_Run+0x124>)
 8012364:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8012366:	686a      	ldr	r2, [r5, #4]
 8012368:	2301      	movs	r3, #1
 801236a:	fa03 f000 	lsl.w	r0, r3, r0
 801236e:	ea22 0200 	bic.w	r2, r2, r0
 8012372:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012374:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012378:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 801237a:	6832      	ldr	r2, [r6, #0]
 801237c:	fa03 f202 	lsl.w	r2, r3, r2
 8012380:	43d6      	mvns	r6, r2
 8012382:	4d30      	ldr	r5, [pc, #192]	@ (8012444 <UTIL_SEQ_Run+0x110>)
 8012384:	6828      	ldr	r0, [r5, #0]
 8012386:	ea20 0202 	bic.w	r2, r0, r2
 801238a:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801238c:	2b00      	cmp	r3, #0
 801238e:	d12d      	bne.n	80123ec <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012390:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8012394:	4b30      	ldr	r3, [pc, #192]	@ (8012458 <UTIL_SEQ_Run+0x124>)
 8012396:	681a      	ldr	r2, [r3, #0]
 8012398:	4b30      	ldr	r3, [pc, #192]	@ (801245c <UTIL_SEQ_Run+0x128>)
 801239a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801239e:	4798      	blx	r3
    local_taskset = TaskSet;
 80123a0:	4b28      	ldr	r3, [pc, #160]	@ (8012444 <UTIL_SEQ_Run+0x110>)
 80123a2:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 80123a4:	4b28      	ldr	r3, [pc, #160]	@ (8012448 <UTIL_SEQ_Run+0x114>)
 80123a6:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 80123a8:	4928      	ldr	r1, [pc, #160]	@ (801244c <UTIL_SEQ_Run+0x118>)
 80123aa:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 80123ac:	4928      	ldr	r1, [pc, #160]	@ (8012450 <UTIL_SEQ_Run+0x11c>)
 80123ae:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80123b0:	4002      	ands	r2, r0
 80123b2:	4d23      	ldr	r5, [pc, #140]	@ (8012440 <UTIL_SEQ_Run+0x10c>)
 80123b4:	682d      	ldr	r5, [r5, #0]
 80123b6:	422a      	tst	r2, r5
 80123b8:	d020      	beq.n	80123fc <UTIL_SEQ_Run+0xc8>
 80123ba:	400b      	ands	r3, r1
 80123bc:	d11e      	bne.n	80123fc <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80123be:	4a25      	ldr	r2, [pc, #148]	@ (8012454 <UTIL_SEQ_Run+0x120>)
 80123c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80123c4:	4002      	ands	r2, r0
 80123c6:	422a      	tst	r2, r5
 80123c8:	d0c2      	beq.n	8012350 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80123ca:	4922      	ldr	r1, [pc, #136]	@ (8012454 <UTIL_SEQ_Run+0x120>)
 80123cc:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80123d0:	4002      	ands	r2, r0
 80123d2:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80123d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80123d8:	6849      	ldr	r1, [r1, #4]
 80123da:	4211      	tst	r1, r2
 80123dc:	d1ba      	bne.n	8012354 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80123de:	491d      	ldr	r1, [pc, #116]	@ (8012454 <UTIL_SEQ_Run+0x120>)
 80123e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80123e4:	f04f 30ff 	mov.w	r0, #4294967295
 80123e8:	6048      	str	r0, [r1, #4]
 80123ea:	e7b3      	b.n	8012354 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80123ec:	3b01      	subs	r3, #1
 80123ee:	4819      	ldr	r0, [pc, #100]	@ (8012454 <UTIL_SEQ_Run+0x120>)
 80123f0:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 80123f4:	4032      	ands	r2, r6
 80123f6:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80123fa:	e7c7      	b.n	801238c <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80123fc:	4b16      	ldr	r3, [pc, #88]	@ (8012458 <UTIL_SEQ_Run+0x124>)
 80123fe:	f04f 32ff 	mov.w	r2, #4294967295
 8012402:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8012404:	f7ff ff76 	bl	80122f4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012408:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801240c:	b672      	cpsid	i
  local_taskset = TaskSet;
 801240e:	4b0d      	ldr	r3, [pc, #52]	@ (8012444 <UTIL_SEQ_Run+0x110>)
 8012410:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8012412:	4a0d      	ldr	r2, [pc, #52]	@ (8012448 <UTIL_SEQ_Run+0x114>)
 8012414:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8012416:	4a0d      	ldr	r2, [pc, #52]	@ (801244c <UTIL_SEQ_Run+0x118>)
 8012418:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801241a:	4013      	ands	r3, r2
 801241c:	4a08      	ldr	r2, [pc, #32]	@ (8012440 <UTIL_SEQ_Run+0x10c>)
 801241e:	6812      	ldr	r2, [r2, #0]
 8012420:	4213      	tst	r3, r2
 8012422:	d103      	bne.n	801242c <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 8012424:	4b0a      	ldr	r3, [pc, #40]	@ (8012450 <UTIL_SEQ_Run+0x11c>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	420b      	tst	r3, r1
 801242a:	d006      	beq.n	801243a <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801242c:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8012430:	f7ff ff61 	bl	80122f6 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8012434:	4b02      	ldr	r3, [pc, #8]	@ (8012440 <UTIL_SEQ_Run+0x10c>)
 8012436:	601c      	str	r4, [r3, #0]
}
 8012438:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 801243a:	f7ef fd99 	bl	8001f70 <UTIL_SEQ_Idle>
 801243e:	e7f5      	b.n	801242c <UTIL_SEQ_Run+0xf8>
 8012440:	2000011c 	.word	0x2000011c
 8012444:	20001e3c 	.word	0x20001e3c
 8012448:	20001e38 	.word	0x20001e38
 801244c:	20000120 	.word	0x20000120
 8012450:	20001e34 	.word	0x20001e34
 8012454:	20001e18 	.word	0x20001e18
 8012458:	20001e30 	.word	0x20001e30
 801245c:	20001e20 	.word	0x20001e20

08012460 <UTIL_SEQ_RegTask>:
{
 8012460:	b538      	push	{r3, r4, r5, lr}
 8012462:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012464:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012468:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801246a:	f7ff ff45 	bl	80122f8 <SEQ_BitPosition>
 801246e:	4b03      	ldr	r3, [pc, #12]	@ (801247c <UTIL_SEQ_RegTask+0x1c>)
 8012470:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012474:	f385 8810 	msr	PRIMASK, r5
}
 8012478:	bd38      	pop	{r3, r4, r5, pc}
 801247a:	bf00      	nop
 801247c:	20001e20 	.word	0x20001e20

08012480 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8012480:	b082      	sub	sp, #8
 8012482:	b082      	sub	sp, #8
 8012484:	f10d 0c08 	add.w	ip, sp, #8
 8012488:	e90c 0006 	stmdb	ip, {r1, r2}
 801248c:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801248e:	2200      	movs	r2, #0
 8012490:	6002      	str	r2, [r0, #0]
 8012492:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8012494:	440b      	add	r3, r1
 8012496:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8012498:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801249c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80124a0:	440a      	add	r2, r1
 80124a2:	b291      	uxth	r1, r2
 80124a4:	b212      	sxth	r2, r2
 80124a6:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 80124a8:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 80124ac:	db04      	blt.n	80124b8 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 80124ae:	3301      	adds	r3, #1
 80124b0:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 80124b2:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 80124b6:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 80124b8:	b002      	add	sp, #8
 80124ba:	b002      	add	sp, #8
 80124bc:	4770      	bx	lr

080124be <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80124be:	b082      	sub	sp, #8
 80124c0:	b082      	sub	sp, #8
 80124c2:	f10d 0c08 	add.w	ip, sp, #8
 80124c6:	e90c 0006 	stmdb	ip, {r1, r2}
 80124ca:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 80124cc:	2200      	movs	r2, #0
 80124ce:	6002      	str	r2, [r0, #0]
 80124d0:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 80124d2:	1acb      	subs	r3, r1, r3
 80124d4:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80124d6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80124da:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80124de:	1a52      	subs	r2, r2, r1
 80124e0:	b291      	uxth	r1, r2
 80124e2:	b212      	sxth	r2, r2
 80124e4:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 80124e6:	2a00      	cmp	r2, #0
 80124e8:	db02      	blt.n	80124f0 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 80124ea:	b002      	add	sp, #8
 80124ec:	b002      	add	sp, #8
 80124ee:	4770      	bx	lr
    c.Seconds--;
 80124f0:	3b01      	subs	r3, #1
 80124f2:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 80124f4:	f501 717a 	add.w	r1, r1, #1000	@ 0x3e8
 80124f8:	8081      	strh	r1, [r0, #4]
  return c;
 80124fa:	e7f6      	b.n	80124ea <SysTimeSub+0x2c>

080124fc <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 80124fc:	b530      	push	{r4, r5, lr}
 80124fe:	b089      	sub	sp, #36	@ 0x24
 8012500:	ac02      	add	r4, sp, #8
 8012502:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012506:	2300      	movs	r3, #0
 8012508:	9304      	str	r3, [sp, #16]
 801250a:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801250e:	4d0b      	ldr	r5, [pc, #44]	@ (801253c <SysTimeSet+0x40>)
 8012510:	692b      	ldr	r3, [r5, #16]
 8012512:	a805      	add	r0, sp, #20
 8012514:	4798      	blx	r3
 8012516:	4603      	mov	r3, r0
 8012518:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801251a:	9a05      	ldr	r2, [sp, #20]
 801251c:	9200      	str	r2, [sp, #0]
 801251e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012522:	a806      	add	r0, sp, #24
 8012524:	f7ff ffcb 	bl	80124be <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8012528:	682b      	ldr	r3, [r5, #0]
 801252a:	9806      	ldr	r0, [sp, #24]
 801252c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801252e:	68ab      	ldr	r3, [r5, #8]
 8012530:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8012534:	4798      	blx	r3
}
 8012536:	b009      	add	sp, #36	@ 0x24
 8012538:	bd30      	pop	{r4, r5, pc}
 801253a:	bf00      	nop
 801253c:	080135fc 	.word	0x080135fc

08012540 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8012540:	b530      	push	{r4, r5, lr}
 8012542:	b087      	sub	sp, #28
 8012544:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012546:	2300      	movs	r3, #0
 8012548:	9304      	str	r3, [sp, #16]
 801254a:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801254e:	6003      	str	r3, [r0, #0]
 8012550:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012552:	4d0b      	ldr	r5, [pc, #44]	@ (8012580 <SysTimeGet+0x40>)
 8012554:	692b      	ldr	r3, [r5, #16]
 8012556:	a805      	add	r0, sp, #20
 8012558:	4798      	blx	r3
 801255a:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801255c:	68eb      	ldr	r3, [r5, #12]
 801255e:	4798      	blx	r3
 8012560:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012564:	686b      	ldr	r3, [r5, #4]
 8012566:	4798      	blx	r3
 8012568:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801256a:	9b05      	ldr	r3, [sp, #20]
 801256c:	9300      	str	r3, [sp, #0]
 801256e:	9b04      	ldr	r3, [sp, #16]
 8012570:	aa02      	add	r2, sp, #8
 8012572:	ca06      	ldmia	r2, {r1, r2}
 8012574:	4620      	mov	r0, r4
 8012576:	f7ff ff83 	bl	8012480 <SysTimeAdd>

  return sysTime;
}
 801257a:	4620      	mov	r0, r4
 801257c:	b007      	add	sp, #28
 801257e:	bd30      	pop	{r4, r5, pc}
 8012580:	080135fc 	.word	0x080135fc

08012584 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8012584:	b530      	push	{r4, r5, lr}
 8012586:	b083      	sub	sp, #12
 8012588:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801258a:	2300      	movs	r3, #0
 801258c:	9300      	str	r3, [sp, #0]
 801258e:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012592:	4b06      	ldr	r3, [pc, #24]	@ (80125ac <SysTimeGetMcuTime+0x28>)
 8012594:	691b      	ldr	r3, [r3, #16]
 8012596:	466d      	mov	r5, sp
 8012598:	a801      	add	r0, sp, #4
 801259a:	4798      	blx	r3
 801259c:	9000      	str	r0, [sp, #0]

  return calendarTime;
 801259e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80125a2:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80125a6:	4620      	mov	r0, r4
 80125a8:	b003      	add	sp, #12
 80125aa:	bd30      	pop	{r4, r5, pc}
 80125ac:	080135fc 	.word	0x080135fc

080125b0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80125b0:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80125b2:	4b03      	ldr	r3, [pc, #12]	@ (80125c0 <UTIL_TIMER_Init+0x10>)
 80125b4:	2200      	movs	r2, #0
 80125b6:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80125b8:	4b02      	ldr	r3, [pc, #8]	@ (80125c4 <UTIL_TIMER_Init+0x14>)
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	4798      	blx	r3
}
 80125be:	bd08      	pop	{r3, pc}
 80125c0:	20001e40 	.word	0x20001e40
 80125c4:	08013610 	.word	0x08013610

080125c8 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 80125c8:	b1a8      	cbz	r0, 80125f6 <UTIL_TIMER_Create+0x2e>
{
 80125ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125cc:	4617      	mov	r7, r2
 80125ce:	461e      	mov	r6, r3
 80125d0:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 80125d2:	b193      	cbz	r3, 80125fa <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 80125d4:	2500      	movs	r5, #0
 80125d6:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80125d8:	4b09      	ldr	r3, [pc, #36]	@ (8012600 <UTIL_TIMER_Create+0x38>)
 80125da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125dc:	4608      	mov	r0, r1
 80125de:	4798      	blx	r3
 80125e0:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 80125e2:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 80125e4:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80125e6:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 80125e8:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 80125ea:	9b06      	ldr	r3, [sp, #24]
 80125ec:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 80125ee:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 80125f0:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 80125f2:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 80125f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 80125f6:	2001      	movs	r0, #1
}
 80125f8:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 80125fa:	2001      	movs	r0, #1
 80125fc:	e7fa      	b.n	80125f4 <UTIL_TIMER_Create+0x2c>
 80125fe:	bf00      	nop
 8012600:	08013610 	.word	0x08013610

08012604 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8012604:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8012606:	4c03      	ldr	r4, [pc, #12]	@ (8012614 <UTIL_TIMER_GetCurrentTime+0x10>)
 8012608:	69e3      	ldr	r3, [r4, #28]
 801260a:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 801260c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801260e:	4798      	blx	r3
}
 8012610:	bd10      	pop	{r4, pc}
 8012612:	bf00      	nop
 8012614:	08013610 	.word	0x08013610

08012618 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8012618:	b570      	push	{r4, r5, r6, lr}
 801261a:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801261c:	4d05      	ldr	r5, [pc, #20]	@ (8012634 <UTIL_TIMER_GetElapsedTime+0x1c>)
 801261e:	69eb      	ldr	r3, [r5, #28]
 8012620:	4798      	blx	r3
 8012622:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8012624:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8012626:	4630      	mov	r0, r6
 8012628:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801262a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801262c:	1a20      	subs	r0, r4, r0
 801262e:	4798      	blx	r3
}
 8012630:	bd70      	pop	{r4, r5, r6, pc}
 8012632:	bf00      	nop
 8012634:	08013610 	.word	0x08013610

08012638 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8012638:	4b05      	ldr	r3, [pc, #20]	@ (8012650 <TimerExists+0x18>)
 801263a:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 801263c:	e000      	b.n	8012640 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 801263e:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8012640:	b11b      	cbz	r3, 801264a <TimerExists+0x12>
    if( cur == TimerObject )
 8012642:	4283      	cmp	r3, r0
 8012644:	d1fb      	bne.n	801263e <TimerExists+0x6>
      return true;
 8012646:	2001      	movs	r0, #1
  }
  return false;
}
 8012648:	4770      	bx	lr
  return false;
 801264a:	2000      	movs	r0, #0
 801264c:	4770      	bx	lr
 801264e:	bf00      	nop
 8012650:	20001e40 	.word	0x20001e40

08012654 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8012654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012656:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8012658:	4e09      	ldr	r6, [pc, #36]	@ (8012680 <TimerSetTimeout+0x2c>)
 801265a:	6a33      	ldr	r3, [r6, #32]
 801265c:	4798      	blx	r3
 801265e:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8012660:	2301      	movs	r3, #1
 8012662:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8012664:	6827      	ldr	r7, [r4, #0]
 8012666:	69b6      	ldr	r6, [r6, #24]
 8012668:	47b0      	blx	r6
 801266a:	4428      	add	r0, r5
 801266c:	4287      	cmp	r7, r0
 801266e:	d202      	bcs.n	8012676 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8012670:	47b0      	blx	r6
 8012672:	4428      	add	r0, r5
 8012674:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8012676:	4b02      	ldr	r3, [pc, #8]	@ (8012680 <TimerSetTimeout+0x2c>)
 8012678:	689b      	ldr	r3, [r3, #8]
 801267a:	6820      	ldr	r0, [r4, #0]
 801267c:	4798      	blx	r3
}
 801267e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012680:	08013610 	.word	0x08013610

08012684 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8012684:	b368      	cbz	r0, 80126e2 <UTIL_TIMER_Stop+0x5e>
{
 8012686:	b510      	push	{r4, lr}
 8012688:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801268a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801268e:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8012690:	4b15      	ldr	r3, [pc, #84]	@ (80126e8 <UTIL_TIMER_Stop+0x64>)
 8012692:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8012694:	2301      	movs	r3, #1
 8012696:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8012698:	b1e1      	cbz	r1, 80126d4 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 801269a:	2300      	movs	r3, #0
 801269c:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801269e:	4288      	cmp	r0, r1
 80126a0:	d006      	beq.n	80126b0 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 80126a2:	460b      	mov	r3, r1
        while( cur != NULL )
 80126a4:	b1b3      	cbz	r3, 80126d4 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 80126a6:	4293      	cmp	r3, r2
 80126a8:	d011      	beq.n	80126ce <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 80126aa:	4619      	mov	r1, r3
            cur = cur->Next;
 80126ac:	695b      	ldr	r3, [r3, #20]
 80126ae:	e7f9      	b.n	80126a4 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 80126b0:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 80126b2:	6948      	ldr	r0, [r1, #20]
 80126b4:	b120      	cbz	r0, 80126c0 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 80126b6:	4b0c      	ldr	r3, [pc, #48]	@ (80126e8 <UTIL_TIMER_Stop+0x64>)
 80126b8:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 80126ba:	f7ff ffcb 	bl	8012654 <TimerSetTimeout>
 80126be:	e009      	b.n	80126d4 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 80126c0:	4b0a      	ldr	r3, [pc, #40]	@ (80126ec <UTIL_TIMER_Stop+0x68>)
 80126c2:	68db      	ldr	r3, [r3, #12]
 80126c4:	4798      	blx	r3
            TimerListHead = NULL;
 80126c6:	4b08      	ldr	r3, [pc, #32]	@ (80126e8 <UTIL_TIMER_Stop+0x64>)
 80126c8:	2200      	movs	r2, #0
 80126ca:	601a      	str	r2, [r3, #0]
 80126cc:	e002      	b.n	80126d4 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 80126ce:	695b      	ldr	r3, [r3, #20]
 80126d0:	b123      	cbz	r3, 80126dc <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 80126d2:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126d4:	f384 8810 	msr	PRIMASK, r4
}
 80126d8:	2000      	movs	r0, #0
}
 80126da:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 80126dc:	2300      	movs	r3, #0
 80126de:	614b      	str	r3, [r1, #20]
 80126e0:	e7f8      	b.n	80126d4 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 80126e2:	2001      	movs	r0, #1
}
 80126e4:	4770      	bx	lr
 80126e6:	bf00      	nop
 80126e8:	20001e40 	.word	0x20001e40
 80126ec:	08013610 	.word	0x08013610

080126f0 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80126f0:	4b09      	ldr	r3, [pc, #36]	@ (8012718 <TimerInsertTimer+0x28>)
 80126f2:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80126f4:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 80126f6:	e001      	b.n	80126fc <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 80126f8:	461a      	mov	r2, r3
        next = next->Next;
 80126fa:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 80126fc:	6951      	ldr	r1, [r2, #20]
 80126fe:	b139      	cbz	r1, 8012710 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8012700:	6819      	ldr	r1, [r3, #0]
 8012702:	f8d0 c000 	ldr.w	ip, [r0]
 8012706:	458c      	cmp	ip, r1
 8012708:	d8f6      	bhi.n	80126f8 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 801270a:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 801270c:	6143      	str	r3, [r0, #20]
        return;
 801270e:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8012710:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8012712:	2300      	movs	r3, #0
 8012714:	6143      	str	r3, [r0, #20]
}
 8012716:	4770      	bx	lr
 8012718:	20001e40 	.word	0x20001e40

0801271c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801271c:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801271e:	4b05      	ldr	r3, [pc, #20]	@ (8012734 <TimerInsertNewHeadTimer+0x18>)
 8012720:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8012722:	b10b      	cbz	r3, 8012728 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8012724:	2200      	movs	r2, #0
 8012726:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8012728:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 801272a:	4b02      	ldr	r3, [pc, #8]	@ (8012734 <TimerInsertNewHeadTimer+0x18>)
 801272c:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801272e:	f7ff ff91 	bl	8012654 <TimerSetTimeout>
}
 8012732:	bd08      	pop	{r3, pc}
 8012734:	20001e40 	.word	0x20001e40

08012738 <UTIL_TIMER_Start>:
{
 8012738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801273a:	2800      	cmp	r0, #0
 801273c:	d036      	beq.n	80127ac <UTIL_TIMER_Start+0x74>
 801273e:	4604      	mov	r4, r0
 8012740:	f7ff ff7a 	bl	8012638 <TimerExists>
 8012744:	2800      	cmp	r0, #0
 8012746:	d134      	bne.n	80127b2 <UTIL_TIMER_Start+0x7a>
 8012748:	7a65      	ldrb	r5, [r4, #9]
 801274a:	2d00      	cmp	r5, #0
 801274c:	d133      	bne.n	80127b6 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801274e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012752:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8012754:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8012756:	4b19      	ldr	r3, [pc, #100]	@ (80127bc <UTIL_TIMER_Start+0x84>)
 8012758:	6a1b      	ldr	r3, [r3, #32]
 801275a:	4798      	blx	r3
    if( ticks < minValue )
 801275c:	4287      	cmp	r7, r0
 801275e:	d300      	bcc.n	8012762 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8012760:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8012762:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8012764:	2300      	movs	r3, #0
 8012766:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8012768:	2201      	movs	r2, #1
 801276a:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 801276c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 801276e:	4b14      	ldr	r3, [pc, #80]	@ (80127c0 <UTIL_TIMER_Start+0x88>)
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	b183      	cbz	r3, 8012796 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8012774:	4b11      	ldr	r3, [pc, #68]	@ (80127bc <UTIL_TIMER_Start+0x84>)
 8012776:	699b      	ldr	r3, [r3, #24]
 8012778:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 801277a:	6823      	ldr	r3, [r4, #0]
 801277c:	4418      	add	r0, r3
 801277e:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8012780:	4b0f      	ldr	r3, [pc, #60]	@ (80127c0 <UTIL_TIMER_Start+0x88>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	4298      	cmp	r0, r3
 8012788:	d20c      	bcs.n	80127a4 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 801278a:	4620      	mov	r0, r4
 801278c:	f7ff ffc6 	bl	801271c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012790:	f386 8810 	msr	PRIMASK, r6
}
 8012794:	e00b      	b.n	80127ae <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8012796:	4b09      	ldr	r3, [pc, #36]	@ (80127bc <UTIL_TIMER_Start+0x84>)
 8012798:	691b      	ldr	r3, [r3, #16]
 801279a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801279c:	4620      	mov	r0, r4
 801279e:	f7ff ffbd 	bl	801271c <TimerInsertNewHeadTimer>
 80127a2:	e7f5      	b.n	8012790 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 80127a4:	4620      	mov	r0, r4
 80127a6:	f7ff ffa3 	bl	80126f0 <TimerInsertTimer>
 80127aa:	e7f1      	b.n	8012790 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 80127ac:	2501      	movs	r5, #1
}
 80127ae:	4628      	mov	r0, r5
 80127b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 80127b2:	2501      	movs	r5, #1
 80127b4:	e7fb      	b.n	80127ae <UTIL_TIMER_Start+0x76>
 80127b6:	2501      	movs	r5, #1
 80127b8:	e7f9      	b.n	80127ae <UTIL_TIMER_Start+0x76>
 80127ba:	bf00      	nop
 80127bc:	08013610 	.word	0x08013610
 80127c0:	20001e40 	.word	0x20001e40

080127c4 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 80127c4:	b198      	cbz	r0, 80127ee <UTIL_TIMER_SetPeriod+0x2a>
{
 80127c6:	b510      	push	{r4, lr}
 80127c8:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80127ca:	4b0a      	ldr	r3, [pc, #40]	@ (80127f4 <UTIL_TIMER_SetPeriod+0x30>)
 80127cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127ce:	4608      	mov	r0, r1
 80127d0:	4798      	blx	r3
 80127d2:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80127d4:	4620      	mov	r0, r4
 80127d6:	f7ff ff2f 	bl	8012638 <TimerExists>
 80127da:	b908      	cbnz	r0, 80127e0 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80127dc:	2000      	movs	r0, #0
}
 80127de:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 80127e0:	4620      	mov	r0, r4
 80127e2:	f7ff ff4f 	bl	8012684 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80127e6:	4620      	mov	r0, r4
 80127e8:	f7ff ffa6 	bl	8012738 <UTIL_TIMER_Start>
 80127ec:	e7f7      	b.n	80127de <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 80127ee:	2001      	movs	r0, #1
}
 80127f0:	4770      	bx	lr
 80127f2:	bf00      	nop
 80127f4:	08013610 	.word	0x08013610

080127f8 <UTIL_TIMER_IRQ_Handler>:
{
 80127f8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127fa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80127fe:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8012800:	4c1e      	ldr	r4, [pc, #120]	@ (801287c <UTIL_TIMER_IRQ_Handler+0x84>)
 8012802:	6963      	ldr	r3, [r4, #20]
 8012804:	4798      	blx	r3
 8012806:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8012808:	6923      	ldr	r3, [r4, #16]
 801280a:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 801280c:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 801280e:	4b1c      	ldr	r3, [pc, #112]	@ (8012880 <UTIL_TIMER_IRQ_Handler+0x88>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	b923      	cbnz	r3, 801281e <UTIL_TIMER_IRQ_Handler+0x26>
 8012814:	e018      	b.n	8012848 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8012816:	2200      	movs	r2, #0
 8012818:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 801281a:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 801281c:	b1a3      	cbz	r3, 8012848 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 801281e:	681a      	ldr	r2, [r3, #0]
 8012820:	42a2      	cmp	r2, r4
 8012822:	d9f8      	bls.n	8012816 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8012824:	1a31      	subs	r1, r6, r0
 8012826:	440a      	add	r2, r1
 8012828:	601a      	str	r2, [r3, #0]
 801282a:	e7f6      	b.n	801281a <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 801282c:	4b14      	ldr	r3, [pc, #80]	@ (8012880 <UTIL_TIMER_IRQ_Handler+0x88>)
 801282e:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8012830:	6962      	ldr	r2, [r4, #20]
 8012832:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8012834:	2300      	movs	r3, #0
 8012836:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8012838:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 801283a:	68e3      	ldr	r3, [r4, #12]
 801283c:	6920      	ldr	r0, [r4, #16]
 801283e:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8012840:	8963      	ldrh	r3, [r4, #10]
 8012842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012846:	d012      	beq.n	801286e <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8012848:	4b0d      	ldr	r3, [pc, #52]	@ (8012880 <UTIL_TIMER_IRQ_Handler+0x88>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	b13b      	cbz	r3, 801285e <UTIL_TIMER_IRQ_Handler+0x66>
 801284e:	681c      	ldr	r4, [r3, #0]
 8012850:	2c00      	cmp	r4, #0
 8012852:	d0eb      	beq.n	801282c <UTIL_TIMER_IRQ_Handler+0x34>
 8012854:	4b09      	ldr	r3, [pc, #36]	@ (801287c <UTIL_TIMER_IRQ_Handler+0x84>)
 8012856:	699b      	ldr	r3, [r3, #24]
 8012858:	4798      	blx	r3
 801285a:	4284      	cmp	r4, r0
 801285c:	d3e6      	bcc.n	801282c <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801285e:	4b08      	ldr	r3, [pc, #32]	@ (8012880 <UTIL_TIMER_IRQ_Handler+0x88>)
 8012860:	6818      	ldr	r0, [r3, #0]
 8012862:	b108      	cbz	r0, 8012868 <UTIL_TIMER_IRQ_Handler+0x70>
 8012864:	7a03      	ldrb	r3, [r0, #8]
 8012866:	b133      	cbz	r3, 8012876 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012868:	f385 8810 	msr	PRIMASK, r5
}
 801286c:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 801286e:	4620      	mov	r0, r4
 8012870:	f7ff ff62 	bl	8012738 <UTIL_TIMER_Start>
 8012874:	e7e8      	b.n	8012848 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8012876:	f7ff feed 	bl	8012654 <TimerSetTimeout>
 801287a:	e7f5      	b.n	8012868 <UTIL_TIMER_IRQ_Handler+0x70>
 801287c:	08013610 	.word	0x08013610
 8012880:	20001e40 	.word	0x20001e40

08012884 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8012884:	4601      	mov	r1, r0
  int i = 0;
 8012886:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8012888:	e008      	b.n	801289c <ee_skip_atoi+0x18>
 801288a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801288e:	1c53      	adds	r3, r2, #1
 8012890:	600b      	str	r3, [r1, #0]
 8012892:	7813      	ldrb	r3, [r2, #0]
 8012894:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8012898:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 801289c:	680a      	ldr	r2, [r1, #0]
 801289e:	7813      	ldrb	r3, [r2, #0]
 80128a0:	3b30      	subs	r3, #48	@ 0x30
 80128a2:	b2db      	uxtb	r3, r3
 80128a4:	2b09      	cmp	r3, #9
 80128a6:	d9f0      	bls.n	801288a <ee_skip_atoi+0x6>
  return i;
}
 80128a8:	4770      	bx	lr
	...

080128ac <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80128ac:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 80128b0:	b093      	sub	sp, #76	@ 0x4c
 80128b2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80128b4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 80128b6:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80128ba:	d110      	bne.n	80128de <ee_number+0x32>
  char *dig = lower_digits;
 80128bc:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 80129b8 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80128c0:	1e9f      	subs	r7, r3, #2
 80128c2:	2f22      	cmp	r7, #34	@ 0x22
 80128c4:	d875      	bhi.n	80129b2 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 80128c6:	f016 0401 	ands.w	r4, r6, #1
 80128ca:	d00b      	beq.n	80128e4 <ee_number+0x38>
 80128cc:	f04f 0e30 	mov.w	lr, #48	@ 0x30
  sign = 0;
  if (type & SIGN)
 80128d0:	f016 0f02 	tst.w	r6, #2
 80128d4:	d00f      	beq.n	80128f6 <ee_number+0x4a>
  {
    if (num < 0)
 80128d6:	2a00      	cmp	r2, #0
 80128d8:	db07      	blt.n	80128ea <ee_number+0x3e>
  sign = 0;
 80128da:	2700      	movs	r7, #0
 80128dc:	e00c      	b.n	80128f8 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 80128de:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 80129bc <ee_number+0x110>
 80128e2:	e7ed      	b.n	80128c0 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80128e4:	f04f 0e20 	mov.w	lr, #32
 80128e8:	e7f2      	b.n	80128d0 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80128ea:	4252      	negs	r2, r2
      size--;
 80128ec:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80128ee:	3e01      	subs	r6, #1
 80128f0:	961a      	str	r6, [sp, #104]	@ 0x68
      sign = '-';
 80128f2:	272d      	movs	r7, #45	@ 0x2d
 80128f4:	e000      	b.n	80128f8 <ee_number+0x4c>
  sign = 0;
 80128f6:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 80128f8:	bb5a      	cbnz	r2, 8012952 <ee_number+0xa6>
    tmp[i++] = '0';
 80128fa:	2330      	movs	r3, #48	@ 0x30
 80128fc:	f88d 3004 	strb.w	r3, [sp, #4]
 8012900:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8012904:	45ac      	cmp	ip, r5
 8012906:	dd00      	ble.n	801290a <ee_number+0x5e>
 8012908:	4665      	mov	r5, ip
  size -= precision;
 801290a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801290c:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801290e:	b31c      	cbz	r4, 8012958 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8012910:	b11f      	cbz	r7, 801291a <ee_number+0x6e>
 8012912:	f800 7b01 	strb.w	r7, [r0], #1
 8012916:	3901      	subs	r1, #1
 8012918:	d007      	beq.n	801292a <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801291a:	2b00      	cmp	r3, #0
 801291c:	f103 33ff 	add.w	r3, r3, #4294967295
 8012920:	dd24      	ble.n	801296c <ee_number+0xc0>
 8012922:	f800 eb01 	strb.w	lr, [r0], #1
 8012926:	3901      	subs	r1, #1
 8012928:	d1f7      	bne.n	801291a <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 801292a:	b013      	add	sp, #76	@ 0x4c
 801292c:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8012930:	fbb2 f6f3 	udiv	r6, r2, r3
 8012934:	fb03 2216 	mls	r2, r3, r6, r2
 8012938:	f81a 8002 	ldrb.w	r8, [sl, r2]
 801293c:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 8012940:	446a      	add	r2, sp
 8012942:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8012946:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8012948:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 801294c:	2a00      	cmp	r2, #0
 801294e:	d1ef      	bne.n	8012930 <ee_number+0x84>
 8012950:	e7d8      	b.n	8012904 <ee_number+0x58>
  i = 0;
 8012952:	f04f 0c00 	mov.w	ip, #0
 8012956:	e7f9      	b.n	801294c <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8012958:	2b00      	cmp	r3, #0
 801295a:	f103 33ff 	add.w	r3, r3, #4294967295
 801295e:	ddd7      	ble.n	8012910 <ee_number+0x64>
 8012960:	2220      	movs	r2, #32
 8012962:	f800 2b01 	strb.w	r2, [r0], #1
 8012966:	3901      	subs	r1, #1
 8012968:	d1f6      	bne.n	8012958 <ee_number+0xac>
 801296a:	e7de      	b.n	801292a <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 801296c:	4565      	cmp	r5, ip
 801296e:	f105 35ff 	add.w	r5, r5, #4294967295
 8012972:	dd05      	ble.n	8012980 <ee_number+0xd4>
 8012974:	2230      	movs	r2, #48	@ 0x30
 8012976:	f800 2b01 	strb.w	r2, [r0], #1
 801297a:	3901      	subs	r1, #1
 801297c:	d1f6      	bne.n	801296c <ee_number+0xc0>
 801297e:	e7d4      	b.n	801292a <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8012980:	4662      	mov	r2, ip
 8012982:	2a00      	cmp	r2, #0
 8012984:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012988:	dd09      	ble.n	801299e <ee_number+0xf2>
 801298a:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 801298e:	446a      	add	r2, sp
 8012990:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8012994:	f800 2b01 	strb.w	r2, [r0], #1
 8012998:	3901      	subs	r1, #1
 801299a:	d1f1      	bne.n	8012980 <ee_number+0xd4>
 801299c:	e7c5      	b.n	801292a <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 801299e:	2b00      	cmp	r3, #0
 80129a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80129a4:	ddc1      	ble.n	801292a <ee_number+0x7e>
 80129a6:	2220      	movs	r2, #32
 80129a8:	f800 2b01 	strb.w	r2, [r0], #1
 80129ac:	3901      	subs	r1, #1
 80129ae:	d1f6      	bne.n	801299e <ee_number+0xf2>
 80129b0:	e7bb      	b.n	801292a <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 80129b2:	2000      	movs	r0, #0
 80129b4:	e7b9      	b.n	801292a <ee_number+0x7e>
 80129b6:	bf00      	nop
 80129b8:	0801358c 	.word	0x0801358c
 80129bc:	080135b4 	.word	0x080135b4

080129c0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80129c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80129c4:	b087      	sub	sp, #28
 80129c6:	9205      	str	r2, [sp, #20]
 80129c8:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80129ca:	1e0f      	subs	r7, r1, #0
 80129cc:	f340 80b8 	ble.w	8012b40 <tiny_vsnprintf_like+0x180>
 80129d0:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80129d2:	4604      	mov	r4, r0
 80129d4:	e004      	b.n	80129e0 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 80129d6:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80129da:	9b05      	ldr	r3, [sp, #20]
 80129dc:	3301      	adds	r3, #1
 80129de:	9305      	str	r3, [sp, #20]
 80129e0:	9905      	ldr	r1, [sp, #20]
 80129e2:	780a      	ldrb	r2, [r1, #0]
 80129e4:	b922      	cbnz	r2, 80129f0 <tiny_vsnprintf_like+0x30>
 80129e6:	1ba3      	subs	r3, r4, r6
 80129e8:	1e78      	subs	r0, r7, #1
 80129ea:	4283      	cmp	r3, r0
 80129ec:	f2c0 80a2 	blt.w	8012b34 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 80129f0:	1ba3      	subs	r3, r4, r6
 80129f2:	f107 38ff 	add.w	r8, r7, #4294967295
 80129f6:	4543      	cmp	r3, r8
 80129f8:	f280 809c 	bge.w	8012b34 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 80129fc:	2a25      	cmp	r2, #37	@ 0x25
 80129fe:	d1ea      	bne.n	80129d6 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8012a00:	1c4b      	adds	r3, r1, #1
 8012a02:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8012a04:	784b      	ldrb	r3, [r1, #1]
 8012a06:	2b30      	cmp	r3, #48	@ 0x30
 8012a08:	d020      	beq.n	8012a4c <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8012a0a:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8012a0e:	3b30      	subs	r3, #48	@ 0x30
 8012a10:	b2db      	uxtb	r3, r3
 8012a12:	2b09      	cmp	r3, #9
 8012a14:	d91d      	bls.n	8012a52 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8012a16:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8012a1a:	9b05      	ldr	r3, [sp, #20]
 8012a1c:	781a      	ldrb	r2, [r3, #0]
 8012a1e:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 8012a22:	2b20      	cmp	r3, #32
 8012a24:	d867      	bhi.n	8012af6 <tiny_vsnprintf_like+0x136>
 8012a26:	e8df f003 	tbb	[pc, r3]
 8012a2a:	664a      	.short	0x664a
 8012a2c:	66666666 	.word	0x66666666
 8012a30:	66666666 	.word	0x66666666
 8012a34:	66621e66 	.word	0x66621e66
 8012a38:	62666666 	.word	0x62666666
 8012a3c:	66666666 	.word	0x66666666
 8012a40:	66666666 	.word	0x66666666
 8012a44:	19662866 	.word	0x19662866
 8012a48:	6666      	.short	0x6666
 8012a4a:	7c          	.byte	0x7c
 8012a4b:	00          	.byte	0x00
      flags |= ZEROPAD;
 8012a4c:	f04f 0901 	mov.w	r9, #1
 8012a50:	e7dd      	b.n	8012a0e <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8012a52:	a805      	add	r0, sp, #20
 8012a54:	f7ff ff16 	bl	8012884 <ee_skip_atoi>
 8012a58:	4605      	mov	r5, r0
 8012a5a:	e7de      	b.n	8012a1a <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8012a5c:	230a      	movs	r3, #10
 8012a5e:	e031      	b.n	8012ac4 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8012a60:	2320      	movs	r3, #32
 8012a62:	f804 3b01 	strb.w	r3, [r4], #1
 8012a66:	3d01      	subs	r5, #1
 8012a68:	2d00      	cmp	r5, #0
 8012a6a:	dcf9      	bgt.n	8012a60 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8012a6c:	9b04      	ldr	r3, [sp, #16]
 8012a6e:	1d1a      	adds	r2, r3, #4
 8012a70:	9204      	str	r2, [sp, #16]
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8012a78:	e7af      	b.n	80129da <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8012a7a:	9b04      	ldr	r3, [sp, #16]
 8012a7c:	1d1a      	adds	r2, r3, #4
 8012a7e:	9204      	str	r2, [sp, #16]
 8012a80:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8012a84:	f1b8 0f00 	cmp.w	r8, #0
 8012a88:	d003      	beq.n	8012a92 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8012a8a:	4640      	mov	r0, r8
 8012a8c:	f7ed fb74 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8012a90:	e006      	b.n	8012aa0 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8012a92:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8012b44 <tiny_vsnprintf_like+0x184>
 8012a96:	e7f8      	b.n	8012a8a <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8012a98:	2220      	movs	r2, #32
 8012a9a:	f804 2b01 	strb.w	r2, [r4], #1
 8012a9e:	461d      	mov	r5, r3
 8012aa0:	1e6b      	subs	r3, r5, #1
 8012aa2:	4285      	cmp	r5, r0
 8012aa4:	dcf8      	bgt.n	8012a98 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	e006      	b.n	8012ab8 <tiny_vsnprintf_like+0xf8>
 8012aaa:	4643      	mov	r3, r8
 8012aac:	f813 1b01 	ldrb.w	r1, [r3], #1
 8012ab0:	f804 1b01 	strb.w	r1, [r4], #1
 8012ab4:	3201      	adds	r2, #1
 8012ab6:	4698      	mov	r8, r3
 8012ab8:	4282      	cmp	r2, r0
 8012aba:	dbf6      	blt.n	8012aaa <tiny_vsnprintf_like+0xea>
 8012abc:	e78d      	b.n	80129da <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8012abe:	f049 0940 	orr.w	r9, r9, #64	@ 0x40

      case 'x':
        base = 16;
 8012ac2:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8012ac4:	f019 0f02 	tst.w	r9, #2
 8012ac8:	d02f      	beq.n	8012b2a <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8012aca:	9a04      	ldr	r2, [sp, #16]
 8012acc:	1d11      	adds	r1, r2, #4
 8012ace:	9104      	str	r1, [sp, #16]
 8012ad0:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8012ad2:	1ba1      	subs	r1, r4, r6
 8012ad4:	f8cd 9008 	str.w	r9, [sp, #8]
 8012ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8012adc:	9001      	str	r0, [sp, #4]
 8012ade:	9500      	str	r5, [sp, #0]
 8012ae0:	eba8 0101 	sub.w	r1, r8, r1
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	f7ff fee1 	bl	80128ac <ee_number>
 8012aea:	4604      	mov	r4, r0
 8012aec:	e775      	b.n	80129da <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8012aee:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8012af2:	230a      	movs	r3, #10
 8012af4:	e7e6      	b.n	8012ac4 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8012af6:	2a25      	cmp	r2, #37	@ 0x25
 8012af8:	d002      	beq.n	8012b00 <tiny_vsnprintf_like+0x140>
 8012afa:	2325      	movs	r3, #37	@ 0x25
 8012afc:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8012b00:	1ba3      	subs	r3, r4, r6
 8012b02:	4598      	cmp	r8, r3
 8012b04:	dd0f      	ble.n	8012b26 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8012b06:	9b05      	ldr	r3, [sp, #20]
 8012b08:	781a      	ldrb	r2, [r3, #0]
 8012b0a:	b13a      	cbz	r2, 8012b1c <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8012b0c:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8012b10:	1ba3      	subs	r3, r4, r6
 8012b12:	4598      	cmp	r8, r3
 8012b14:	f73f af61 	bgt.w	80129da <tiny_vsnprintf_like+0x1a>
    base = 10;
 8012b18:	230a      	movs	r3, #10
 8012b1a:	e7d3      	b.n	8012ac4 <tiny_vsnprintf_like+0x104>
          --fmt;
 8012b1c:	3b01      	subs	r3, #1
 8012b1e:	9305      	str	r3, [sp, #20]
 8012b20:	e7f6      	b.n	8012b10 <tiny_vsnprintf_like+0x150>
        base = 16;
 8012b22:	2310      	movs	r3, #16
 8012b24:	e7ce      	b.n	8012ac4 <tiny_vsnprintf_like+0x104>
    base = 10;
 8012b26:	230a      	movs	r3, #10
 8012b28:	e7cc      	b.n	8012ac4 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8012b2a:	9a04      	ldr	r2, [sp, #16]
 8012b2c:	1d11      	adds	r1, r2, #4
 8012b2e:	9104      	str	r1, [sp, #16]
 8012b30:	6812      	ldr	r2, [r2, #0]
 8012b32:	e7ce      	b.n	8012ad2 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8012b34:	2300      	movs	r3, #0
 8012b36:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8012b38:	1ba0      	subs	r0, r4, r6
}
 8012b3a:	b007      	add	sp, #28
 8012b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8012b40:	2000      	movs	r0, #0
 8012b42:	e7fa      	b.n	8012b3a <tiny_vsnprintf_like+0x17a>
 8012b44:	080135dc 	.word	0x080135dc

08012b48 <memset>:
 8012b48:	4402      	add	r2, r0
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	4293      	cmp	r3, r2
 8012b4e:	d100      	bne.n	8012b52 <memset+0xa>
 8012b50:	4770      	bx	lr
 8012b52:	f803 1b01 	strb.w	r1, [r3], #1
 8012b56:	e7f9      	b.n	8012b4c <memset+0x4>

08012b58 <__libc_init_array>:
 8012b58:	b570      	push	{r4, r5, r6, lr}
 8012b5a:	4d0d      	ldr	r5, [pc, #52]	@ (8012b90 <__libc_init_array+0x38>)
 8012b5c:	4c0d      	ldr	r4, [pc, #52]	@ (8012b94 <__libc_init_array+0x3c>)
 8012b5e:	1b64      	subs	r4, r4, r5
 8012b60:	10a4      	asrs	r4, r4, #2
 8012b62:	2600      	movs	r6, #0
 8012b64:	42a6      	cmp	r6, r4
 8012b66:	d109      	bne.n	8012b7c <__libc_init_array+0x24>
 8012b68:	4d0b      	ldr	r5, [pc, #44]	@ (8012b98 <__libc_init_array+0x40>)
 8012b6a:	4c0c      	ldr	r4, [pc, #48]	@ (8012b9c <__libc_init_array+0x44>)
 8012b6c:	f000 f898 	bl	8012ca0 <_init>
 8012b70:	1b64      	subs	r4, r4, r5
 8012b72:	10a4      	asrs	r4, r4, #2
 8012b74:	2600      	movs	r6, #0
 8012b76:	42a6      	cmp	r6, r4
 8012b78:	d105      	bne.n	8012b86 <__libc_init_array+0x2e>
 8012b7a:	bd70      	pop	{r4, r5, r6, pc}
 8012b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b80:	4798      	blx	r3
 8012b82:	3601      	adds	r6, #1
 8012b84:	e7ee      	b.n	8012b64 <__libc_init_array+0xc>
 8012b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b8a:	4798      	blx	r3
 8012b8c:	3601      	adds	r6, #1
 8012b8e:	e7f2      	b.n	8012b76 <__libc_init_array+0x1e>
 8012b90:	08013cf0 	.word	0x08013cf0
 8012b94:	08013cf0 	.word	0x08013cf0
 8012b98:	08013cf0 	.word	0x08013cf0
 8012b9c:	08013cf4 	.word	0x08013cf4

08012ba0 <floor>:
 8012ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ba4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012ba8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8012bac:	2e13      	cmp	r6, #19
 8012bae:	4602      	mov	r2, r0
 8012bb0:	460b      	mov	r3, r1
 8012bb2:	460c      	mov	r4, r1
 8012bb4:	4605      	mov	r5, r0
 8012bb6:	4680      	mov	r8, r0
 8012bb8:	dc35      	bgt.n	8012c26 <floor+0x86>
 8012bba:	2e00      	cmp	r6, #0
 8012bbc:	da17      	bge.n	8012bee <floor+0x4e>
 8012bbe:	a334      	add	r3, pc, #208	@ (adr r3, 8012c90 <floor+0xf0>)
 8012bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc4:	f7ed fcc4 	bl	8000550 <__adddf3>
 8012bc8:	2200      	movs	r2, #0
 8012bca:	2300      	movs	r3, #0
 8012bcc:	f7ed fef4 	bl	80009b8 <__aeabi_dcmpgt>
 8012bd0:	b150      	cbz	r0, 8012be8 <floor+0x48>
 8012bd2:	2c00      	cmp	r4, #0
 8012bd4:	da57      	bge.n	8012c86 <floor+0xe6>
 8012bd6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8012bda:	432c      	orrs	r4, r5
 8012bdc:	2500      	movs	r5, #0
 8012bde:	42ac      	cmp	r4, r5
 8012be0:	4c2d      	ldr	r4, [pc, #180]	@ (8012c98 <floor+0xf8>)
 8012be2:	bf08      	it	eq
 8012be4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8012be8:	4623      	mov	r3, r4
 8012bea:	462a      	mov	r2, r5
 8012bec:	e024      	b.n	8012c38 <floor+0x98>
 8012bee:	4f2b      	ldr	r7, [pc, #172]	@ (8012c9c <floor+0xfc>)
 8012bf0:	4137      	asrs	r7, r6
 8012bf2:	ea01 0c07 	and.w	ip, r1, r7
 8012bf6:	ea5c 0c00 	orrs.w	ip, ip, r0
 8012bfa:	d01d      	beq.n	8012c38 <floor+0x98>
 8012bfc:	a324      	add	r3, pc, #144	@ (adr r3, 8012c90 <floor+0xf0>)
 8012bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c02:	f7ed fca5 	bl	8000550 <__adddf3>
 8012c06:	2200      	movs	r2, #0
 8012c08:	2300      	movs	r3, #0
 8012c0a:	f7ed fed5 	bl	80009b8 <__aeabi_dcmpgt>
 8012c0e:	2800      	cmp	r0, #0
 8012c10:	d0ea      	beq.n	8012be8 <floor+0x48>
 8012c12:	2c00      	cmp	r4, #0
 8012c14:	bfbe      	ittt	lt
 8012c16:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8012c1a:	4133      	asrlt	r3, r6
 8012c1c:	18e4      	addlt	r4, r4, r3
 8012c1e:	ea24 0407 	bic.w	r4, r4, r7
 8012c22:	2500      	movs	r5, #0
 8012c24:	e7e0      	b.n	8012be8 <floor+0x48>
 8012c26:	2e33      	cmp	r6, #51	@ 0x33
 8012c28:	dd0a      	ble.n	8012c40 <floor+0xa0>
 8012c2a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8012c2e:	d103      	bne.n	8012c38 <floor+0x98>
 8012c30:	f7ed fc8e 	bl	8000550 <__adddf3>
 8012c34:	4602      	mov	r2, r0
 8012c36:	460b      	mov	r3, r1
 8012c38:	4610      	mov	r0, r2
 8012c3a:	4619      	mov	r1, r3
 8012c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c40:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8012c44:	f04f 3cff 	mov.w	ip, #4294967295
 8012c48:	fa2c f707 	lsr.w	r7, ip, r7
 8012c4c:	4207      	tst	r7, r0
 8012c4e:	d0f3      	beq.n	8012c38 <floor+0x98>
 8012c50:	a30f      	add	r3, pc, #60	@ (adr r3, 8012c90 <floor+0xf0>)
 8012c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c56:	f7ed fc7b 	bl	8000550 <__adddf3>
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	f7ed feab 	bl	80009b8 <__aeabi_dcmpgt>
 8012c62:	2800      	cmp	r0, #0
 8012c64:	d0c0      	beq.n	8012be8 <floor+0x48>
 8012c66:	2c00      	cmp	r4, #0
 8012c68:	da0a      	bge.n	8012c80 <floor+0xe0>
 8012c6a:	2e14      	cmp	r6, #20
 8012c6c:	d101      	bne.n	8012c72 <floor+0xd2>
 8012c6e:	3401      	adds	r4, #1
 8012c70:	e006      	b.n	8012c80 <floor+0xe0>
 8012c72:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8012c76:	2301      	movs	r3, #1
 8012c78:	40b3      	lsls	r3, r6
 8012c7a:	441d      	add	r5, r3
 8012c7c:	4545      	cmp	r5, r8
 8012c7e:	d3f6      	bcc.n	8012c6e <floor+0xce>
 8012c80:	ea25 0507 	bic.w	r5, r5, r7
 8012c84:	e7b0      	b.n	8012be8 <floor+0x48>
 8012c86:	2500      	movs	r5, #0
 8012c88:	462c      	mov	r4, r5
 8012c8a:	e7ad      	b.n	8012be8 <floor+0x48>
 8012c8c:	f3af 8000 	nop.w
 8012c90:	8800759c 	.word	0x8800759c
 8012c94:	7e37e43c 	.word	0x7e37e43c
 8012c98:	bff00000 	.word	0xbff00000
 8012c9c:	000fffff 	.word	0x000fffff

08012ca0 <_init>:
 8012ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ca2:	bf00      	nop
 8012ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ca6:	bc08      	pop	{r3}
 8012ca8:	469e      	mov	lr, r3
 8012caa:	4770      	bx	lr

08012cac <_fini>:
 8012cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cae:	bf00      	nop
 8012cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cb2:	bc08      	pop	{r3}
 8012cb4:	469e      	mov	lr, r3
 8012cb6:	4770      	bx	lr
